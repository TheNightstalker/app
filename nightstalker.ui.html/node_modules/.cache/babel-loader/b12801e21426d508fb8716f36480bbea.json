{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, CodeType, objects, scout, texts } from '../index';\nimport $ from 'jquery';\n/**\n * This default language is used whenever a code registers its texts in scout.texts.\n */\n\nvar defaultLanguage = 'en';\nvar registry = {};\nexport function bootstrap(url) {\n  var promise = url ? $.ajaxJson(url) : $.resolvedPromise({});\n  return promise.then(_preInit.bind(this, url));\n}\nexport function _preInit(url, data) {\n  if (data && data.error) {\n    // The result may contain a json error (e.g. session timeout) -> abort processing\n    throw {\n      error: data.error,\n      url: url\n    };\n  }\n\n  init(data);\n}\nexport function init(data) {\n  data = data || {};\n  Object.keys(data).forEach(function (codeTypeId) {\n    add(data[codeTypeId]);\n  }, this);\n}\n/**\n * @param codes one or more codeTypes, maybe an object or an array\n */\n\nexport function add(codeTypes) {\n  codeTypes = arrays.ensure(codeTypes);\n  codeTypes.forEach(function (codeType) {\n    codeType = CodeType.ensure(codeType);\n    registry[codeType.id] = codeType;\n  }, this);\n}\n/**\n * @param codeTypes code types or code type ids to remove\n */\n\nexport function remove(codeTypes) {\n  codeTypes = arrays.ensure(codeTypes);\n  codeTypes.forEach(function (codeType) {\n    if (typeof codeType === 'string') {\n      codeType = registry[codeType];\n    }\n\n    if (!codeType) {\n      // Not in registry, ignore\n      return;\n    }\n\n    codeType.visit(function (code) {\n      unregisterTexts(code);\n    });\n    delete registry[codeType.id];\n  }, this);\n}\n/**\n * Returns a code for the given codeId. When you work with hard-coded codes\n * you should always use this function and not <code>optGet</code>.\n *\n * The codeId is a string in the following format:\n *\n * \"[CodeType.id] [Code.id]\"\n *\n * Examples:\n * \"71074 104860\"\n * \"MessageChannel Phone\"\n *\n * CodeType.id and Code.id are separated by a space.\n * The Code.id alone is not unique, that's why the CodeType.id must be always provided.\n *\n * You can also call this function with two arguments. In that case the first argument\n * is the codeTypeId and the second is the codeId.\n *\n * @param {string} vararg either only \"[CodeType.id]\" or \"[CodeType.id] [Code.id]\"\n * @param {string} [codeId]\n * @returns {Code} a code for the given codeId\n * @throw {Error} if code does not exist\n */\n\nexport function get(vararg, codeId) {\n  return _get('get', objects.argumentsToArray(arguments));\n}\n/**\n * Same as <code>get</code>, but does not throw an error if the code does not exist.\n * You should always use this function when you work with codes coming from a dynamic data source.\n *\n * @param vararg\n * @param codeId\n * @returns {Code} code for the given codeId or undefined if code does not exist\n */\n\nexport function optGet(vararg, codeId) {\n  return _get('optGet', objects.argumentsToArray(arguments));\n}\nexport function _get(funcName, funcArgs) {\n  var codeTypeId, codeId;\n\n  if (funcArgs.length === 2) {\n    codeTypeId = funcArgs[0];\n    codeId = funcArgs[1];\n  } else {\n    var tmp = funcArgs[0].split(' ');\n\n    if (tmp.length !== 2) {\n      throw new Error('Invalid string. Must have format \"[CodeType.id] [Code.id]\"');\n    }\n\n    codeTypeId = tmp[0];\n    codeId = tmp[1];\n  }\n\n  scout.assertParameter('codeTypeId', codeTypeId);\n  scout.assertParameter('codeId', codeId);\n  return codeType(codeTypeId)[funcName](codeId);\n}\nexport function codeType(codeTypeId, optional) {\n  var codeType = registry[codeTypeId];\n\n  if (!optional && !codeType) {\n    throw new Error('No CodeType found for id=' + codeTypeId);\n  }\n\n  return codeType;\n}\nexport function generateTextKey(code) {\n  // Use __ as prefix to reduce the possibility of overriding 'real' keys\n  return '__code.' + code.id;\n}\n/**\n * Registers texts for a code. It uses the method generateTextKey to generate the text key.\n * The texts for the default locale specified by defaultLanguage are used as default texts.\n *\n * @param code the code to register the text for\n * @param textsArg an object with the languageTag as key and the translated text as value\n * @return the generated text key\n */\n\nexport function registerTexts(code, textsArg) {\n  var key = generateTextKey(code); // In case of changed defaultLanguage clear the 'default' entry\n\n  texts.get('default').remove(key);\n\n  for (var languageTag in textsArg) {\n    // NOSONAR\n    var text = textsArg[languageTag]; // Use defaultLanguage as default, if specified (may be changed or set to null by the app).\n\n    if (languageTag && languageTag === defaultLanguage) {\n      languageTag = 'default';\n    }\n\n    texts.get(languageTag).add(key, text);\n  }\n\n  return key;\n}\nexport function unregisterTexts(code) {\n  objects.values(texts.textsByLocale).forEach(function (textMap) {\n    return textMap.remove(generateTextKey(code));\n  });\n}\nexport default {\n  add: add,\n  bootstrap: bootstrap,\n  codeType: codeType,\n  defaultLanguage: defaultLanguage,\n  generateTextKey: generateTextKey,\n  get: get,\n  init: init,\n  optGet: optGet,\n  registerTexts: registerTexts,\n  unregisterTexts: unregisterTexts,\n  registry: registry,\n  remove: remove\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/code/codes.js"],"names":["arrays","CodeType","objects","scout","texts","$","defaultLanguage","registry","bootstrap","url","promise","ajaxJson","resolvedPromise","then","_preInit","bind","data","error","init","Object","keys","forEach","codeTypeId","add","codeTypes","ensure","codeType","id","remove","visit","code","unregisterTexts","get","vararg","codeId","_get","argumentsToArray","arguments","optGet","funcName","funcArgs","length","tmp","split","Error","assertParameter","optional","generateTextKey","registerTexts","textsArg","key","languageTag","text","values","textsByLocale","textMap"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, CodeType, objects, scout, texts} from '../index';\nimport $ from 'jquery';\n\n/**\n * This default language is used whenever a code registers its texts in scout.texts.\n */\nlet defaultLanguage = 'en';\n\nlet registry = {};\n\nexport function bootstrap(url) {\n  var promise = url ? $.ajaxJson(url) : $.resolvedPromise({});\n  return promise.then(_preInit.bind(this, url));\n}\n\nexport function _preInit(url, data) {\n  if (data && data.error) {\n    // The result may contain a json error (e.g. session timeout) -> abort processing\n    throw {\n      error: data.error,\n      url: url\n    };\n  }\n  init(data);\n}\n\nexport function init(data) {\n  data = data || {};\n  Object.keys(data).forEach(function(codeTypeId) {\n    add(data[codeTypeId]);\n  }, this);\n}\n\n/**\n * @param codes one or more codeTypes, maybe an object or an array\n */\nexport function add(codeTypes) {\n  codeTypes = arrays.ensure(codeTypes);\n  codeTypes.forEach(function(codeType) {\n    codeType = CodeType.ensure(codeType);\n    registry[codeType.id] = codeType;\n  }, this);\n}\n\n/**\n * @param codeTypes code types or code type ids to remove\n */\nexport function remove(codeTypes) {\n  codeTypes = arrays.ensure(codeTypes);\n  codeTypes.forEach(function(codeType) {\n    if (typeof codeType === 'string') {\n      codeType = registry[codeType];\n    }\n    if (!codeType) {\n      // Not in registry, ignore\n      return;\n    }\n    codeType.visit(function(code) {\n      unregisterTexts(code);\n    });\n    delete registry[codeType.id];\n  }, this);\n}\n\n/**\n * Returns a code for the given codeId. When you work with hard-coded codes\n * you should always use this function and not <code>optGet</code>.\n *\n * The codeId is a string in the following format:\n *\n * \"[CodeType.id] [Code.id]\"\n *\n * Examples:\n * \"71074 104860\"\n * \"MessageChannel Phone\"\n *\n * CodeType.id and Code.id are separated by a space.\n * The Code.id alone is not unique, that's why the CodeType.id must be always provided.\n *\n * You can also call this function with two arguments. In that case the first argument\n * is the codeTypeId and the second is the codeId.\n *\n * @param {string} vararg either only \"[CodeType.id]\" or \"[CodeType.id] [Code.id]\"\n * @param {string} [codeId]\n * @returns {Code} a code for the given codeId\n * @throw {Error} if code does not exist\n */\nexport function get(vararg, codeId) {\n  return _get('get', objects.argumentsToArray(arguments));\n}\n\n/**\n * Same as <code>get</code>, but does not throw an error if the code does not exist.\n * You should always use this function when you work with codes coming from a dynamic data source.\n *\n * @param vararg\n * @param codeId\n * @returns {Code} code for the given codeId or undefined if code does not exist\n */\nexport function optGet(vararg, codeId) {\n  return _get('optGet', objects.argumentsToArray(arguments));\n}\n\nexport function _get(funcName, funcArgs) {\n  var codeTypeId, codeId;\n  if (funcArgs.length === 2) {\n    codeTypeId = funcArgs[0];\n    codeId = funcArgs[1];\n  } else {\n    var tmp = funcArgs[0].split(' ');\n    if (tmp.length !== 2) {\n      throw new Error('Invalid string. Must have format \"[CodeType.id] [Code.id]\"');\n    }\n    codeTypeId = tmp[0];\n    codeId = tmp[1];\n  }\n  scout.assertParameter('codeTypeId', codeTypeId);\n  scout.assertParameter('codeId', codeId);\n  return codeType(codeTypeId)[funcName](codeId);\n}\n\nexport function codeType(codeTypeId, optional) {\n  var codeType = registry[codeTypeId];\n  if (!optional && !codeType) {\n    throw new Error('No CodeType found for id=' + codeTypeId);\n  }\n  return codeType;\n}\n\nexport function generateTextKey(code) {\n  // Use __ as prefix to reduce the possibility of overriding 'real' keys\n  return '__code.' + code.id;\n}\n\n/**\n * Registers texts for a code. It uses the method generateTextKey to generate the text key.\n * The texts for the default locale specified by defaultLanguage are used as default texts.\n *\n * @param code the code to register the text for\n * @param textsArg an object with the languageTag as key and the translated text as value\n * @return the generated text key\n */\nexport function registerTexts(code, textsArg) {\n  var key = generateTextKey(code);\n\n  // In case of changed defaultLanguage clear the 'default' entry\n  texts.get('default').remove(key);\n\n  for (var languageTag in textsArg) { // NOSONAR\n    var text = textsArg[languageTag];\n    // Use defaultLanguage as default, if specified (may be changed or set to null by the app).\n    if (languageTag && languageTag === defaultLanguage) {\n      languageTag = 'default';\n    }\n    texts.get(languageTag).add(key, text);\n  }\n  return key;\n}\n\nexport function unregisterTexts(code) {\n  objects.values(texts.textsByLocale).forEach(textMap => textMap.remove(generateTextKey(code)));\n}\n\nexport default {\n  add,\n  bootstrap,\n  codeType,\n  defaultLanguage,\n  generateTextKey,\n  get,\n  init,\n  optGet,\n  registerTexts,\n  unregisterTexts,\n  registry,\n  remove\n};\n"]},"metadata":{},"sourceType":"module"}