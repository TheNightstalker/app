{"ast":null,"code":"import { AjaxCall, AjaxError, scout } from '../index';\nimport $ from 'jquery';\n/**\n * Utility to perform Ajax requests in an easy way.<br>\n * It basically uses the class {@link AjaxCall} and provides some common functions to call a REST backend.\n */\n\n/**\n * Performs a HTTP GET request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\n\nexport function get(url, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'GET'\n  }, options);\n  return call(opts);\n}\n/**\n * Performs a HTTP POST request.\n * @param data the data to be sent.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\n\nexport function post(url, data, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'POST',\n    data: data\n  }, options);\n  return call(opts);\n}\n/**\n * Performs a HTTP PUT request.\n * @param data the data to be sent.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\n\nexport function put(url, data, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'PUT',\n    data: data\n  }, options);\n  return call(opts);\n}\n/**\n * Performs a HTTP DELETE request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\n\nexport function remove(url, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'DELETE'\n  }, options);\n  return call(opts);\n}\n/**\n * Performs a HTTP GET request using JSON as format for the request and the response.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\n\nexport function getJson(url, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'GET'\n  }, options);\n  return callJson(opts);\n}\n/**\n * Performs a HTTP POST request using JSON as format for the request and the response.\n * @param data {(object|string)} the data to be sent. If the data is not a string it will be converted to a string using JSON.stringify().\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\n\nexport function postJson(url, data, options) {\n  if (data && typeof data !== 'string') {\n    data = JSON.stringify(data);\n  }\n\n  var opts = $.extend({}, {\n    url: url,\n    type: 'POST',\n    data: data\n  }, options);\n  return callJson(opts);\n}\n/**\n * Performs a HTTP PUT request using JSON as format for the request and the response.\n * @param data {(object|string)} the data to be sent. If the data is not a string it will be converted to a string using JSON.stringify().\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\n\nexport function putJson(url, data, options) {\n  if (data && typeof data !== 'string') {\n    data = JSON.stringify(data);\n  }\n\n  var opts = $.extend({}, {\n    url: url,\n    type: 'PUT',\n    data: data\n  }, options);\n  return callJson(opts);\n}\n/**\n * Performs a HTTP DELETE request using JSON as format for the request and the response.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\n\nexport function removeJson(url, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'DELETE'\n  }, options);\n  return callJson(opts);\n}\n/**\n * Performs an Ajax request using JSON as format for the request and the response.\n * The default HTTP method is POST.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\n\nexport function callJson(options) {\n  return createCallJson(options).call();\n}\n/**\n * Performs an Ajax request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\n\nexport function call(options) {\n  return createCall(options).call();\n}\n/**\n * Prepares an Ajax call with JSON as format for the request and the response,\n * but does not execute it yet. The default HTTP method is POST.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {AjaxCall} the prepared Ajax call object. Execute it with the call() function.\n */\n\nexport function createCallJson(options) {\n  var opts = $.extend({}, {\n    type: 'POST',\n    dataType: 'json',\n    contentType: 'application/json; charset=UTF-8'\n  }, options);\n  return createCall(opts);\n}\n/**\n * Prepares an Ajax call, but does not execute it yet.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {AjaxCall} the prepared Ajax call object. Execute it with the call() function.\n */\n\nexport function createCall(options) {\n  var opts = $.extend({}, {\n    cache: false\n  }, options);\n  return scout.create('AjaxCall', {\n    ajaxOptions: opts\n  }, {\n    ensureUniqueId: false\n  });\n}\nexport default {\n  createCall: createCall,\n  createCallJson: createCallJson,\n  call: call,\n  callJson: callJson,\n  get: get,\n  getJson: getJson,\n  post: post,\n  postJson: postJson,\n  put: put,\n  putJson: putJson,\n  remove: remove,\n  removeJson: removeJson\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/ajax/ajax.js"],"names":["AjaxCall","AjaxError","scout","$","get","url","options","opts","extend","type","call","post","data","put","remove","getJson","callJson","postJson","JSON","stringify","putJson","removeJson","createCallJson","createCall","dataType","contentType","cache","create","ajaxOptions","ensureUniqueId"],"mappings":"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","sourcesContent":["import {AjaxCall, AjaxError, scout} from '../index';\nimport $ from 'jquery';\n\n/**\n * Utility to perform Ajax requests in an easy way.<br>\n * It basically uses the class {@link AjaxCall} and provides some common functions to call a REST backend.\n */\n\n/**\n * Performs a HTTP GET request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function get(url, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'GET'\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP POST request.\n * @param data the data to be sent.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function post(url, data, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'POST',\n    data: data\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP PUT request.\n * @param data the data to be sent.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function put(url, data, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'PUT',\n    data: data\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP DELETE request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function remove(url, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'DELETE'\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP GET request using JSON as format for the request and the response.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function getJson(url, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'GET'\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs a HTTP POST request using JSON as format for the request and the response.\n * @param data {(object|string)} the data to be sent. If the data is not a string it will be converted to a string using JSON.stringify().\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function postJson(url, data, options) {\n  if (data && typeof data !== 'string') {\n    data = JSON.stringify(data);\n  }\n  var opts = $.extend({}, {\n    url: url,\n    type: 'POST',\n    data: data\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs a HTTP PUT request using JSON as format for the request and the response.\n * @param data {(object|string)} the data to be sent. If the data is not a string it will be converted to a string using JSON.stringify().\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function putJson(url, data, options) {\n  if (data && typeof data !== 'string') {\n    data = JSON.stringify(data);\n  }\n  var opts = $.extend({}, {\n    url: url,\n    type: 'PUT',\n    data: data\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs a HTTP DELETE request using JSON as format for the request and the response.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function removeJson(url, options) {\n  var opts = $.extend({}, {\n    url: url,\n    type: 'DELETE'\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs an Ajax request using JSON as format for the request and the response.\n * The default HTTP method is POST.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function callJson(options) {\n  return createCallJson(options).call();\n}\n\n/**\n * Performs an Ajax request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function call(options) {\n  return createCall(options).call();\n}\n\n/**\n * Prepares an Ajax call with JSON as format for the request and the response,\n * but does not execute it yet. The default HTTP method is POST.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {AjaxCall} the prepared Ajax call object. Execute it with the call() function.\n */\nexport function createCallJson(options) {\n  var opts = $.extend({}, {\n    type: 'POST',\n    dataType: 'json',\n    contentType: 'application/json; charset=UTF-8'\n  }, options);\n  return createCall(opts);\n}\n\n/**\n * Prepares an Ajax call, but does not execute it yet.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {AjaxCall} the prepared Ajax call object. Execute it with the call() function.\n */\nexport function createCall(options) {\n  var opts = $.extend({}, {\n    cache: false\n  }, options);\n\n  return scout.create('AjaxCall', {\n    ajaxOptions: opts\n  }, {\n    ensureUniqueId: false\n  });\n}\n\nexport default {\n  createCall,\n  createCallJson,\n  call,\n  callJson,\n  get,\n  getJson,\n  post,\n  postJson,\n  put,\n  putJson,\n  remove,\n  removeJson\n};\n"]},"metadata":{},"sourceType":"module"}