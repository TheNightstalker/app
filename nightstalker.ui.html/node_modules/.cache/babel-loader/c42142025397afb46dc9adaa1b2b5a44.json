{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Column, strings } from '../../index';\nimport $ from 'jquery';\n\nvar BeanColumn = /*#__PURE__*/function (_Column) {\n  _inherits(BeanColumn, _Column);\n\n  var _super = _createSuper(BeanColumn);\n\n  function BeanColumn() {\n    _classCallCheck(this, BeanColumn);\n\n    return _super.call(this);\n  }\n\n  _createClass(BeanColumn, [{\n    key: \"buildCellForRow\",\n    value: function buildCellForRow(row) {\n      var cell = this.cell(row);\n\n      var cssClass = this._cellCssClass(cell);\n\n      var style = this._cellStyle(cell);\n\n      var $cell = $(_get(_getPrototypeOf(BeanColumn.prototype), \"_buildCell\", this).call(this, '', style, cssClass));\n      var value = this.table.cellValue(this, row);\n\n      if (cell.errorStatus) {\n        row.hasError = true;\n      }\n\n      this._renderValue($cell, value);\n\n      return $cell[0].outerHTML;\n    }\n    /**\n     * Override to render the value.<p>\n     * If you have a large table you should consider overriding buildCellForRow instead and create the html as string instead of using jquery.\n     */\n\n  }, {\n    key: \"_renderValue\",\n    value: function _renderValue($cell, value) {// to be implemented by the subclass\n    }\n  }, {\n    key: \"_plainTextForRow\",\n    value: function _plainTextForRow(row) {\n      var cell = this.table.cell(this, row);\n\n      if (!cell.plainText) {\n        // Convert to plain text and cache it because rendering is expensive\n        var html = this.buildCellForRow(row);\n        cell.plainText = strings.plainText(html);\n      }\n\n      return cell.plainText;\n    }\n    /**\n     * Default approach reads the html using buildCellForRow and uses _preprocessTextForGrouping to generate the value. Just using text() does not work because new lines get omitted.\n     * If this approach does not work for a specific bean column, just override this method.\n     */\n\n  }, {\n    key: \"cellValueOrTextForCalculation\",\n    value: function cellValueOrTextForCalculation(row) {\n      var plainText = this._plainTextForRow(row);\n\n      return this._preprocessTextForCalculation(plainText);\n    }\n  }, {\n    key: \"cellTextForGrouping\",\n    value: function cellTextForGrouping(row) {\n      var plainText = this._plainTextForRow(row);\n\n      return this._preprocessTextForGrouping(plainText);\n    }\n  }, {\n    key: \"cellTextForTextFilter\",\n    value: function cellTextForTextFilter(row) {\n      var plainText = this._plainTextForRow(row);\n\n      return this._preprocessTextForTextFilter(plainText);\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(row1, row2) {\n      var plainText1 = this._plainTextForRow(row1);\n\n      var plainText2 = this._plainTextForRow(row2);\n\n      return this.comparator.compareIgnoreCase(plainText1, plainText2);\n    }\n  }]);\n\n  return BeanColumn;\n}(Column);\n\nexport { BeanColumn as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/table/columns/BeanColumn.js"],"names":["Column","strings","$","BeanColumn","row","cell","cssClass","_cellCssClass","style","_cellStyle","$cell","value","table","cellValue","errorStatus","hasError","_renderValue","outerHTML","plainText","html","buildCellForRow","_plainTextForRow","_preprocessTextForCalculation","_preprocessTextForGrouping","_preprocessTextForTextFilter","row1","row2","plainText1","plainText2","comparator","compareIgnoreCase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAR,EAAgBC,OAAhB,QAA8B,aAA9B;AACA,OAAOC,CAAP,MAAc,QAAd;;IAEqBC,U;;;;;AAEnB,wBAAc;AAAA;;AAAA;AAEb;;;;oCAEeC,G,EAAK;AACnB,UAAIC,IAAI,GAAG,KAAKA,IAAL,CAAUD,GAAV,CAAX;;AACA,UAAIE,QAAQ,GAAG,KAAKC,aAAL,CAAmBF,IAAnB,CAAf;;AACA,UAAIG,KAAK,GAAG,KAAKC,UAAL,CAAgBJ,IAAhB,CAAZ;;AACA,UAAIK,KAAK,GAAGR,CAAC,4EAAkB,EAAlB,EAAsBM,KAAtB,EAA6BF,QAA7B,EAAb;AACA,UAAIK,KAAK,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqB,IAArB,EAA2BT,GAA3B,CAAZ;;AAEA,UAAIC,IAAI,CAACS,WAAT,EAAsB;AACpBV,QAAAA,GAAG,CAACW,QAAJ,GAAe,IAAf;AACD;;AAED,WAAKC,YAAL,CAAkBN,KAAlB,EAAyBC,KAAzB;;AACA,aAAOD,KAAK,CAAC,CAAD,CAAL,CAASO,SAAhB;AACD;AAED;AACF;AACA;AACA;;;;iCACeP,K,EAAOC,K,EAAO,CACzB;AACD;;;qCAEgBP,G,EAAK;AACpB,UAAIC,IAAI,GAAG,KAAKO,KAAL,CAAWP,IAAX,CAAgB,IAAhB,EAAsBD,GAAtB,CAAX;;AACA,UAAI,CAACC,IAAI,CAACa,SAAV,EAAqB;AACnB;AACA,YAAIC,IAAI,GAAG,KAAKC,eAAL,CAAqBhB,GAArB,CAAX;AACAC,QAAAA,IAAI,CAACa,SAAL,GAAiBjB,OAAO,CAACiB,SAAR,CAAkBC,IAAlB,CAAjB;AACD;;AACD,aAAOd,IAAI,CAACa,SAAZ;AACD;AAED;AACF;AACA;AACA;;;;kDACgCd,G,EAAK;AACjC,UAAIc,SAAS,GAAG,KAAKG,gBAAL,CAAsBjB,GAAtB,CAAhB;;AACA,aAAO,KAAKkB,6BAAL,CAAmCJ,SAAnC,CAAP;AACD;;;wCAEmBd,G,EAAK;AACvB,UAAIc,SAAS,GAAG,KAAKG,gBAAL,CAAsBjB,GAAtB,CAAhB;;AACA,aAAO,KAAKmB,0BAAL,CAAgCL,SAAhC,CAAP;AACD;;;0CAEqBd,G,EAAK;AACzB,UAAIc,SAAS,GAAG,KAAKG,gBAAL,CAAsBjB,GAAtB,CAAhB;;AACA,aAAO,KAAKoB,4BAAL,CAAkCN,SAAlC,CAAP;AACD;;;4BAEOO,I,EAAMC,I,EAAM;AAClB,UAAIC,UAAU,GAAG,KAAKN,gBAAL,CAAsBI,IAAtB,CAAjB;;AACA,UAAIG,UAAU,GAAG,KAAKP,gBAAL,CAAsBK,IAAtB,CAAjB;;AACA,aAAO,KAAKG,UAAL,CAAgBC,iBAAhB,CAAkCH,UAAlC,EAA8CC,UAA9C,CAAP;AACD;;;;EA9DqC5B,M;;SAAnBG,U","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Column, strings} from '../../index';\nimport $ from 'jquery';\n\nexport default class BeanColumn extends Column {\n\n  constructor() {\n    super();\n  }\n\n  buildCellForRow(row) {\n    var cell = this.cell(row);\n    var cssClass = this._cellCssClass(cell);\n    var style = this._cellStyle(cell);\n    var $cell = $(super._buildCell('', style, cssClass));\n    var value = this.table.cellValue(this, row);\n\n    if (cell.errorStatus) {\n      row.hasError = true;\n    }\n\n    this._renderValue($cell, value);\n    return $cell[0].outerHTML;\n  }\n\n  /**\n   * Override to render the value.<p>\n   * If you have a large table you should consider overriding buildCellForRow instead and create the html as string instead of using jquery.\n   */\n  _renderValue($cell, value) {\n    // to be implemented by the subclass\n  }\n\n  _plainTextForRow(row) {\n    var cell = this.table.cell(this, row);\n    if (!cell.plainText) {\n      // Convert to plain text and cache it because rendering is expensive\n      var html = this.buildCellForRow(row);\n      cell.plainText = strings.plainText(html);\n    }\n    return cell.plainText;\n  }\n\n  /**\n   * Default approach reads the html using buildCellForRow and uses _preprocessTextForGrouping to generate the value. Just using text() does not work because new lines get omitted.\n   * If this approach does not work for a specific bean column, just override this method.\n   */\n  cellValueOrTextForCalculation(row) {\n    var plainText = this._plainTextForRow(row);\n    return this._preprocessTextForCalculation(plainText);\n  }\n\n  cellTextForGrouping(row) {\n    var plainText = this._plainTextForRow(row);\n    return this._preprocessTextForGrouping(plainText);\n  }\n\n  cellTextForTextFilter(row) {\n    var plainText = this._plainTextForRow(row);\n    return this._preprocessTextForTextFilter(plainText);\n  }\n\n  compare(row1, row2) {\n    var plainText1 = this._plainTextForRow(row1);\n    var plainText2 = this._plainTextForRow(row2);\n    return this.comparator.compareIgnoreCase(plainText1, plainText2);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}