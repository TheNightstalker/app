{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects, QueryBy, strings, ValueFieldAdapter } from '../../../index';\n/**\n * Use this base class for field-adapters that work with lookup-calls like SmartField and TagField.\n */\n\nvar LookupFieldAdapter = /*#__PURE__*/function (_ValueFieldAdapter) {\n  _inherits(LookupFieldAdapter, _ValueFieldAdapter);\n\n  var _super = _createSuper(LookupFieldAdapter);\n\n  function LookupFieldAdapter() {\n    _classCallCheck(this, LookupFieldAdapter);\n\n    return _super.call(this);\n  }\n  /**\n   * @param {QueryBy} queryBy\n   * @param {object} [queryData] optional data (text, key, rec)\n   */\n\n\n  _createClass(LookupFieldAdapter, [{\n    key: \"sendLookup\",\n    value: function sendLookup(queryBy, queryData) {\n      var propertyName = queryBy.toLowerCase(),\n          requestType = 'lookupBy' + strings.toUpperCaseFirstLetter(propertyName),\n          requestData = {\n        showBusyIndicator: false\n      };\n\n      if (!objects.isNullOrUndefined(queryData)) {\n        requestData[propertyName] = queryData;\n      }\n\n      this._send(requestType, requestData);\n    }\n  }]);\n\n  return LookupFieldAdapter;\n}(ValueFieldAdapter);\n\nexport { LookupFieldAdapter as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/lookupfield/LookupFieldAdapter.js"],"names":["objects","QueryBy","strings","ValueFieldAdapter","LookupFieldAdapter","queryBy","queryData","propertyName","toLowerCase","requestType","toUpperCaseFirstLetter","requestData","showBusyIndicator","isNullOrUndefined","_send"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,OAAR,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAmCC,iBAAnC,QAA2D,gBAA3D;AAEA;AACA;AACA;;IACqBC,kB;;;;;AAEnB,gCAAc;AAAA;;AAAA;AAEb;AAED;AACF;AACA;AACA;;;;;+BACaC,O,EAASC,S,EAAW;AAC7B,UAAIC,YAAY,GAAGF,OAAO,CAACG,WAAR,EAAnB;AAAA,UACEC,WAAW,GAAG,aAAaP,OAAO,CAACQ,sBAAR,CAA+BH,YAA/B,CAD7B;AAAA,UAEEI,WAAW,GAAG;AACZC,QAAAA,iBAAiB,EAAE;AADP,OAFhB;;AAKA,UAAI,CAACZ,OAAO,CAACa,iBAAR,CAA0BP,SAA1B,CAAL,EAA2C;AACzCK,QAAAA,WAAW,CAACJ,YAAD,CAAX,GAA4BD,SAA5B;AACD;;AACD,WAAKQ,KAAL,CAAWL,WAAX,EAAwBE,WAAxB;AACD;;;;EApB6CR,iB;;SAA3BC,kB","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects, QueryBy, strings, ValueFieldAdapter} from '../../../index';\n\n/**\n * Use this base class for field-adapters that work with lookup-calls like SmartField and TagField.\n */\nexport default class LookupFieldAdapter extends ValueFieldAdapter {\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * @param {QueryBy} queryBy\n   * @param {object} [queryData] optional data (text, key, rec)\n   */\n  sendLookup(queryBy, queryData) {\n    var propertyName = queryBy.toLowerCase(),\n      requestType = 'lookupBy' + strings.toUpperCaseFirstLetter(propertyName),\n      requestData = {\n        showBusyIndicator: false\n      };\n    if (!objects.isNullOrUndefined(queryData)) {\n      requestData[propertyName] = queryData;\n    }\n    this._send(requestType, requestData);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}