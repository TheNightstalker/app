{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { aggregation, Column, comparators, DecimalFormat, numbers, objects, scout, strings, styles } from '../../index';\nimport $ from 'jquery';\n\nvar NumberColumn = /*#__PURE__*/function (_Column) {\n  _inherits(NumberColumn, _Column);\n\n  var _super = _createSuper(NumberColumn);\n\n  function NumberColumn() {\n    var _this;\n\n    _classCallCheck(this, NumberColumn);\n\n    _this = _super.call(this);\n    _this.aggregationFunction = 'sum';\n    _this.backgroundEffect = null;\n    _this.decimalFormat = null;\n    _this.minValue = null;\n    _this.maxValue = null;\n    _this.calcMinValue = null; // the calculated min value of all rows\n\n    _this.calcMaxValue = null; // the calculated max value of all rows\n\n    _this.horizontalAlignment = 1;\n    _this.filterType = 'NumberColumnUserFilter';\n    _this.comparator = comparators.NUMERIC;\n    _this.textBased = false;\n    _this.allowedAggregationFunctions = ['sum', 'avg', 'min', 'max', 'none'];\n    return _this;\n  }\n  /**\n   * @override Column.js\n   */\n\n\n  _createClass(NumberColumn, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(NumberColumn.prototype), \"_init\", this).call(this, model);\n\n      this._setDecimalFormat(this.decimalFormat);\n\n      this.setAggregationFunction(this.aggregationFunction);\n    }\n  }, {\n    key: \"setDecimalFormat\",\n    value: function setDecimalFormat(decimalFormat) {\n      if (this.decimalFormat === decimalFormat) {\n        return;\n      }\n\n      this._setDecimalFormat(decimalFormat);\n\n      if (this.initialized) {\n        // if format changes on the fly, just update the cell text\n        this.table.rows.forEach(function (row) {\n          this._updateCellText(row, this.cell(row));\n        }.bind(this));\n      }\n    }\n  }, {\n    key: \"_setDecimalFormat\",\n    value: function _setDecimalFormat(format) {\n      if (!format) {\n        format = this._getDefaultFormat(this.session.locale);\n      }\n\n      this.decimalFormat = DecimalFormat.ensure(this.session.locale, format);\n    }\n  }, {\n    key: \"_getDefaultFormat\",\n    value: function _getDefaultFormat(locale) {\n      return locale.decimalFormatPatternDefault;\n    }\n    /**\n     * @override Columns.js\n     */\n\n  }, {\n    key: \"_formatValue\",\n    value: function _formatValue(value) {\n      return this.decimalFormat.format(value);\n    }\n    /**\n     * @override Column.js\n     */\n\n  }, {\n    key: \"_parseValue\",\n    value: function _parseValue(value) {\n      // server sends cell.value only if it differs from text -> make sure cell.value is set and has the right type\n      return numbers.ensure(value);\n    }\n  }, {\n    key: \"setAggregationFunction\",\n    value: function setAggregationFunction(func) {\n      this.aggregationFunction = func;\n\n      if (func === 'sum') {\n        this.aggrStart = aggregation.sumStart;\n        this.aggrStep = aggregation.sumStep;\n        this.aggrFinish = aggregation.sumFinish;\n        this.aggrSymbol = aggregation.sumSymbol;\n      } else if (func === 'avg') {\n        this.aggrStart = aggregation.avgStart;\n        this.aggrStep = aggregation.avgStep;\n        this.aggrFinish = aggregation.avgFinish;\n        this.aggrSymbol = aggregation.avgSymbol;\n      } else if (func === 'min') {\n        this.aggrStart = aggregation.minStart;\n        this.aggrStep = aggregation.minStep;\n        this.aggrFinish = aggregation.minFinish;\n        this.aggrSymbol = aggregation.minSymbol;\n      } else if (func === 'max') {\n        this.aggrStart = aggregation.maxStart;\n        this.aggrStep = aggregation.maxStep;\n        this.aggrFinish = aggregation.maxFinish;\n        this.aggrSymbol = aggregation.maxSymbol;\n      } else if (func === 'none') {\n        var undefinedFunc = function undefinedFunc() {\n          return undefined;\n        };\n\n        this.aggrStart = undefinedFunc;\n        this.aggrStep = undefinedFunc;\n        this.aggrFinish = undefinedFunc;\n        this.aggrSymbol = undefined;\n      }\n    }\n  }, {\n    key: \"createAggrValueCell\",\n    value: function createAggrValueCell(value) {\n      var formattedValue = this._formatValue(value);\n\n      return scout.create('Cell', {\n        text: formattedValue,\n        iconId: formattedValue ? this.aggrSymbol : null,\n        horizontalAlignment: this.horizontalAlignment,\n        cssClass: 'table-aggregate-cell'\n      });\n    }\n  }, {\n    key: \"_cellStyle\",\n    value: function _cellStyle(cell, tableNodeColumn, rowPadding) {\n      var style = _get(_getPrototypeOf(NumberColumn.prototype), \"_cellStyle\", this).call(this, cell, tableNodeColumn, rowPadding);\n\n      if (!this.backgroundEffect || cell.value === undefined || strings.contains(cell.cssClass, 'table-aggregate-cell')) {\n        return style;\n      }\n\n      if (!this.backgroundEffectFunc) {\n        this.backgroundEffectFunc = this._resolveBackgroundEffectFunc();\n      }\n\n      var backgroundStyle = this.backgroundEffectFunc(this._preprocessValueOrTextForCalculation(cell.value));\n\n      if (backgroundStyle.backgroundColor) {\n        style += 'background-color: ' + backgroundStyle.backgroundColor + ';';\n      }\n\n      if (backgroundStyle.backgroundImage) {\n        style += 'background-image: ' + backgroundStyle.backgroundImage + ';';\n      }\n\n      return style;\n    }\n    /**\n     * @override Column.js\n     */\n\n  }, {\n    key: \"_preprocessValueOrTextForCalculation\",\n    value: function _preprocessValueOrTextForCalculation(value) {\n      return this.decimalFormat.round(value);\n    }\n  }, {\n    key: \"setBackgroundEffect\",\n    value: function setBackgroundEffect(effect) {\n      if (this.backgroundEffect === effect) {\n        return;\n      }\n\n      this.backgroundEffect = effect;\n      this.backgroundEffectFunc = this._resolveBackgroundEffectFunc();\n      this.table.trigger('columnBackgroundEffectChanged', {\n        column: this\n      });\n\n      if (this.backgroundEffect && (this.calcMinValue === null || this.calcMaxValue === null)) {\n        // No need to calculate the values again when switching background effects\n        // If background effect is turned off and on again values will be recalculated\n        // This is necessary because in the meantime rows may got updated, deleted etc.\n        this.calculateMinMaxValues();\n      }\n\n      if (!this.backgroundEffect) {\n        // Clear to make sure values are calculated anew the next time a background effect gets set\n        this.calcMinValue = null;\n        this.calcMaxValue = null;\n      }\n\n      if (this.table.rendered) {\n        this._renderBackgroundEffect();\n      }\n    }\n    /**\n     * Recalculates the min / max values and renders the background effect again.\n     */\n\n  }, {\n    key: \"updateBackgroundEffect\",\n    value: function updateBackgroundEffect() {\n      this.calculateMinMaxValues();\n\n      if (this.table.rendered) {\n        this._renderBackgroundEffect();\n      }\n    }\n  }, {\n    key: \"_resolveBackgroundEffectFunc\",\n    value: function _resolveBackgroundEffectFunc() {\n      var effect = this.backgroundEffect;\n\n      if (effect === 'colorGradient1') {\n        return this._colorGradient1.bind(this);\n      }\n\n      if (effect === 'colorGradient2') {\n        return this._colorGradient2.bind(this);\n      }\n\n      if (effect === 'barChart') {\n        return this._barChart.bind(this);\n      }\n\n      if (effect !== null) {\n        $.log.warn('Unsupported backgroundEffect: ' + effect);\n        return function () {\n          return {};\n        };\n      }\n    }\n  }, {\n    key: \"_renderBackgroundEffect\",\n    value: function _renderBackgroundEffect() {\n      this.table.visibleRows.forEach(function (row) {\n        if (!row.$row) {\n          return;\n        }\n\n        var cell = this.cell(row),\n            $cell = this.table.$cell(this, row.$row);\n\n        if (cell.value !== undefined) {\n          $cell[0].style.cssText = this._cellStyle(cell);\n        }\n      }, this);\n    }\n  }, {\n    key: \"calculateMinMaxValues\",\n    value: function calculateMinMaxValues() {\n      var row,\n          calcMinValue,\n          calcMaxValue,\n          value,\n          rows = this.table.rows;\n\n      for (var i = 0; i < rows.length; i++) {\n        row = rows[i];\n        value = this.cellValueOrTextForCalculation(row);\n\n        if (value < calcMinValue || calcMinValue === undefined) {\n          calcMinValue = value;\n        }\n\n        if (value > calcMaxValue || calcMaxValue === undefined) {\n          calcMaxValue = value;\n        }\n      }\n\n      this.calcMinValue = scout.nvl(calcMinValue, null);\n      this.calcMaxValue = scout.nvl(calcMaxValue, null);\n    }\n  }, {\n    key: \"_colorGradient1\",\n    value: function _colorGradient1(value) {\n      var startStyle = styles.get('column-background-effect-gradient1-start', 'backgroundColor'),\n          endStyle = styles.get('column-background-effect-gradient1-end', 'backgroundColor'),\n          startColor = styles.rgb(startStyle.backgroundColor),\n          endColor = styles.rgb(endStyle.backgroundColor);\n      return this._colorGradient(value, startColor, endColor);\n    }\n  }, {\n    key: \"_colorGradient2\",\n    value: function _colorGradient2(value) {\n      var startStyle = styles.get('column-background-effect-gradient2-start', 'backgroundColor'),\n          endStyle = styles.get('column-background-effect-gradient2-end', 'backgroundColor'),\n          startColor = styles.rgb(startStyle.backgroundColor),\n          endColor = styles.rgb(endStyle.backgroundColor);\n      return this._colorGradient(value, startColor, endColor);\n    }\n  }, {\n    key: \"_colorGradient\",\n    value: function _colorGradient(value, startColor, endColor) {\n      var level = (value - this.calcMinValue) / (this.calcMaxValue - this.calcMinValue);\n      var r = Math.ceil(startColor.red - level * (startColor.red - endColor.red)),\n          g = Math.ceil(startColor.green - level * (startColor.green - endColor.green)),\n          b = Math.ceil(startColor.blue - level * (startColor.blue - endColor.blue));\n      return {\n        backgroundColor: 'rgb(' + r + ',' + g + ', ' + b + ')'\n      };\n    }\n  }, {\n    key: \"_barChart\",\n    value: function _barChart(value) {\n      var level = Math.ceil((value - this.calcMinValue) / (this.calcMaxValue - this.calcMinValue) * 100) + '';\n      var color = styles.get('column-background-effect-bar-chart', 'backgroundColor').backgroundColor;\n      return {\n        backgroundImage: 'linear-gradient(to left, ' + color + ' 0%, ' + color + ' ' + level + '%, transparent ' + level + '%, transparent 100% )'\n      };\n    }\n    /**\n     * @override Column.js\n     */\n\n  }, {\n    key: \"_createEditor\",\n    value: function _createEditor() {\n      return scout.create('NumberField', {\n        parent: this.table,\n        maxValue: this.maxValue,\n        minValue: this.minValue,\n        decimalFormat: this.decimalFormat\n      });\n    }\n  }, {\n    key: \"_hasCellValue\",\n    value: function _hasCellValue(cell) {\n      return !objects.isNullOrUndefined(cell.value); // Zero (0) is valid too\n    }\n  }]);\n\n  return NumberColumn;\n}(Column);\n\nexport { NumberColumn as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/table/columns/NumberColumn.js"],"names":["aggregation","Column","comparators","DecimalFormat","numbers","objects","scout","strings","styles","$","NumberColumn","aggregationFunction","backgroundEffect","decimalFormat","minValue","maxValue","calcMinValue","calcMaxValue","horizontalAlignment","filterType","comparator","NUMERIC","textBased","allowedAggregationFunctions","model","_setDecimalFormat","setAggregationFunction","initialized","table","rows","forEach","row","_updateCellText","cell","bind","format","_getDefaultFormat","session","locale","ensure","decimalFormatPatternDefault","value","func","aggrStart","sumStart","aggrStep","sumStep","aggrFinish","sumFinish","aggrSymbol","sumSymbol","avgStart","avgStep","avgFinish","avgSymbol","minStart","minStep","minFinish","minSymbol","maxStart","maxStep","maxFinish","maxSymbol","undefinedFunc","undefined","formattedValue","_formatValue","create","text","iconId","cssClass","tableNodeColumn","rowPadding","style","contains","backgroundEffectFunc","_resolveBackgroundEffectFunc","backgroundStyle","_preprocessValueOrTextForCalculation","backgroundColor","backgroundImage","round","effect","trigger","column","calculateMinMaxValues","rendered","_renderBackgroundEffect","_colorGradient1","_colorGradient2","_barChart","log","warn","visibleRows","$row","$cell","cssText","_cellStyle","i","length","cellValueOrTextForCalculation","nvl","startStyle","get","endStyle","startColor","rgb","endColor","_colorGradient","level","r","Math","ceil","red","g","green","b","blue","color","parent","isNullOrUndefined"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {aggregation, Column, comparators, DecimalFormat, numbers, objects, scout, strings, styles} from '../../index';\nimport $ from 'jquery';\n\nexport default class NumberColumn extends Column {\n\n  constructor() {\n    super();\n    this.aggregationFunction = 'sum';\n    this.backgroundEffect = null;\n    this.decimalFormat = null;\n    this.minValue = null;\n    this.maxValue = null;\n    this.calcMinValue = null; // the calculated min value of all rows\n    this.calcMaxValue = null; // the calculated max value of all rows\n    this.horizontalAlignment = 1;\n    this.filterType = 'NumberColumnUserFilter';\n    this.comparator = comparators.NUMERIC;\n    this.textBased = false;\n    this.allowedAggregationFunctions = ['sum', 'avg', 'min', 'max', 'none'];\n  }\n\n  /**\n   * @override Column.js\n   */\n  _init(model) {\n    super._init(model);\n    this._setDecimalFormat(this.decimalFormat);\n    this.setAggregationFunction(this.aggregationFunction);\n  }\n\n  setDecimalFormat(decimalFormat) {\n    if (this.decimalFormat === decimalFormat) {\n      return;\n    }\n    this._setDecimalFormat(decimalFormat);\n    if (this.initialized) {\n      // if format changes on the fly, just update the cell text\n      this.table.rows.forEach(function(row) {\n        this._updateCellText(row, this.cell(row));\n      }.bind(this));\n    }\n  }\n\n  _setDecimalFormat(format) {\n    if (!format) {\n      format = this._getDefaultFormat(this.session.locale);\n    }\n    this.decimalFormat = DecimalFormat.ensure(this.session.locale, format);\n  }\n\n  _getDefaultFormat(locale) {\n    return locale.decimalFormatPatternDefault;\n  }\n\n  /**\n   * @override Columns.js\n   */\n  _formatValue(value) {\n    return this.decimalFormat.format(value);\n  }\n\n  /**\n   * @override Column.js\n   */\n  _parseValue(value) {\n    // server sends cell.value only if it differs from text -> make sure cell.value is set and has the right type\n    return numbers.ensure(value);\n  }\n\n  setAggregationFunction(func) {\n    this.aggregationFunction = func;\n    if (func === 'sum') {\n      this.aggrStart = aggregation.sumStart;\n      this.aggrStep = aggregation.sumStep;\n      this.aggrFinish = aggregation.sumFinish;\n      this.aggrSymbol = aggregation.sumSymbol;\n    } else if (func === 'avg') {\n      this.aggrStart = aggregation.avgStart;\n      this.aggrStep = aggregation.avgStep;\n      this.aggrFinish = aggregation.avgFinish;\n      this.aggrSymbol = aggregation.avgSymbol;\n    } else if (func === 'min') {\n      this.aggrStart = aggregation.minStart;\n      this.aggrStep = aggregation.minStep;\n      this.aggrFinish = aggregation.minFinish;\n      this.aggrSymbol = aggregation.minSymbol;\n    } else if (func === 'max') {\n      this.aggrStart = aggregation.maxStart;\n      this.aggrStep = aggregation.maxStep;\n      this.aggrFinish = aggregation.maxFinish;\n      this.aggrSymbol = aggregation.maxSymbol;\n    } else if (func === 'none') {\n      var undefinedFunc = function() {\n        return undefined;\n      };\n      this.aggrStart = undefinedFunc;\n      this.aggrStep = undefinedFunc;\n      this.aggrFinish = undefinedFunc;\n      this.aggrSymbol = undefined;\n    }\n  }\n\n  createAggrValueCell(value) {\n    var formattedValue = this._formatValue(value);\n    return scout.create('Cell', {\n      text: formattedValue,\n      iconId: (formattedValue ? this.aggrSymbol : null),\n      horizontalAlignment: this.horizontalAlignment,\n      cssClass: 'table-aggregate-cell'\n    });\n  }\n\n  _cellStyle(cell, tableNodeColumn, rowPadding) {\n    var style = super._cellStyle(cell, tableNodeColumn, rowPadding);\n    if (!this.backgroundEffect || cell.value === undefined || strings.contains(cell.cssClass, 'table-aggregate-cell')) {\n      return style;\n    }\n    if (!this.backgroundEffectFunc) {\n      this.backgroundEffectFunc = this._resolveBackgroundEffectFunc();\n    }\n    var backgroundStyle = this.backgroundEffectFunc(this._preprocessValueOrTextForCalculation(cell.value));\n    if (backgroundStyle.backgroundColor) {\n      style += 'background-color: ' + backgroundStyle.backgroundColor + ';';\n    }\n    if (backgroundStyle.backgroundImage) {\n      style += 'background-image: ' + backgroundStyle.backgroundImage + ';';\n    }\n    return style;\n  }\n\n  /**\n   * @override Column.js\n   */\n  _preprocessValueOrTextForCalculation(value) {\n    return this.decimalFormat.round(value);\n  }\n\n  setBackgroundEffect(effect) {\n    if (this.backgroundEffect === effect) {\n      return;\n    }\n\n    this.backgroundEffect = effect;\n    this.backgroundEffectFunc = this._resolveBackgroundEffectFunc();\n\n    this.table.trigger('columnBackgroundEffectChanged', {\n      column: this\n    });\n\n    if (this.backgroundEffect && (this.calcMinValue === null || this.calcMaxValue === null)) {\n      // No need to calculate the values again when switching background effects\n      // If background effect is turned off and on again values will be recalculated\n      // This is necessary because in the meantime rows may got updated, deleted etc.\n      this.calculateMinMaxValues();\n    }\n    if (!this.backgroundEffect) {\n      // Clear to make sure values are calculated anew the next time a background effect gets set\n      this.calcMinValue = null;\n      this.calcMaxValue = null;\n    }\n\n    if (this.table.rendered) {\n      this._renderBackgroundEffect();\n    }\n  }\n\n  /**\n   * Recalculates the min / max values and renders the background effect again.\n   */\n  updateBackgroundEffect() {\n    this.calculateMinMaxValues();\n    if (this.table.rendered) {\n      this._renderBackgroundEffect();\n    }\n  }\n\n  _resolveBackgroundEffectFunc() {\n    var effect = this.backgroundEffect;\n    if (effect === 'colorGradient1') {\n      return this._colorGradient1.bind(this);\n    }\n    if (effect === 'colorGradient2') {\n      return this._colorGradient2.bind(this);\n    }\n    if (effect === 'barChart') {\n      return this._barChart.bind(this);\n    }\n\n    if (effect !== null) {\n      $.log.warn('Unsupported backgroundEffect: ' + effect);\n      return function() {\n        return {};\n      };\n    }\n  }\n\n  _renderBackgroundEffect() {\n    this.table.visibleRows.forEach(function(row) {\n      if (!row.$row) {\n        return;\n      }\n      var cell = this.cell(row),\n        $cell = this.table.$cell(this, row.$row);\n\n      if (cell.value !== undefined) {\n        $cell[0].style.cssText = this._cellStyle(cell);\n      }\n    }, this);\n  }\n\n  calculateMinMaxValues() {\n    var row, calcMinValue, calcMaxValue, value,\n      rows = this.table.rows;\n\n    for (var i = 0; i < rows.length; i++) {\n      row = rows[i];\n      value = this.cellValueOrTextForCalculation(row);\n\n      if (value < calcMinValue || calcMinValue === undefined) {\n        calcMinValue = value;\n      }\n      if (value > calcMaxValue || calcMaxValue === undefined) {\n        calcMaxValue = value;\n      }\n    }\n    this.calcMinValue = scout.nvl(calcMinValue, null);\n    this.calcMaxValue = scout.nvl(calcMaxValue, null);\n  }\n\n  _colorGradient1(value) {\n    var startStyle = styles.get('column-background-effect-gradient1-start', 'backgroundColor'),\n      endStyle = styles.get('column-background-effect-gradient1-end', 'backgroundColor'),\n      startColor = styles.rgb(startStyle.backgroundColor),\n      endColor = styles.rgb(endStyle.backgroundColor);\n\n    return this._colorGradient(value, startColor, endColor);\n  }\n\n  _colorGradient2(value) {\n    var startStyle = styles.get('column-background-effect-gradient2-start', 'backgroundColor'),\n      endStyle = styles.get('column-background-effect-gradient2-end', 'backgroundColor'),\n      startColor = styles.rgb(startStyle.backgroundColor),\n      endColor = styles.rgb(endStyle.backgroundColor);\n\n    return this._colorGradient(value, startColor, endColor);\n  }\n\n  _colorGradient(value, startColor, endColor) {\n    var level = (value - this.calcMinValue) / (this.calcMaxValue - this.calcMinValue);\n\n    var r = Math.ceil(startColor.red - level * (startColor.red - endColor.red)),\n      g = Math.ceil(startColor.green - level * (startColor.green - endColor.green)),\n      b = Math.ceil(startColor.blue - level * (startColor.blue - endColor.blue));\n\n    return {\n      backgroundColor: 'rgb(' + r + ',' + g + ', ' + b + ')'\n    };\n  }\n\n  _barChart(value) {\n    var level = Math.ceil((value - this.calcMinValue) / (this.calcMaxValue - this.calcMinValue) * 100) + '';\n    var color = styles.get('column-background-effect-bar-chart', 'backgroundColor').backgroundColor;\n    return {\n      backgroundImage: 'linear-gradient(to left, ' + color + ' 0%, ' + color + ' ' + level + '%, transparent ' + level + '%, transparent 100% )'\n    };\n  }\n\n  /**\n   * @override Column.js\n   */\n  _createEditor() {\n    return scout.create('NumberField', {\n      parent: this.table,\n      maxValue: this.maxValue,\n      minValue: this.minValue,\n      decimalFormat: this.decimalFormat\n    });\n  }\n\n  _hasCellValue(cell) {\n    return !objects.isNullOrUndefined(cell.value); // Zero (0) is valid too\n  }\n}\n"]},"metadata":{},"sourceType":"module"}