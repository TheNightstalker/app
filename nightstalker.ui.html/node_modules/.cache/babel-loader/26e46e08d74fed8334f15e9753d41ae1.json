{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Action } from '../index';\n\nvar Mode = /*#__PURE__*/function (_Action) {\n  _inherits(Mode, _Action);\n\n  var _super = _createSuper(Mode);\n\n  function Mode() {\n    var _this;\n\n    _classCallCheck(this, Mode);\n\n    _this = _super.call(this);\n    _this.selected = false;\n    _this.ref = null; // Arbitrary reference value, can be used to find and select modes (see ModeSelector.js)\n\n    return _this;\n  }\n\n  _createClass(Mode, [{\n    key: \"_init\",\n    value: function _init(model) {\n      model.owner = model.parent;\n\n      _get(_getPrototypeOf(Mode.prototype), \"_init\", this).call(this, model);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(Mode.prototype), \"_render\", this).call(this);\n\n      this.$container.addClass('mode');\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(Mode.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderSelected();\n    }\n  }, {\n    key: \"setSelected\",\n    value: function setSelected(selected) {\n      this.setProperty('selected', selected);\n    }\n  }, {\n    key: \"_renderSelected\",\n    value: function _renderSelected() {\n      this.$container.select(this.selected);\n    }\n    /**\n     * @Override Action.js\n     */\n\n  }, {\n    key: \"doAction\",\n    value: function doAction() {\n      if (!this.prepareDoAction()) {\n        return false;\n      }\n\n      if (!this.selected) {\n        this.setSelected(true);\n      }\n\n      return true;\n    }\n    /**\n     * @Override Action.js\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (!this.selected) {\n        this.setSelected(true);\n      }\n    }\n  }, {\n    key: \"_renderIconId\",\n    value: function _renderIconId() {\n      _get(_getPrototypeOf(Mode.prototype), \"_renderIconId\", this).call(this);\n\n      this._updateLabelAndIconStyle(); // Invalidate layout because mode may now be longer or shorter\n\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"_renderText\",\n    value: function _renderText() {\n      _get(_getPrototypeOf(Mode.prototype), \"_renderText\", this).call(this);\n\n      this._updateLabelAndIconStyle(); // Invalidate layout because mode may now be longer or shorter\n\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"_updateLabelAndIconStyle\",\n    value: function _updateLabelAndIconStyle() {\n      var hasText = !!this.text;\n      this.get$Icon().toggleClass('with-label', hasText);\n    }\n  }]);\n\n  return Mode;\n}(Action);\n\nexport { Mode as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/modeselector/Mode.js"],"names":["Action","Mode","selected","ref","model","owner","parent","$container","addClass","_renderSelected","setProperty","select","prepareDoAction","setSelected","_updateLabelAndIconStyle","invalidateLayoutTree","hasText","text","get$Icon","toggleClass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAR,QAAqB,UAArB;;IAEqBC,I;;;;;AAEnB,kBAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,QAAL,GAAgB,KAAhB;AACA,UAAKC,GAAL,GAAW,IAAX,CAJY,CAIK;;AAJL;AAKb;;;;0BAEKC,K,EAAO;AACXA,MAAAA,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACE,MAApB;;AACA,sEAAYF,KAAZ;AACD;;;8BAES;AACR;;AACA,WAAKG,UAAL,CAAgBC,QAAhB,CAAyB,MAAzB;AACD;;;wCAEmB;AAClB;;AACA,WAAKC,eAAL;AACD;;;gCAEWP,Q,EAAU;AACpB,WAAKQ,WAAL,CAAiB,UAAjB,EAA6BR,QAA7B;AACD;;;sCAEiB;AAChB,WAAKK,UAAL,CAAgBI,MAAhB,CAAuB,KAAKT,QAA5B;AACD;AAED;AACF;AACA;;;;+BACa;AACT,UAAI,CAAC,KAAKU,eAAL,EAAL,EAA6B;AAC3B,eAAO,KAAP;AACD;;AAED,UAAI,CAAC,KAAKV,QAAV,EAAoB;AAClB,aAAKW,WAAL,CAAiB,IAAjB;AACD;;AAED,aAAO,IAAP;AACD;AAED;AACF;AACA;;;;6BACW;AACP,UAAI,CAAC,KAAKX,QAAV,EAAoB;AAClB,aAAKW,WAAL,CAAiB,IAAjB;AACD;AACF;;;oCAEe;AACd;;AAEA,WAAKC,wBAAL,GAHc,CAId;;;AACA,WAAKC,oBAAL;AACD;;;kCAEa;AACZ;;AAEA,WAAKD,wBAAL,GAHY,CAIZ;;;AACA,WAAKC,oBAAL;AACD;;;+CAE0B;AACzB,UAAIC,OAAO,GAAG,CAAC,CAAC,KAAKC,IAArB;AACA,WAAKC,QAAL,GAAgBC,WAAhB,CAA4B,YAA5B,EAA0CH,OAA1C;AACD;;;;EA3E+BhB,M;;SAAbC,I","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Action} from '../index';\n\nexport default class Mode extends Action {\n\n  constructor() {\n    super();\n\n    this.selected = false;\n    this.ref = null; // Arbitrary reference value, can be used to find and select modes (see ModeSelector.js)\n  }\n\n  _init(model) {\n    model.owner = model.parent;\n    super._init(model);\n  }\n\n  _render() {\n    super._render();\n    this.$container.addClass('mode');\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderSelected();\n  }\n\n  setSelected(selected) {\n    this.setProperty('selected', selected);\n  }\n\n  _renderSelected() {\n    this.$container.select(this.selected);\n  }\n\n  /**\n   * @Override Action.js\n   */\n  doAction() {\n    if (!this.prepareDoAction()) {\n      return false;\n    }\n\n    if (!this.selected) {\n      this.setSelected(true);\n    }\n\n    return true;\n  }\n\n  /**\n   * @Override Action.js\n   */\n  toggle() {\n    if (!this.selected) {\n      this.setSelected(true);\n    }\n  }\n\n  _renderIconId() {\n    super._renderIconId();\n\n    this._updateLabelAndIconStyle();\n    // Invalidate layout because mode may now be longer or shorter\n    this.invalidateLayoutTree();\n  }\n\n  _renderText() {\n    super._renderText();\n\n    this._updateLabelAndIconStyle();\n    // Invalidate layout because mode may now be longer or shorter\n    this.invalidateLayoutTree();\n  }\n\n  _updateLabelAndIconStyle() {\n    var hasText = !!this.text;\n    this.get$Icon().toggleClass('with-label', hasText);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}