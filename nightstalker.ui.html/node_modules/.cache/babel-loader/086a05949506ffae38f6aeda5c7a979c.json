{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, objects, ResponsiveManager } from '../index';\nimport $ from 'jquery';\n\nvar ResponsiveHandler = /*#__PURE__*/function () {\n  function ResponsiveHandler() {\n    _classCallCheck(this, ResponsiveHandler);\n\n    this.widget = null;\n    this.compactThreshold = -1;\n    this.condensedThreshold = -1;\n    this.oldState = ResponsiveManager.ResponsiveState.NORMAL;\n    this.state = ResponsiveManager.ResponsiveState.NORMAL;\n    this.allowedStates = [ResponsiveManager.ResponsiveState.NORMAL, ResponsiveManager.ResponsiveState.COMPACT];\n    this.transformations = objects.createMap();\n    this.enabledTransformations = objects.createMap(); // Event handlers\n\n    this._destroyHandler = this._onDestroy.bind(this);\n  }\n\n  _createClass(ResponsiveHandler, [{\n    key: \"init\",\n    value: function init(model) {\n      $.extend(this, model);\n      this.widget.one('destroy', this._destroyHandler);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.widget.off('destroy', this._destroyHandler);\n    }\n  }, {\n    key: \"getCompactThreshold\",\n    value: function getCompactThreshold() {\n      return this.compactThreshold;\n    }\n  }, {\n    key: \"getCondensedThreshold\",\n    value: function getCondensedThreshold() {\n      return this.condensedThreshold;\n    }\n  }, {\n    key: \"active\",\n    value: function active() {\n      return true;\n    }\n  }, {\n    key: \"setAllowedStates\",\n    value: function setAllowedStates(allowedStates) {\n      this.allowedStates = allowedStates;\n    }\n  }, {\n    key: \"acceptState\",\n    value: function acceptState(newState) {\n      return arrays.containsAny(this.allowedStates, newState);\n    }\n    /**\n     * Register a transformation with a given transformation id. The transformation id has to be unique.\n     */\n\n  }, {\n    key: \"_registerTransformation\",\n    value: function _registerTransformation(transformationId, transformation) {\n      this.transformations[transformationId] = transformation.bind(this);\n    }\n    /**\n     * Enable a transformation for a given state. Once the responsive handler changes in to the given state,\n     * the transformation will be applied.\n     * Before a transformation can be enabled, it has to be registered first.\n     */\n\n  }, {\n    key: \"_enableTransformation\",\n    value: function _enableTransformation(state, transformationId) {\n      var transformationIds = this.enabledTransformations[state];\n\n      if (!transformationIds) {\n        transformationIds = [];\n        this.enabledTransformations[state] = transformationIds;\n      }\n\n      transformationIds.push(transformationId);\n    }\n    /**\n     * Disable a transformation for a given state.\n     */\n\n  }, {\n    key: \"_disableTransformation\",\n    value: function _disableTransformation(state, transformationId) {\n      arrays.remove(this.enabledTransformations[state], transformationId);\n    }\n    /* --- TRANSFORMATIONS ------------------------------------------------------------- */\n\n  }, {\n    key: \"_storeFieldProperty\",\n    value: function _storeFieldProperty(widget, property, value) {\n      widget._setProperty('responsive-' + property, value);\n    }\n  }, {\n    key: \"_hasFieldProperty\",\n    value: function _hasFieldProperty(widget, property) {\n      return widget.hasOwnProperty('responsive-' + property);\n    }\n  }, {\n    key: \"_getFieldProperty\",\n    value: function _getFieldProperty(widget, property) {\n      return widget['responsive-' + property];\n    }\n    /**\n     * Performs the transformations and computes which transformations have to be applied and which have to be reset.\n     * Transformations to be applied are the ones enabled for the new state, but not for the old state.\n     * The ones to be reset are those enabled of the old state but not for the new state.\n     */\n\n  }, {\n    key: \"transform\",\n    value: function transform(newState, force) {\n      if (this.state === newState && !force) {\n        return false;\n      }\n\n      this.oldState = this.state;\n      this.state = newState;\n      var oldTransformations;\n      var newTransformations;\n\n      if (this.oldState !== this.state) {\n        oldTransformations = this.enabledTransformations[this.oldState] || [];\n        newTransformations = this.enabledTransformations[this.state] || [];\n      } else {\n        // if the state stays the same, it means we want to enforce the current state. Therefore the new transformations\n        // will contained the transformations of the current state. The old transformations will contain all others.\n        oldTransformations = [];\n\n        if (this.state !== ResponsiveManager.ResponsiveState.NORMAL) {\n          arrays.pushAll(oldTransformations, this.enabledTransformations[ResponsiveManager.ResponsiveState.NORMAL]);\n        }\n\n        if (this.state !== ResponsiveManager.ResponsiveState.CONDENSED) {\n          arrays.pushAll(oldTransformations, this.enabledTransformations[ResponsiveManager.ResponsiveState.CONDENSED]);\n        }\n\n        if (this.state !== ResponsiveManager.ResponsiveState.COMPACT) {\n          arrays.pushAll(oldTransformations, this.enabledTransformations[ResponsiveManager.ResponsiveState.COMPACT]);\n        }\n\n        newTransformations = this.enabledTransformations[this.state] || [];\n      }\n\n      this._transformationsToApply = arrays.diff(newTransformations, oldTransformations);\n      this._transformationsToReset = arrays.diff(oldTransformations, newTransformations);\n\n      this._transform();\n\n      return true;\n    }\n    /**\n     * Performs all the transformations. By default this method calls _transformWidget() for the own widget.\n     * If e.g. child elements need to be transformed as well, override this method and call _transformWidget() for\n     * each child as well.\n     */\n\n  }, {\n    key: \"_transform\",\n    value: function _transform() {\n      this._transformWidget(this.widget);\n    }\n  }, {\n    key: \"_transformWidget\",\n    value: function _transformWidget(widget) {\n      this._transformationsToApply.forEach(function (transformationType) {\n        this.transformations[transformationType](widget, true);\n      }.bind(this));\n\n      this._transformationsToReset.forEach(function (transformationType) {\n        this.transformations[transformationType](widget, false);\n      }.bind(this));\n    }\n    /* --- HANDLERS ------------------------------------------------------------- */\n\n  }, {\n    key: \"_onDestroy\",\n    value: function _onDestroy(event) {\n      this.destroy();\n    }\n  }]);\n\n  return ResponsiveHandler;\n}();\n\nexport { ResponsiveHandler as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/ResponsiveHandler.js"],"names":["arrays","objects","ResponsiveManager","$","ResponsiveHandler","widget","compactThreshold","condensedThreshold","oldState","ResponsiveState","NORMAL","state","allowedStates","COMPACT","transformations","createMap","enabledTransformations","_destroyHandler","_onDestroy","bind","model","extend","one","off","newState","containsAny","transformationId","transformation","transformationIds","push","remove","property","value","_setProperty","hasOwnProperty","force","oldTransformations","newTransformations","pushAll","CONDENSED","_transformationsToApply","diff","_transformationsToReset","_transform","_transformWidget","forEach","transformationType","event","destroy"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, objects, ResponsiveManager} from '../index';\nimport $ from 'jquery';\n\nexport default class ResponsiveHandler {\n\n  constructor() {\n    this.widget = null;\n    this.compactThreshold = -1;\n    this.condensedThreshold = -1;\n\n    this.oldState = ResponsiveManager.ResponsiveState.NORMAL;\n    this.state = ResponsiveManager.ResponsiveState.NORMAL;\n    this.allowedStates = [ResponsiveManager.ResponsiveState.NORMAL, ResponsiveManager.ResponsiveState.COMPACT];\n\n    this.transformations = objects.createMap();\n    this.enabledTransformations = objects.createMap();\n\n    // Event handlers\n    this._destroyHandler = this._onDestroy.bind(this);\n  }\n\n  init(model) {\n    $.extend(this, model);\n\n    this.widget.one('destroy', this._destroyHandler);\n  }\n\n  destroy() {\n    this.widget.off('destroy', this._destroyHandler);\n  }\n\n  getCompactThreshold() {\n    return this.compactThreshold;\n  }\n\n  getCondensedThreshold() {\n    return this.condensedThreshold;\n  }\n\n  active() {\n    return true;\n  }\n\n  setAllowedStates(allowedStates) {\n    this.allowedStates = allowedStates;\n  }\n\n  acceptState(newState) {\n    return arrays.containsAny(this.allowedStates, newState);\n  }\n\n  /**\n   * Register a transformation with a given transformation id. The transformation id has to be unique.\n   */\n  _registerTransformation(transformationId, transformation) {\n    this.transformations[transformationId] = transformation.bind(this);\n  }\n\n  /**\n   * Enable a transformation for a given state. Once the responsive handler changes in to the given state,\n   * the transformation will be applied.\n   * Before a transformation can be enabled, it has to be registered first.\n   */\n  _enableTransformation(state, transformationId) {\n    var transformationIds = this.enabledTransformations[state];\n    if (!transformationIds) {\n      transformationIds = [];\n      this.enabledTransformations[state] = transformationIds;\n    }\n    transformationIds.push(transformationId);\n  }\n\n  /**\n   * Disable a transformation for a given state.\n   */\n  _disableTransformation(state, transformationId) {\n    arrays.remove(this.enabledTransformations[state], transformationId);\n  }\n\n  /* --- TRANSFORMATIONS ------------------------------------------------------------- */\n\n  _storeFieldProperty(widget, property, value) {\n    widget._setProperty('responsive-' + property, value);\n  }\n\n  _hasFieldProperty(widget, property) {\n    return widget.hasOwnProperty('responsive-' + property);\n  }\n\n  _getFieldProperty(widget, property) {\n    return widget['responsive-' + property];\n  }\n\n  /**\n   * Performs the transformations and computes which transformations have to be applied and which have to be reset.\n   * Transformations to be applied are the ones enabled for the new state, but not for the old state.\n   * The ones to be reset are those enabled of the old state but not for the new state.\n   */\n  transform(newState, force) {\n    if (this.state === newState && !force) {\n      return false;\n    }\n\n    this.oldState = this.state;\n    this.state = newState;\n\n    var oldTransformations;\n    var newTransformations;\n    if (this.oldState !== this.state) {\n      oldTransformations = this.enabledTransformations[this.oldState] || [];\n      newTransformations = this.enabledTransformations[this.state] || [];\n    } else {\n      // if the state stays the same, it means we want to enforce the current state. Therefore the new transformations\n      // will contained the transformations of the current state. The old transformations will contain all others.\n      oldTransformations = [];\n      if (this.state !== ResponsiveManager.ResponsiveState.NORMAL) {\n        arrays.pushAll(oldTransformations, this.enabledTransformations[ResponsiveManager.ResponsiveState.NORMAL]);\n      }\n      if (this.state !== ResponsiveManager.ResponsiveState.CONDENSED) {\n        arrays.pushAll(oldTransformations, this.enabledTransformations[ResponsiveManager.ResponsiveState.CONDENSED]);\n      }\n      if (this.state !== ResponsiveManager.ResponsiveState.COMPACT) {\n        arrays.pushAll(oldTransformations, this.enabledTransformations[ResponsiveManager.ResponsiveState.COMPACT]);\n      }\n      newTransformations = this.enabledTransformations[this.state] || [];\n    }\n\n    this._transformationsToApply = arrays.diff(newTransformations, oldTransformations);\n    this._transformationsToReset = arrays.diff(oldTransformations, newTransformations);\n\n    this._transform();\n    return true;\n  }\n\n  /**\n   * Performs all the transformations. By default this method calls _transformWidget() for the own widget.\n   * If e.g. child elements need to be transformed as well, override this method and call _transformWidget() for\n   * each child as well.\n   */\n  _transform() {\n    this._transformWidget(this.widget);\n  }\n\n  _transformWidget(widget) {\n    this._transformationsToApply.forEach(function(transformationType) {\n      this.transformations[transformationType](widget, true);\n    }.bind(this));\n\n    this._transformationsToReset.forEach(function(transformationType) {\n      this.transformations[transformationType](widget, false);\n    }.bind(this));\n  }\n\n  /* --- HANDLERS ------------------------------------------------------------- */\n  _onDestroy(event) {\n    this.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}