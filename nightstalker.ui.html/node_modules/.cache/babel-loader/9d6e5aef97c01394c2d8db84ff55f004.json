{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, numbers, scout, strings } from '../index';\nimport $ from 'jquery';\nvar styleMap = {};\nvar element = null;\n/**\n * Generates an invisible div and appends it to the body, only once. The same div will be reused on subsequent calls.\n * Adds the given css class to that element and returns a style object containing the values for every given property.\n * The style is cached. Subsequent calls with the same css class will return the same style object.\n */\n\nexport function get(cssClass, properties, additionalClass) {\n  var style = styleMap[cssClass]; // ensure array\n\n  properties = arrays.ensure(properties);\n  properties = properties.map(function (prop) {\n    return {\n      name: prop,\n      // replace property names like 'max-width' in 'maxWidth'\n      nameCamelCase: prop.replace(/-(.)/g, function (match, p1) {\n        return p1.toUpperCase();\n      })\n    };\n  }); // ensure style\n\n  if (!style) {\n    style = {};\n    put(cssClass, style);\n  }\n\n  var notResolvedProperties = properties.filter(function (prop) {\n    return !(prop.nameCamelCase in style);\n  });\n\n  if (notResolvedProperties.length === 0) {\n    return style;\n  } // resolve missing properties\n\n\n  var elem = element;\n\n  if (!elem) {\n    elem = window.document.createElement('div');\n    elem.style.display = 'none';\n    window.document.body.appendChild(elem);\n    element = elem;\n  }\n\n  elem.className = cssClass;\n\n  if (additionalClass) {\n    elem.className += ' ' + additionalClass;\n  }\n\n  var computedStyle = window.getComputedStyle(elem);\n  notResolvedProperties.forEach(function (property) {\n    style[property.nameCamelCase] = computedStyle[property.name];\n  });\n  elem.className = '';\n  return style;\n}\nexport function getSize(cssClass, cssProperty, property, defaultSize, additionalClass) {\n  var size = get(cssClass, cssProperty, additionalClass)[property];\n\n  if ('auto' === size) {\n    return defaultSize;\n  }\n\n  return $.pxToNumber(size);\n}\nexport function put(cssClass, style) {\n  styleMap[cssClass] = style;\n}\nexport function clearCache() {\n  styleMap = {};\n}\nvar RGB_BLACK = {\n  red: 0,\n  green: 0,\n  blue: 0\n};\nvar RGB_WHITE = {\n  red: 255,\n  green: 255,\n  blue: 255\n};\n/**\n * Creates an rgb object based on the given rgb string with the format rgb(0, 0, 0).\n * If the input string cannot be parsed, undefined is returned.\n */\n\nexport function rgb(rgbString) {\n  if (!rgbString) {\n    return undefined;\n  }\n\n  var rgbVal = rgbString.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?(\\d+(\\.\\d+)?)?/i);\n\n  if (rgbVal === null) {\n    return undefined;\n  }\n\n  return {\n    red: parseInt(rgbVal[1], 10),\n    green: parseInt(rgbVal[2], 10),\n    blue: parseInt(rgbVal[3], 10),\n    alpha: parseFloat(scout.nvl(rgbVal[4], 1))\n  };\n}\n/**\n * Make a given color darker by mixing it with a certain amount of black.\n * If no color is specified or the color cannot be parsed, undefined is returned.\n *\n * @param color\n *          a CSS color in 'rgb()' or 'rgba()' format.\n * @param ratio\n *          a number between 0 and 1 specifying how much black should be added\n *          to the given color (0.0 = only 'color', 1.0 = only black).\n *          Default is 0.2.\n */\n\nexport function darkerColor(color, ratio) {\n  var rgbVal = rgb(color);\n\n  if (!rgbVal) {\n    return undefined;\n  }\n\n  ratio = scout.nvl(ratio, 0.2);\n  return mergeRgbColors(RGB_BLACK, ratio, rgbVal, 1 - ratio);\n}\n/**\n * Make a given color lighter by mixing it with a certain amount of white.\n * If no color is specified or the color cannot be parsed, undefined is returned.\n *\n * @param color\n *          a CSS color in 'rgb()' or 'rgba()' format.\n * @param ratio\n *          a number between 0 and 1 specifying how much white should be added\n *          to the given color (0.0 = only 'color', 1.0 = only white).\n *          Default is 0.2.\n */\n\nexport function lighterColor(color, ratio) {\n  var rgbVal = rgb(color);\n\n  if (!rgbVal) {\n    return undefined;\n  }\n\n  ratio = scout.nvl(ratio, 0.2);\n  return mergeRgbColors(RGB_WHITE, ratio, rgbVal, 1 - ratio);\n}\n/**\n * Merges two RGB colors as defined by rgb().\n *\n * The two 'ratio' arguments specify \"how much\" of the corresponding color is added to the\n * resulting color. Both arguments should (but don't have to) add to 1.0.\n *\n * All arguments are mandatory.\n */\n\nexport function mergeRgbColors(color1, ratio1, color2, ratio2) {\n  if (typeof color1 === 'string') {\n    color1 = rgb(color1);\n  }\n\n  if (typeof color2 === 'string') {\n    color2 = rgb(color2);\n  }\n\n  if (!color1 && !color2) {\n    return undefined;\n  }\n\n  ratio1 = scout.nvl(ratio1, 0);\n  ratio2 = scout.nvl(ratio2, 0);\n\n  if (!color1) {\n    color1 = RGB_BLACK;\n    ratio1 = 0;\n  }\n\n  if (!color2) {\n    color2 = RGB_BLACK;\n    ratio2 = 0;\n  }\n\n  if (ratio1 === 0 && ratio2 === 0) {\n    return 'rgb(0,0,0)';\n  }\n\n  return 'rgb(' + numbers.round((ratio1 * color1.red + ratio2 * color2.red) / (ratio1 + ratio2)) + ',' + numbers.round((ratio1 * color1.green + ratio2 * color2.green) / (ratio1 + ratio2)) + ',' + numbers.round((ratio1 * color1.blue + ratio2 * color2.blue) / (ratio1 + ratio2)) + ')';\n}\n/**\n * Example: Dialog-PLAIN-12\n */\n\nexport function parseFontSpec(pattern) {\n  var fontSpec = {};\n\n  if (strings.hasText(pattern)) {\n    var tokens = pattern.split(/[-_,/.;]/);\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i].toUpperCase(); // styles\n\n      if (token === 'NULL' || token === '0') {// nop (undefined values)\n      } else if (token === 'PLAIN') {// nop\n      } else if (token === 'BOLD') {\n        fontSpec.bold = true;\n      } else if (token === 'ITALIC') {\n        fontSpec.italic = true;\n      } else {\n        // size or name\n        if (/^\\d+$/.test(token)) {\n          fontSpec.size = token;\n        } else if (token !== 'NULL') {\n          fontSpec.name = tokens[i];\n        }\n      }\n    }\n  }\n\n  return fontSpec;\n}\nexport function modelToCssColor(color) {\n  if (!color) {\n    // prevent conversion from null to 'null' by regex\n    return '';\n  }\n\n  var cssColor = '';\n\n  if (/^[A-Fa-f0-9]{3}([A-Fa-f0-9]{3})?$/.test(color)) {\n    // hex color\n    cssColor = '#' + color;\n  } else if (/^[A-Za-z0-9().,%-]+$/.test(color)) {\n    // named colors or color functions\n    cssColor = color;\n  }\n\n  return cssColor;\n}\n/**\n * Returns a string with CSS definitions for use in an element's \"style\" attribute. All CSS relevant\n * properties of the given object are converted to CSS definitions, namely foreground color, background\n * color and font.\n *\n * If an $element is provided, the CSS definitions are directly applied to the element. This can be\n * useful if the \"style\" attribute is shared and cannot be replaced in it's entirety.\n *\n * If propertyPrefix is provided, the prefix will be applied to the properties, e.g. if the prefix is\n * 'label' the properties labelFont, labelBackgroundColor and labelForegroundColor are used instead of\n * just font, backgroundColor and foregroundColor.\n */\n\nexport function legacyStyle(obj, $element, propertyPrefix) {\n  var style = '';\n  style += legacyForegroundColor(obj, $element, propertyPrefix);\n  style += legacyBackgroundColor(obj, $element, propertyPrefix);\n  style += legacyFont(obj, $element, propertyPrefix);\n  return style;\n}\nexport function legacyForegroundColor(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n  var cssColor = '';\n\n  if (obj) {\n    var foregroundColorProperty = strings.lowercaseFirstLetter(propertyPrefix + 'ForegroundColor');\n    cssColor = modelToCssColor(obj[foregroundColorProperty]);\n  }\n\n  if ($element) {\n    $element.css('color', cssColor);\n  }\n\n  var style = '';\n\n  if (cssColor) {\n    style += 'color: ' + cssColor + '; ';\n  }\n\n  return style;\n}\nexport function legacyBackgroundColor(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n  var cssBackgroundColor = '';\n\n  if (obj) {\n    var backgroundColorProperty = strings.lowercaseFirstLetter(propertyPrefix + 'BackgroundColor');\n    cssBackgroundColor = modelToCssColor(obj[backgroundColorProperty]);\n  }\n\n  if ($element) {\n    $element.css('background-color', cssBackgroundColor);\n  }\n\n  var style = '';\n\n  if (cssBackgroundColor) {\n    style += 'background-color: ' + cssBackgroundColor + '; ';\n  }\n\n  return style;\n}\nexport function legacyFont(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n  var cssFontWeight = '';\n  var cssFontStyle = '';\n  var cssFontSize = '';\n  var cssFontFamily = '';\n\n  if (obj) {\n    var fontProperty = strings.lowercaseFirstLetter(propertyPrefix + 'Font');\n    var fontSpec = parseFontSpec(obj[fontProperty]);\n\n    if (fontSpec.bold) {\n      cssFontWeight = 'bold';\n    }\n\n    if (fontSpec.italic) {\n      cssFontStyle = 'italic';\n    }\n\n    if (fontSpec.size) {\n      cssFontSize = fontSpec.size + 'pt';\n    }\n\n    if (fontSpec.name) {\n      cssFontFamily = fontSpec.name;\n    }\n  }\n\n  if ($element) {\n    $element.css('font-weight', cssFontWeight).css('font-style', cssFontStyle).css('font-size', cssFontSize).css('font-family', cssFontFamily);\n  }\n\n  var style = '';\n\n  if (cssFontWeight) {\n    style += 'font-weight: ' + cssFontWeight + '; ';\n  }\n\n  if (cssFontStyle) {\n    style += 'font-style: ' + cssFontStyle + '; ';\n  }\n\n  if (cssFontSize) {\n    style += 'font-size: ' + cssFontSize + '; ';\n  }\n\n  if (cssFontFamily) {\n    style += 'font-family: ' + cssFontFamily + '; ';\n  }\n\n  return style;\n}\nexport function _getElement() {\n  return element;\n}\nexport default {\n  RGB_BLACK: RGB_BLACK,\n  RGB_WHITE: RGB_WHITE,\n  clearCache: clearCache,\n  darkerColor: darkerColor,\n  get: get,\n  getSize: getSize,\n  legacyBackgroundColor: legacyBackgroundColor,\n  legacyFont: legacyFont,\n  legacyForegroundColor: legacyForegroundColor,\n  legacyStyle: legacyStyle,\n  lighterColor: lighterColor,\n  mergeRgbColors: mergeRgbColors,\n  modelToCssColor: modelToCssColor,\n  parseFontSpec: parseFontSpec,\n  put: put,\n  rgb: rgb,\n  styleMap: styleMap,\n  _getElement: _getElement\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/util/styles.js"],"names":["arrays","numbers","scout","strings","$","styleMap","element","get","cssClass","properties","additionalClass","style","ensure","map","prop","name","nameCamelCase","replace","match","p1","toUpperCase","put","notResolvedProperties","filter","length","elem","window","document","createElement","display","body","appendChild","className","computedStyle","getComputedStyle","forEach","property","getSize","cssProperty","defaultSize","size","pxToNumber","clearCache","RGB_BLACK","red","green","blue","RGB_WHITE","rgb","rgbString","undefined","rgbVal","parseInt","alpha","parseFloat","nvl","darkerColor","color","ratio","mergeRgbColors","lighterColor","color1","ratio1","color2","ratio2","round","parseFontSpec","pattern","fontSpec","hasText","tokens","split","i","token","bold","italic","test","modelToCssColor","cssColor","legacyStyle","obj","$element","propertyPrefix","legacyForegroundColor","legacyBackgroundColor","legacyFont","foregroundColorProperty","lowercaseFirstLetter","css","cssBackgroundColor","backgroundColorProperty","cssFontWeight","cssFontStyle","cssFontSize","cssFontFamily","fontProperty","_getElement"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, numbers, scout, strings} from '../index';\nimport $ from 'jquery';\n\nlet styleMap = {};\n\nlet element = null;\n\n/**\n * Generates an invisible div and appends it to the body, only once. The same div will be reused on subsequent calls.\n * Adds the given css class to that element and returns a style object containing the values for every given property.\n * The style is cached. Subsequent calls with the same css class will return the same style object.\n */\nexport function get(cssClass, properties, additionalClass) {\n  var style = styleMap[cssClass];\n  // ensure array\n  properties = arrays.ensure(properties);\n  properties = properties.map(function(prop) {\n    return {\n      name: prop,\n      // replace property names like 'max-width' in 'maxWidth'\n      nameCamelCase: prop.replace(/-(.)/g,\n        function(match, p1) {\n          return p1.toUpperCase();\n        })\n    };\n  });\n\n  // ensure style\n  if (!style) {\n    style = {};\n    put(cssClass, style);\n  }\n\n  var notResolvedProperties = properties.filter(function(prop) {\n    return !(prop.nameCamelCase in style);\n  });\n  if (notResolvedProperties.length === 0) {\n    return style;\n  }\n\n  // resolve missing properties\n  var elem = element;\n  if (!elem) {\n    elem = window.document.createElement('div');\n    elem.style.display = 'none';\n    window.document.body.appendChild(elem);\n    element = elem;\n  }\n  elem.className = cssClass;\n  if (additionalClass) {\n    elem.className += ' ' + additionalClass;\n  }\n  var computedStyle = window.getComputedStyle(elem);\n  notResolvedProperties.forEach(function(property) {\n    style[property.nameCamelCase] = computedStyle[property.name];\n  });\n  elem.className = '';\n\n  return style;\n}\n\nexport function getSize(cssClass, cssProperty, property, defaultSize, additionalClass) {\n  var size = get(cssClass, cssProperty, additionalClass)[property];\n  if ('auto' === size) {\n    return defaultSize;\n  }\n  return $.pxToNumber(size);\n}\n\nexport function put(cssClass, style) {\n  styleMap[cssClass] = style;\n}\n\nexport function clearCache() {\n  styleMap = {};\n}\n\nconst RGB_BLACK = {\n  red: 0,\n  green: 0,\n  blue: 0\n};\n\nconst RGB_WHITE = {\n  red: 255,\n  green: 255,\n  blue: 255\n};\n\n/**\n * Creates an rgb object based on the given rgb string with the format rgb(0, 0, 0).\n * If the input string cannot be parsed, undefined is returned.\n */\nexport function rgb(rgbString) {\n  if (!rgbString) {\n    return undefined;\n  }\n  var rgbVal = rgbString.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?(\\d+(\\.\\d+)?)?/i);\n  if (rgbVal === null) {\n    return undefined;\n  }\n  return {\n    red: parseInt(rgbVal[1], 10),\n    green: parseInt(rgbVal[2], 10),\n    blue: parseInt(rgbVal[3], 10),\n    alpha: parseFloat(scout.nvl(rgbVal[4], 1))\n  };\n}\n\n/**\n * Make a given color darker by mixing it with a certain amount of black.\n * If no color is specified or the color cannot be parsed, undefined is returned.\n *\n * @param color\n *          a CSS color in 'rgb()' or 'rgba()' format.\n * @param ratio\n *          a number between 0 and 1 specifying how much black should be added\n *          to the given color (0.0 = only 'color', 1.0 = only black).\n *          Default is 0.2.\n */\nexport function darkerColor(color, ratio) {\n  var rgbVal = rgb(color);\n  if (!rgbVal) {\n    return undefined;\n  }\n  ratio = scout.nvl(ratio, 0.2);\n  return mergeRgbColors(RGB_BLACK, ratio, rgbVal, 1 - ratio);\n}\n\n/**\n * Make a given color lighter by mixing it with a certain amount of white.\n * If no color is specified or the color cannot be parsed, undefined is returned.\n *\n * @param color\n *          a CSS color in 'rgb()' or 'rgba()' format.\n * @param ratio\n *          a number between 0 and 1 specifying how much white should be added\n *          to the given color (0.0 = only 'color', 1.0 = only white).\n *          Default is 0.2.\n */\nexport function lighterColor(color, ratio) {\n  var rgbVal = rgb(color);\n  if (!rgbVal) {\n    return undefined;\n  }\n  ratio = scout.nvl(ratio, 0.2);\n  return mergeRgbColors(RGB_WHITE, ratio, rgbVal, 1 - ratio);\n}\n\n/**\n * Merges two RGB colors as defined by rgb().\n *\n * The two 'ratio' arguments specify \"how much\" of the corresponding color is added to the\n * resulting color. Both arguments should (but don't have to) add to 1.0.\n *\n * All arguments are mandatory.\n */\nexport function mergeRgbColors(color1, ratio1, color2, ratio2) {\n  if (typeof color1 === 'string') {\n    color1 = rgb(color1);\n  }\n  if (typeof color2 === 'string') {\n    color2 = rgb(color2);\n  }\n  if (!color1 && !color2) {\n    return undefined;\n  }\n  ratio1 = scout.nvl(ratio1, 0);\n  ratio2 = scout.nvl(ratio2, 0);\n  if (!color1) {\n    color1 = RGB_BLACK;\n    ratio1 = 0;\n  }\n  if (!color2) {\n    color2 = RGB_BLACK;\n    ratio2 = 0;\n  }\n  if (ratio1 === 0 && ratio2 === 0) {\n    return 'rgb(0,0,0)';\n  }\n  return 'rgb(' +\n    numbers.round((ratio1 * color1.red + ratio2 * color2.red) / (ratio1 + ratio2)) + ',' +\n    numbers.round((ratio1 * color1.green + ratio2 * color2.green) / (ratio1 + ratio2)) + ',' +\n    numbers.round((ratio1 * color1.blue + ratio2 * color2.blue) / (ratio1 + ratio2)) +\n    ')';\n}\n\n/**\n * Example: Dialog-PLAIN-12\n */\nexport function parseFontSpec(pattern) {\n  var fontSpec = {};\n  if (strings.hasText(pattern)) {\n    var tokens = pattern.split(/[-_,/.;]/);\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i].toUpperCase();\n      // styles\n      if (token === 'NULL' || token === '0') {\n        // nop (undefined values)\n      } else if (token === 'PLAIN') {\n        // nop\n      } else if (token === 'BOLD') {\n        fontSpec.bold = true;\n      } else if (token === 'ITALIC') {\n        fontSpec.italic = true;\n      } else {\n        // size or name\n        if (/^\\d+$/.test(token)) {\n          fontSpec.size = token;\n        } else if (token !== 'NULL') {\n          fontSpec.name = tokens[i];\n        }\n      }\n    }\n  }\n  return fontSpec;\n}\n\nexport function modelToCssColor(color) {\n  if (!color) { // prevent conversion from null to 'null' by regex\n    return '';\n  }\n  var cssColor = '';\n  if (/^[A-Fa-f0-9]{3}([A-Fa-f0-9]{3})?$/.test(color)) { // hex color\n    cssColor = '#' + color;\n  } else if (/^[A-Za-z0-9().,%-]+$/.test(color)) { // named colors or color functions\n    cssColor = color;\n  }\n  return cssColor;\n}\n\n/**\n * Returns a string with CSS definitions for use in an element's \"style\" attribute. All CSS relevant\n * properties of the given object are converted to CSS definitions, namely foreground color, background\n * color and font.\n *\n * If an $element is provided, the CSS definitions are directly applied to the element. This can be\n * useful if the \"style\" attribute is shared and cannot be replaced in it's entirety.\n *\n * If propertyPrefix is provided, the prefix will be applied to the properties, e.g. if the prefix is\n * 'label' the properties labelFont, labelBackgroundColor and labelForegroundColor are used instead of\n * just font, backgroundColor and foregroundColor.\n */\nexport function legacyStyle(obj, $element, propertyPrefix) {\n  var style = '';\n  style += legacyForegroundColor(obj, $element, propertyPrefix);\n  style += legacyBackgroundColor(obj, $element, propertyPrefix);\n  style += legacyFont(obj, $element, propertyPrefix);\n  return style;\n}\n\nexport function legacyForegroundColor(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n\n  var cssColor = '';\n  if (obj) {\n    var foregroundColorProperty = strings.lowercaseFirstLetter(propertyPrefix + 'ForegroundColor');\n    cssColor = modelToCssColor(obj[foregroundColorProperty]);\n  }\n  if ($element) {\n    $element.css('color', cssColor);\n  }\n  var style = '';\n  if (cssColor) {\n    style += 'color: ' + cssColor + '; ';\n  }\n  return style;\n}\n\nexport function legacyBackgroundColor(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n\n  var cssBackgroundColor = '';\n  if (obj) {\n    var backgroundColorProperty = strings.lowercaseFirstLetter(propertyPrefix + 'BackgroundColor');\n    cssBackgroundColor = modelToCssColor(obj[backgroundColorProperty]);\n  }\n  if ($element) {\n    $element.css('background-color', cssBackgroundColor);\n  }\n  var style = '';\n  if (cssBackgroundColor) {\n    style += 'background-color: ' + cssBackgroundColor + '; ';\n  }\n  return style;\n}\n\nexport function legacyFont(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n\n  var cssFontWeight = '';\n  var cssFontStyle = '';\n  var cssFontSize = '';\n  var cssFontFamily = '';\n  if (obj) {\n    var fontProperty = strings.lowercaseFirstLetter(propertyPrefix + 'Font');\n    var fontSpec = parseFontSpec(obj[fontProperty]);\n    if (fontSpec.bold) {\n      cssFontWeight = 'bold';\n    }\n    if (fontSpec.italic) {\n      cssFontStyle = 'italic';\n    }\n    if (fontSpec.size) {\n      cssFontSize = fontSpec.size + 'pt';\n    }\n    if (fontSpec.name) {\n      cssFontFamily = fontSpec.name;\n    }\n  }\n  if ($element) {\n    $element\n      .css('font-weight', cssFontWeight)\n      .css('font-style', cssFontStyle)\n      .css('font-size', cssFontSize)\n      .css('font-family', cssFontFamily);\n  }\n  var style = '';\n  if (cssFontWeight) {\n    style += 'font-weight: ' + cssFontWeight + '; ';\n  }\n  if (cssFontStyle) {\n    style += 'font-style: ' + cssFontStyle + '; ';\n  }\n  if (cssFontSize) {\n    style += 'font-size: ' + cssFontSize + '; ';\n  }\n  if (cssFontFamily) {\n    style += 'font-family: ' + cssFontFamily + '; ';\n  }\n  return style;\n}\n\nexport function _getElement() {\n  return element;\n}\n\nexport default {\n  RGB_BLACK,\n  RGB_WHITE,\n  clearCache,\n  darkerColor,\n  get,\n  getSize,\n  legacyBackgroundColor,\n  legacyFont,\n  legacyForegroundColor,\n  legacyStyle,\n  lighterColor,\n  mergeRgbColors,\n  modelToCssColor,\n  parseFontSpec,\n  put,\n  rgb,\n  styleMap,\n  _getElement\n};\n"]},"metadata":{},"sourceType":"module"}