{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nvar LogicalGridLayoutConfig = /*#__PURE__*/function () {\n  function LogicalGridLayoutConfig(options) {\n    _classCallCheck(this, LogicalGridLayoutConfig);\n\n    this._extend(options);\n  }\n\n  _createClass(LogicalGridLayoutConfig, [{\n    key: \"_extend\",\n    value: function _extend(options) {\n      // -1 means use the UI defaults\n      options = options || {};\n\n      if (options.hgap > -1) {\n        this.hgap = options.hgap;\n      }\n\n      if (options.vgap > -1) {\n        this.vgap = options.vgap;\n      }\n\n      if (options.columnWidth > -1) {\n        this.columnWidth = options.columnWidth;\n      }\n\n      if (options.rowHeight > -1) {\n        this.rowHeight = options.rowHeight;\n      }\n\n      if (options.minWidth > -1) {\n        this.minWidth = options.minWidth;\n      }\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new LogicalGridLayoutConfig(this);\n    }\n  }, {\n    key: \"applyToLayout\",\n    value: function applyToLayout(layout) {\n      layout.layoutConfig = this;\n\n      if (this.hgap !== null && this.hgap !== undefined) {\n        layout.hgap = this.hgap;\n      }\n\n      if (this.vgap !== null && this.vgap !== undefined) {\n        layout.vgap = this.vgap;\n      }\n\n      if (this.columnWidth !== null && this.columnWidth !== undefined) {\n        layout.columnWidth = this.columnWidth;\n      }\n\n      if (this.rowHeight !== null && this.rowHeight !== undefined) {\n        layout.rowHeight = this.rowHeight;\n      }\n\n      if (this.minWidth !== null && this.minWidth !== undefined) {\n        layout.minWidth = this.minWidth;\n      }\n    }\n  }], [{\n    key: \"ensure\",\n    value: function ensure(layoutConfig) {\n      if (!layoutConfig) {\n        return layoutConfig;\n      }\n\n      if (layoutConfig instanceof LogicalGridLayoutConfig) {\n        return layoutConfig;\n      }\n\n      return new LogicalGridLayoutConfig(layoutConfig);\n    }\n  }]);\n\n  return LogicalGridLayoutConfig;\n}();\n\nexport { LogicalGridLayoutConfig as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/layout/logicalgrid/LogicalGridLayoutConfig.js"],"names":["LogicalGridLayoutConfig","options","_extend","hgap","vgap","columnWidth","rowHeight","minWidth","layout","layoutConfig","undefined"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,uB;AAEnB,mCAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKC,OAAL,CAAaD,OAAb;AACD;;;;4BAEOA,O,EAAS;AACf;AACAA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AACA,UAAIA,OAAO,CAACE,IAAR,GAAe,CAAC,CAApB,EAAuB;AACrB,aAAKA,IAAL,GAAYF,OAAO,CAACE,IAApB;AACD;;AACD,UAAIF,OAAO,CAACG,IAAR,GAAe,CAAC,CAApB,EAAuB;AACrB,aAAKA,IAAL,GAAYH,OAAO,CAACG,IAApB;AACD;;AACD,UAAIH,OAAO,CAACI,WAAR,GAAsB,CAAC,CAA3B,EAA8B;AAC5B,aAAKA,WAAL,GAAmBJ,OAAO,CAACI,WAA3B;AACD;;AACD,UAAIJ,OAAO,CAACK,SAAR,GAAoB,CAAC,CAAzB,EAA4B;AAC1B,aAAKA,SAAL,GAAiBL,OAAO,CAACK,SAAzB;AACD;;AACD,UAAIL,OAAO,CAACM,QAAR,GAAmB,CAAC,CAAxB,EAA2B;AACzB,aAAKA,QAAL,GAAgBN,OAAO,CAACM,QAAxB;AACD;AACF;;;4BAEO;AACN,aAAO,IAAIP,uBAAJ,CAA4B,IAA5B,CAAP;AACD;;;kCAEaQ,M,EAAQ;AACpBA,MAAAA,MAAM,CAACC,YAAP,GAAsB,IAAtB;;AACA,UAAI,KAAKN,IAAL,KAAc,IAAd,IAAsB,KAAKA,IAAL,KAAcO,SAAxC,EAAmD;AACjDF,QAAAA,MAAM,CAACL,IAAP,GAAc,KAAKA,IAAnB;AACD;;AACD,UAAI,KAAKC,IAAL,KAAc,IAAd,IAAsB,KAAKA,IAAL,KAAcM,SAAxC,EAAmD;AACjDF,QAAAA,MAAM,CAACJ,IAAP,GAAc,KAAKA,IAAnB;AACD;;AACD,UAAI,KAAKC,WAAL,KAAqB,IAArB,IAA6B,KAAKA,WAAL,KAAqBK,SAAtD,EAAiE;AAC/DF,QAAAA,MAAM,CAACH,WAAP,GAAqB,KAAKA,WAA1B;AACD;;AACD,UAAI,KAAKC,SAAL,KAAmB,IAAnB,IAA2B,KAAKA,SAAL,KAAmBI,SAAlD,EAA6D;AAC3DF,QAAAA,MAAM,CAACF,SAAP,GAAmB,KAAKA,SAAxB;AACD;;AACD,UAAI,KAAKC,QAAL,KAAkB,IAAlB,IAA0B,KAAKA,QAAL,KAAkBG,SAAhD,EAA2D;AACzDF,QAAAA,MAAM,CAACD,QAAP,GAAkB,KAAKA,QAAvB;AACD;AACF;;;2BAEaE,Y,EAAc;AAC1B,UAAI,CAACA,YAAL,EAAmB;AACjB,eAAOA,YAAP;AACD;;AACD,UAAIA,YAAY,YAAYT,uBAA5B,EAAqD;AACnD,eAAOS,YAAP;AACD;;AACD,aAAO,IAAIT,uBAAJ,CAA4BS,YAA5B,CAAP;AACD;;;;;;SAzDkBT,uB","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nexport default class LogicalGridLayoutConfig {\n\n  constructor(options) {\n    this._extend(options);\n  }\n\n  _extend(options) {\n    // -1 means use the UI defaults\n    options = options || {};\n    if (options.hgap > -1) {\n      this.hgap = options.hgap;\n    }\n    if (options.vgap > -1) {\n      this.vgap = options.vgap;\n    }\n    if (options.columnWidth > -1) {\n      this.columnWidth = options.columnWidth;\n    }\n    if (options.rowHeight > -1) {\n      this.rowHeight = options.rowHeight;\n    }\n    if (options.minWidth > -1) {\n      this.minWidth = options.minWidth;\n    }\n  }\n\n  clone() {\n    return new LogicalGridLayoutConfig(this);\n  }\n\n  applyToLayout(layout) {\n    layout.layoutConfig = this;\n    if (this.hgap !== null && this.hgap !== undefined) {\n      layout.hgap = this.hgap;\n    }\n    if (this.vgap !== null && this.vgap !== undefined) {\n      layout.vgap = this.vgap;\n    }\n    if (this.columnWidth !== null && this.columnWidth !== undefined) {\n      layout.columnWidth = this.columnWidth;\n    }\n    if (this.rowHeight !== null && this.rowHeight !== undefined) {\n      layout.rowHeight = this.rowHeight;\n    }\n    if (this.minWidth !== null && this.minWidth !== undefined) {\n      layout.minWidth = this.minWidth;\n    }\n  }\n\n  static ensure(layoutConfig) {\n    if (!layoutConfig) {\n      return layoutConfig;\n    }\n    if (layoutConfig instanceof LogicalGridLayoutConfig) {\n      return layoutConfig;\n    }\n    return new LogicalGridLayoutConfig(layoutConfig);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}