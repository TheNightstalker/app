{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, icons, MenuDestinations, scout } from '../index';\nimport $ from 'jquery';\nexport function filterAccordingToSelection(prefix, selectionLength, menus, destination, onlyVisible, enableDisableKeyStroke, notAllowedTypes) {\n  var allowedTypes = [];\n\n  if (destination === MenuDestinations.MENU_BAR) {\n    allowedTypes = [prefix + '.EmptySpace', prefix + '.SingleSelection', prefix + '.MultiSelection'];\n  } else if (destination === MenuDestinations.CONTEXT_MENU) {\n    allowedTypes = [prefix + '.SingleSelection', prefix + '.MultiSelection'];\n  } else if (destination === MenuDestinations.HEADER) {\n    allowedTypes = [prefix + '.Header'];\n  }\n\n  if (allowedTypes.indexOf(prefix + '.SingleSelection') > -1 && selectionLength !== 1) {\n    arrays.remove(allowedTypes, prefix + '.SingleSelection');\n  }\n\n  if (allowedTypes.indexOf(prefix + '.MultiSelection') > -1 && selectionLength <= 1) {\n    arrays.remove(allowedTypes, prefix + '.MultiSelection');\n  }\n\n  notAllowedTypes = arrays.ensure(notAllowedTypes);\n  var fixedNotAllowedTypes = []; // ensure prefix\n\n  prefix = prefix + '.';\n  notAllowedTypes.forEach(function (type) {\n    if (type.slice(0, prefix.length) !== prefix) {\n      type = prefix + type;\n    }\n\n    fixedNotAllowedTypes.push(type);\n  }, this);\n  return filter(menus, allowedTypes, onlyVisible, enableDisableKeyStroke, fixedNotAllowedTypes);\n}\n/**\n * Filters menus that don't match the given types, or in other words: only menus with the given types are returned\n * from this method. The visible state is only checked if the parameter onlyVisible is set to true. Otherwise invisible items are returned and added to the\n * menu-bar DOM (invisible, however). They may change their visible state later. If there are any types in notAllowedTypes each menu is checked also against\n * these types and if they are matching the menu is filtered.\n */\n\nexport function filter(menus, types, onlyVisible, enableDisableKeyStrokes, notAllowedTypes) {\n  if (!menus) {\n    return;\n  }\n\n  types = arrays.ensure(types);\n  notAllowedTypes = arrays.ensure(notAllowedTypes);\n  var filteredMenus = [],\n      separatorCount = 0;\n  menus.forEach(function (menu) {\n    var childMenus = menu.childActions;\n\n    if (childMenus.length > 0) {\n      childMenus = filter(childMenus, types, onlyVisible, enableDisableKeyStrokes, notAllowedTypes);\n\n      if (childMenus.length === 0) {\n        _enableDisableMenuKeyStroke(menu, enableDisableKeyStrokes, true);\n\n        return;\n      }\n    } else if (!_checkType(menu, types) || notAllowedTypes.length !== 0 && _checkType(menu, notAllowedTypes)) {\n      // Don't check the menu type for a group\n      _enableDisableMenuKeyStroke(menu, enableDisableKeyStrokes, true);\n\n      return;\n    }\n\n    if (onlyVisible && !menu.visible) {\n      _enableDisableMenuKeyStroke(menu, enableDisableKeyStrokes, true);\n\n      return;\n    }\n\n    if (menu.separator) {\n      separatorCount++;\n    }\n\n    _enableDisableMenuKeyStroke(menu, enableDisableKeyStrokes, false);\n\n    filteredMenus.push(menu);\n  }); // Ignore menus with only separators\n\n  if (separatorCount === filteredMenus.length) {\n    return [];\n  }\n\n  return filteredMenus;\n}\n/**\n * Makes leading, trailing and duplicate separators invisible or reverts the visibility change if needed.\n */\n\nexport function updateSeparatorVisibility(menus) {\n  menus = arrays.ensure(menus);\n  menus = menus.filter(function (menu) {\n    return menu.visible || menu.separator;\n  });\n\n  if (menus.length === 0) {\n    return;\n  }\n\n  var hasMenuBefore = false;\n  var hasMenuAfter = false;\n  menus.forEach(function (menu, i) {\n    if (menu.ellipsis) {\n      return;\n    }\n\n    if (!menu.separator) {\n      hasMenuBefore = true;\n      return;\n    }\n\n    hasMenuAfter = menus[i + 1] && !menus[i + 1].separator && !menus[i + 1].ellipsis; // If the separator has a separator next to it, make it invisible\n\n    if (!hasMenuBefore || !hasMenuAfter) {\n      if (menu.visibleOrig === undefined) {\n        menu.visibleOrig = menu.visible;\n        menu.setVisible(false);\n      }\n    } else if (menu.visibleOrig !== undefined) {\n      // Revert to original state\n      menu.setVisible(menu.visibleOrig);\n      menu.visibleOrig = undefined;\n    }\n  });\n}\nexport function checkType(menu, types) {\n  types = arrays.ensure(types);\n\n  if (menu.childActions.length > 0) {\n    var childMenus = filter(menu.childActions, types);\n    return childMenus.length > 0;\n  }\n\n  return _checkType(menu, types);\n}\nexport function _enableDisableMenuKeyStroke(menu, activated, exclude) {\n  if (activated) {\n    menu.excludedByFilter = exclude;\n  }\n}\n/**\n * Checks the type of a menu. Don't use this for menu groups.\n */\n\nexport function _checkType(menu, types) {\n  if (!types || types.length === 0) {\n    return false;\n  }\n\n  if (!menu.menuTypes) {\n    return false;\n  }\n\n  for (var j = 0; j < types.length; j++) {\n    if (menu.menuTypes.indexOf(types[j]) > -1) {\n      return true;\n    }\n  }\n}\nexport function createEllipsisMenu(options) {\n  var defaults = {\n    iconId: icons.ELLIPSIS_V,\n    tabbable: false\n  };\n  options = $.extend({}, defaults, options);\n  return scout.create('Menu', options);\n}\nexport function moveMenuIntoEllipsis(menu, ellipsis) {\n  menu.remove();\n  menu.overflow = true;\n  menu.overflowMenu = ellipsis;\n  var menusInEllipsis = ellipsis.childActions.slice();\n  menusInEllipsis.unshift(menu); // add as first element\n\n  ellipsis.setChildActions(menusInEllipsis);\n}\nexport function removeMenuFromEllipsis(menu, $parent) {\n  menu.overflow = false;\n  menu.overflowMenu = null;\n\n  if (!menu.rendered) {\n    menu.render($parent);\n  }\n}\nexport default {\n  checkType: checkType,\n  createEllipsisMenu: createEllipsisMenu,\n  filter: filter,\n  filterAccordingToSelection: filterAccordingToSelection,\n  moveMenuIntoEllipsis: moveMenuIntoEllipsis,\n  removeMenuFromEllipsis: removeMenuFromEllipsis,\n  updateSeparatorVisibility: updateSeparatorVisibility\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/menu/menus.js"],"names":["arrays","icons","MenuDestinations","scout","$","filterAccordingToSelection","prefix","selectionLength","menus","destination","onlyVisible","enableDisableKeyStroke","notAllowedTypes","allowedTypes","MENU_BAR","CONTEXT_MENU","HEADER","indexOf","remove","ensure","fixedNotAllowedTypes","forEach","type","slice","length","push","filter","types","enableDisableKeyStrokes","filteredMenus","separatorCount","menu","childMenus","childActions","_enableDisableMenuKeyStroke","_checkType","visible","separator","updateSeparatorVisibility","hasMenuBefore","hasMenuAfter","i","ellipsis","visibleOrig","undefined","setVisible","checkType","activated","exclude","excludedByFilter","menuTypes","j","createEllipsisMenu","options","defaults","iconId","ELLIPSIS_V","tabbable","extend","create","moveMenuIntoEllipsis","overflow","overflowMenu","menusInEllipsis","unshift","setChildActions","removeMenuFromEllipsis","$parent","rendered","render"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, icons, MenuDestinations, scout} from '../index';\nimport $ from 'jquery';\n\nexport function filterAccordingToSelection(prefix, selectionLength, menus, destination, onlyVisible, enableDisableKeyStroke, notAllowedTypes) {\n  var allowedTypes = [];\n\n  if (destination === MenuDestinations.MENU_BAR) {\n    allowedTypes = [prefix + '.EmptySpace', prefix + '.SingleSelection', prefix + '.MultiSelection'];\n  } else if (destination === MenuDestinations.CONTEXT_MENU) {\n    allowedTypes = [prefix + '.SingleSelection', prefix + '.MultiSelection'];\n  } else if (destination === MenuDestinations.HEADER) {\n    allowedTypes = [prefix + '.Header'];\n  }\n\n  if (allowedTypes.indexOf(prefix + '.SingleSelection') > -1 && selectionLength !== 1) {\n    arrays.remove(allowedTypes, prefix + '.SingleSelection');\n  }\n  if (allowedTypes.indexOf(prefix + '.MultiSelection') > -1 && selectionLength <= 1) {\n    arrays.remove(allowedTypes, prefix + '.MultiSelection');\n  }\n  notAllowedTypes = arrays.ensure(notAllowedTypes);\n  var fixedNotAllowedTypes = [];\n  // ensure prefix\n  prefix = prefix + '.';\n  notAllowedTypes.forEach(function(type) {\n    if (type.slice(0, prefix.length) !== prefix) {\n      type = prefix + type;\n    }\n    fixedNotAllowedTypes.push(type);\n  }, this);\n  return filter(menus, allowedTypes, onlyVisible, enableDisableKeyStroke, fixedNotAllowedTypes);\n}\n\n/**\n * Filters menus that don't match the given types, or in other words: only menus with the given types are returned\n * from this method. The visible state is only checked if the parameter onlyVisible is set to true. Otherwise invisible items are returned and added to the\n * menu-bar DOM (invisible, however). They may change their visible state later. If there are any types in notAllowedTypes each menu is checked also against\n * these types and if they are matching the menu is filtered.\n */\nexport function filter(menus, types, onlyVisible, enableDisableKeyStrokes, notAllowedTypes) {\n  if (!menus) {\n    return;\n  }\n  types = arrays.ensure(types);\n  notAllowedTypes = arrays.ensure(notAllowedTypes);\n\n  var filteredMenus = [],\n    separatorCount = 0;\n\n  menus.forEach(function(menu) {\n    var childMenus = menu.childActions;\n    if (childMenus.length > 0) {\n      childMenus = filter(childMenus, types, onlyVisible, enableDisableKeyStrokes, notAllowedTypes);\n      if (childMenus.length === 0) {\n        _enableDisableMenuKeyStroke(menu, enableDisableKeyStrokes, true);\n        return;\n      }\n    } else if (!_checkType(menu, types) || (notAllowedTypes.length !== 0 && _checkType(menu, notAllowedTypes))) {\n      // Don't check the menu type for a group\n      _enableDisableMenuKeyStroke(menu, enableDisableKeyStrokes, true);\n      return;\n    }\n\n    if (onlyVisible && !menu.visible) {\n      _enableDisableMenuKeyStroke(menu, enableDisableKeyStrokes, true);\n      return;\n    }\n    if (menu.separator) {\n      separatorCount++;\n    }\n    _enableDisableMenuKeyStroke(menu, enableDisableKeyStrokes, false);\n    filteredMenus.push(menu);\n  });\n\n  // Ignore menus with only separators\n  if (separatorCount === filteredMenus.length) {\n    return [];\n  }\n  return filteredMenus;\n}\n\n/**\n * Makes leading, trailing and duplicate separators invisible or reverts the visibility change if needed.\n */\nexport function updateSeparatorVisibility(menus) {\n  menus = arrays.ensure(menus);\n\n  menus = menus.filter(function(menu) {\n    return menu.visible || menu.separator;\n  });\n\n  if (menus.length === 0) {\n    return;\n  }\n\n  var hasMenuBefore = false;\n  var hasMenuAfter = false;\n  menus.forEach(function(menu, i) {\n    if (menu.ellipsis) {\n      return;\n    }\n    if (!menu.separator) {\n      hasMenuBefore = true;\n      return;\n    }\n    hasMenuAfter = menus[i + 1] && !menus[i + 1].separator && !menus[i + 1].ellipsis;\n\n    // If the separator has a separator next to it, make it invisible\n    if (!hasMenuBefore || !hasMenuAfter) {\n      if (menu.visibleOrig === undefined) {\n        menu.visibleOrig = menu.visible;\n        menu.setVisible(false);\n      }\n    } else if (menu.visibleOrig !== undefined) {\n      // Revert to original state\n      menu.setVisible(menu.visibleOrig);\n      menu.visibleOrig = undefined;\n    }\n  });\n}\n\nexport function checkType(menu, types) {\n  types = arrays.ensure(types);\n  if (menu.childActions.length > 0) {\n    var childMenus = filter(menu.childActions, types);\n    return (childMenus.length > 0);\n  }\n  return _checkType(menu, types);\n}\n\nexport function _enableDisableMenuKeyStroke(menu, activated, exclude) {\n  if (activated) {\n    menu.excludedByFilter = exclude;\n  }\n}\n\n/**\n * Checks the type of a menu. Don't use this for menu groups.\n */\n\nexport function _checkType(menu, types) {\n  if (!types || types.length === 0) {\n    return false;\n  }\n  if (!menu.menuTypes) {\n    return false;\n  }\n  for (var j = 0; j < types.length; j++) {\n    if (menu.menuTypes.indexOf(types[j]) > -1) {\n      return true;\n    }\n  }\n}\n\nexport function createEllipsisMenu(options) {\n  var defaults = {\n    iconId: icons.ELLIPSIS_V,\n    tabbable: false\n  };\n  options = $.extend({}, defaults, options);\n  return scout.create('Menu', options);\n}\n\nexport function moveMenuIntoEllipsis(menu, ellipsis) {\n  menu.remove();\n  menu.overflow = true;\n  menu.overflowMenu = ellipsis;\n\n  var menusInEllipsis = ellipsis.childActions.slice();\n  menusInEllipsis.unshift(menu); // add as first element\n  ellipsis.setChildActions(menusInEllipsis);\n}\n\nexport function removeMenuFromEllipsis(menu, $parent) {\n  menu.overflow = false;\n  menu.overflowMenu = null;\n  if (!menu.rendered) {\n    menu.render($parent);\n  }\n}\n\nexport default {\n  checkType,\n  createEllipsisMenu,\n  filter,\n  filterAccordingToSelection,\n  moveMenuIntoEllipsis,\n  removeMenuFromEllipsis,\n  updateSeparatorVisibility\n};\n"]},"metadata":{},"sourceType":"module"}