{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, DesktopNavigation, Dimension, ResponsiveManager, Tree } from '../index';\n\nvar DesktopLayout = /*#__PURE__*/function (_AbstractLayout) {\n  _inherits(DesktopLayout, _AbstractLayout);\n\n  var _super = _createSuper(DesktopLayout);\n\n  function DesktopLayout(desktop) {\n    var _this;\n\n    _classCallCheck(this, DesktopLayout);\n\n    _this = _super.call(this);\n    _this.desktop = desktop;\n    return _this;\n  }\n\n  _createClass(DesktopLayout, [{\n    key: \"layout\",\n    value: function layout($container) {\n      var navigationSize,\n          headerSize,\n          htmlHeader,\n          htmlBench,\n          benchSize,\n          htmlNavigation,\n          animationProps,\n          navigationWidth = 0,\n          headerHeight = 0,\n          desktop = this.desktop,\n          navigation = desktop.navigation,\n          header = desktop.header,\n          bench = desktop.bench,\n          // Animation moves header and bench to the left when navigation gets invisible or moves bench to the right if bench gets invisible (used for mobile)\n      animated = desktop.animateLayoutChange,\n          containerSize = this.containerSize(),\n          fullWidthNavigation = navigation && navigation.htmlComp.layoutData.fullWidth;\n      ResponsiveManager.get().handleResponsive(desktop, $container.width());\n\n      if (navigation) {\n        navigationWidth = this.calculateNavigationWidth(containerSize);\n\n        if (desktop.splitter) {\n          desktop.splitter.setPosition(navigationWidth);\n        }\n\n        if (desktop.navigationVisible) {\n          htmlNavigation = navigation.htmlComp;\n          navigationSize = new Dimension(navigationWidth, containerSize.height).subtract(htmlNavigation.margins());\n          htmlNavigation.setSize(navigationSize);\n        }\n      }\n\n      if (header) {\n        htmlHeader = header.htmlComp;\n        headerHeight = htmlHeader.$comp.outerHeight(true);\n\n        if (desktop.headerVisible) {\n          // positioning\n          if (!animated) {\n            header.$container.cssLeft(navigationWidth);\n          } // sizing\n\n\n          headerSize = new Dimension(containerSize.width - navigationWidth, headerHeight).subtract(htmlHeader.margins());\n\n          if (!animated || fullWidthNavigation) {\n            htmlHeader.setSize(headerSize);\n          }\n\n          if (animated) {\n            animationProps = {\n              left: containerSize.width\n            };\n            prepareAnimate(animationProps, htmlHeader, headerSize);\n\n            this._animate(animationProps, htmlHeader, headerSize);\n          }\n        }\n      }\n\n      if (bench) {\n        htmlBench = bench.htmlComp;\n\n        if (desktop.benchVisible) {\n          // positioning\n          bench.$container.cssTop(headerHeight);\n\n          if (!animated) {\n            bench.$container.cssLeft(navigationWidth);\n          } // sizing\n\n\n          benchSize = new Dimension(containerSize.width - navigationWidth, containerSize.height - headerHeight).subtract(htmlBench.margins());\n\n          if (!animated || fullWidthNavigation) {\n            var oldSize = htmlBench.size();\n            htmlBench.setSize(benchSize);\n\n            if (!htmlBench.size().equals(oldSize)) {\n              desktop.repositionTooltips();\n            }\n          }\n\n          if (animated) {\n            animationProps = {\n              left: containerSize.width\n            };\n            prepareAnimate(animationProps, htmlBench, benchSize);\n\n            this._animate(animationProps, htmlBench, benchSize);\n          }\n        }\n      }\n\n      function prepareAnimate(animationProps, htmlComp, size) {\n        if (fullWidthNavigation) {\n          // Slide bench in from right to left, don't resize\n          htmlComp.$comp.cssLeft(containerSize.width);\n        } else {\n          // Resize bench\n          animationProps.width = size.width; // Layout once before animation begins\n          // Resizing on every step/progress would result in poor performance (e.g. when a form is open in the bench)\n\n          htmlComp.setSize(size);\n        } // Move to new point (=0, if navigation is invisible)\n\n\n        animationProps.left = navigationWidth;\n      }\n    }\n    /**\n     * Used to animate bench and header\n     */\n\n  }, {\n    key: \"_animate\",\n    value: function _animate(animationProps, htmlComp, size) {\n      // If animation is already running, stop the existing and don't use timeout to schedule the new to have a smoother transition\n      // Concurrent animation of the same element is bad because jquery messes up the overflow style\n      if (htmlComp.$comp.is(':animated')) {\n        animate.call(this);\n      } else {\n        // schedule animation to have a smoother start\n        setTimeout(animate.bind(this));\n      }\n\n      function animate() {\n        htmlComp.$comp.stop().animate(animationProps, {\n          complete: this.desktop.onLayoutAnimationComplete.bind(this.desktop),\n          step: this.desktop.onLayoutAnimationStep.bind(this.desktop)\n        });\n      }\n    }\n  }, {\n    key: \"containerSize\",\n    value: function containerSize() {\n      var htmlContainer = this.desktop.htmlComp,\n          containerSize = htmlContainer.availableSize({\n        exact: true\n      });\n      return containerSize.subtract(htmlContainer.insets());\n    }\n  }, {\n    key: \"calculateNavigationWidth\",\n    value: function calculateNavigationWidth(containerSize) {\n      if (!this.desktop.navigationVisible) {\n        return 0;\n      }\n\n      var navigationLayoutData = this.desktop.navigation.htmlComp.layoutData;\n\n      if (navigationLayoutData.fullWidth) {\n        return containerSize.width;\n      }\n\n      var splitterPosition = 0;\n\n      if (this.desktop.splitter) {\n        splitterPosition = this.desktop.splitter.position;\n      }\n\n      var outline = this.desktop.outline;\n\n      if (!this.desktop.resizing && outline && outline.toggleBreadcrumbStyleEnabled) {\n        // If toggleBreadcrumbStyleEnabled is true, BREADCRUMB_STYLE_WIDTH triggers the toggling between the two modes.\n        // This code ensures this rule is never violated (necessary if mode is toggled programmatically rather than by the user)\n        if (outline.displayStyle === Tree.DisplayStyle.BREADCRUMB) {\n          splitterPosition = DesktopNavigation.BREADCRUMB_STYLE_WIDTH;\n        } else if (Math.floor(splitterPosition) <= DesktopNavigation.BREADCRUMB_STYLE_WIDTH) {\n          splitterPosition = DesktopNavigation.DEFAULT_STYLE_WIDTH;\n        }\n      }\n\n      return Math.max(splitterPosition, DesktopNavigation.MIN_WIDTH); // ensure newSize is not negative\n    }\n  }]);\n\n  return DesktopLayout;\n}(AbstractLayout);\n\nexport { DesktopLayout as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/DesktopLayout.js"],"names":["AbstractLayout","DesktopNavigation","Dimension","ResponsiveManager","Tree","DesktopLayout","desktop","$container","navigationSize","headerSize","htmlHeader","htmlBench","benchSize","htmlNavigation","animationProps","navigationWidth","headerHeight","navigation","header","bench","animated","animateLayoutChange","containerSize","fullWidthNavigation","htmlComp","layoutData","fullWidth","get","handleResponsive","width","calculateNavigationWidth","splitter","setPosition","navigationVisible","height","subtract","margins","setSize","$comp","outerHeight","headerVisible","cssLeft","left","prepareAnimate","_animate","benchVisible","cssTop","oldSize","size","equals","repositionTooltips","is","animate","call","setTimeout","bind","stop","complete","onLayoutAnimationComplete","step","onLayoutAnimationStep","htmlContainer","availableSize","exact","insets","navigationLayoutData","splitterPosition","position","outline","resizing","toggleBreadcrumbStyleEnabled","displayStyle","DisplayStyle","BREADCRUMB","BREADCRUMB_STYLE_WIDTH","Math","floor","DEFAULT_STYLE_WIDTH","max","MIN_WIDTH"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, DesktopNavigation, Dimension, ResponsiveManager, Tree} from '../index';\n\nexport default class DesktopLayout extends AbstractLayout {\n\n  constructor(desktop) {\n    super();\n    this.desktop = desktop;\n  }\n\n  layout($container) {\n    var navigationSize, headerSize, htmlHeader, htmlBench, benchSize, htmlNavigation, animationProps,\n      navigationWidth = 0,\n      headerHeight = 0,\n      desktop = this.desktop,\n      navigation = desktop.navigation,\n      header = desktop.header,\n      bench = desktop.bench,\n      // Animation moves header and bench to the left when navigation gets invisible or moves bench to the right if bench gets invisible (used for mobile)\n      animated = desktop.animateLayoutChange,\n      containerSize = this.containerSize(),\n      fullWidthNavigation = navigation && navigation.htmlComp.layoutData.fullWidth;\n\n    ResponsiveManager.get().handleResponsive(desktop, $container.width());\n\n    if (navigation) {\n      navigationWidth = this.calculateNavigationWidth(containerSize);\n      if (desktop.splitter) {\n        desktop.splitter.setPosition(navigationWidth);\n      }\n\n      if (desktop.navigationVisible) {\n        htmlNavigation = navigation.htmlComp;\n        navigationSize = new Dimension(navigationWidth, containerSize.height)\n          .subtract(htmlNavigation.margins());\n        htmlNavigation.setSize(navigationSize);\n      }\n    }\n\n    if (header) {\n      htmlHeader = header.htmlComp;\n      headerHeight = htmlHeader.$comp.outerHeight(true);\n      if (desktop.headerVisible) {\n        // positioning\n        if (!animated) {\n          header.$container.cssLeft(navigationWidth);\n        }\n\n        // sizing\n        headerSize = new Dimension(containerSize.width - navigationWidth, headerHeight)\n          .subtract(htmlHeader.margins());\n        if (!animated || fullWidthNavigation) {\n          htmlHeader.setSize(headerSize);\n        }\n\n        if (animated) {\n          animationProps = {\n            left: containerSize.width\n          };\n          prepareAnimate(animationProps, htmlHeader, headerSize);\n          this._animate(animationProps, htmlHeader, headerSize);\n        }\n      }\n    }\n\n    if (bench) {\n      htmlBench = bench.htmlComp;\n      if (desktop.benchVisible) {\n        // positioning\n        bench.$container.cssTop(headerHeight);\n        if (!animated) {\n          bench.$container.cssLeft(navigationWidth);\n        }\n\n        // sizing\n        benchSize = new Dimension(containerSize.width - navigationWidth, containerSize.height - headerHeight)\n          .subtract(htmlBench.margins());\n        if (!animated || fullWidthNavigation) {\n          let oldSize = htmlBench.size();\n          htmlBench.setSize(benchSize);\n          if (!htmlBench.size().equals(oldSize)) {\n            desktop.repositionTooltips();\n          }\n        }\n\n        if (animated) {\n          animationProps = {\n            left: containerSize.width\n          };\n          prepareAnimate(animationProps, htmlBench, benchSize);\n          this._animate(animationProps, htmlBench, benchSize);\n        }\n      }\n    }\n\n    function prepareAnimate(animationProps, htmlComp, size) {\n      if (fullWidthNavigation) {\n        // Slide bench in from right to left, don't resize\n        htmlComp.$comp.cssLeft(containerSize.width);\n      } else {\n        // Resize bench\n        animationProps.width = size.width;\n        // Layout once before animation begins\n        // Resizing on every step/progress would result in poor performance (e.g. when a form is open in the bench)\n        htmlComp.setSize(size);\n      }\n      // Move to new point (=0, if navigation is invisible)\n      animationProps.left = navigationWidth;\n    }\n  }\n\n  /**\n   * Used to animate bench and header\n   */\n  _animate(animationProps, htmlComp, size) {\n    // If animation is already running, stop the existing and don't use timeout to schedule the new to have a smoother transition\n    // Concurrent animation of the same element is bad because jquery messes up the overflow style\n    if (htmlComp.$comp.is(':animated')) {\n      animate.call(this);\n    } else {\n      // schedule animation to have a smoother start\n      setTimeout(animate.bind(this));\n    }\n\n    function animate() {\n      htmlComp.$comp.stop().animate(animationProps, {\n        complete: this.desktop.onLayoutAnimationComplete.bind(this.desktop),\n        step: this.desktop.onLayoutAnimationStep.bind(this.desktop)\n      });\n    }\n  }\n\n  containerSize() {\n    var htmlContainer = this.desktop.htmlComp,\n      containerSize = htmlContainer.availableSize({\n        exact: true\n      });\n\n    return containerSize.subtract(htmlContainer.insets());\n  }\n\n  calculateNavigationWidth(containerSize) {\n    if (!this.desktop.navigationVisible) {\n      return 0;\n    }\n    var navigationLayoutData = this.desktop.navigation.htmlComp.layoutData;\n    if (navigationLayoutData.fullWidth) {\n      return containerSize.width;\n    }\n    var splitterPosition = 0;\n    if (this.desktop.splitter) {\n      splitterPosition = this.desktop.splitter.position;\n    }\n    var outline = this.desktop.outline;\n    if (!this.desktop.resizing && outline && outline.toggleBreadcrumbStyleEnabled) {\n      // If toggleBreadcrumbStyleEnabled is true, BREADCRUMB_STYLE_WIDTH triggers the toggling between the two modes.\n      // This code ensures this rule is never violated (necessary if mode is toggled programmatically rather than by the user)\n      if (outline.displayStyle === Tree.DisplayStyle.BREADCRUMB) {\n        splitterPosition = DesktopNavigation.BREADCRUMB_STYLE_WIDTH;\n      } else if (Math.floor(splitterPosition) <= DesktopNavigation.BREADCRUMB_STYLE_WIDTH) {\n        splitterPosition = DesktopNavigation.DEFAULT_STYLE_WIDTH;\n      }\n    }\n    return Math.max(splitterPosition, DesktopNavigation.MIN_WIDTH); // ensure newSize is not negative\n  }\n}\n"]},"metadata":{},"sourceType":"module"}