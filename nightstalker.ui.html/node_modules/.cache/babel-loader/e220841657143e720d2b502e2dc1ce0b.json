{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { scout } from './index';\n/**\n * This class is used to extend an existing Scout object. In order to use the extension feature\n * you must subclass Extension an implement an init method where you register the methods\n * you want to extend. Example:\n *\n * scout.MyExtension.prototype.init = function() {\n *   this.extend(scout.MyStringField.prototype, '_init');\n *   this.extend(scout.MyStringField.prototype, '_renderProperties');\n * };\n *\n * Then you implement methods with the same name and signature on the extension class. Example:\n *\n * scout.MyExtension.prototype._init = function(model) {\n *   this.next(model);\n *   this.extended.setProperty('bar', 'foo');\n * };\n *\n * The extension feature sets two properties on the extension instance before the extended method\n * is called. Note: the function scope (this) is set to the extension instance when the extended\n * function is called:\n *\n *   next: is a reference to the next extended function or the original function of the extended\n *         object, in case the current extension is the last extension in the extension chain.\n *\n *   extended: is the extended or original object.\n */\n\nvar Extension = /*#__PURE__*/function () {\n  function Extension() {\n    _classCallCheck(this, Extension);\n  }\n\n  _createClass(Extension, [{\n    key: \"extend\",\n    value: function extend(extended, funcName) {\n      var origFunc = extended[funcName];\n      var extension = this;\n\n      var wrapper = function wrapper() {\n        extension.extended = this;\n        extension.next = origFunc.bind(this);\n        return extension[funcName].apply(extension, arguments);\n      };\n\n      extended[funcName] = wrapper;\n    }\n    /**\n     * Calls scout.create for each extension class in the given extensions array.\n     *\n     * @param extensions an Array of strings containing extension class names\n     * @static\n     */\n\n  }], [{\n    key: \"install\",\n    value: function install(extensions) {\n      extensions.forEach(function (ext) {\n        scout.create(ext);\n      });\n    }\n  }]);\n\n  return Extension;\n}();\n\nexport { Extension as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/Extension.js"],"names":["scout","Extension","extended","funcName","origFunc","extension","wrapper","next","bind","apply","arguments","extensions","forEach","ext","create"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,KAAR,QAAoB,SAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,S;;;;;;;2BAEZC,Q,EAAUC,Q,EAAU;AACzB,UAAIC,QAAQ,GAAGF,QAAQ,CAACC,QAAD,CAAvB;AACA,UAAIE,SAAS,GAAG,IAAhB;;AACA,UAAIC,OAAO,GAAG,SAAVA,OAAU,GAAW;AACvBD,QAAAA,SAAS,CAACH,QAAV,GAAqB,IAArB;AACAG,QAAAA,SAAS,CAACE,IAAV,GAAiBH,QAAQ,CAACI,IAAT,CAAc,IAAd,CAAjB;AACA,eAAOH,SAAS,CAACF,QAAD,CAAT,CAAoBM,KAApB,CAA0BJ,SAA1B,EAAqCK,SAArC,CAAP;AACD,OAJD;;AAKAR,MAAAA,QAAQ,CAACC,QAAD,CAAR,GAAqBG,OAArB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;4BACiBK,U,EAAY;AACzBA,MAAAA,UAAU,CAACC,OAAX,CAAmB,UAASC,GAAT,EAAc;AAC/Bb,QAAAA,KAAK,CAACc,MAAN,CAAaD,GAAb;AACD,OAFD;AAGD;;;;;;SAvBkBZ,S","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {scout} from './index';\n\n/**\n * This class is used to extend an existing Scout object. In order to use the extension feature\n * you must subclass Extension an implement an init method where you register the methods\n * you want to extend. Example:\n *\n * scout.MyExtension.prototype.init = function() {\n *   this.extend(scout.MyStringField.prototype, '_init');\n *   this.extend(scout.MyStringField.prototype, '_renderProperties');\n * };\n *\n * Then you implement methods with the same name and signature on the extension class. Example:\n *\n * scout.MyExtension.prototype._init = function(model) {\n *   this.next(model);\n *   this.extended.setProperty('bar', 'foo');\n * };\n *\n * The extension feature sets two properties on the extension instance before the extended method\n * is called. Note: the function scope (this) is set to the extension instance when the extended\n * function is called:\n *\n *   next: is a reference to the next extended function or the original function of the extended\n *         object, in case the current extension is the last extension in the extension chain.\n *\n *   extended: is the extended or original object.\n */\nexport default class Extension {\n\n  extend(extended, funcName) {\n    var origFunc = extended[funcName];\n    var extension = this;\n    var wrapper = function() {\n      extension.extended = this;\n      extension.next = origFunc.bind(this);\n      return extension[funcName].apply(extension, arguments);\n    };\n    extended[funcName] = wrapper;\n  }\n\n  /**\n   * Calls scout.create for each extension class in the given extensions array.\n   *\n   * @param extensions an Array of strings containing extension class names\n   * @static\n   */\n  static install(extensions) {\n    extensions.forEach(function(ext) {\n      scout.create(ext);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}