{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects, scout } from '../index';\n\nvar LoadingSupport = /*#__PURE__*/function () {\n  /**\n   * @param {object} options a mandatory options object\n   * @param {Widget} options.widget Widget that created the loading support\n   * @param {$|function} [options.$container] jQuery element that will be used for the loading visualization.\n   *  It may be a function to resolve the container later when the loading state will be visualized.\n   *  If this property is not set the $container of the widget is used by default.\n   * @param {number} [options.loadingIndicatorDelay] if not set: 250 ms\n   */\n  function LoadingSupport(options) {\n    _classCallCheck(this, LoadingSupport);\n\n    scout.assertParameter('widget', options.widget);\n    this.widget = options.widget;\n    this.options$Container = options.$container;\n    this.loadingIndicatorDelay = scout.nvl(options.loadingIndicatorDelay, 250); // ms\n\n    this._$loadingIndicator = null;\n    this._loadingIndicatorTimeoutId = null;\n  }\n\n  _createClass(LoadingSupport, [{\n    key: \"setLoadingIndicatorDelay\",\n    value: function setLoadingIndicatorDelay(loadingIndicatorDelay) {\n      this.loadingIndicatorDelay = loadingIndicatorDelay;\n    }\n  }, {\n    key: \"_ensure$Container\",\n    value: function _ensure$Container() {\n      if (objects.isFunction(this.options$Container)) {\n        // resolve function provided by options.$container that returns a jQuery element\n        this.$container = this.options$Container();\n      } else if (this.options$Container) {\n        // use jQuery element provided by options.$container\n        this.$container = this.options$Container;\n      } else {\n        // default: when no options.$container is not set, use jQuery element of widget\n        this.$container = this.widget.$container;\n      }\n    }\n  }, {\n    key: \"renderLoading\",\n    value: function renderLoading() {\n      // Clear any pending loading function\n      clearTimeout(this._loadingIndicatorTimeoutId);\n\n      this._ensure$Container();\n\n      if (this.widget.isLoading()) {\n        // add loading indicator\n        if (this.loadingIndicatorDelay && !this.widget.rendering) {\n          this._loadingIndicatorTimeoutId = setTimeout(this._renderLoadingIndicator.bind(this), this.loadingIndicatorDelay);\n        } else {\n          this._renderLoadingIndicator();\n        }\n      } else {\n        // remove loading indicator\n        this._removeLoadingIndicator();\n      }\n    }\n  }, {\n    key: \"_renderLoadingIndicator\",\n    value: function _renderLoadingIndicator() {\n      if (this._$loadingIndicator || !this.widget.rendered && !this.widget.rendering) {\n        return;\n      } // Hide widget content\n\n\n      this.$container.addClass('loading'); // Create loading indicator\n\n      this._$loadingIndicator = this.$container.appendDiv('loading-indicator');\n    }\n  }, {\n    key: \"_removeLoadingIndicator\",\n    value: function _removeLoadingIndicator() {\n      if (!this._$loadingIndicator) {\n        return;\n      }\n\n      this._$loadingIndicator.fadeOutAndRemove(function () {\n        this._$loadingIndicator = null;\n\n        if (this.widget.rendered) {\n          // Show widget's content (layout if necessary)\n          this.$container.removeClass('loading');\n          this.widget.invalidateLayoutTree();\n        }\n      }.bind(this));\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this._$loadingIndicator) {\n        this._$loadingIndicator.remove();\n\n        this._$loadingIndicator = null;\n      }\n    }\n  }]);\n\n  return LoadingSupport;\n}();\n\nexport { LoadingSupport as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/widget/LoadingSupport.js"],"names":["objects","scout","LoadingSupport","options","assertParameter","widget","options$Container","$container","loadingIndicatorDelay","nvl","_$loadingIndicator","_loadingIndicatorTimeoutId","isFunction","clearTimeout","_ensure$Container","isLoading","rendering","setTimeout","_renderLoadingIndicator","bind","_removeLoadingIndicator","rendered","addClass","appendDiv","fadeOutAndRemove","removeClass","invalidateLayoutTree","remove"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,OAAR,EAAiBC,KAAjB,QAA6B,UAA7B;;IAEqBC,c;AAEnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,0BAAYC,OAAZ,EAAqB;AAAA;;AACnBF,IAAAA,KAAK,CAACG,eAAN,CAAsB,QAAtB,EAAgCD,OAAO,CAACE,MAAxC;AAEA,SAAKA,MAAL,GAAcF,OAAO,CAACE,MAAtB;AACA,SAAKC,iBAAL,GAAyBH,OAAO,CAACI,UAAjC;AACA,SAAKC,qBAAL,GAA6BP,KAAK,CAACQ,GAAN,CAAUN,OAAO,CAACK,qBAAlB,EAAyC,GAAzC,CAA7B,CALmB,CAKyD;;AAE5E,SAAKE,kBAAL,GAA0B,IAA1B;AACA,SAAKC,0BAAL,GAAkC,IAAlC;AACD;;;;6CAEwBH,qB,EAAuB;AAC9C,WAAKA,qBAAL,GAA6BA,qBAA7B;AACD;;;wCAEmB;AAClB,UAAIR,OAAO,CAACY,UAAR,CAAmB,KAAKN,iBAAxB,CAAJ,EAAgD;AAC9C;AACA,aAAKC,UAAL,GAAkB,KAAKD,iBAAL,EAAlB;AACD,OAHD,MAGO,IAAI,KAAKA,iBAAT,EAA4B;AACjC;AACA,aAAKC,UAAL,GAAkB,KAAKD,iBAAvB;AACD,OAHM,MAGA;AACL;AACA,aAAKC,UAAL,GAAkB,KAAKF,MAAL,CAAYE,UAA9B;AACD;AACF;;;oCAEe;AACd;AACAM,MAAAA,YAAY,CAAC,KAAKF,0BAAN,CAAZ;;AACA,WAAKG,iBAAL;;AAEA,UAAI,KAAKT,MAAL,CAAYU,SAAZ,EAAJ,EAA6B;AAC3B;AACA,YAAI,KAAKP,qBAAL,IAA8B,CAAC,KAAKH,MAAL,CAAYW,SAA/C,EAA0D;AACxD,eAAKL,0BAAL,GAAkCM,UAAU,CAC1C,KAAKC,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAD0C,EACD,KAAKX,qBADJ,CAA5C;AAED,SAHD,MAGO;AACL,eAAKU,uBAAL;AACD;AACF,OARD,MAQO;AACL;AACA,aAAKE,uBAAL;AACD;AACF;;;8CAEyB;AACxB,UAAI,KAAKV,kBAAL,IAA2B,CAAC,KAAKL,MAAL,CAAYgB,QAAb,IAAyB,CAAC,KAAKhB,MAAL,CAAYW,SAArE,EAAgF;AAC9E;AACD,OAHuB,CAKxB;;;AACA,WAAKT,UAAL,CAAgBe,QAAhB,CAAyB,SAAzB,EANwB,CAOxB;;AACA,WAAKZ,kBAAL,GAA0B,KAAKH,UAAL,CAAgBgB,SAAhB,CAA0B,mBAA1B,CAA1B;AACD;;;8CAEyB;AACxB,UAAI,CAAC,KAAKb,kBAAV,EAA8B;AAC5B;AACD;;AAED,WAAKA,kBAAL,CAAwBc,gBAAxB,CAAyC,YAAW;AAClD,aAAKd,kBAAL,GAA0B,IAA1B;;AACA,YAAI,KAAKL,MAAL,CAAYgB,QAAhB,EAA0B;AACxB;AACA,eAAKd,UAAL,CAAgBkB,WAAhB,CAA4B,SAA5B;AACA,eAAKpB,MAAL,CAAYqB,oBAAZ;AACD;AACF,OAPwC,CAOvCP,IAPuC,CAOlC,IAPkC,CAAzC;AAQD;;;6BAEQ;AACP,UAAI,KAAKT,kBAAT,EAA6B;AAC3B,aAAKA,kBAAL,CAAwBiB,MAAxB;;AACA,aAAKjB,kBAAL,GAA0B,IAA1B;AACD;AACF;;;;;;SAxFkBR,c","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects, scout} from '../index';\n\nexport default class LoadingSupport {\n\n  /**\n   * @param {object} options a mandatory options object\n   * @param {Widget} options.widget Widget that created the loading support\n   * @param {$|function} [options.$container] jQuery element that will be used for the loading visualization.\n   *  It may be a function to resolve the container later when the loading state will be visualized.\n   *  If this property is not set the $container of the widget is used by default.\n   * @param {number} [options.loadingIndicatorDelay] if not set: 250 ms\n   */\n  constructor(options) {\n    scout.assertParameter('widget', options.widget);\n\n    this.widget = options.widget;\n    this.options$Container = options.$container;\n    this.loadingIndicatorDelay = scout.nvl(options.loadingIndicatorDelay, 250); // ms\n\n    this._$loadingIndicator = null;\n    this._loadingIndicatorTimeoutId = null;\n  }\n\n  setLoadingIndicatorDelay(loadingIndicatorDelay) {\n    this.loadingIndicatorDelay = loadingIndicatorDelay;\n  }\n\n  _ensure$Container() {\n    if (objects.isFunction(this.options$Container)) {\n      // resolve function provided by options.$container that returns a jQuery element\n      this.$container = this.options$Container();\n    } else if (this.options$Container) {\n      // use jQuery element provided by options.$container\n      this.$container = this.options$Container;\n    } else {\n      // default: when no options.$container is not set, use jQuery element of widget\n      this.$container = this.widget.$container;\n    }\n  }\n\n  renderLoading() {\n    // Clear any pending loading function\n    clearTimeout(this._loadingIndicatorTimeoutId);\n    this._ensure$Container();\n\n    if (this.widget.isLoading()) {\n      // add loading indicator\n      if (this.loadingIndicatorDelay && !this.widget.rendering) {\n        this._loadingIndicatorTimeoutId = setTimeout(\n          this._renderLoadingIndicator.bind(this), this.loadingIndicatorDelay);\n      } else {\n        this._renderLoadingIndicator();\n      }\n    } else {\n      // remove loading indicator\n      this._removeLoadingIndicator();\n    }\n  }\n\n  _renderLoadingIndicator() {\n    if (this._$loadingIndicator || !this.widget.rendered && !this.widget.rendering) {\n      return;\n    }\n\n    // Hide widget content\n    this.$container.addClass('loading');\n    // Create loading indicator\n    this._$loadingIndicator = this.$container.appendDiv('loading-indicator');\n  }\n\n  _removeLoadingIndicator() {\n    if (!this._$loadingIndicator) {\n      return;\n    }\n\n    this._$loadingIndicator.fadeOutAndRemove(function() {\n      this._$loadingIndicator = null;\n      if (this.widget.rendered) {\n        // Show widget's content (layout if necessary)\n        this.$container.removeClass('loading');\n        this.widget.invalidateLayoutTree();\n      }\n    }.bind(this));\n  }\n\n  remove() {\n    if (this._$loadingIndicator) {\n      this._$loadingIndicator.remove();\n      this._$loadingIndicator = null;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}