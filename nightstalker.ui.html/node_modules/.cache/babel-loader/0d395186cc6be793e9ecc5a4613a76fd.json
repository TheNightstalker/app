{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Column, comparators, DateFormat, dates, scout } from '../../index';\n\nvar DateColumn = /*#__PURE__*/function (_Column) {\n  _inherits(DateColumn, _Column);\n\n  var _super = _createSuper(DateColumn);\n\n  function DateColumn() {\n    var _this;\n\n    _classCallCheck(this, DateColumn);\n\n    _this = _super.call(this);\n    _this.format;\n    _this.groupFormat = 'yyyy';\n    _this.hasDate = true;\n    _this.hasTime = false;\n    _this.filterType = 'DateColumnUserFilter';\n    _this.comparator = comparators.NUMERIC;\n    _this.textBased = false;\n    return _this;\n  }\n\n  _createClass(DateColumn, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(DateColumn.prototype), \"_init\", this).call(this, model);\n\n      this._setFormat(this.format);\n\n      this._setGroupFormat(this.groupFormat);\n    }\n  }, {\n    key: \"setFormat\",\n    value: function setFormat(format) {\n      if (this.format === format) {\n        return;\n      }\n\n      this._setFormat(format);\n\n      if (this.initialized) {\n        // if format changes on the fly, just update the cell text\n        this.table.rows.forEach(function (row) {\n          this._updateCellText(row, this.cell(row));\n        }.bind(this));\n      }\n    }\n  }, {\n    key: \"_setFormat\",\n    value: function _setFormat(format) {\n      if (!format) {\n        format = this._getDefaultFormat(this.session.locale);\n      }\n\n      format = DateFormat.ensure(this.session.locale, format);\n      this.format = format;\n    }\n  }, {\n    key: \"setGroupFormat\",\n    value: function setGroupFormat(format) {\n      if (this.groupFormat === format) {\n        return;\n      }\n\n      this._setGroupFormat(format);\n\n      if (this.initialized) {\n        // if format changes on the fly, just update the cell text\n        this.table.rows.forEach(function (row) {\n          this._updateCellText(row, this.cell(row));\n        }.bind(this));\n      }\n    }\n  }, {\n    key: \"_setGroupFormat\",\n    value: function _setGroupFormat(format) {\n      if (!format) {\n        format = this._getDefaultFormat(this.session.locale);\n      }\n\n      format = DateFormat.ensure(this.session.locale, format);\n      this.groupFormat = format;\n    }\n    /**\n     * @override Columns.js\n     */\n\n  }, {\n    key: \"_formatValue\",\n    value: function _formatValue(value) {\n      return this.format.format(value);\n    }\n    /**\n     * @override Columns.js\n     */\n\n  }, {\n    key: \"_parseValue\",\n    value: function _parseValue(text) {\n      return dates.ensure(text);\n    }\n  }, {\n    key: \"_getDefaultFormat\",\n    value: function _getDefaultFormat(locale) {\n      if (this.hasDate && this.hasTime) {\n        return locale.dateFormatPatternDefault + ' ' + locale.timeFormatPatternDefault;\n      }\n\n      if (this.hasDate) {\n        return locale.dateFormatPatternDefault;\n      }\n\n      return locale.timeFormatPatternDefault;\n    }\n  }, {\n    key: \"cellTextForGrouping\",\n    value: function cellTextForGrouping(row) {\n      var val = this.table.cellValue(this, row);\n      return this.groupFormat.format(val);\n    }\n    /**\n     * @override Column.js\n     */\n\n  }, {\n    key: \"_createEditor\",\n    value: function _createEditor() {\n      return scout.create('DateField', {\n        parent: this.table,\n        hasDate: this.hasDate,\n        hasTime: this.hasTime\n      });\n    }\n  }]);\n\n  return DateColumn;\n}(Column);\n\nexport { DateColumn as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/table/columns/DateColumn.js"],"names":["Column","comparators","DateFormat","dates","scout","DateColumn","format","groupFormat","hasDate","hasTime","filterType","comparator","NUMERIC","textBased","model","_setFormat","_setGroupFormat","initialized","table","rows","forEach","row","_updateCellText","cell","bind","_getDefaultFormat","session","locale","ensure","value","text","dateFormatPatternDefault","timeFormatPatternDefault","val","cellValue","create","parent"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Column, comparators, DateFormat, dates, scout} from '../../index';\n\nexport default class DateColumn extends Column {\n\n  constructor() {\n    super();\n    this.format;\n    this.groupFormat = 'yyyy';\n    this.hasDate = true;\n    this.hasTime = false;\n    this.filterType = 'DateColumnUserFilter';\n    this.comparator = comparators.NUMERIC;\n    this.textBased = false;\n  }\n\n  _init(model) {\n    super._init(model);\n\n    this._setFormat(this.format);\n    this._setGroupFormat(this.groupFormat);\n  }\n\n  setFormat(format) {\n    if (this.format === format) {\n      return;\n    }\n    this._setFormat(format);\n    if (this.initialized) {\n      // if format changes on the fly, just update the cell text\n      this.table.rows.forEach(function(row) {\n        this._updateCellText(row, this.cell(row));\n      }.bind(this));\n    }\n  }\n\n  _setFormat(format) {\n    if (!format) {\n      format = this._getDefaultFormat(this.session.locale);\n    }\n    format = DateFormat.ensure(this.session.locale, format);\n    this.format = format;\n  }\n\n  setGroupFormat(format) {\n    if (this.groupFormat === format) {\n      return;\n    }\n    this._setGroupFormat(format);\n    if (this.initialized) {\n      // if format changes on the fly, just update the cell text\n      this.table.rows.forEach(function(row) {\n        this._updateCellText(row, this.cell(row));\n      }.bind(this));\n    }\n  }\n\n  _setGroupFormat(format) {\n    if (!format) {\n      format = this._getDefaultFormat(this.session.locale);\n    }\n    format = DateFormat.ensure(this.session.locale, format);\n    this.groupFormat = format;\n  }\n\n  /**\n   * @override Columns.js\n   */\n  _formatValue(value) {\n    return this.format.format(value);\n  }\n\n  /**\n   * @override Columns.js\n   */\n  _parseValue(text) {\n    return dates.ensure(text);\n  }\n\n  _getDefaultFormat(locale) {\n    if (this.hasDate && this.hasTime) {\n      return locale.dateFormatPatternDefault + ' ' + locale.timeFormatPatternDefault;\n    }\n    if (this.hasDate) {\n      return locale.dateFormatPatternDefault;\n    }\n    return locale.timeFormatPatternDefault;\n  }\n\n  cellTextForGrouping(row) {\n    var val = this.table.cellValue(this, row);\n    return this.groupFormat.format(val);\n  }\n\n  /**\n   * @override Column.js\n   */\n  _createEditor() {\n    return scout.create('DateField', {\n      parent: this.table,\n      hasDate: this.hasDate,\n      hasTime: this.hasTime\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}