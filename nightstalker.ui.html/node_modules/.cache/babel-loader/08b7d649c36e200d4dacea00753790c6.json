{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { LogicalGridConfig, scout } from '../../index';\n/**\n * Base class for every logical grid. The concrete grids should implement {@link #_validate}.\n */\n\nvar LogicalGrid = /*#__PURE__*/function () {\n  function LogicalGrid(options) {\n    _classCallCheck(this, LogicalGrid);\n\n    options = options || {};\n    this.dirty = true;\n    this.gridConfig = options.gridConfig || null;\n\n    this._setGridConfig(this.gridConfig);\n  }\n\n  _createClass(LogicalGrid, [{\n    key: \"setDirty\",\n    value: function setDirty(dirty) {\n      this.dirty = dirty;\n    }\n  }, {\n    key: \"setGridConfig\",\n    value: function setGridConfig(gridConfig) {\n      this._setGridConfig(gridConfig);\n    }\n  }, {\n    key: \"_setGridConfig\",\n    value: function _setGridConfig(gridConfig) {\n      if (gridConfig && !(gridConfig instanceof LogicalGridConfig)) {\n        gridConfig = scout.create('LogicalGridConfig', gridConfig);\n      }\n\n      this.gridConfig = gridConfig;\n    }\n    /**\n     * Calls {@link #_validate} if the grid is dirty. Sets dirty to false afterwards.\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate(gridContainer) {\n      if (!this.dirty) {\n        return;\n      }\n\n      this._validate(gridContainer);\n\n      this.setDirty(false);\n    }\n  }]);\n\n  return LogicalGrid;\n}();\n\nexport { LogicalGrid as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/layout/logicalgrid/LogicalGrid.js"],"names":["LogicalGridConfig","scout","LogicalGrid","options","dirty","gridConfig","_setGridConfig","create","gridContainer","_validate","setDirty"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,iBAAR,EAA2BC,KAA3B,QAAuC,aAAvC;AAEA;AACA;AACA;;IACqBC,W;AAEnB,uBAAYC,OAAZ,EAAqB;AAAA;;AACnBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,UAAL,GAAkBF,OAAO,CAACE,UAAR,IAAsB,IAAxC;;AACA,SAAKC,cAAL,CAAoB,KAAKD,UAAzB;AACD;;;;6BAEQD,K,EAAO;AACd,WAAKA,KAAL,GAAaA,KAAb;AACD;;;kCAEaC,U,EAAY;AACxB,WAAKC,cAAL,CAAoBD,UAApB;AACD;;;mCAEcA,U,EAAY;AACzB,UAAIA,UAAU,IAAI,EAAEA,UAAU,YAAYL,iBAAxB,CAAlB,EAA8D;AAC5DK,QAAAA,UAAU,GAAGJ,KAAK,CAACM,MAAN,CAAa,mBAAb,EAAkCF,UAAlC,CAAb;AACD;;AACD,WAAKA,UAAL,GAAkBA,UAAlB;AACD;AAED;AACF;AACA;;;;6BACWG,a,EAAe;AACtB,UAAI,CAAC,KAAKJ,KAAV,EAAiB;AACf;AACD;;AACD,WAAKK,SAAL,CAAeD,aAAf;;AACA,WAAKE,QAAL,CAAc,KAAd;AACD;;;;;;SAjCkBR,W","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {LogicalGridConfig, scout} from '../../index';\n\n/**\n * Base class for every logical grid. The concrete grids should implement {@link #_validate}.\n */\nexport default class LogicalGrid {\n\n  constructor(options) {\n    options = options || {};\n    this.dirty = true;\n    this.gridConfig = options.gridConfig || null;\n    this._setGridConfig(this.gridConfig);\n  }\n\n  setDirty(dirty) {\n    this.dirty = dirty;\n  }\n\n  setGridConfig(gridConfig) {\n    this._setGridConfig(gridConfig);\n  }\n\n  _setGridConfig(gridConfig) {\n    if (gridConfig && !(gridConfig instanceof LogicalGridConfig)) {\n      gridConfig = scout.create('LogicalGridConfig', gridConfig);\n    }\n    this.gridConfig = gridConfig;\n  }\n\n  /**\n   * Calls {@link #_validate} if the grid is dirty. Sets dirty to false afterwards.\n   */\n  validate(gridContainer) {\n    if (!this.dirty) {\n      return;\n    }\n    this._validate(gridContainer);\n    this.setDirty(false);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}