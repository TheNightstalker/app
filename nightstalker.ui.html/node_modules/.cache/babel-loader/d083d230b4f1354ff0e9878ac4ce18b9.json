{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { App, scout } from '../index';\nvar instance;\n\nvar ResponsiveManager = /*#__PURE__*/function () {\n  function ResponsiveManager() {\n    _classCallCheck(this, ResponsiveManager);\n\n    this.active = true;\n    this.globalState = null;\n    this._responsiveHandlers = [];\n  }\n\n  _createClass(ResponsiveManager, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._responsiveHandlers.forEach(function (handler) {\n        handler.destroy();\n      });\n    }\n    /**\n     * Sets the responsive manager to active or inactive globally. Default is active.\n     */\n\n  }, {\n    key: \"setActive\",\n    value: function setActive(active) {\n      this.active = active;\n    }\n    /**\n     * Set a global responsive state. This state will always be set. Resizing will no longer result in a different responsive state.\n     *\n     * @param {string} responsive state (ResponsiveManager.ResponsiveState)\n     */\n\n  }, {\n    key: \"setGlobalState\",\n    value: function setGlobalState(globalState) {\n      this.globalState = globalState;\n    }\n    /**\n     * Checks if the form is smaller than the preferred width of the form. If this is reached, the fields will\n     * be transformed to ensure better readability.\n     */\n\n  }, {\n    key: \"handleResponsive\",\n    value: function handleResponsive(target, width) {\n      if (!this.active) {\n        return false;\n      }\n\n      if (!target.responsiveHandler || !target.responsiveHandler.active()) {\n        return false;\n      }\n\n      var newState;\n      var state = target.responsiveHandler.state;\n\n      if (this.globalState) {\n        newState = this.globalState;\n      } else if (width < target.responsiveHandler.getCompactThreshold() && target.responsiveHandler.acceptState(ResponsiveManager.ResponsiveState.COMPACT)) {\n        newState = ResponsiveManager.ResponsiveState.COMPACT;\n      } else {\n        if (state === ResponsiveManager.ResponsiveState.COMPACT) {\n          target.responsiveHandler.transform(ResponsiveManager.ResponsiveState.CONDENSED);\n        }\n\n        if (width < target.responsiveHandler.getCondensedThreshold() && target.responsiveHandler.acceptState(ResponsiveManager.ResponsiveState.CONDENSED)) {\n          newState = ResponsiveManager.ResponsiveState.CONDENSED;\n        } else {\n          newState = ResponsiveManager.ResponsiveState.NORMAL;\n        }\n      }\n\n      return target.responsiveHandler.transform(newState);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(target, force) {\n      if (!this.active) {\n        return;\n      }\n\n      if ((!target.responsiveHandler || !target.responsiveHandler.active()) && !force) {\n        return false;\n      }\n\n      target.responsiveHandler.transform(ResponsiveManager.ResponsiveState.NORMAL, force);\n    }\n  }, {\n    key: \"registerHandler\",\n    value: function registerHandler(target, handler) {\n      if (target.responsiveHandler) {\n        target.responsiveHandler.destroy();\n      }\n\n      target.responsiveHandler = handler;\n    }\n  }, {\n    key: \"unregisterHandler\",\n    value: function unregisterHandler(target) {\n      if (target.responsiveHandler) {\n        target.responsiveHandler.destroy();\n        target.responsiveHandler = null;\n      }\n    }\n  }], [{\n    key: \"get\",\n    value: function get() {\n      return instance;\n    }\n  }]);\n\n  return ResponsiveManager;\n}();\n\n_defineProperty(ResponsiveManager, \"ResponsiveState\", {\n  NORMAL: 'normal',\n  CONDENSED: 'condensed',\n  COMPACT: 'compact'\n});\n\nexport { ResponsiveManager as default };\nApp.addListener('prepare', function () {\n  if (instance) {\n    // if it was created before the app itself, use it instead of creating a new one\n    return;\n  }\n\n  instance = scout.create('ResponsiveManager');\n  instance.init();\n});","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/ResponsiveManager.js"],"names":["App","scout","instance","ResponsiveManager","active","globalState","_responsiveHandlers","forEach","handler","destroy","target","width","responsiveHandler","newState","state","getCompactThreshold","acceptState","ResponsiveState","COMPACT","transform","CONDENSED","getCondensedThreshold","NORMAL","force","addListener","create","init"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {App, scout} from '../index';\n\nlet instance;\nexport default class ResponsiveManager {\n\n  constructor() {\n    this.active = true;\n    this.globalState = null;\n\n    this._responsiveHandlers = [];\n  }\n\n  static ResponsiveState = {\n    NORMAL: 'normal',\n    CONDENSED: 'condensed',\n    COMPACT: 'compact'\n  };\n\n  init() {\n  }\n\n  destroy() {\n    this._responsiveHandlers.forEach(function(handler) {\n      handler.destroy();\n    });\n  }\n\n  /**\n   * Sets the responsive manager to active or inactive globally. Default is active.\n   */\n  setActive(active) {\n    this.active = active;\n  }\n\n  /**\n   * Set a global responsive state. This state will always be set. Resizing will no longer result in a different responsive state.\n   *\n   * @param {string} responsive state (ResponsiveManager.ResponsiveState)\n   */\n  setGlobalState(globalState) {\n    this.globalState = globalState;\n  }\n\n  /**\n   * Checks if the form is smaller than the preferred width of the form. If this is reached, the fields will\n   * be transformed to ensure better readability.\n   */\n  handleResponsive(target, width) {\n    if (!this.active) {\n      return false;\n    }\n\n    if (!target.responsiveHandler || !target.responsiveHandler.active()) {\n      return false;\n    }\n\n    var newState;\n    var state = target.responsiveHandler.state;\n    if (this.globalState) {\n      newState = this.globalState;\n    } else if (width < target.responsiveHandler.getCompactThreshold() && target.responsiveHandler.acceptState(ResponsiveManager.ResponsiveState.COMPACT)) {\n      newState = ResponsiveManager.ResponsiveState.COMPACT;\n    } else {\n      if (state === ResponsiveManager.ResponsiveState.COMPACT) {\n        target.responsiveHandler.transform(ResponsiveManager.ResponsiveState.CONDENSED);\n      }\n      if (width < target.responsiveHandler.getCondensedThreshold() && target.responsiveHandler.acceptState(ResponsiveManager.ResponsiveState.CONDENSED)) {\n        newState = ResponsiveManager.ResponsiveState.CONDENSED;\n      } else {\n        newState = ResponsiveManager.ResponsiveState.NORMAL;\n      }\n    }\n\n    return target.responsiveHandler.transform(newState);\n  }\n\n  reset(target, force) {\n    if (!this.active) {\n      return;\n    }\n\n    if ((!target.responsiveHandler || !target.responsiveHandler.active()) && !force) {\n      return false;\n    }\n\n    target.responsiveHandler.transform(ResponsiveManager.ResponsiveState.NORMAL, force);\n  }\n\n  registerHandler(target, handler) {\n    if (target.responsiveHandler) {\n      target.responsiveHandler.destroy();\n    }\n    target.responsiveHandler = handler;\n  }\n\n  unregisterHandler(target) {\n    if (target.responsiveHandler) {\n      target.responsiveHandler.destroy();\n      target.responsiveHandler = null;\n    }\n  }\n\n  static get() {\n    return instance;\n  }\n}\n\nApp.addListener('prepare', function() {\n  if (instance) {\n    // if it was created before the app itself, use it instead of creating a new one\n    return;\n  }\n  instance = scout.create('ResponsiveManager');\n  instance.init();\n});\n"]},"metadata":{},"sourceType":"module"}