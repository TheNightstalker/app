{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport $ from 'jquery';\n/**\n * Utility methods for focus.\n */\n\n/**\n * @return {boolean} whether the given element is focusable by mouse.\n */\n\nexport function isFocusableByMouse(element) {\n  var $element = $(element);\n  return !$element.hasClass('unfocusable') && !$element.closest('.unfocusable').length;\n}\n/**\n * @return whether the given element has a parent which is focusable by mouse.\n */\n\nexport function containsParentFocusableByMouse(element, entryPoint) {\n  var $focusableParentElements = $(element).parents(':focusable').not(entryPoint)\n  /* Exclude $entryPoint as all elements are its descendants. However, the $entryPoint is only focusable to provide Portlet support. */\n  .filter(function () {\n    return isFocusableByMouse(this);\n  });\n  return $focusableParentElements.length > 0;\n}\n/**\n * @return whether the given element contains content which is selectable to the user, e.g. to be copied into clipboard.\n * It also returns true for disabled text-fields, because the user must be able to select and copy text from these text-fields.\n */\n\nexport function isSelectableText(element) {\n  var $element = $(element); // Find closest element which has a 'user-select' with a value other than 'auto'. If that value\n  // is 'none', the text is not selectable. This code mimics the \"inheritance behavior\" of the CSS\n  // property \"-moz-user-select: -moz-none\" as described in [1].  This does not seem to work in some\n  // cases in Firefox, even with bug [2] fixed. As a workaround, we implement the desired behavior here.\n  //\n  // Note: Some additional CSS rules are required for events other than 'mousedown', see main.css.\n  //\n  // [1] https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\n  // [2] https://bugzilla.mozilla.org/show_bug.cgi?id=648624\n\n  var $el = $element;\n\n  while ($el.css('user-select') === 'auto') {\n    $el = $el.parent(); // Fix for Firefox: parent of BODY element is HtmlDocument. When calling $el.css on the HtmlDocument\n    // Firefox throws an error that ownerDocument is undefined. Thus we don't go higher than BODY element\n    // and assume body is never selectable.\n\n    if ($el.is('body')) {\n      return false;\n    }\n  }\n\n  if ($el.css('user-select') === 'none') {\n    return false;\n  }\n\n  if ($element.is('input[disabled][type=text], textarea[disabled]')) {\n    return true;\n  } // When element or its children have text, it should be selectable.\n  // The old implementation only looked at the text of the element itself\n  // but not at the text of its children. With the old approach it was not\n  // possible to select something inside of a TD, for instance:\n  //   <td><span>Foo</span></td>\n  // Because TD itself has no text at all.\n  // When an element has no text we return false, because if we could select\n  // empty elements, we'd loose focus more often.\n\n\n  return $element.text().trim().length > 0;\n}\n/**\n * Returns true if the given HTML element is the active element in its own document, false otherwise\n * @param element\n */\n\nexport function isActiveElement(element) {\n  if (!element) {\n    return false;\n  }\n\n  var activeElement;\n\n  if (element instanceof $) {\n    activeElement = element.activeElement(true);\n    element = element[0];\n  } else {\n    activeElement = (element instanceof Document ? element : element.ownerDocument).activeElement;\n  }\n\n  return activeElement === element;\n}\nexport default {\n  containsParentFocusableByMouse: containsParentFocusableByMouse,\n  isActiveElement: isActiveElement,\n  isFocusableByMouse: isFocusableByMouse,\n  isSelectableText: isSelectableText\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/focus/focusUtils.js"],"names":["$","isFocusableByMouse","element","$element","hasClass","closest","length","containsParentFocusableByMouse","entryPoint","$focusableParentElements","parents","not","filter","isSelectableText","$el","css","parent","is","text","trim","isActiveElement","activeElement","Document","ownerDocument"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAP,MAAc,QAAd;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;AAC1C,MAAIC,QAAQ,GAAGH,CAAC,CAACE,OAAD,CAAhB;AACA,SAAO,CAACC,QAAQ,CAACC,QAAT,CAAkB,aAAlB,CAAD,IAAqC,CAACD,QAAQ,CAACE,OAAT,CAAiB,cAAjB,EAAiCC,MAA9E;AACD;AAED;AACA;AACA;;AACA,OAAO,SAASC,8BAAT,CAAwCL,OAAxC,EAAiDM,UAAjD,EAA6D;AAClE,MAAIC,wBAAwB,GAAGT,CAAC,CAACE,OAAD,CAAD,CAC5BQ,OAD4B,CACpB,YADoB,EAE5BC,GAF4B,CAExBH,UAFwB;AAEZ;AAFY,GAG5BI,MAH4B,CAGrB,YAAW;AACjB,WAAOX,kBAAkB,CAAC,IAAD,CAAzB;AACD,GAL4B,CAA/B;AAMA,SAAQQ,wBAAwB,CAACH,MAAzB,GAAkC,CAA1C;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASO,gBAAT,CAA0BX,OAA1B,EAAmC;AACxC,MAAIC,QAAQ,GAAGH,CAAC,CAACE,OAAD,CAAhB,CADwC,CAGxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIY,GAAG,GAAGX,QAAV;;AACA,SAAOW,GAAG,CAACC,GAAJ,CAAQ,aAAR,MAA2B,MAAlC,EAA0C;AACxCD,IAAAA,GAAG,GAAGA,GAAG,CAACE,MAAJ,EAAN,CADwC,CAExC;AACA;AACA;;AACA,QAAIF,GAAG,CAACG,EAAJ,CAAO,MAAP,CAAJ,EAAoB;AAClB,aAAO,KAAP;AACD;AACF;;AACD,MAAIH,GAAG,CAACC,GAAJ,CAAQ,aAAR,MAA2B,MAA/B,EAAuC;AACrC,WAAO,KAAP;AACD;;AAED,MAAIZ,QAAQ,CAACc,EAAT,CAAY,gDAAZ,CAAJ,EAAmE;AACjE,WAAO,IAAP;AACD,GA5BuC,CA6BxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAOd,QAAQ,CAACe,IAAT,GAAgBC,IAAhB,GAAuBb,MAAvB,GAAgC,CAAvC;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASc,eAAT,CAAyBlB,OAAzB,EAAkC;AACvC,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,KAAP;AACD;;AACD,MAAImB,aAAJ;;AACA,MAAInB,OAAO,YAAYF,CAAvB,EAA0B;AACxBqB,IAAAA,aAAa,GAAGnB,OAAO,CAACmB,aAAR,CAAsB,IAAtB,CAAhB;AACAnB,IAAAA,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAjB;AACD,GAHD,MAGO;AACLmB,IAAAA,aAAa,GAAG,CAACnB,OAAO,YAAYoB,QAAnB,GAA8BpB,OAA9B,GAAwCA,OAAO,CAACqB,aAAjD,EAAgEF,aAAhF;AACD;;AACD,SAAOA,aAAa,KAAKnB,OAAzB;AACD;AAED,eAAe;AACbK,EAAAA,8BAA8B,EAA9BA,8BADa;AAEba,EAAAA,eAAe,EAAfA,eAFa;AAGbnB,EAAAA,kBAAkB,EAAlBA,kBAHa;AAIbY,EAAAA,gBAAgB,EAAhBA;AAJa,CAAf","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport $ from 'jquery';\n\n/**\n * Utility methods for focus.\n */\n\n/**\n * @return {boolean} whether the given element is focusable by mouse.\n */\nexport function isFocusableByMouse(element) {\n  var $element = $(element);\n  return !$element.hasClass('unfocusable') && !$element.closest('.unfocusable').length;\n}\n\n/**\n * @return whether the given element has a parent which is focusable by mouse.\n */\nexport function containsParentFocusableByMouse(element, entryPoint) {\n  var $focusableParentElements = $(element)\n    .parents(':focusable')\n    .not(entryPoint) /* Exclude $entryPoint as all elements are its descendants. However, the $entryPoint is only focusable to provide Portlet support. */\n    .filter(function() {\n      return isFocusableByMouse(this);\n    });\n  return ($focusableParentElements.length > 0);\n}\n\n/**\n * @return whether the given element contains content which is selectable to the user, e.g. to be copied into clipboard.\n * It also returns true for disabled text-fields, because the user must be able to select and copy text from these text-fields.\n */\nexport function isSelectableText(element) {\n  var $element = $(element);\n\n  // Find closest element which has a 'user-select' with a value other than 'auto'. If that value\n  // is 'none', the text is not selectable. This code mimics the \"inheritance behavior\" of the CSS\n  // property \"-moz-user-select: -moz-none\" as described in [1].  This does not seem to work in some\n  // cases in Firefox, even with bug [2] fixed. As a workaround, we implement the desired behavior here.\n  //\n  // Note: Some additional CSS rules are required for events other than 'mousedown', see main.css.\n  //\n  // [1] https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\n  // [2] https://bugzilla.mozilla.org/show_bug.cgi?id=648624\n  var $el = $element;\n  while ($el.css('user-select') === 'auto') {\n    $el = $el.parent();\n    // Fix for Firefox: parent of BODY element is HtmlDocument. When calling $el.css on the HtmlDocument\n    // Firefox throws an error that ownerDocument is undefined. Thus we don't go higher than BODY element\n    // and assume body is never selectable.\n    if ($el.is('body')) {\n      return false;\n    }\n  }\n  if ($el.css('user-select') === 'none') {\n    return false;\n  }\n\n  if ($element.is('input[disabled][type=text], textarea[disabled]')) {\n    return true;\n  }\n  // When element or its children have text, it should be selectable.\n  // The old implementation only looked at the text of the element itself\n  // but not at the text of its children. With the old approach it was not\n  // possible to select something inside of a TD, for instance:\n  //   <td><span>Foo</span></td>\n  // Because TD itself has no text at all.\n  // When an element has no text we return false, because if we could select\n  // empty elements, we'd loose focus more often.\n  return $element.text().trim().length > 0;\n}\n\n/**\n * Returns true if the given HTML element is the active element in its own document, false otherwise\n * @param element\n */\nexport function isActiveElement(element) {\n  if (!element) {\n    return false;\n  }\n  var activeElement;\n  if (element instanceof $) {\n    activeElement = element.activeElement(true);\n    element = element[0];\n  } else {\n    activeElement = (element instanceof Document ? element : element.ownerDocument).activeElement;\n  }\n  return activeElement === element;\n}\n\nexport default {\n  containsParentFocusableByMouse,\n  isActiveElement,\n  isFocusableByMouse,\n  isSelectableText\n};\n"]},"metadata":{},"sourceType":"module"}