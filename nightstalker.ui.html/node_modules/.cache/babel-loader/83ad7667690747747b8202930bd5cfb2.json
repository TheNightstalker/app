{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { LookupCall, objects, scout } from '../index';\nimport $ from 'jquery';\n\nvar HierarchicalLookupResultBuilder = /*#__PURE__*/function () {\n  function HierarchicalLookupResultBuilder(lookupCall) {\n    _classCallCheck(this, HierarchicalLookupResultBuilder);\n\n    scout.assertParameter('lookupCall', lookupCall);\n    this.lookupCall = lookupCall;\n    this._lookupRowMap = {};\n  }\n  /**\n   * Load all parent nodes of the given lookup rows up to the root.\n   *\n   * @returns {Promise} a promise resolved to an array of {LookupRow}s\n   */\n\n\n  _createClass(HierarchicalLookupResultBuilder, [{\n    key: \"addParentLookupRows\",\n    value: function addParentLookupRows(lookupRows) {\n      this._fillMap(lookupRows);\n\n      var promises = lookupRows.map(this._addParent.bind(this));\n      return $.promiseAll(promises).then(function () {\n        return objects.values(this._lookupRowMap);\n      }.bind(this));\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_addParent\",\n    value: function _addParent(lookupRow) {\n      var key = lookupRow.parentKey;\n\n      if (!key) {\n        return $.resolvedPromise();\n      } // parent already exists in map\n\n\n      if (this._lookupRowMap.hasOwnProperty(key)) {\n        lookupRow = this._lookupRowMap[key];\n        return this._addParent(lookupRow);\n      } // load parent and add it to the map\n\n\n      return this.lookupCall.cloneForKey(key).execute().then(function (result) {\n        var lookupRow = LookupCall.firstLookupRow(result);\n        this._lookupRowMap[lookupRow.key] = lookupRow;\n        return this._addParent(lookupRow);\n      }.bind(this));\n    }\n  }, {\n    key: \"_fillMap\",\n    value: function _fillMap(lookupRows) {\n      lookupRows.forEach(function (lookupRow) {\n        this._lookupRowMap[lookupRow.key] = lookupRow;\n      }.bind(this));\n    }\n    /**\n     * Load all parent child of the given lookup rows.\n     *\n     * @returns {Promise} a promise resolved to an array of {LookupRow}s\n     */\n\n  }, {\n    key: \"addChildLookupRows\",\n    value: function addChildLookupRows(lookupRows) {\n      this._fillMap(lookupRows);\n\n      var promises = lookupRows.map(this._addChildren.bind(this));\n      return $.promiseAll(promises).then(function () {\n        return objects.values(this._lookupRowMap);\n      }.bind(this));\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_addChildren\",\n    value: function _addChildren(lookupRow) {\n      return this.lookupCall.cloneForRec(lookupRow.key).execute().then(function (result) {\n        if (result.lookupRows.length) {\n          return this.addChildLookupRows(result.lookupRows);\n        }\n      }.bind(this));\n    }\n  }]);\n\n  return HierarchicalLookupResultBuilder;\n}();\n\nexport { HierarchicalLookupResultBuilder as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/lookup/HierarchicalLookupResultBuilder.js"],"names":["LookupCall","objects","scout","$","HierarchicalLookupResultBuilder","lookupCall","assertParameter","_lookupRowMap","lookupRows","_fillMap","promises","map","_addParent","bind","promiseAll","then","values","lookupRow","key","parentKey","resolvedPromise","hasOwnProperty","cloneForKey","execute","result","firstLookupRow","forEach","_addChildren","cloneForRec","length","addChildLookupRows"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {LookupCall, objects, scout} from '../index';\nimport $ from 'jquery';\n\nexport default class HierarchicalLookupResultBuilder {\n  constructor(lookupCall) {\n    scout.assertParameter('lookupCall', lookupCall);\n    this.lookupCall = lookupCall;\n\n    this._lookupRowMap = {};\n  }\n\n  /**\n   * Load all parent nodes of the given lookup rows up to the root.\n   *\n   * @returns {Promise} a promise resolved to an array of {LookupRow}s\n   */\n  addParentLookupRows(lookupRows) {\n    this._fillMap(lookupRows);\n\n    var promises = lookupRows.map(this._addParent.bind(this));\n    return $.promiseAll(promises)\n      .then(function() {\n        return objects.values(this._lookupRowMap);\n      }.bind(this));\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _addParent(lookupRow) {\n    var key = lookupRow.parentKey;\n\n    if (!key) {\n      return $.resolvedPromise();\n    }\n\n    // parent already exists in map\n    if (this._lookupRowMap.hasOwnProperty(key)) {\n      lookupRow = this._lookupRowMap[key];\n      return this._addParent(lookupRow);\n    }\n\n    // load parent and add it to the map\n    return this.lookupCall\n      .cloneForKey(key)\n      .execute()\n      .then(function(result) {\n        var lookupRow = LookupCall.firstLookupRow(result);\n        this._lookupRowMap[lookupRow.key] = lookupRow;\n        return this._addParent(lookupRow);\n      }.bind(this));\n  }\n\n  _fillMap(lookupRows) {\n    lookupRows.forEach(function(lookupRow) {\n      this._lookupRowMap[lookupRow.key] = lookupRow;\n    }.bind(this));\n  }\n\n  /**\n   * Load all parent child of the given lookup rows.\n   *\n   * @returns {Promise} a promise resolved to an array of {LookupRow}s\n   */\n  addChildLookupRows(lookupRows) {\n    this._fillMap(lookupRows);\n\n    var promises = lookupRows.map(this._addChildren.bind(this));\n    return $.promiseAll(promises)\n      .then(function() {\n        return objects.values(this._lookupRowMap);\n      }.bind(this));\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _addChildren(lookupRow) {\n    return this.lookupCall\n      .cloneForRec(lookupRow.key)\n      .execute()\n      .then(function(result) {\n        if (result.lookupRows.length) {\n          return this.addChildLookupRows(result.lookupRows);\n        }\n      }.bind(this));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}