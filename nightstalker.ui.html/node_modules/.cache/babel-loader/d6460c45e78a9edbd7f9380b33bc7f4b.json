{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { App, arrays, defaultValues, EventSupport, objects, PropertyChangeEventFilter, RemoteEvent, scout, strings, Widget, WidgetEventTypeFilter } from '../index';\nimport $ from 'jquery';\n/**\n * A model adapter is the connector with the server, it takes the events sent from the server and calls the corresponding methods on the widget.\n * It also sends events to the server whenever an action happens on the widget.\n */\n\nvar ModelAdapter = /*#__PURE__*/function () {\n  function ModelAdapter() {\n    _classCallCheck(this, ModelAdapter);\n\n    this.initialized = false;\n    this.attached = false;\n    this.destroyed = false;\n    this.widget = null;\n    this._enabledBeforeOffline = true;\n    /**\n     * Widget properties which should be sent to server on property change.\n     */\n\n    this._remoteProperties = [];\n    this._widgetListener = null;\n    this._propertyChangeEventFilter = new PropertyChangeEventFilter();\n    this._widgetEventTypeFilter = new WidgetEventTypeFilter();\n    this.events = new EventSupport();\n  }\n\n  _createClass(ModelAdapter, [{\n    key: \"init\",\n    value: function init(model) {\n      this._init(model);\n\n      this.initialized = true;\n    }\n    /**\n     * @param model expects a plain-object with properties: id, session\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init(model) {\n      scout.assertParameter('id', model.id);\n      scout.assertParameter('session', model.session);\n      $.extend(this, model);\n      this.session.registerModelAdapter(this);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._detachWidget();\n\n      this.widget.destroy();\n      this.widget = null;\n      this.session.unregisterModelAdapter(this);\n      this.destroyed = true;\n    }\n  }, {\n    key: \"createWidget\",\n    value: function createWidget(adapterData, parent) {\n      var model = this._initModel(adapterData, parent);\n\n      this.widget = this._createWidget(model);\n\n      this._attachWidget();\n\n      this._postCreateWidget();\n\n      return this.widget;\n    }\n    /**\n     * Override this method to do something right after the widget has been created and has been\n     * attached to the remote adapter. The default impl. does nothing.\n     */\n\n  }, {\n    key: \"_postCreateWidget\",\n    value: function _postCreateWidget() {// NOP\n    }\n  }, {\n    key: \"_initModel\",\n    value: function _initModel(model, parent) {\n      // Make a copy to prevent a modification of the given model\n      var deepCopy = this.session.adapterExportEnabled;\n      model = $.extend(deepCopy, {}, model); // Fill in the missing default values\n\n      defaultValues.applyTo(model);\n      model.parent = parent;\n      model.owner = parent; // Set it explicitly because server sends owner in inspector mode -> ignore the owner sent by server.\n\n      model.modelAdapter = this;\n\n      if (model.global) {\n        // Use the root adapter as owner if global is set to true\n        model.owner = this.session.getModelAdapter('1').widget;\n      }\n\n      this._initProperties(model);\n\n      return model;\n    }\n    /**\n     * Override this method to call _sync* methods of the ModelAdapter _before_ the widget is created.\n     */\n\n  }, {\n    key: \"_initProperties\",\n    value: function _initProperties(model) {// NOP\n    }\n    /**\n     * @returns A new widget instance. The default impl. uses calls scout.create() with property objectType from given model.\n     */\n\n  }, {\n    key: \"_createWidget\",\n    value: function _createWidget(model) {\n      var widget = scout.create(model);\n\n      widget._addCloneProperties(['modelClass', 'classId']);\n\n      return widget;\n    }\n  }, {\n    key: \"_attachWidget\",\n    value: function _attachWidget() {\n      if (this._widgetListener) {\n        return;\n      }\n\n      this._widgetListener = {\n        func: this._onWidgetEventInternal.bind(this)\n      };\n      this.widget.addListener(this._widgetListener);\n      this.attached = true;\n      this.events.trigger('attach');\n    }\n  }, {\n    key: \"_detachWidget\",\n    value: function _detachWidget() {\n      if (!this._widgetListener) {\n        return;\n      }\n\n      this.widget.removeListener(this._widgetListener);\n      this._widgetListener = null;\n      this.attached = false;\n      this.events.trigger('detach');\n    }\n  }, {\n    key: \"goOffline\",\n    value: function goOffline() {\n      this.widget.visitChildren(function (child) {\n        if (child.modelAdapter) {\n          child.modelAdapter._goOffline();\n        }\n      });\n    }\n  }, {\n    key: \"_goOffline\",\n    value: function _goOffline() {// NOP may be implemented by subclasses\n    }\n  }, {\n    key: \"goOnline\",\n    value: function goOnline() {\n      this.widget.visitChildren(function (child) {\n        if (child.modelAdapter) {\n          child.modelAdapter._goOnline();\n        }\n      });\n    }\n  }, {\n    key: \"_goOnline\",\n    value: function _goOnline() {// NOP may be implemented by subclasses\n    }\n  }, {\n    key: \"isRemoteProperty\",\n    value: function isRemoteProperty(propertyName) {\n      return this._remoteProperties.indexOf(propertyName) > -1;\n    }\n  }, {\n    key: \"_addRemoteProperties\",\n    value: function _addRemoteProperties(properties) {\n      this._addProperties('_remoteProperties', properties);\n    }\n  }, {\n    key: \"_removeRemoteProperties\",\n    value: function _removeRemoteProperties(properties) {\n      this._removeProperties('_remoteProperties', properties);\n    }\n  }, {\n    key: \"_addProperties\",\n    value: function _addProperties(propertyName, properties) {\n      if (Array.isArray(properties)) {\n        this[propertyName] = this[propertyName].concat(properties);\n      } else {\n        this[propertyName].push(properties);\n      }\n    }\n  }, {\n    key: \"_removeProperties\",\n    value: function _removeProperties(propertyName, properties) {\n      properties = arrays.ensure(properties);\n      arrays.removeAll(this[propertyName], properties);\n    }\n    /**\n     * @returns Creates a Event object from the current adapter instance and\n     *   sends the event by using the Session#sendEvent() method. Local objects may\n     *   set a different remoteHandler to call custom code instead of the Session#sendEvent()\n     *   method.\n     *\n     * @param type of event\n     * @param data of event\n     * @param options (optional) options according to the following table:\n     *\n     * Option name         Default value   Description\n     * -----------------------------------------------------------------------------------------\n     * delay               0               Delay in milliseconds before the event is sent.\n     *\n     * coalesce            undefined       Coalesce function added to event-object.\n     *\n     * showBusyIndicator   undefined       Whether sending the event should block the UI\n     *                     (true*)         after a certain delay.\n     *                                     * The default value 'undefined' means that the\n     *                                       default value ('true') is determined in Session.js.\n     *                                       We don't write it explicitly to the event here\n     *                                       because that would break many Jasmine tests.\n     */\n\n  }, {\n    key: \"_send\",\n    value: function _send(type, data, options) {\n      // Legacy fallback with all options as arguments\n      var opts = {};\n\n      if (arguments.length > 2) {\n        if (options !== null && _typeof(options) === 'object') {\n          opts = options;\n        } else {\n          opts.delay = arguments[2];\n          opts.coalesce = arguments[3];\n          opts.showBusyIndicator = arguments[4];\n        }\n      }\n\n      options = opts; // (End legacy fallback)\n\n      var event = new RemoteEvent(this.id, type, data); // The following properties will not be sent to the server, see Session._requestToJson().\n\n      if (options.coalesce !== undefined) {\n        event.coalesce = options.coalesce;\n      }\n\n      if (options.showBusyIndicator !== undefined) {\n        event.showBusyIndicator = options.showBusyIndicator;\n      }\n\n      if (options.newRequest !== undefined) {\n        event.newRequest = options.newRequest;\n      }\n\n      this.session.sendEvent(event, options.delay);\n    }\n    /**\n     * Sends the given value as property event to the server.\n     */\n\n  }, {\n    key: \"_sendProperty\",\n    value: function _sendProperty(propertyName, value) {\n      var data = {};\n      data[propertyName] = value;\n\n      this._send('property', data);\n    }\n    /**\n     * Adds a custom filter for events.\n     */\n\n  }, {\n    key: \"addFilterForWidgetEvent\",\n    value: function addFilterForWidgetEvent(filter) {\n      this._widgetEventTypeFilter.addFilter(filter);\n    }\n    /**\n     * Adds a filter which only checks the type of the event.\n     */\n\n  }, {\n    key: \"addFilterForWidgetEventType\",\n    value: function addFilterForWidgetEventType(eventType) {\n      this._widgetEventTypeFilter.addFilterForEventType(eventType);\n    }\n    /**\n     * Adds a filter which checks the name and value of every property in the given properties array.\n     */\n\n  }, {\n    key: \"addFilterForProperties\",\n    value: function addFilterForProperties(properties) {\n      this._propertyChangeEventFilter.addFilterForProperties(properties);\n    }\n    /**\n     * Adds a filter which only checks the property name and ignores the value.\n     */\n\n  }, {\n    key: \"addFilterForPropertyName\",\n    value: function addFilterForPropertyName(propertyName) {\n      this._propertyChangeEventFilter.addFilterForPropertyName(propertyName);\n    }\n  }, {\n    key: \"_isPropertyChangeEventFiltered\",\n    value: function _isPropertyChangeEventFiltered(propertyName, value) {\n      if (value instanceof Widget) {\n        // In case of a remote widget property use the id, otherwise it would always return false\n        value = value.id;\n      }\n\n      return this._propertyChangeEventFilter.filter(propertyName, value);\n    }\n  }, {\n    key: \"_isWidgetEventFiltered\",\n    value: function _isWidgetEventFiltered(event) {\n      return this._widgetEventTypeFilter.filter(event);\n    }\n  }, {\n    key: \"resetEventFilters\",\n    value: function resetEventFilters() {\n      this._propertyChangeEventFilter.reset();\n\n      this._widgetEventTypeFilter.reset();\n    }\n  }, {\n    key: \"_onWidgetPropertyChange\",\n    value: function _onWidgetPropertyChange(event) {\n      var propertyName = event.propertyName;\n      var value = event.newValue; // TODO [7.0] cgu This does not work if value will be converted into another object (e.g DateRange.ensure(selectionRange) in Planner.js)\n      // -> either do the check in this._send() or extract ensure into separate method and move the call of addFilterForProperties.\n      // The advantage of the first one would be simpler filter functions (e.g. this.widget._nodesToIds(this.widget.selectedNodes) in Tree.js)\n\n      if (this._isPropertyChangeEventFiltered(propertyName, value)) {\n        return;\n      }\n\n      if (this.isRemoteProperty(propertyName)) {\n        value = this._prepareRemoteProperty(propertyName, value);\n\n        this._callSendProperty(propertyName, value);\n      }\n    }\n  }, {\n    key: \"_prepareRemoteProperty\",\n    value: function _prepareRemoteProperty(propertyName, value) {\n      if (!value || !this.widget.isWidgetProperty(propertyName)) {\n        return value;\n      }\n\n      if (!Array.isArray(value)) {\n        return value.modelAdapter.id;\n      }\n\n      return value.map(function (widget) {\n        return widget.modelAdapter.id;\n      });\n    }\n  }, {\n    key: \"_callSendProperty\",\n    value: function _callSendProperty(propertyName, value) {\n      var sendFuncName = '_send' + strings.toUpperCaseFirstLetter(propertyName);\n\n      if (this[sendFuncName]) {\n        this[sendFuncName](value);\n      } else {\n        this._sendProperty(propertyName, value);\n      }\n    }\n  }, {\n    key: \"_onWidgetDestroy\",\n    value: function _onWidgetDestroy() {\n      this.destroy();\n    }\n    /**\n     * Do not override this method. Widget event filtering is done here, before _onWidgetEvent is called.\n     */\n\n  }, {\n    key: \"_onWidgetEventInternal\",\n    value: function _onWidgetEventInternal(event) {\n      if (!this._isWidgetEventFiltered(event)) {\n        this._onWidgetEvent(event);\n      }\n    }\n  }, {\n    key: \"_onWidgetEvent\",\n    value: function _onWidgetEvent(event) {\n      if (event.type === 'destroy') {\n        this._onWidgetDestroy(event);\n      } else if (event.type === 'propertyChange') {\n        this._onWidgetPropertyChange(event);\n      }\n    }\n  }, {\n    key: \"_syncPropertiesOnPropertyChange\",\n    value: function _syncPropertiesOnPropertyChange(newProperties) {\n      var orderedPropertyNames = this._orderPropertyNamesOnSync(newProperties);\n\n      orderedPropertyNames.forEach(function (propertyName) {\n        var value = newProperties[propertyName];\n        var syncFuncName = '_sync' + strings.toUpperCaseFirstLetter(propertyName);\n\n        if (this[syncFuncName]) {\n          this[syncFuncName](value);\n        } else {\n          this.widget.callSetter(propertyName, value);\n        }\n      }, this);\n    }\n    /**\n     * May be overridden to return a custom order of how the properties will be set.\n     */\n\n  }, {\n    key: \"_orderPropertyNamesOnSync\",\n    value: function _orderPropertyNamesOnSync(newProperties) {\n      return Object.keys(newProperties);\n    }\n    /**\n     * Called by Session.js for every event from the model\n     */\n\n  }, {\n    key: \"onModelEvent\",\n    value: function onModelEvent(event) {\n      if (!event) {\n        return;\n      }\n\n      if (event.type === 'property') {\n        // Special handling for 'property' type\n        this.onModelPropertyChange(event);\n      } else {\n        this.onModelAction(event);\n      }\n    }\n    /**\n     * Processes the JSON event from the server and calls the corresponding setter of the widget for each property.\n     */\n\n  }, {\n    key: \"onModelPropertyChange\",\n    value: function onModelPropertyChange(event) {\n      this.addFilterForProperties(event.properties);\n\n      this._syncPropertiesOnPropertyChange(event.properties);\n    }\n    /**\n     * The default impl. only logs a warning that the event is not supported.\n     */\n\n  }, {\n    key: \"onModelAction\",\n    value: function onModelAction(event) {\n      if (event.type === 'scrollToTop') {\n        this.widget.scrollToTop();\n      } else {\n        $.log.warn('Model action \"' + event.type + '\" is not supported by model-adapter ' + this.objectType);\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'ModelAdapter[objectType=' + this.objectType + ' id=' + this.id + ']';\n    }\n    /**\n     * This method is used to modify adapterData before the data is exported (as used for JSON export).\n     */\n\n  }, {\n    key: \"exportAdapterData\",\n    value: function exportAdapterData(adapterData) {\n      // use last part of class-name as ID (because that's better than having only a number as ID)\n      var modelClass = adapterData.modelClass;\n\n      if (modelClass) {\n        var pos = Math.max(0, modelClass.lastIndexOf('$') + 1, modelClass.lastIndexOf('.') + 1);\n        adapterData.id = modelClass.substring(pos);\n      }\n\n      delete adapterData.owner;\n      delete adapterData.classId;\n      delete adapterData.modelClass;\n      return adapterData;\n    }\n    /**\n     * Static method to modify the prototype of Widget.\n     */\n\n  }], [{\n    key: \"modifyWidgetPrototype\",\n    value: function modifyWidgetPrototype() {\n      if (!App.get().remote) {\n        return;\n      } // _createChild\n\n\n      objects.replacePrototypeFunction(Widget, '_createChild', function (model) {\n        if (model instanceof Widget) {\n          return model;\n        } // Remote case\n        // If the widget has a model adapter use getOrCreateWidget of the session to resolve the child widget\n        // The model normally is a String containing the (remote) object ID.\n        // If it is not a string it may be a local model -> use default local case instead\n\n\n        if (this.modelAdapter && typeof model === 'string') {\n          return this.session.getOrCreateWidget(model, this);\n        } // Local case (default)\n\n\n        return this._createChildOrig(model);\n      }, true); // <-- true = keep original function\n    }\n  }]);\n\n  return ModelAdapter;\n}();\n\nexport { ModelAdapter as default };\nApp.addListener('bootstrap', ModelAdapter.modifyWidgetPrototype);","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/session/ModelAdapter.js"],"names":["App","arrays","defaultValues","EventSupport","objects","PropertyChangeEventFilter","RemoteEvent","scout","strings","Widget","WidgetEventTypeFilter","$","ModelAdapter","initialized","attached","destroyed","widget","_enabledBeforeOffline","_remoteProperties","_widgetListener","_propertyChangeEventFilter","_widgetEventTypeFilter","events","model","_init","assertParameter","id","session","extend","registerModelAdapter","_detachWidget","destroy","unregisterModelAdapter","adapterData","parent","_initModel","_createWidget","_attachWidget","_postCreateWidget","deepCopy","adapterExportEnabled","applyTo","owner","modelAdapter","global","getModelAdapter","_initProperties","create","_addCloneProperties","func","_onWidgetEventInternal","bind","addListener","trigger","removeListener","visitChildren","child","_goOffline","_goOnline","propertyName","indexOf","properties","_addProperties","_removeProperties","Array","isArray","concat","push","ensure","removeAll","type","data","options","opts","arguments","length","delay","coalesce","showBusyIndicator","event","undefined","newRequest","sendEvent","value","_send","filter","addFilter","eventType","addFilterForEventType","addFilterForProperties","addFilterForPropertyName","reset","newValue","_isPropertyChangeEventFiltered","isRemoteProperty","_prepareRemoteProperty","_callSendProperty","isWidgetProperty","map","sendFuncName","toUpperCaseFirstLetter","_sendProperty","_isWidgetEventFiltered","_onWidgetEvent","_onWidgetDestroy","_onWidgetPropertyChange","newProperties","orderedPropertyNames","_orderPropertyNamesOnSync","forEach","syncFuncName","callSetter","Object","keys","onModelPropertyChange","onModelAction","_syncPropertiesOnPropertyChange","scrollToTop","log","warn","objectType","modelClass","pos","Math","max","lastIndexOf","substring","classId","get","remote","replacePrototypeFunction","getOrCreateWidget","_createChildOrig","modifyWidgetPrototype"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {App, arrays, defaultValues, EventSupport, objects, PropertyChangeEventFilter, RemoteEvent, scout, strings, Widget, WidgetEventTypeFilter} from '../index';\nimport $ from 'jquery';\n\n/**\n * A model adapter is the connector with the server, it takes the events sent from the server and calls the corresponding methods on the widget.\n * It also sends events to the server whenever an action happens on the widget.\n */\nexport default class ModelAdapter {\n  constructor() {\n    this.initialized = false;\n    this.attached = false;\n    this.destroyed = false;\n    this.widget = null;\n    this._enabledBeforeOffline = true;\n\n    /**\n     * Widget properties which should be sent to server on property change.\n     */\n    this._remoteProperties = [];\n    this._widgetListener = null;\n\n    this._propertyChangeEventFilter = new PropertyChangeEventFilter();\n    this._widgetEventTypeFilter = new WidgetEventTypeFilter();\n    this.events = new EventSupport();\n  }\n\n  init(model) {\n    this._init(model);\n    this.initialized = true;\n  }\n\n  /**\n   * @param model expects a plain-object with properties: id, session\n   */\n  _init(model) {\n    scout.assertParameter('id', model.id);\n    scout.assertParameter('session', model.session);\n    $.extend(this, model);\n    this.session.registerModelAdapter(this);\n  }\n\n  destroy() {\n    this._detachWidget();\n    this.widget.destroy();\n    this.widget = null;\n    this.session.unregisterModelAdapter(this);\n    this.destroyed = true;\n  }\n\n  createWidget(adapterData, parent) {\n    var model = this._initModel(adapterData, parent);\n    this.widget = this._createWidget(model);\n    this._attachWidget();\n    this._postCreateWidget();\n    return this.widget;\n  }\n\n  /**\n   * Override this method to do something right after the widget has been created and has been\n   * attached to the remote adapter. The default impl. does nothing.\n   */\n  _postCreateWidget() {\n    // NOP\n  }\n\n  _initModel(model, parent) {\n    // Make a copy to prevent a modification of the given model\n    var deepCopy = this.session.adapterExportEnabled;\n    model = $.extend(deepCopy, {}, model);\n\n    // Fill in the missing default values\n    defaultValues.applyTo(model);\n\n    model.parent = parent;\n    model.owner = parent; // Set it explicitly because server sends owner in inspector mode -> ignore the owner sent by server.\n    model.modelAdapter = this;\n\n    if (model.global) {\n      // Use the root adapter as owner if global is set to true\n      model.owner = this.session.getModelAdapter('1').widget;\n    }\n\n    this._initProperties(model);\n\n    return model;\n  }\n\n  /**\n   * Override this method to call _sync* methods of the ModelAdapter _before_ the widget is created.\n   */\n  _initProperties(model) {\n    // NOP\n  }\n\n  /**\n   * @returns A new widget instance. The default impl. uses calls scout.create() with property objectType from given model.\n   */\n  _createWidget(model) {\n    var widget = scout.create(model);\n    widget._addCloneProperties(['modelClass', 'classId']);\n    return widget;\n  }\n\n  _attachWidget() {\n    if (this._widgetListener) {\n      return;\n    }\n    this._widgetListener = {\n      func: this._onWidgetEventInternal.bind(this)\n    };\n    this.widget.addListener(this._widgetListener);\n    this.attached = true;\n    this.events.trigger('attach');\n  }\n\n  _detachWidget() {\n    if (!this._widgetListener) {\n      return;\n    }\n    this.widget.removeListener(this._widgetListener);\n    this._widgetListener = null;\n    this.attached = false;\n    this.events.trigger('detach');\n  }\n\n  goOffline() {\n    this.widget.visitChildren(function(child) {\n      if (child.modelAdapter) {\n        child.modelAdapter._goOffline();\n      }\n    });\n  }\n\n  _goOffline() {\n    // NOP may be implemented by subclasses\n  }\n\n  goOnline() {\n    this.widget.visitChildren(function(child) {\n      if (child.modelAdapter) {\n        child.modelAdapter._goOnline();\n      }\n    });\n  }\n\n  _goOnline() {\n    // NOP may be implemented by subclasses\n  }\n\n  isRemoteProperty(propertyName) {\n    return this._remoteProperties.indexOf(propertyName) > -1;\n  }\n\n  _addRemoteProperties(properties) {\n    this._addProperties('_remoteProperties', properties);\n  }\n\n  _removeRemoteProperties(properties) {\n    this._removeProperties('_remoteProperties', properties);\n  }\n\n  _addProperties(propertyName, properties) {\n    if (Array.isArray(properties)) {\n      this[propertyName] = this[propertyName].concat(properties);\n    } else {\n      this[propertyName].push(properties);\n    }\n  }\n\n  _removeProperties(propertyName, properties) {\n    properties = arrays.ensure(properties);\n    arrays.removeAll(this[propertyName], properties);\n  }\n\n  /**\n   * @returns Creates a Event object from the current adapter instance and\n   *   sends the event by using the Session#sendEvent() method. Local objects may\n   *   set a different remoteHandler to call custom code instead of the Session#sendEvent()\n   *   method.\n   *\n   * @param type of event\n   * @param data of event\n   * @param options (optional) options according to the following table:\n   *\n   * Option name         Default value   Description\n   * -----------------------------------------------------------------------------------------\n   * delay               0               Delay in milliseconds before the event is sent.\n   *\n   * coalesce            undefined       Coalesce function added to event-object.\n   *\n   * showBusyIndicator   undefined       Whether sending the event should block the UI\n   *                     (true*)         after a certain delay.\n   *                                     * The default value 'undefined' means that the\n   *                                       default value ('true') is determined in Session.js.\n   *                                       We don't write it explicitly to the event here\n   *                                       because that would break many Jasmine tests.\n   */\n  _send(type, data, options) {\n    // Legacy fallback with all options as arguments\n    var opts = {};\n    if (arguments.length > 2) {\n      if (options !== null && typeof options === 'object') {\n        opts = options;\n      } else {\n        opts.delay = arguments[2];\n        opts.coalesce = arguments[3];\n        opts.showBusyIndicator = arguments[4];\n      }\n    }\n    options = opts;\n    // (End legacy fallback)\n\n    var event = new RemoteEvent(this.id, type, data);\n    // The following properties will not be sent to the server, see Session._requestToJson().\n    if (options.coalesce !== undefined) {\n      event.coalesce = options.coalesce;\n    }\n    if (options.showBusyIndicator !== undefined) {\n      event.showBusyIndicator = options.showBusyIndicator;\n    }\n    if (options.newRequest !== undefined) {\n      event.newRequest = options.newRequest;\n    }\n    this.session.sendEvent(event, options.delay);\n  }\n\n  /**\n   * Sends the given value as property event to the server.\n   */\n  _sendProperty(propertyName, value) {\n    var data = {};\n    data[propertyName] = value;\n    this._send('property', data);\n  }\n\n  /**\n   * Adds a custom filter for events.\n   */\n  addFilterForWidgetEvent(filter) {\n    this._widgetEventTypeFilter.addFilter(filter);\n  }\n\n  /**\n   * Adds a filter which only checks the type of the event.\n   */\n  addFilterForWidgetEventType(eventType) {\n    this._widgetEventTypeFilter.addFilterForEventType(eventType);\n  }\n\n  /**\n   * Adds a filter which checks the name and value of every property in the given properties array.\n   */\n  addFilterForProperties(properties) {\n    this._propertyChangeEventFilter.addFilterForProperties(properties);\n  }\n\n  /**\n   * Adds a filter which only checks the property name and ignores the value.\n   */\n  addFilterForPropertyName(propertyName) {\n    this._propertyChangeEventFilter.addFilterForPropertyName(propertyName);\n  }\n\n  _isPropertyChangeEventFiltered(propertyName, value) {\n    if (value instanceof Widget) {\n      // In case of a remote widget property use the id, otherwise it would always return false\n      value = value.id;\n    }\n    return this._propertyChangeEventFilter.filter(propertyName, value);\n  }\n\n  _isWidgetEventFiltered(event) {\n    return this._widgetEventTypeFilter.filter(event);\n  }\n\n  resetEventFilters() {\n    this._propertyChangeEventFilter.reset();\n    this._widgetEventTypeFilter.reset();\n  }\n\n  _onWidgetPropertyChange(event) {\n    var propertyName = event.propertyName;\n    var value = event.newValue;\n\n    // TODO [7.0] cgu This does not work if value will be converted into another object (e.g DateRange.ensure(selectionRange) in Planner.js)\n    // -> either do the check in this._send() or extract ensure into separate method and move the call of addFilterForProperties.\n    // The advantage of the first one would be simpler filter functions (e.g. this.widget._nodesToIds(this.widget.selectedNodes) in Tree.js)\n    if (this._isPropertyChangeEventFiltered(propertyName, value)) {\n      return;\n    }\n\n    if (this.isRemoteProperty(propertyName)) {\n      value = this._prepareRemoteProperty(propertyName, value);\n      this._callSendProperty(propertyName, value);\n    }\n  }\n\n  _prepareRemoteProperty(propertyName, value) {\n    if (!value || !this.widget.isWidgetProperty(propertyName)) {\n      return value;\n    }\n\n    if (!Array.isArray(value)) {\n      return value.modelAdapter.id;\n    }\n\n    return value.map(function(widget) {\n      return widget.modelAdapter.id;\n    });\n  }\n\n  _callSendProperty(propertyName, value) {\n    var sendFuncName = '_send' + strings.toUpperCaseFirstLetter(propertyName);\n    if (this[sendFuncName]) {\n      this[sendFuncName](value);\n    } else {\n      this._sendProperty(propertyName, value);\n    }\n  }\n\n  _onWidgetDestroy() {\n    this.destroy();\n  }\n\n  /**\n   * Do not override this method. Widget event filtering is done here, before _onWidgetEvent is called.\n   */\n  _onWidgetEventInternal(event) {\n    if (!this._isWidgetEventFiltered(event)) {\n      this._onWidgetEvent(event);\n    }\n  }\n\n  _onWidgetEvent(event) {\n    if (event.type === 'destroy') {\n      this._onWidgetDestroy(event);\n    } else if (event.type === 'propertyChange') {\n      this._onWidgetPropertyChange(event);\n    }\n  }\n\n  _syncPropertiesOnPropertyChange(newProperties) {\n    var orderedPropertyNames = this._orderPropertyNamesOnSync(newProperties);\n    orderedPropertyNames.forEach(function(propertyName) {\n      var value = newProperties[propertyName];\n      var syncFuncName = '_sync' + strings.toUpperCaseFirstLetter(propertyName);\n      if (this[syncFuncName]) {\n        this[syncFuncName](value);\n      } else {\n        this.widget.callSetter(propertyName, value);\n      }\n    }, this);\n  }\n\n  /**\n   * May be overridden to return a custom order of how the properties will be set.\n   */\n  _orderPropertyNamesOnSync(newProperties) {\n    return Object.keys(newProperties);\n  }\n\n  /**\n   * Called by Session.js for every event from the model\n   */\n  onModelEvent(event) {\n    if (!event) {\n      return;\n    }\n    if (event.type === 'property') { // Special handling for 'property' type\n      this.onModelPropertyChange(event);\n    } else {\n      this.onModelAction(event);\n    }\n  }\n\n  /**\n   * Processes the JSON event from the server and calls the corresponding setter of the widget for each property.\n   */\n  onModelPropertyChange(event) {\n    this.addFilterForProperties(event.properties);\n    this._syncPropertiesOnPropertyChange(event.properties);\n  }\n\n  /**\n   * The default impl. only logs a warning that the event is not supported.\n   */\n  onModelAction(event) {\n    if (event.type === 'scrollToTop') {\n      this.widget.scrollToTop();\n    } else {\n      $.log.warn('Model action \"' + event.type + '\" is not supported by model-adapter ' + this.objectType);\n    }\n  }\n\n  toString() {\n    return 'ModelAdapter[objectType=' + this.objectType + ' id=' + this.id + ']';\n  }\n\n  /**\n   * This method is used to modify adapterData before the data is exported (as used for JSON export).\n   */\n  exportAdapterData(adapterData) {\n    // use last part of class-name as ID (because that's better than having only a number as ID)\n    var modelClass = adapterData.modelClass;\n    if (modelClass) {\n      var pos = Math.max(0,\n        modelClass.lastIndexOf('$') + 1,\n        modelClass.lastIndexOf('.') + 1);\n      adapterData.id = modelClass.substring(pos);\n    }\n    delete adapterData.owner;\n    delete adapterData.classId;\n    delete adapterData.modelClass;\n    return adapterData;\n  }\n\n  /**\n   * Static method to modify the prototype of Widget.\n   */\n  static modifyWidgetPrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // _createChild\n    objects.replacePrototypeFunction(Widget, '_createChild', function(model) {\n      if (model instanceof Widget) {\n        return model;\n      }\n\n      // Remote case\n      // If the widget has a model adapter use getOrCreateWidget of the session to resolve the child widget\n      // The model normally is a String containing the (remote) object ID.\n      // If it is not a string it may be a local model -> use default local case instead\n      if (this.modelAdapter && typeof model === 'string') {\n        return this.session.getOrCreateWidget(model, this);\n      }\n\n      // Local case (default)\n      return this._createChildOrig(model);\n    }, true); // <-- true = keep original function\n  }\n}\n\nApp.addListener('bootstrap', ModelAdapter.modifyWidgetPrototype);\n"]},"metadata":{},"sourceType":"module"}