{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension, graphics, HtmlComponent, scout, scrollbars } from '../../../index';\n\nvar ProposalChooserLayout = /*#__PURE__*/function (_AbstractLayout) {\n  _inherits(ProposalChooserLayout, _AbstractLayout);\n\n  var _super = _createSuper(ProposalChooserLayout);\n\n  function ProposalChooserLayout(proposalChooser) {\n    var _this;\n\n    _classCallCheck(this, ProposalChooserLayout);\n\n    _this = _super.call(this);\n    _this._proposalChooser = proposalChooser;\n    _this._typeHandler = _this._createTypeHandler(proposalChooser);\n    return _this;\n  }\n  /**\n   * This factory creates type handlers for the various proposal types. By default we support Table and Tree.\n   * If one must support other types, a LayoutResetter class must be implemented for that type.\n   */\n\n\n  _createClass(ProposalChooserLayout, [{\n    key: \"_createTypeHandler\",\n    value: function _createTypeHandler(proposalChooser) {\n      var handlerObjectType = proposalChooser.model.objectType + 'LayoutResetter';\n      return scout.create(handlerObjectType, proposalChooser.model);\n    }\n  }, {\n    key: \"layout\",\n    value: function layout($container) {\n      var filterPrefSize,\n          htmlContainer = HtmlComponent.get($container),\n          htmlComp = HtmlComponent.get($container.children(this._typeHandler.cssSelector)),\n          size = htmlContainer.size().subtract(htmlContainer.insets()),\n          $status = this._proposalChooser.$status,\n          hasStatus = $status && $status.isVisible(),\n          filter = this._proposalChooser.activeFilterGroup;\n\n      if (hasStatus) {\n        size.height -= graphics.size($status).height;\n      }\n\n      if (filter) {\n        filterPrefSize = filter.htmlComp.prefSize();\n        size.height -= filterPrefSize.height;\n      }\n\n      htmlComp.setSize(size);\n\n      if (filter) {\n        filter.htmlComp.setSize(new Dimension(size.width, filterPrefSize.height));\n      }\n    }\n    /**\n     * This preferred size implementation modifies the DIV where the table/tree is rendered\n     * in a way the DIV does not limit the size of the table/tree. Thus we can read the preferred\n     * size of the table/tree. After that the original width and height is restored.\n     */\n\n  }, {\n    key: \"preferredLayoutSize\",\n    value: function preferredLayoutSize($container, options) {\n      var oldDisplay,\n          prefSize,\n          modelSize,\n          statusSize,\n          filterPrefSize,\n          pcWidth,\n          pcHeight,\n          htmlComp = this._proposalChooser.htmlComp,\n          $status = this._proposalChooser.$status,\n          filter = this._proposalChooser.activeFilterGroup,\n          $parent = $container.parent();\n      modelSize = this._proposalChooser.model.htmlComp.prefSize(options);\n      prefSize = modelSize;\n      scrollbars.storeScrollPositions($container, this._proposalChooser.session); // pref size of table and tree don't return accurate values for width -> measure width\n\n      pcWidth = $container.css('width');\n      pcHeight = $container.css('height');\n      $container.detach();\n\n      this._typeHandler.modifyDom();\n\n      $container.css('display', 'inline-block').css('width', 'auto').css('height', 'auto');\n      $parent.append($container);\n      modelSize.width = graphics.prefSize($container, {\n        restoreScrollPositions: false\n      }).width;\n      $container.detach();\n\n      this._typeHandler.restoreDom();\n\n      $container.css('display', 'block').css('width', pcWidth).css('height', pcHeight);\n      $parent.append($container);\n      scrollbars.restoreScrollPositions($container, this._proposalChooser.session);\n\n      if ($status && $status.isVisible()) {\n        oldDisplay = $status.css('display');\n        $status.css('display', 'inline-block');\n        statusSize = graphics.prefSize($status, {\n          includeMargin: true,\n          useCssSize: true\n        });\n        $status.css('display', oldDisplay);\n        prefSize = new Dimension(Math.max(prefSize.width, statusSize.width), prefSize.height + statusSize.height);\n      }\n\n      if (filter) {\n        filterPrefSize = filter.htmlComp.prefSize();\n        prefSize = new Dimension(Math.max(prefSize.width, filterPrefSize.width), prefSize.height + filterPrefSize.height);\n      }\n\n      $container.toggleClass('empty', modelSize.height === 0);\n      return prefSize.add(htmlComp.insets());\n    }\n  }]);\n\n  return ProposalChooserLayout;\n}(AbstractLayout);\n\nexport { ProposalChooserLayout as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/smartfield/ProposalChooserLayout.js"],"names":["AbstractLayout","Dimension","graphics","HtmlComponent","scout","scrollbars","ProposalChooserLayout","proposalChooser","_proposalChooser","_typeHandler","_createTypeHandler","handlerObjectType","model","objectType","create","$container","filterPrefSize","htmlContainer","get","htmlComp","children","cssSelector","size","subtract","insets","$status","hasStatus","isVisible","filter","activeFilterGroup","height","prefSize","setSize","width","options","oldDisplay","modelSize","statusSize","pcWidth","pcHeight","$parent","parent","storeScrollPositions","session","css","detach","modifyDom","append","restoreScrollPositions","restoreDom","includeMargin","useCssSize","Math","max","toggleClass","add"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension, graphics, HtmlComponent, scout, scrollbars} from '../../../index';\n\nexport default class ProposalChooserLayout extends AbstractLayout {\n\n  constructor(proposalChooser) {\n    super();\n    this._proposalChooser = proposalChooser;\n    this._typeHandler = this._createTypeHandler(proposalChooser);\n  }\n\n  /**\n   * This factory creates type handlers for the various proposal types. By default we support Table and Tree.\n   * If one must support other types, a LayoutResetter class must be implemented for that type.\n   */\n  _createTypeHandler(proposalChooser) {\n    var handlerObjectType = proposalChooser.model.objectType + 'LayoutResetter';\n    return scout.create(handlerObjectType, proposalChooser.model);\n  }\n\n  layout($container) {\n    var filterPrefSize,\n      htmlContainer = HtmlComponent.get($container),\n      htmlComp = HtmlComponent.get($container.children(this._typeHandler.cssSelector)),\n      size = htmlContainer.size().subtract(htmlContainer.insets()),\n      $status = this._proposalChooser.$status,\n      hasStatus = $status && $status.isVisible(),\n      filter = this._proposalChooser.activeFilterGroup;\n\n    if (hasStatus) {\n      size.height -= graphics.size($status).height;\n    }\n    if (filter) {\n      filterPrefSize = filter.htmlComp.prefSize();\n      size.height -= filterPrefSize.height;\n    }\n    htmlComp.setSize(size);\n\n    if (filter) {\n      filter.htmlComp.setSize(new Dimension(size.width, filterPrefSize.height));\n    }\n  }\n\n  /**\n   * This preferred size implementation modifies the DIV where the table/tree is rendered\n   * in a way the DIV does not limit the size of the table/tree. Thus we can read the preferred\n   * size of the table/tree. After that the original width and height is restored.\n   */\n  preferredLayoutSize($container, options) {\n    var oldDisplay, prefSize, modelSize, statusSize, filterPrefSize,\n      pcWidth, pcHeight,\n      htmlComp = this._proposalChooser.htmlComp,\n      $status = this._proposalChooser.$status,\n      filter = this._proposalChooser.activeFilterGroup,\n      $parent = $container.parent();\n\n    modelSize = this._proposalChooser.model.htmlComp.prefSize(options);\n    prefSize = modelSize;\n    scrollbars.storeScrollPositions($container, this._proposalChooser.session);\n\n    // pref size of table and tree don't return accurate values for width -> measure width\n    pcWidth = $container.css('width');\n    pcHeight = $container.css('height');\n\n    $container.detach();\n    this._typeHandler.modifyDom();\n    $container\n      .css('display', 'inline-block')\n      .css('width', 'auto')\n      .css('height', 'auto');\n    $parent.append($container);\n    modelSize.width = graphics.prefSize($container, {\n      restoreScrollPositions: false\n    }).width;\n\n    $container.detach();\n    this._typeHandler.restoreDom();\n    $container\n      .css('display', 'block')\n      .css('width', pcWidth)\n      .css('height', pcHeight);\n    $parent.append($container);\n    scrollbars.restoreScrollPositions($container, this._proposalChooser.session);\n\n    if ($status && $status.isVisible()) {\n      oldDisplay = $status.css('display');\n      $status.css('display', 'inline-block');\n      statusSize = graphics.prefSize($status, {\n        includeMargin: true,\n        useCssSize: true\n      });\n      $status.css('display', oldDisplay);\n      prefSize = new Dimension(Math.max(prefSize.width, statusSize.width), prefSize.height + statusSize.height);\n    }\n\n    if (filter) {\n      filterPrefSize = filter.htmlComp.prefSize();\n      prefSize = new Dimension(Math.max(prefSize.width, filterPrefSize.width), prefSize.height + filterPrefSize.height);\n    }\n\n    $container.toggleClass('empty', modelSize.height === 0);\n    return prefSize.add(htmlComp.insets());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}