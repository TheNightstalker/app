{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { CheckBoxToggleKeyStroke, Device, fields, KeyStrokeContext, styles, tooltips, ValueField } from '../../../index';\n\nvar CheckBoxField = /*#__PURE__*/function (_ValueField) {\n  _inherits(CheckBoxField, _ValueField);\n\n  var _super = _createSuper(CheckBoxField);\n\n  function CheckBoxField() {\n    var _this;\n\n    _classCallCheck(this, CheckBoxField);\n\n    _this = _super.call(this);\n    _this.triStateEnabled = false;\n    _this.wrapText = false;\n    _this.keyStroke = null;\n    _this.checkBoxKeyStroke = new CheckBoxToggleKeyStroke(_assertThisInitialized(_this));\n    _this.$checkBox = null;\n    _this.$checkBoxLabel = null;\n    return _this;\n  }\n\n  _createClass(CheckBoxField, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(CheckBoxField.prototype), \"_init\", this).call(this, model);\n\n      this._setKeyStroke(this.keyStroke);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_initKeyStrokeContext\",\n    value: function _initKeyStrokeContext() {\n      _get(_getPrototypeOf(CheckBoxField.prototype), \"_initKeyStrokeContext\", this).call(this);\n\n      this.keyStrokeContext.registerKeyStroke(new CheckBoxToggleKeyStroke(this)); // The key stroke configured by this.keyStroke has form scope\n\n      this.formKeyStrokeContext = new KeyStrokeContext();\n      this.formKeyStrokeContext.invokeAcceptInputOnActiveValueField = true;\n      this.formKeyStrokeContext.registerKeyStroke(this.checkBoxKeyStroke);\n\n      this.formKeyStrokeContext.$bindTarget = function () {\n        // use form if available\n        var form = this.getForm();\n\n        if (form) {\n          return form.$container;\n        } // use desktop otherwise\n\n\n        return this.session.desktop.$container;\n      }.bind(this);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.addContainer(this.$parent, 'check-box-field');\n      this.addLabel();\n      this.addMandatoryIndicator();\n      this.addFieldContainer(this.$parent.makeDiv());\n      this.$checkBox = this.$fieldContainer.appendDiv('check-box').on('mousedown', this._onMouseDown.bind(this)).data('valuefield', this);\n      this.addField(this.$checkBox);\n      this.$checkBoxLabel = this.$fieldContainer.appendDiv('label').on('mousedown', this._onMouseDown.bind(this));\n      fields.linkElementWithLabel(this.$checkBox, this.$checkBoxLabel);\n      tooltips.installForEllipsis(this.$checkBoxLabel, {\n        parent: this\n      });\n      this.addStatus();\n      this.session.keyStrokeManager.installKeyStrokeContext(this.formKeyStrokeContext);\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(CheckBoxField.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderValue();\n\n      this._renderWrapText();\n    }\n  }, {\n    key: \"_remove\",\n    value: function _remove() {\n      tooltips.uninstall(this.$checkBoxLabel);\n      this.session.keyStrokeManager.uninstallKeyStrokeContext(this.formKeyStrokeContext);\n\n      _get(_getPrototypeOf(CheckBoxField.prototype), \"_remove\", this).call(this);\n    }\n  }, {\n    key: \"_renderDisplayText\",\n    value: function _renderDisplayText() {// NOP\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.setProperty('value', value);\n    }\n    /**\n     * The value may be false, true (and null in tri-state mode)\n     */\n\n  }, {\n    key: \"_renderValue\",\n    value: function _renderValue() {\n      this.$fieldContainer.toggleClass('checked', this.value === true);\n      this.$checkBox.toggleClass('checked', this.value === true);\n      this.$checkBox.toggleClass('undefined', this.triStateEnabled && this.value !== true && this.value !== false);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_renderEnabled\",\n    value: function _renderEnabled() {\n      _get(_getPrototypeOf(CheckBoxField.prototype), \"_renderEnabled\", this).call(this);\n\n      this.$checkBox.setTabbable(this.enabledComputed && !Device.get().supportsOnlyTouch()).setEnabled(this.enabledComputed);\n    }\n  }, {\n    key: \"setTriStateEnabled\",\n    value: function setTriStateEnabled(triStateEnabled) {\n      this.setProperty('triStateEnabled', triStateEnabled);\n\n      if (this.rendered) {\n        this._renderValue();\n      }\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_renderLabel\",\n    value: function _renderLabel() {\n      this.$checkBoxLabel.contentOrNbsp(this.labelHtmlEnabled, this.label, 'empty');\n\n      this._renderEmptyLabel();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_renderFont\",\n    value: function _renderFont() {\n      styles.legacyFont(this, this.$fieldContainer); // Changing the font may enlarge or shrink the field (e.g. set the style to bold makes the text bigger) -> invalidate layout\n\n      this.invalidateLayoutTree();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_renderForegroundColor\",\n    value: function _renderForegroundColor() {\n      styles.legacyForegroundColor(this, this.$fieldContainer);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_renderBackgroundColor\",\n    value: function _renderBackgroundColor() {\n      styles.legacyBackgroundColor(this, this.$fieldContainer);\n    }\n  }, {\n    key: \"_renderGridData\",\n    value: function _renderGridData() {\n      _get(_getPrototypeOf(CheckBoxField.prototype), \"_renderGridData\", this).call(this);\n\n      this.updateInnerAlignment({\n        useHorizontalAlignment: true\n      });\n    }\n  }, {\n    key: \"_renderGridDataHints\",\n    value: function _renderGridDataHints() {\n      _get(_getPrototypeOf(CheckBoxField.prototype), \"_renderGridDataHints\", this).call(this);\n\n      this.updateInnerAlignment({\n        useHorizontalAlignment: true\n      });\n    }\n  }, {\n    key: \"setKeyStroke\",\n    value: function setKeyStroke(keyStroke) {\n      this.setProperty('keyStroke', keyStroke);\n    }\n  }, {\n    key: \"_setKeyStroke\",\n    value: function _setKeyStroke(keyStroke) {\n      this._setProperty('keyStroke', keyStroke);\n\n      this.checkBoxKeyStroke.parseAndSetKeyStroke(this.keyStroke);\n    }\n  }, {\n    key: \"setWrapText\",\n    value: function setWrapText(wrapText) {\n      this.setProperty('wrapText', wrapText);\n    }\n  }, {\n    key: \"_renderWrapText\",\n    value: function _renderWrapText() {\n      this.$checkBoxLabel.toggleClass('white-space-nowrap', !this.wrapText);\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"acceptInput\",\n    value: function acceptInput(whileTyping, forceSend) {// NOP\n    }\n  }, {\n    key: \"toggleChecked\",\n    value: function toggleChecked() {\n      if (!this.enabledComputed) {\n        return;\n      }\n\n      if (this.triStateEnabled) {\n        if (this.value === false) {\n          this.setValue(true);\n        } else if (this.value === true) {\n          this.setValue(null);\n        } else {\n          this.setValue(false);\n        }\n      } else {\n        this.setValue(!this.value);\n      }\n    }\n  }, {\n    key: \"prepareForCellEdit\",\n    value: function prepareForCellEdit(opts) {\n      _get(_getPrototypeOf(CheckBoxField.prototype), \"prepareForCellEdit\", this).call(this, opts);\n\n      this.$checkBoxLabel.hide();\n    }\n  }, {\n    key: \"_onMouseDown\",\n    value: function _onMouseDown(event) {\n      if (!this.enabledComputed) {\n        return;\n      }\n\n      this.toggleChecked(); // Also focus when check box is clicked otherwise firefox would loose the focus (see device.loosesFocusIfPseudoElementIsRemoved)\n\n      var onCheckBox = this.$checkBox.is(event.currentTarget),\n          onLabel = this.$checkBoxLabel.isOrHas(event.currentTarget); // isOrHas is required for HTML enabled labels with nested elements\n\n      if (onCheckBox || onLabel) {\n        this.focusAndPreventDefault(event);\n      }\n    }\n  }]);\n\n  return CheckBoxField;\n}(ValueField);\n\nexport { CheckBoxField as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/checkbox/CheckBoxField.js"],"names":["CheckBoxToggleKeyStroke","Device","fields","KeyStrokeContext","styles","tooltips","ValueField","CheckBoxField","triStateEnabled","wrapText","keyStroke","checkBoxKeyStroke","$checkBox","$checkBoxLabel","model","_setKeyStroke","keyStrokeContext","registerKeyStroke","formKeyStrokeContext","invokeAcceptInputOnActiveValueField","$bindTarget","form","getForm","$container","session","desktop","bind","addContainer","$parent","addLabel","addMandatoryIndicator","addFieldContainer","makeDiv","$fieldContainer","appendDiv","on","_onMouseDown","data","addField","linkElementWithLabel","installForEllipsis","parent","addStatus","keyStrokeManager","installKeyStrokeContext","_renderValue","_renderWrapText","uninstall","uninstallKeyStrokeContext","value","setProperty","toggleClass","setTabbable","enabledComputed","get","supportsOnlyTouch","setEnabled","rendered","contentOrNbsp","labelHtmlEnabled","label","_renderEmptyLabel","legacyFont","invalidateLayoutTree","legacyForegroundColor","legacyBackgroundColor","updateInnerAlignment","useHorizontalAlignment","_setProperty","parseAndSetKeyStroke","whileTyping","forceSend","setValue","opts","hide","event","toggleChecked","onCheckBox","is","currentTarget","onLabel","isOrHas","focusAndPreventDefault"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {CheckBoxToggleKeyStroke, Device, fields, KeyStrokeContext, styles, tooltips, ValueField} from '../../../index';\n\nexport default class CheckBoxField extends ValueField {\n\n  constructor() {\n    super();\n\n    this.triStateEnabled = false;\n    this.wrapText = false;\n    this.keyStroke = null;\n    this.checkBoxKeyStroke = new CheckBoxToggleKeyStroke(this);\n\n    this.$checkBox = null;\n    this.$checkBoxLabel = null;\n  }\n\n  _init(model) {\n    super._init(model);\n    this._setKeyStroke(this.keyStroke);\n  }\n\n  /**\n   * @override\n   */\n  _initKeyStrokeContext() {\n    super._initKeyStrokeContext();\n\n    this.keyStrokeContext.registerKeyStroke(new CheckBoxToggleKeyStroke(this));\n\n    // The key stroke configured by this.keyStroke has form scope\n    this.formKeyStrokeContext = new KeyStrokeContext();\n    this.formKeyStrokeContext.invokeAcceptInputOnActiveValueField = true;\n    this.formKeyStrokeContext.registerKeyStroke(this.checkBoxKeyStroke);\n    this.formKeyStrokeContext.$bindTarget = function() {\n      // use form if available\n      var form = this.getForm();\n      if (form) {\n        return form.$container;\n      }\n      // use desktop otherwise\n      return this.session.desktop.$container;\n    }.bind(this);\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'check-box-field');\n    this.addLabel();\n    this.addMandatoryIndicator();\n    this.addFieldContainer(this.$parent.makeDiv());\n\n    this.$checkBox = this.$fieldContainer\n      .appendDiv('check-box')\n      .on('mousedown', this._onMouseDown.bind(this))\n      .data('valuefield', this);\n    this.addField(this.$checkBox);\n\n    this.$checkBoxLabel = this.$fieldContainer\n      .appendDiv('label')\n      .on('mousedown', this._onMouseDown.bind(this));\n\n    fields.linkElementWithLabel(this.$checkBox, this.$checkBoxLabel);\n    tooltips.installForEllipsis(this.$checkBoxLabel, {\n      parent: this\n    });\n    this.addStatus();\n    this.session.keyStrokeManager.installKeyStrokeContext(this.formKeyStrokeContext);\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderValue();\n    this._renderWrapText();\n  }\n\n  _remove() {\n    tooltips.uninstall(this.$checkBoxLabel);\n    this.session.keyStrokeManager.uninstallKeyStrokeContext(this.formKeyStrokeContext);\n    super._remove();\n  }\n\n  _renderDisplayText() {\n    // NOP\n  }\n\n  setValue(value) {\n    this.setProperty('value', value);\n  }\n\n  /**\n   * The value may be false, true (and null in tri-state mode)\n   */\n  _renderValue() {\n    this.$fieldContainer.toggleClass('checked', this.value === true);\n    this.$checkBox.toggleClass('checked', this.value === true);\n    this.$checkBox.toggleClass('undefined', this.triStateEnabled && this.value !== true && this.value !== false);\n  }\n\n  /**\n   * @override\n   */\n  _renderEnabled() {\n    super._renderEnabled();\n    this.$checkBox\n      .setTabbable(this.enabledComputed && !Device.get().supportsOnlyTouch())\n      .setEnabled(this.enabledComputed);\n  }\n\n  setTriStateEnabled(triStateEnabled) {\n    this.setProperty('triStateEnabled', triStateEnabled);\n    if (this.rendered) {\n      this._renderValue();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _renderLabel() {\n    this.$checkBoxLabel.contentOrNbsp(this.labelHtmlEnabled, this.label, 'empty');\n    this._renderEmptyLabel();\n  }\n\n  /**\n   * @override\n   */\n  _renderFont() {\n    styles.legacyFont(this, this.$fieldContainer);\n    // Changing the font may enlarge or shrink the field (e.g. set the style to bold makes the text bigger) -> invalidate layout\n    this.invalidateLayoutTree();\n  }\n\n  /**\n   * @override\n   */\n  _renderForegroundColor() {\n    styles.legacyForegroundColor(this, this.$fieldContainer);\n  }\n\n  /**\n   * @override\n   */\n  _renderBackgroundColor() {\n    styles.legacyBackgroundColor(this, this.$fieldContainer);\n  }\n\n  _renderGridData() {\n    super._renderGridData();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: true\n    });\n  }\n\n  _renderGridDataHints() {\n    super._renderGridDataHints();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: true\n    });\n  }\n\n  setKeyStroke(keyStroke) {\n    this.setProperty('keyStroke', keyStroke);\n  }\n\n  _setKeyStroke(keyStroke) {\n    this._setProperty('keyStroke', keyStroke);\n    this.checkBoxKeyStroke.parseAndSetKeyStroke(this.keyStroke);\n  }\n\n  setWrapText(wrapText) {\n    this.setProperty('wrapText', wrapText);\n  }\n\n  _renderWrapText() {\n    this.$checkBoxLabel.toggleClass('white-space-nowrap', !this.wrapText);\n    this.invalidateLayoutTree();\n  }\n\n  acceptInput(whileTyping, forceSend) {\n    // NOP\n  }\n\n  toggleChecked() {\n    if (!this.enabledComputed) {\n      return;\n    }\n    if (this.triStateEnabled) {\n      if (this.value === false) {\n        this.setValue(true);\n      } else if (this.value === true) {\n        this.setValue(null);\n      } else {\n        this.setValue(false);\n      }\n    } else {\n      this.setValue(!this.value);\n    }\n  }\n\n  prepareForCellEdit(opts) {\n    super.prepareForCellEdit(opts);\n    this.$checkBoxLabel.hide();\n  }\n\n  _onMouseDown(event) {\n    if (!this.enabledComputed) {\n      return;\n    }\n    this.toggleChecked();\n    // Also focus when check box is clicked otherwise firefox would loose the focus (see device.loosesFocusIfPseudoElementIsRemoved)\n    var onCheckBox = this.$checkBox.is(event.currentTarget),\n      onLabel = this.$checkBoxLabel.isOrHas(event.currentTarget); // isOrHas is required for HTML enabled labels with nested elements\n    if (onCheckBox || onLabel) {\n      this.focusAndPreventDefault(event);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}