{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Button, ButtonAdapterMenu, CompositeField, Form, FormField, GroupBoxGridConfig, GroupBoxLayout, GroupBoxMenuItemsOrder, HAlign, HtmlComponent, LogicalGridData, LogicalGridLayout, LogicalGridLayoutConfig, MenuBar, ResponsiveManager, scout, SplitBox, strings, TabBox, TabItemKeyStroke, tooltips, WrappedFormField } from '../../../index';\nimport $ from 'jquery';\n\nvar GroupBox = /*#__PURE__*/function (_CompositeField) {\n  _inherits(GroupBox, _CompositeField);\n\n  var _super = _createSuper(GroupBox);\n\n  function GroupBox() {\n    var _this;\n\n    _classCallCheck(this, GroupBox);\n\n    _this = _super.call(this);\n\n    _this._addWidgetProperties(['fields', 'notification', 'staticMenus']);\n\n    _this._addCloneProperties(['menuBarVisible', 'bodyLayoutConfig', 'borderDecoration', 'borderVisible', 'expandable', 'expanded', 'gridColumnCount', 'scrollable', 'subLabel']);\n\n    _this.fields = [];\n    _this.menus = [];\n    _this.menuBarVisible = true;\n    _this.menuBarPosition = GroupBox.MenuBarPosition.AUTO;\n    _this.menuBarEllipsisPosition = MenuBar.EllipsisPosition.RIGHT;\n    _this.notification = null;\n    _this.bodyLayoutConfig = null;\n    _this.borderDecoration = GroupBox.BorderDecoration.AUTO;\n    _this.borderVisible = true;\n    _this.mainBox = false; // set to null to enable conditional default\n    // -> it will be set to true if it is a mainbox unless it was explicitly set to false\n\n    _this.scrollable = null;\n    _this.expandable = false;\n    _this.expanded = true;\n    _this.logicalGrid = scout.create('scout.VerticalSmartGrid');\n    _this.gridColumnCount = 2;\n    _this.gridDataHints.useUiHeight = true;\n    _this.gridDataHints.w = FormField.FULL_WIDTH;\n    _this.controls = [];\n    _this.systemButtons = [];\n    _this.customButtons = [];\n    _this.processButtons = [];\n    _this.processMenus = [];\n    _this.staticMenus = [];\n    _this.responsive = null;\n    _this.$body = null;\n    _this.$title = null;\n    _this.$subLabel = null;\n    return _this;\n  }\n\n  _createClass(GroupBox, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(GroupBox.prototype), \"_init\", this).call(this, model);\n\n      this.resolveConsts([{\n        property: 'menuBarPosition',\n        constType: GroupBox.MenuBarPosition\n      }]);\n\n      this._setBodyLayoutConfig(this.bodyLayoutConfig);\n\n      this.menuBar = scout.create('MenuBar', {\n        parent: this,\n        menuOrder: new GroupBoxMenuItemsOrder(),\n        ellipsisPosition: this.menuBarEllipsisPosition\n      });\n\n      this._setFields(this.fields);\n\n      this._setMainBox(this.mainBox);\n\n      this._updateMenuBar();\n\n      ResponsiveManager.get().registerHandler(this, scout.create('GroupBoxResponsiveHandler', {\n        widget: this\n      }));\n\n      this._setResponsive(this.responsive);\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      ResponsiveManager.get().unregisterHandler(this);\n\n      _get(_getPrototypeOf(GroupBox.prototype), \"_destroy\", this).call(this);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getFields\",\n    value: function getFields() {\n      return this.fields;\n    }\n  }, {\n    key: \"insertField\",\n    value: function insertField(field, index) {\n      var newFields = this.fields.slice();\n      index = scout.nvl(index, this.fields.length);\n      newFields.splice(index, 0, field);\n      this.setFields(newFields);\n    }\n  }, {\n    key: \"insertFieldBefore\",\n    value: function insertFieldBefore(field, sibling) {\n      scout.assertParameter('sibling', sibling);\n      var index = this.fields.indexOf(sibling);\n      this.insertField(field, index);\n    }\n  }, {\n    key: \"insertFieldAfter\",\n    value: function insertFieldAfter(field, sibling) {\n      scout.assertParameter('sibling', sibling);\n      var index = this.fields.indexOf(sibling) + 1;\n      this.insertField(field, index);\n    }\n  }, {\n    key: \"deleteField\",\n    value: function deleteField(field) {\n      var newFields = this.fields.slice(),\n          index = this.fields.indexOf(field);\n\n      if (index < 0) {\n        return;\n      }\n\n      newFields.splice(index, 1);\n      this.setFields(newFields);\n    }\n  }, {\n    key: \"setFields\",\n    value: function setFields(fields) {\n      this.setProperty('fields', fields);\n    }\n  }, {\n    key: \"_setFields\",\n    value: function _setFields(fields) {\n      this._setProperty('fields', fields);\n\n      this._prepareFields();\n    }\n  }, {\n    key: \"_renderFields\",\n    value: function _renderFields(fields) {\n      this._renderExpanded();\n\n      this.invalidateLogicalGrid(true);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_initKeyStrokeContext\",\n    value: function _initKeyStrokeContext() {\n      _get(_getPrototypeOf(GroupBox.prototype), \"_initKeyStrokeContext\", this).call(this);\n\n      this.keyStrokeContext.invokeAcceptInputOnActiveValueField = true;\n      this.keyStrokeContext.$bindTarget = this._keyStrokeBindTarget.bind(this);\n    }\n    /**\n     * @override FormField.js\n     */\n\n  }, {\n    key: \"_setKeyStrokes\",\n    value: function _setKeyStrokes(keyStrokes) {\n      keyStrokes = arrays.ensure(keyStrokes);\n      var groupBoxRenderingHints = {\n        render: function render() {\n          return true;\n        },\n        offset: 0,\n        hAlign: HAlign.RIGHT,\n        $drawingArea: function ($drawingArea, event) {\n          if (this.labelVisible) {\n            return this.$title;\n          }\n\n          return this.$body;\n        }.bind(this)\n      };\n      keyStrokes.forEach(function (keyStroke) {\n        keyStroke.actionKeyStroke.renderingHints = $.extend({}, keyStroke.actionKeyStroke.renderingHints, groupBoxRenderingHints);\n      }, this);\n\n      _get(_getPrototypeOf(GroupBox.prototype), \"_setKeyStrokes\", this).call(this, keyStrokes);\n    }\n    /**\n     * Returns a $container used as a bind target for the key-stroke context of the group-box.\n     * By default this function returns the container of the form, or when group-box is has no\n     * form as a parent the container of the group-box.\n     */\n\n  }, {\n    key: \"_keyStrokeBindTarget\",\n    value: function _keyStrokeBindTarget() {\n      var form = this.getForm();\n\n      if (form) {\n        // keystrokes on a group-box have form scope\n        return form.$container;\n      }\n\n      return this.$container;\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.addContainer(this.$parent, this.mainBox ? 'root-group-box' : 'group-box');\n      this.$title = this.$container.appendDiv('group-box-title');\n      this.addLabel();\n      this.addSubLabel();\n      this.addStatus();\n      this.$body = this.$container.appendDiv('group-box-body');\n      this.htmlBody = HtmlComponent.install(this.$body, this.session);\n      this.htmlBody.setLayout(this._createBodyLayout());\n    }\n  }, {\n    key: \"_remove\",\n    value: function _remove() {\n      this._removeSubLabel();\n\n      _get(_getPrototypeOf(GroupBox.prototype), \"_remove\", this).call(this);\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      this._renderScrollable(); // Need to be before renderExpanded in order to have the scrollbars when the fields are rendered. The status tooltips require a scrollable parent to move when scrolling.\n\n\n      this._renderExpanded(); // Need to be before renderVisible is executed, otherwise controls might be rendered if group box is invisible which breaks some widgets (e.g. Tree and Table)\n\n\n      _get(_getPrototypeOf(GroupBox.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderBodyLayoutConfig();\n\n      this._renderNotification();\n\n      this._renderBorderVisible();\n\n      this._renderExpandable();\n\n      this._renderMenuBarPosition();\n\n      this._renderMenuBarEllipsisPosition();\n\n      this._renderMenuBarVisible();\n\n      this._renderSubLabel();\n    }\n  }, {\n    key: \"_createLayout\",\n    value: function _createLayout() {\n      return new GroupBoxLayout(this);\n    }\n  }, {\n    key: \"_createBodyLayout\",\n    value: function _createBodyLayout() {\n      return new LogicalGridLayout(this, this.bodyLayoutConfig);\n    }\n  }, {\n    key: \"setBodyLayoutConfig\",\n    value: function setBodyLayoutConfig(bodyLayoutConfig) {\n      this.setProperty('bodyLayoutConfig', bodyLayoutConfig);\n    }\n  }, {\n    key: \"_setBodyLayoutConfig\",\n    value: function _setBodyLayoutConfig(bodyLayoutConfig) {\n      if (!bodyLayoutConfig) {\n        bodyLayoutConfig = new LogicalGridLayoutConfig();\n      }\n\n      this._setProperty('bodyLayoutConfig', LogicalGridLayoutConfig.ensure(bodyLayoutConfig));\n    }\n  }, {\n    key: \"_renderBodyLayoutConfig\",\n    value: function _renderBodyLayoutConfig() {\n      var oldMinWidth = this.htmlBody.layout.minWidth;\n      this.bodyLayoutConfig.applyToLayout(this.htmlBody.layout);\n\n      if (oldMinWidth !== this.bodyLayoutConfig.minWidth) {\n        this._renderScrollable();\n      }\n\n      if (this.rendered) {\n        this.htmlBody.invalidateLayoutTree();\n      }\n    }\n    /**\n     * Redraws the group box body by removing and rerendering every control.\n     * This may be necessary if a field does not support a dynamic property change and therefore needs to be redrawn completely to reflect the change.\n     */\n\n  }, {\n    key: \"rerenderControls\",\n    value: function rerenderControls() {\n      this._removeControls();\n\n      this._renderControls();\n\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }, {\n    key: \"_removeControls\",\n    value: function _removeControls() {\n      this.controls.forEach(function (control) {\n        control.remove();\n      }, this);\n    }\n  }, {\n    key: \"_renderControls\",\n    value: function _renderControls() {\n      this.controls.forEach(function (control) {\n        if (!control.rendered) {\n          control.render(this.$body); // set each children layout data to logical grid data\n\n          control.setLayoutData(new LogicalGridData(control));\n        }\n      }, this);\n    }\n  }, {\n    key: \"addSubLabel\",\n    value: function addSubLabel() {\n      if (this.$subLabel) {\n        return;\n      }\n\n      this.$subLabel = this.$title.appendDiv('sub-label');\n      tooltips.installForEllipsis(this.$subLabel, {\n        parent: this\n      });\n    }\n  }, {\n    key: \"_removeSubLabel\",\n    value: function _removeSubLabel() {\n      if (!this.$subLabel) {\n        return;\n      }\n\n      tooltips.uninstall(this.$subLabel);\n      this.$subLabel.remove();\n      this.$subLabel = null;\n    }\n  }, {\n    key: \"setSubLabel\",\n    value: function setSubLabel(subLabel) {\n      this.setProperty('subLabel', subLabel);\n    }\n  }, {\n    key: \"_renderSubLabel\",\n    value: function _renderSubLabel() {\n      this.$subLabel.setVisible(strings.hasText(this.subLabel));\n      this.$subLabel.textOrNbsp(this.subLabel);\n      this.$container.toggleClass('has-sub-label', this.$subLabel.isVisible());\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"setScrollable\",\n    value: function setScrollable(scrollable) {\n      this.setProperty('scrollable', scrollable);\n    }\n  }, {\n    key: \"_renderScrollable\",\n    value: function _renderScrollable() {\n      this._uninstallScrollbars(); // horizontal (x-axis) scrollbar is only installed when minWidth is > 0\n\n\n      if (this.scrollable) {\n        this._installScrollbars({\n          axis: this.bodyLayoutConfig.minWidth > 0 ? 'both' : 'y'\n        });\n      } else if (this.bodyLayoutConfig.minWidth > 0) {\n        this._installScrollbars({\n          axis: 'x'\n        });\n      }\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"get$Scrollable\",\n    value: function get$Scrollable() {\n      return this.$body;\n    }\n  }, {\n    key: \"setMainBox\",\n    value: function setMainBox(mainBox) {\n      this.setProperty('mainBox', mainBox);\n    }\n  }, {\n    key: \"_setMainBox\",\n    value: function _setMainBox(mainBox) {\n      this._setProperty('mainBox', mainBox);\n\n      if (this.mainBox) {\n        this.menuBar.setCssClass('main-menubar');\n\n        if (this.scrollable === null) {\n          this.setScrollable(true);\n        }\n\n        if (this.responsive === null) {\n          this.setResponsive(true);\n        }\n      }\n    }\n  }, {\n    key: \"addLabel\",\n    value: function addLabel() {\n      if (this.$label) {\n        return;\n      }\n\n      this.$label = this.$title.appendDiv('label');\n      tooltips.installForEllipsis(this.$label, {\n        parent: this\n      });\n    }\n  }, {\n    key: \"_renderLabel\",\n    value: function _renderLabel() {\n      this.$label.textOrNbsp(this.label);\n\n      if (this.rendered) {\n        this._renderLabelVisible();\n      }\n    }\n  }, {\n    key: \"addStatus\",\n    value: function addStatus() {\n      _get(_getPrototypeOf(GroupBox.prototype), \"addStatus\", this).call(this);\n\n      this._updateStatusPosition();\n    }\n  }, {\n    key: \"_renderStatusPosition\",\n    value: function _renderStatusPosition() {\n      this._updateStatusPosition();\n    }\n  }, {\n    key: \"_updateStatusPosition\",\n    value: function _updateStatusPosition() {\n      if (!this.fieldStatus) {\n        return;\n      }\n\n      if (this.statusPosition === FormField.StatusPosition.TOP) {\n        // move into title\n        this.$status.appendTo(this.$title);\n      } else {\n        this.$status.appendTo(this.$container);\n      }\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"setNotification\",\n    value: function setNotification(notification) {\n      this.setProperty('notification', notification);\n    }\n  }, {\n    key: \"_renderNotification\",\n    value: function _renderNotification() {\n      if (!this.notification) {\n        this.invalidateLayoutTree();\n        return;\n      }\n\n      this.notification.render();\n      this.notification.$container.insertBefore(this.$body);\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"_prepareFields\",\n    value: function _prepareFields() {\n      this.processButtons.forEach(this._unregisterButtonKeyStrokes.bind(this));\n      this.controls = [];\n      this.systemButtons = [];\n      this.customButtons = [];\n      this.processButtons = [];\n      this.processMenus = [];\n      var i, field;\n\n      for (i = 0; i < this.fields.length; i++) {\n        field = this.fields[i];\n\n        if (field instanceof Button) {\n          if (field.processButton) {\n            this.processButtons.push(field);\n\n            if (field.systemType !== Button.SystemType.NONE) {\n              this.systemButtons.push(field);\n            } else {\n              this.customButtons.push(field);\n            }\n          } else {\n            this.controls.push(field);\n\n            this._registerButtonKeyStrokes(field);\n          }\n        } else if (field instanceof TabBox) {\n          this.controls.push(field);\n\n          for (var k = 0; k < field.tabItems.length; k++) {\n            if (field.tabItems[k].selectionKeystroke) {\n              this.keyStrokeContext.registerKeyStroke(new TabItemKeyStroke(field.tabItems[k].selectionKeystroke, field.tabItems[k]));\n            }\n          }\n        } else {\n          this.controls.push(field);\n        }\n      } // Create menu for each process button\n\n\n      this.processMenus = this.processButtons.map(function (button) {\n        return scout.create('ButtonAdapterMenu', ButtonAdapterMenu.adaptButtonProperties(button, {\n          parent: this,\n          menubar: this.menuBar,\n          button: button,\n          // initially defaultMenu should only be set if defaultButton is set to true, false should not be mapped as the default defaultMenu = null setting\n          // would be overridden if this default null setting is overridden MenuBar.prototype.updateDefaultMenu would not consider these entries anymore\n          defaultMenu: button.defaultButton ? true : null\n        }));\n      }, this);\n      this.registerKeyStrokes(this.processMenus);\n    }\n  }, {\n    key: \"_unregisterButtonKeyStrokes\",\n    value: function _unregisterButtonKeyStrokes(button) {\n      if (button.keyStrokes) {\n        button.keyStrokes.forEach(function (keyStroke) {\n          this.keyStrokeContext.unregisterKeyStroke(keyStroke);\n        }, this);\n      }\n    }\n  }, {\n    key: \"_registerButtonKeyStrokes\",\n    value: function _registerButtonKeyStrokes(button) {\n      if (button.keyStrokes) {\n        button.keyStrokes.forEach(function (keyStroke) {\n          this.keyStrokeContext.registerKeyStroke(keyStroke);\n        }, this);\n      }\n    }\n  }, {\n    key: \"setBorderVisible\",\n    value: function setBorderVisible(borderVisible) {\n      this.setProperty('borderVisible', borderVisible);\n    }\n  }, {\n    key: \"_renderBorderVisible\",\n    value: function _renderBorderVisible() {\n      var borderVisible = this.borderVisible;\n\n      if (this.borderDecoration === GroupBox.BorderDecoration.AUTO) {\n        borderVisible = this._computeBorderVisible(borderVisible);\n      }\n\n      this.$body.toggleClass('y-padding-invisible', !borderVisible);\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"setBorderDecoration\",\n    value: function setBorderDecoration(borderDecoration) {\n      this.setProperty('borderDecoration', borderDecoration);\n    } // Don't include in renderProperties, it is not necessary to execute it initially because renderBorderVisible is executed already\n\n  }, {\n    key: \"_renderBorderDecoration\",\n    value: function _renderBorderDecoration() {\n      this._renderBorderVisible();\n    }\n  }, {\n    key: \"_getCurrentMenus\",\n    value: function _getCurrentMenus() {\n      if (this.menuBarVisible) {\n        return [];\n      }\n\n      return _get(_getPrototypeOf(GroupBox.prototype), \"_getCurrentMenus\", this).call(this);\n    }\n  }, {\n    key: \"setMenuBarVisible\",\n    value: function setMenuBarVisible(visible) {\n      this.setProperty('menuBarVisible', visible);\n    }\n  }, {\n    key: \"_setMenuBarVisible\",\n    value: function _setMenuBarVisible(visible) {\n      this._setProperty('menuBarVisible', visible);\n\n      this._updateMenuBar();\n    }\n  }, {\n    key: \"_renderMenuBarVisible\",\n    value: function _renderMenuBarVisible() {\n      if (this.menuBarVisible) {\n        this._renderMenuBar();\n      } else {\n        this.menuBar.remove();\n      }\n\n      this._updateMenus();\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"_renderMenuBar\",\n    value: function _renderMenuBar() {\n      this.menuBar.render();\n\n      if (this.menuBarPosition === GroupBox.MenuBarPosition.TITLE) {\n        // move right of title\n        this.menuBar.$container.insertAfter(this.$subLabel);\n      } else if (this.menuBar.position === MenuBar.Position.TOP) {\n        // move below title\n        this.menuBar.$container.insertAfter(this.$title);\n      }\n    }\n  }, {\n    key: \"setMenuBarPosition\",\n    value: function setMenuBarPosition(menuBarPosition) {\n      this.setProperty('menuBarPosition', menuBarPosition);\n    }\n  }, {\n    key: \"_renderMenuBarPosition\",\n    value: function _renderMenuBarPosition() {\n      var position = this.menuBarPosition;\n\n      if (position === GroupBox.MenuBarPosition.AUTO) {\n        position = GroupBox.MenuBarPosition.TOP;\n      }\n\n      var hasMenubar = position === GroupBox.MenuBarPosition.TITLE;\n      this.$title.toggleClass('has-menubar', hasMenubar);\n\n      if (position === GroupBox.MenuBarPosition.BOTTOM) {\n        this.menuBar.setPosition(MenuBar.Position.BOTTOM);\n      } else {\n        // top + title\n        this.menuBar.setPosition(MenuBar.Position.TOP);\n      }\n\n      if (this.rendered) {\n        this.menuBar.remove();\n\n        this._renderMenuBarVisible();\n      }\n    }\n  }, {\n    key: \"setMenuBarEllipsisPosition\",\n    value: function setMenuBarEllipsisPosition(menuBarEllipsisPosition) {\n      this.setProperty('menuBarEllipsisPosition', menuBarEllipsisPosition);\n      this.menuBar.setEllipsisPosition(menuBarEllipsisPosition);\n    }\n  }, {\n    key: \"_renderMenuBarEllipsisPosition\",\n    value: function _renderMenuBarEllipsisPosition() {\n      this.menuBar.reorderMenus();\n\n      if (this.rendered) {\n        this.menuBar.remove();\n\n        this._renderMenuBarVisible();\n      }\n    }\n    /**\n     *\n     * @returns {boolean} false if it is the mainbox. Or if the groupbox contains exactly one tablefield which has an invisible label\n     */\n\n  }, {\n    key: \"_computeBorderVisible\",\n    value: function _computeBorderVisible(borderVisible) {\n      if (this.mainBox) {\n        borderVisible = false;\n      } else if (this.parent instanceof GroupBox && this.parent.parent instanceof Form && this.parent.parent.parent instanceof WrappedFormField && this.parent.parent.parent.parent instanceof SplitBox && this.parent.getFields().length === 1) {\n        // Special case for wizard: wrapped form in split box with a single group box\n        borderVisible = false;\n      }\n\n      return borderVisible;\n    }\n  }, {\n    key: \"setExpandable\",\n    value: function setExpandable(expandable) {\n      this.setProperty('expandable', expandable);\n    }\n  }, {\n    key: \"_renderExpandable\",\n    value: function _renderExpandable() {\n      var expandable = this.expandable;\n      var $control = this.$title.children('.group-box-control');\n\n      if (expandable) {\n        if ($control.length === 0) {\n          // Create control if necessary\n          this.$container.makeDiv('group-box-control').on('click', this._onControlClick.bind(this)).insertAfter(this.$label);\n        }\n\n        this.$title.addClass('expandable').on('click.group-box-control', this._onControlClick.bind(this));\n      } else {\n        $control.remove();\n        this.$title.removeClass('expandable').off('.group-box-control');\n      }\n    }\n  }, {\n    key: \"setExpanded\",\n    value: function setExpanded(expanded) {\n      this.setProperty('expanded', expanded);\n    }\n  }, {\n    key: \"_renderExpanded\",\n    value: function _renderExpanded() {\n      this.$container.toggleClass('collapsed', !this.expanded); // Group boxes have set \"useUiHeight=true\" by default. When a group box is collapsed, it should not\n      // stretched vertically (no \"weight Y\"). However, because \"weightY\" is -1 by default, a calculated value\n      // is assigned (LogicalGridData._inheritWeightY()) that is based on the group boxes height. In collapsed\n      // state, this height would be wrong. Therefore, we manually assign \"weightY=0\" to collapsed group boxes\n      // to prevent them from beeing stretched.\n\n      if (this.expanded) {\n        // If group box was previously collapsed, restore original \"weightY\" griaData value\n        if (this._collapsedWeightY !== undefined) {\n          this.gridData.weightY = this._collapsedWeightY;\n          delete this._collapsedWeightY;\n        } // Update inner layout (e.g. menubar)\n\n\n        this.invalidateLayout();\n\n        this._renderControls();\n      } else {\n        // If group box has a weight different than 0, we set it to zero and back up the old value\n        if (this.gridData.weightY !== 0) {\n          this._collapsedWeightY = this.gridData.weightY;\n          this.gridData.weightY = 0;\n        }\n      }\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"setGridColumnCount\",\n    value: function setGridColumnCount(gridColumnCount) {\n      this.setProperty('gridColumnCount', gridColumnCount);\n      this.invalidateLogicalGrid();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"invalidateLogicalGrid\",\n    value: function invalidateLogicalGrid(invalidateLayout) {\n      _get(_getPrototypeOf(GroupBox.prototype), \"invalidateLogicalGrid\", this).call(this, false);\n\n      if (scout.nvl(invalidateLayout, true) && this.rendered) {\n        this.htmlBody.invalidateLayoutTree();\n      }\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_setLogicalGrid\",\n    value: function _setLogicalGrid(logicalGrid) {\n      _get(_getPrototypeOf(GroupBox.prototype), \"_setLogicalGrid\", this).call(this, logicalGrid);\n\n      if (this.logicalGrid) {\n        this.logicalGrid.setGridConfig(new GroupBoxGridConfig());\n      }\n    }\n    /**\n     * @override FormField.js\n     */\n\n  }, {\n    key: \"_renderLabelVisible\",\n    value: function _renderLabelVisible(labelVisible) {\n      this.$title.setVisible(this._computeTitleVisible(labelVisible));\n\n      this._updateFieldStatus();\n\n      if (this.menuBarPosition === GroupBox.MenuBarPosition.TITLE) {\n        this.invalidateLayoutTree();\n      }\n    }\n  }, {\n    key: \"_computeTitleVisible\",\n    value: function _computeTitleVisible(labelVisible) {\n      labelVisible = scout.nvl(labelVisible, this.labelVisible);\n      return !!(labelVisible && this.label && !this.mainBox);\n    }\n    /**\n     * @override FormField.js\n     *\n     * Only show the group box status if title is visible.\n     */\n\n  }, {\n    key: \"_computeStatusVisible\",\n    value: function _computeStatusVisible() {\n      return _get(_getPrototypeOf(GroupBox.prototype), \"_computeStatusVisible\", this).call(this) && this._computeTitleVisible();\n    }\n  }, {\n    key: \"_setMenus\",\n    value: function _setMenus(menus) {\n      _get(_getPrototypeOf(GroupBox.prototype), \"_setMenus\", this).call(this, menus);\n\n      if (this.menuBar) {\n        // updateMenuBar is required because menuBar is not created yet when synMenus is called initially\n        this._updateMenuBar();\n      }\n    }\n  }, {\n    key: \"_updateMenuBar\",\n    value: function _updateMenuBar() {\n      if (!this.menuBarVisible) {\n        // Do not update menuBar while it is invisible, the menus may now be managed by another widget.\n        // -> this makes sure the parent is not accidentally set to the group box, the other widget should remain responsible\n        return;\n      }\n\n      var menus = this.staticMenus.concat(this.processMenus).concat(this.menus);\n      this.menuBar.setMenuItems(menus);\n    }\n  }, {\n    key: \"_removeMenus\",\n    value: function _removeMenus() {// menubar takes care about removal\n    }\n  }, {\n    key: \"setStaticMenus\",\n    value: function setStaticMenus(staticMenus) {\n      this.setProperty('staticMenus', staticMenus);\n\n      this._updateMenuBar();\n    }\n  }, {\n    key: \"_onControlClick\",\n    value: function _onControlClick(event) {\n      if (this.expandable) {\n        this.setExpanded(!this.expanded); // Prevent flickering when expanding the group box\n\n        this.validateLayoutTree();\n      }\n\n      $.suppressEvent(event); // otherwise, the event would be triggered twice sometimes (by group-box-control and group-box-title)\n    }\n  }, {\n    key: \"setResponsive\",\n    value: function setResponsive(responsive) {\n      this.setProperty('responsive', responsive);\n    }\n  }, {\n    key: \"_setResponsive\",\n    value: function _setResponsive(responsive) {\n      this._setProperty('responsive', responsive);\n\n      if (!this.initialized) {\n        return;\n      }\n\n      if (this.responsive) {\n        ResponsiveManager.get().reset(this, true);\n      } else {\n        ResponsiveManager.get().reset(this, true);\n\n        if (this.responsive === null) {\n          var parent = this.findParent(function (parent) {\n            return parent instanceof GroupBox && parent.responsive;\n          });\n          ResponsiveManager.get().reset(parent, true);\n        }\n      }\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(model, options) {\n      var clone = _get(_getPrototypeOf(GroupBox.prototype), \"clone\", this).call(this, model);\n\n      this._deepCloneProperties(clone, ['fields'], options);\n\n      clone._prepareFields();\n\n      return clone;\n    }\n  }]);\n\n  return GroupBox;\n}(CompositeField);\n\n_defineProperty(GroupBox, \"BorderDecoration\", {\n  AUTO: 'auto',\n  EMPTY: 'empty',\n  LINE: 'line'\n});\n\n_defineProperty(GroupBox, \"MenuBarPosition\", {\n  AUTO: 'auto',\n  TOP: 'top',\n  BOTTOM: 'bottom',\n  TITLE: 'title'\n});\n\nexport { GroupBox as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/groupbox/GroupBox.js"],"names":["arrays","Button","ButtonAdapterMenu","CompositeField","Form","FormField","GroupBoxGridConfig","GroupBoxLayout","GroupBoxMenuItemsOrder","HAlign","HtmlComponent","LogicalGridData","LogicalGridLayout","LogicalGridLayoutConfig","MenuBar","ResponsiveManager","scout","SplitBox","strings","TabBox","TabItemKeyStroke","tooltips","WrappedFormField","$","GroupBox","_addWidgetProperties","_addCloneProperties","fields","menus","menuBarVisible","menuBarPosition","MenuBarPosition","AUTO","menuBarEllipsisPosition","EllipsisPosition","RIGHT","notification","bodyLayoutConfig","borderDecoration","BorderDecoration","borderVisible","mainBox","scrollable","expandable","expanded","logicalGrid","create","gridColumnCount","gridDataHints","useUiHeight","w","FULL_WIDTH","controls","systemButtons","customButtons","processButtons","processMenus","staticMenus","responsive","$body","$title","$subLabel","model","resolveConsts","property","constType","_setBodyLayoutConfig","menuBar","parent","menuOrder","ellipsisPosition","_setFields","_setMainBox","_updateMenuBar","get","registerHandler","widget","_setResponsive","unregisterHandler","field","index","newFields","slice","nvl","length","splice","setFields","sibling","assertParameter","indexOf","insertField","setProperty","_setProperty","_prepareFields","_renderExpanded","invalidateLogicalGrid","keyStrokeContext","invokeAcceptInputOnActiveValueField","$bindTarget","_keyStrokeBindTarget","bind","keyStrokes","ensure","groupBoxRenderingHints","render","offset","hAlign","$drawingArea","event","labelVisible","forEach","keyStroke","actionKeyStroke","renderingHints","extend","form","getForm","$container","addContainer","$parent","appendDiv","addLabel","addSubLabel","addStatus","htmlBody","install","session","setLayout","_createBodyLayout","_removeSubLabel","_renderScrollable","_renderBodyLayoutConfig","_renderNotification","_renderBorderVisible","_renderExpandable","_renderMenuBarPosition","_renderMenuBarEllipsisPosition","_renderMenuBarVisible","_renderSubLabel","oldMinWidth","layout","minWidth","applyToLayout","rendered","invalidateLayoutTree","_removeControls","_renderControls","control","remove","setLayoutData","installForEllipsis","uninstall","subLabel","setVisible","hasText","textOrNbsp","toggleClass","isVisible","_uninstallScrollbars","_installScrollbars","axis","setCssClass","setScrollable","setResponsive","$label","label","_renderLabelVisible","_updateStatusPosition","fieldStatus","statusPosition","StatusPosition","TOP","$status","appendTo","insertBefore","_unregisterButtonKeyStrokes","i","processButton","push","systemType","SystemType","NONE","_registerButtonKeyStrokes","k","tabItems","selectionKeystroke","registerKeyStroke","map","button","adaptButtonProperties","menubar","defaultMenu","defaultButton","registerKeyStrokes","unregisterKeyStroke","_computeBorderVisible","visible","_renderMenuBar","_updateMenus","TITLE","insertAfter","position","Position","hasMenubar","BOTTOM","setPosition","setEllipsisPosition","reorderMenus","getFields","$control","children","makeDiv","on","_onControlClick","addClass","removeClass","off","_collapsedWeightY","undefined","gridData","weightY","invalidateLayout","setGridConfig","_computeTitleVisible","_updateFieldStatus","concat","setMenuItems","setExpanded","validateLayoutTree","suppressEvent","initialized","reset","findParent","options","clone","_deepCloneProperties","EMPTY","LINE"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {\n  arrays,\n  Button,\n  ButtonAdapterMenu,\n  CompositeField,\n  Form,\n  FormField,\n  GroupBoxGridConfig,\n  GroupBoxLayout,\n  GroupBoxMenuItemsOrder,\n  HAlign,\n  HtmlComponent,\n  LogicalGridData,\n  LogicalGridLayout,\n  LogicalGridLayoutConfig,\n  MenuBar,\n  ResponsiveManager,\n  scout,\n  SplitBox,\n  strings,\n  TabBox,\n  TabItemKeyStroke,\n  tooltips,\n  WrappedFormField\n} from '../../../index';\nimport $ from 'jquery';\n\nexport default class GroupBox extends CompositeField {\n\n  constructor() {\n    super();\n    this._addWidgetProperties(['fields', 'notification', 'staticMenus']);\n    this._addCloneProperties(['menuBarVisible', 'bodyLayoutConfig', 'borderDecoration', 'borderVisible', 'expandable', 'expanded', 'gridColumnCount', 'scrollable', 'subLabel']);\n\n    this.fields = [];\n    this.menus = [];\n    this.menuBarVisible = true;\n    this.menuBarPosition = GroupBox.MenuBarPosition.AUTO;\n    this.menuBarEllipsisPosition = MenuBar.EllipsisPosition.RIGHT;\n    this.notification = null;\n    this.bodyLayoutConfig = null;\n    this.borderDecoration = GroupBox.BorderDecoration.AUTO;\n    this.borderVisible = true;\n    this.mainBox = false;\n    // set to null to enable conditional default\n    // -> it will be set to true if it is a mainbox unless it was explicitly set to false\n    this.scrollable = null;\n    this.expandable = false;\n    this.expanded = true;\n    this.logicalGrid = scout.create('scout.VerticalSmartGrid');\n    this.gridColumnCount = 2;\n    this.gridDataHints.useUiHeight = true;\n    this.gridDataHints.w = FormField.FULL_WIDTH;\n    this.controls = [];\n    this.systemButtons = [];\n    this.customButtons = [];\n    this.processButtons = [];\n    this.processMenus = [];\n    this.staticMenus = [];\n    this.responsive = null;\n\n    this.$body = null;\n    this.$title = null;\n    this.$subLabel = null;\n  }\n\n  static BorderDecoration = {\n    AUTO: 'auto',\n    EMPTY: 'empty',\n    LINE: 'line'\n  };\n\n  static MenuBarPosition = {\n    AUTO: 'auto',\n    TOP: 'top',\n    BOTTOM: 'bottom',\n    TITLE: 'title'\n  };\n\n  _init(model) {\n    super._init(model);\n    this.resolveConsts([{\n      property: 'menuBarPosition',\n      constType: GroupBox.MenuBarPosition\n    }]);\n    this._setBodyLayoutConfig(this.bodyLayoutConfig);\n    this.menuBar = scout.create('MenuBar', {\n      parent: this,\n      menuOrder: new GroupBoxMenuItemsOrder(),\n      ellipsisPosition: this.menuBarEllipsisPosition\n    });\n    this._setFields(this.fields);\n    this._setMainBox(this.mainBox);\n    this._updateMenuBar();\n\n    ResponsiveManager.get().registerHandler(this, scout.create('GroupBoxResponsiveHandler', {\n      widget: this\n    }));\n\n    this._setResponsive(this.responsive);\n  }\n\n  _destroy() {\n    ResponsiveManager.get().unregisterHandler(this);\n    super._destroy();\n  }\n\n  /**\n   * @override\n   */\n  getFields() {\n    return this.fields;\n  }\n\n  insertField(field, index) {\n    var newFields = this.fields.slice();\n    index = scout.nvl(index, this.fields.length);\n    newFields.splice(index, 0, field);\n    this.setFields(newFields);\n  }\n\n  insertFieldBefore(field, sibling) {\n    scout.assertParameter('sibling', sibling);\n    var index = this.fields.indexOf(sibling);\n    this.insertField(field, index);\n  }\n\n  insertFieldAfter(field, sibling) {\n    scout.assertParameter('sibling', sibling);\n    var index = this.fields.indexOf(sibling) + 1;\n    this.insertField(field, index);\n  }\n\n  deleteField(field) {\n    var newFields = this.fields.slice(),\n      index = this.fields.indexOf(field);\n    if (index < 0) {\n      return;\n    }\n    newFields.splice(index, 1);\n    this.setFields(newFields);\n  }\n\n  setFields(fields) {\n    this.setProperty('fields', fields);\n  }\n\n  _setFields(fields) {\n    this._setProperty('fields', fields);\n    this._prepareFields();\n  }\n\n  _renderFields(fields) {\n    this._renderExpanded();\n    this.invalidateLogicalGrid(true);\n  }\n\n  /**\n   * @override\n   */\n  _initKeyStrokeContext() {\n    super._initKeyStrokeContext();\n    this.keyStrokeContext.invokeAcceptInputOnActiveValueField = true;\n    this.keyStrokeContext.$bindTarget = this._keyStrokeBindTarget.bind(this);\n  }\n\n  /**\n   * @override FormField.js\n   */\n  _setKeyStrokes(keyStrokes) {\n    keyStrokes = arrays.ensure(keyStrokes);\n\n    var groupBoxRenderingHints = {\n      render: function() {\n        return true;\n      },\n      offset: 0,\n      hAlign: HAlign.RIGHT,\n      $drawingArea: function($drawingArea, event) {\n        if (this.labelVisible) {\n          return this.$title;\n        }\n        return this.$body;\n      }.bind(this)\n    };\n\n    keyStrokes\n      .forEach(function(keyStroke) {\n        keyStroke.actionKeyStroke.renderingHints = $.extend({}, keyStroke.actionKeyStroke.renderingHints, groupBoxRenderingHints);\n      }, this);\n\n    super._setKeyStrokes(keyStrokes);\n  }\n\n  /**\n   * Returns a $container used as a bind target for the key-stroke context of the group-box.\n   * By default this function returns the container of the form, or when group-box is has no\n   * form as a parent the container of the group-box.\n   */\n  _keyStrokeBindTarget() {\n    var form = this.getForm();\n    if (form) {\n      // keystrokes on a group-box have form scope\n      return form.$container;\n    }\n    return this.$container;\n  }\n\n  _render() {\n    this.addContainer(this.$parent, this.mainBox ? 'root-group-box' : 'group-box');\n\n    this.$title = this.$container.appendDiv('group-box-title');\n    this.addLabel();\n    this.addSubLabel();\n    this.addStatus();\n    this.$body = this.$container.appendDiv('group-box-body');\n    this.htmlBody = HtmlComponent.install(this.$body, this.session);\n    this.htmlBody.setLayout(this._createBodyLayout());\n  }\n\n  _remove() {\n    this._removeSubLabel();\n    super._remove();\n  }\n\n  _renderProperties() {\n    this._renderScrollable(); // Need to be before renderExpanded in order to have the scrollbars when the fields are rendered. The status tooltips require a scrollable parent to move when scrolling.\n    this._renderExpanded(); // Need to be before renderVisible is executed, otherwise controls might be rendered if group box is invisible which breaks some widgets (e.g. Tree and Table)\n    super._renderProperties();\n\n    this._renderBodyLayoutConfig();\n    this._renderNotification();\n    this._renderBorderVisible();\n    this._renderExpandable();\n    this._renderMenuBarPosition();\n    this._renderMenuBarEllipsisPosition();\n    this._renderMenuBarVisible();\n    this._renderSubLabel();\n  }\n\n  _createLayout() {\n    return new GroupBoxLayout(this);\n  }\n\n  _createBodyLayout() {\n    return new LogicalGridLayout(this, this.bodyLayoutConfig);\n  }\n\n  setBodyLayoutConfig(bodyLayoutConfig) {\n    this.setProperty('bodyLayoutConfig', bodyLayoutConfig);\n  }\n\n  _setBodyLayoutConfig(bodyLayoutConfig) {\n    if (!bodyLayoutConfig) {\n      bodyLayoutConfig = new LogicalGridLayoutConfig();\n    }\n    this._setProperty('bodyLayoutConfig', LogicalGridLayoutConfig.ensure(bodyLayoutConfig));\n  }\n\n  _renderBodyLayoutConfig() {\n    var oldMinWidth = this.htmlBody.layout.minWidth;\n    this.bodyLayoutConfig.applyToLayout(this.htmlBody.layout);\n    if (oldMinWidth !== this.bodyLayoutConfig.minWidth) {\n      this._renderScrollable();\n    }\n    if (this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n\n  /**\n   * Redraws the group box body by removing and rerendering every control.\n   * This may be necessary if a field does not support a dynamic property change and therefore needs to be redrawn completely to reflect the change.\n   */\n  rerenderControls() {\n    this._removeControls();\n    this._renderControls();\n    this.htmlBody.invalidateLayoutTree();\n  }\n\n  _removeControls() {\n    this.controls.forEach(function(control) {\n      control.remove();\n    }, this);\n  }\n\n  _renderControls() {\n    this.controls.forEach(function(control) {\n      if (!control.rendered) {\n        control.render(this.$body);\n        // set each children layout data to logical grid data\n        control.setLayoutData(new LogicalGridData(control));\n      }\n    }, this);\n  }\n\n  addSubLabel() {\n    if (this.$subLabel) {\n      return;\n    }\n    this.$subLabel = this.$title.appendDiv('sub-label');\n    tooltips.installForEllipsis(this.$subLabel, {\n      parent: this\n    });\n  }\n\n  _removeSubLabel() {\n    if (!this.$subLabel) {\n      return;\n    }\n    tooltips.uninstall(this.$subLabel);\n    this.$subLabel.remove();\n    this.$subLabel = null;\n  }\n\n  setSubLabel(subLabel) {\n    this.setProperty('subLabel', subLabel);\n  }\n\n  _renderSubLabel() {\n    this.$subLabel.setVisible(strings.hasText(this.subLabel));\n    this.$subLabel.textOrNbsp(this.subLabel);\n    this.$container.toggleClass('has-sub-label', this.$subLabel.isVisible());\n    this.invalidateLayoutTree();\n  }\n\n  setScrollable(scrollable) {\n    this.setProperty('scrollable', scrollable);\n  }\n\n  _renderScrollable() {\n    this._uninstallScrollbars();\n\n    // horizontal (x-axis) scrollbar is only installed when minWidth is > 0\n    if (this.scrollable) {\n      this._installScrollbars({\n        axis: ((this.bodyLayoutConfig.minWidth > 0) ? 'both' : 'y')\n      });\n    } else if (this.bodyLayoutConfig.minWidth > 0) {\n      this._installScrollbars({\n        axis: 'x'\n      });\n    }\n  }\n\n  /**\n   * @override\n   */\n  get$Scrollable() {\n    return this.$body;\n  }\n\n  setMainBox(mainBox) {\n    this.setProperty('mainBox', mainBox);\n  }\n\n  _setMainBox(mainBox) {\n    this._setProperty('mainBox', mainBox);\n    if (this.mainBox) {\n      this.menuBar.setCssClass('main-menubar');\n      if (this.scrollable === null) {\n        this.setScrollable(true);\n      }\n      if (this.responsive === null) {\n        this.setResponsive(true);\n      }\n    }\n  }\n\n  addLabel() {\n    if (this.$label) {\n      return;\n    }\n    this.$label = this.$title.appendDiv('label');\n    tooltips.installForEllipsis(this.$label, {\n      parent: this\n    });\n  }\n\n  _renderLabel() {\n    this.$label.textOrNbsp(this.label);\n    if (this.rendered) {\n      this._renderLabelVisible();\n    }\n  }\n\n  addStatus() {\n    super.addStatus();\n    this._updateStatusPosition();\n  }\n\n  _renderStatusPosition() {\n    this._updateStatusPosition();\n  }\n\n  _updateStatusPosition() {\n    if (!this.fieldStatus) {\n      return;\n    }\n    if (this.statusPosition === FormField.StatusPosition.TOP) {\n      // move into title\n      this.$status.appendTo(this.$title);\n    } else {\n      this.$status.appendTo(this.$container);\n    }\n    this.invalidateLayoutTree();\n  }\n\n  setNotification(notification) {\n    this.setProperty('notification', notification);\n  }\n\n  _renderNotification() {\n    if (!this.notification) {\n      this.invalidateLayoutTree();\n      return;\n    }\n    this.notification.render();\n    this.notification.$container.insertBefore(this.$body);\n    this.invalidateLayoutTree();\n  }\n\n  _prepareFields() {\n    this.processButtons.forEach(this._unregisterButtonKeyStrokes.bind(this));\n\n    this.controls = [];\n    this.systemButtons = [];\n    this.customButtons = [];\n    this.processButtons = [];\n    this.processMenus = [];\n\n    var i, field;\n    for (i = 0; i < this.fields.length; i++) {\n      field = this.fields[i];\n      if (field instanceof Button) {\n        if (field.processButton) {\n          this.processButtons.push(field);\n          if (field.systemType !== Button.SystemType.NONE) {\n            this.systemButtons.push(field);\n          } else {\n            this.customButtons.push(field);\n          }\n        } else {\n          this.controls.push(field);\n          this._registerButtonKeyStrokes(field);\n        }\n      } else if (field instanceof TabBox) {\n        this.controls.push(field);\n        for (var k = 0; k < field.tabItems.length; k++) {\n          if (field.tabItems[k].selectionKeystroke) {\n            this.keyStrokeContext.registerKeyStroke(new TabItemKeyStroke(field.tabItems[k].selectionKeystroke, field.tabItems[k]));\n          }\n        }\n      } else {\n        this.controls.push(field);\n      }\n    }\n\n    // Create menu for each process button\n    this.processMenus = this.processButtons.map(function(button) {\n      return scout.create('ButtonAdapterMenu',\n        ButtonAdapterMenu.adaptButtonProperties(button, {\n          parent: this,\n          menubar: this.menuBar,\n          button: button,\n          // initially defaultMenu should only be set if defaultButton is set to true, false should not be mapped as the default defaultMenu = null setting\n          // would be overridden if this default null setting is overridden MenuBar.prototype.updateDefaultMenu would not consider these entries anymore\n          defaultMenu: button.defaultButton ? true : null\n        }));\n    }, this);\n    this.registerKeyStrokes(this.processMenus);\n  }\n\n  _unregisterButtonKeyStrokes(button) {\n    if (button.keyStrokes) {\n      button.keyStrokes.forEach(function(keyStroke) {\n        this.keyStrokeContext.unregisterKeyStroke(keyStroke);\n      }, this);\n    }\n  }\n\n  _registerButtonKeyStrokes(button) {\n    if (button.keyStrokes) {\n      button.keyStrokes.forEach(function(keyStroke) {\n        this.keyStrokeContext.registerKeyStroke(keyStroke);\n      }, this);\n    }\n  }\n\n  setBorderVisible(borderVisible) {\n    this.setProperty('borderVisible', borderVisible);\n  }\n\n  _renderBorderVisible() {\n    var borderVisible = this.borderVisible;\n    if (this.borderDecoration === GroupBox.BorderDecoration.AUTO) {\n      borderVisible = this._computeBorderVisible(borderVisible);\n    }\n\n    this.$body.toggleClass('y-padding-invisible', !borderVisible);\n    this.invalidateLayoutTree();\n  }\n\n  setBorderDecoration(borderDecoration) {\n    this.setProperty('borderDecoration', borderDecoration);\n  }\n\n  // Don't include in renderProperties, it is not necessary to execute it initially because renderBorderVisible is executed already\n  _renderBorderDecoration() {\n    this._renderBorderVisible();\n  }\n\n  _getCurrentMenus() {\n    if (this.menuBarVisible) {\n      return [];\n    }\n    return super._getCurrentMenus();\n  }\n\n  setMenuBarVisible(visible) {\n    this.setProperty('menuBarVisible', visible);\n  }\n\n  _setMenuBarVisible(visible) {\n    this._setProperty('menuBarVisible', visible);\n    this._updateMenuBar();\n  }\n\n  _renderMenuBarVisible() {\n    if (this.menuBarVisible) {\n      this._renderMenuBar();\n    } else {\n      this.menuBar.remove();\n    }\n    this._updateMenus();\n    this.invalidateLayoutTree();\n  }\n\n  _renderMenuBar() {\n    this.menuBar.render();\n    if (this.menuBarPosition === GroupBox.MenuBarPosition.TITLE) {\n      // move right of title\n      this.menuBar.$container.insertAfter(this.$subLabel);\n    } else if (this.menuBar.position === MenuBar.Position.TOP) {\n      // move below title\n      this.menuBar.$container.insertAfter(this.$title);\n    }\n  }\n\n  setMenuBarPosition(menuBarPosition) {\n    this.setProperty('menuBarPosition', menuBarPosition);\n  }\n\n  _renderMenuBarPosition() {\n    var position = this.menuBarPosition;\n    if (position === GroupBox.MenuBarPosition.AUTO) {\n      position = GroupBox.MenuBarPosition.TOP;\n    }\n\n    var hasMenubar = position === GroupBox.MenuBarPosition.TITLE;\n    this.$title.toggleClass('has-menubar', hasMenubar);\n\n    if (position === GroupBox.MenuBarPosition.BOTTOM) {\n      this.menuBar.setPosition(MenuBar.Position.BOTTOM);\n    } else { // top + title\n      this.menuBar.setPosition(MenuBar.Position.TOP);\n    }\n\n    if (this.rendered) {\n      this.menuBar.remove();\n      this._renderMenuBarVisible();\n    }\n  }\n\n  setMenuBarEllipsisPosition(menuBarEllipsisPosition) {\n    this.setProperty('menuBarEllipsisPosition', menuBarEllipsisPosition);\n    this.menuBar.setEllipsisPosition(menuBarEllipsisPosition);\n  }\n\n  _renderMenuBarEllipsisPosition() {\n    this.menuBar.reorderMenus();\n    if (this.rendered) {\n      this.menuBar.remove();\n      this._renderMenuBarVisible();\n    }\n  }\n\n  /**\n   *\n   * @returns {boolean} false if it is the mainbox. Or if the groupbox contains exactly one tablefield which has an invisible label\n   */\n  _computeBorderVisible(borderVisible) {\n    if (this.mainBox) {\n      borderVisible = false;\n    } else if (this.parent instanceof GroupBox &&\n      this.parent.parent instanceof Form &&\n      this.parent.parent.parent instanceof WrappedFormField &&\n      this.parent.parent.parent.parent instanceof SplitBox &&\n      this.parent.getFields().length === 1) {\n      // Special case for wizard: wrapped form in split box with a single group box\n      borderVisible = false;\n    }\n    return borderVisible;\n  }\n\n  setExpandable(expandable) {\n    this.setProperty('expandable', expandable);\n  }\n\n  _renderExpandable() {\n    var expandable = this.expandable;\n    var $control = this.$title.children('.group-box-control');\n\n    if (expandable) {\n      if ($control.length === 0) {\n        // Create control if necessary\n        this.$container.makeDiv('group-box-control')\n          .on('click', this._onControlClick.bind(this))\n          .insertAfter(this.$label);\n      }\n      this.$title\n        .addClass('expandable')\n        .on('click.group-box-control', this._onControlClick.bind(this));\n    } else {\n      $control.remove();\n      this.$title\n        .removeClass('expandable')\n        .off('.group-box-control');\n    }\n  }\n\n  setExpanded(expanded) {\n    this.setProperty('expanded', expanded);\n  }\n\n  _renderExpanded() {\n    this.$container.toggleClass('collapsed', !this.expanded);\n\n    // Group boxes have set \"useUiHeight=true\" by default. When a group box is collapsed, it should not\n    // stretched vertically (no \"weight Y\"). However, because \"weightY\" is -1 by default, a calculated value\n    // is assigned (LogicalGridData._inheritWeightY()) that is based on the group boxes height. In collapsed\n    // state, this height would be wrong. Therefore, we manually assign \"weightY=0\" to collapsed group boxes\n    // to prevent them from beeing stretched.\n    if (this.expanded) {\n      // If group box was previously collapsed, restore original \"weightY\" griaData value\n      if (this._collapsedWeightY !== undefined) {\n        this.gridData.weightY = this._collapsedWeightY;\n        delete this._collapsedWeightY;\n      }\n      // Update inner layout (e.g. menubar)\n      this.invalidateLayout();\n      this._renderControls();\n    } else {\n      // If group box has a weight different than 0, we set it to zero and back up the old value\n      if (this.gridData.weightY !== 0) {\n        this._collapsedWeightY = this.gridData.weightY;\n        this.gridData.weightY = 0;\n      }\n    }\n\n    this.invalidateLayoutTree();\n  }\n\n  setGridColumnCount(gridColumnCount) {\n    this.setProperty('gridColumnCount', gridColumnCount);\n    this.invalidateLogicalGrid();\n  }\n\n  /**\n   * @override\n   */\n  invalidateLogicalGrid(invalidateLayout) {\n    super.invalidateLogicalGrid(false);\n    if (scout.nvl(invalidateLayout, true) && this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _setLogicalGrid(logicalGrid) {\n    super._setLogicalGrid(logicalGrid);\n    if (this.logicalGrid) {\n      this.logicalGrid.setGridConfig(new GroupBoxGridConfig());\n    }\n  }\n\n  /**\n   * @override FormField.js\n   */\n  _renderLabelVisible(labelVisible) {\n    this.$title.setVisible(this._computeTitleVisible(labelVisible));\n    this._updateFieldStatus();\n    if (this.menuBarPosition === GroupBox.MenuBarPosition.TITLE) {\n      this.invalidateLayoutTree();\n    }\n  }\n\n  _computeTitleVisible(labelVisible) {\n    labelVisible = scout.nvl(labelVisible, this.labelVisible);\n    return !!(labelVisible && this.label && !this.mainBox);\n  }\n\n  /**\n   * @override FormField.js\n   *\n   * Only show the group box status if title is visible.\n   */\n  _computeStatusVisible() {\n    return super._computeStatusVisible() && this._computeTitleVisible();\n  }\n\n  _setMenus(menus) {\n    super._setMenus(menus);\n\n    if (this.menuBar) {\n      // updateMenuBar is required because menuBar is not created yet when synMenus is called initially\n      this._updateMenuBar();\n    }\n  }\n\n  _updateMenuBar() {\n    if (!this.menuBarVisible) {\n      // Do not update menuBar while it is invisible, the menus may now be managed by another widget.\n      // -> this makes sure the parent is not accidentally set to the group box, the other widget should remain responsible\n      return;\n    }\n    var menus = this.staticMenus\n      .concat(this.processMenus)\n      .concat(this.menus);\n\n    this.menuBar.setMenuItems(menus);\n  }\n\n  _removeMenus() {\n    // menubar takes care about removal\n  }\n\n  setStaticMenus(staticMenus) {\n    this.setProperty('staticMenus', staticMenus);\n    this._updateMenuBar();\n  }\n\n  _onControlClick(event) {\n    if (this.expandable) {\n      this.setExpanded(!this.expanded);\n      // Prevent flickering when expanding the group box\n      this.validateLayoutTree();\n    }\n    $.suppressEvent(event); // otherwise, the event would be triggered twice sometimes (by group-box-control and group-box-title)\n  }\n\n  setResponsive(responsive) {\n    this.setProperty('responsive', responsive);\n  }\n\n  _setResponsive(responsive) {\n    this._setProperty('responsive', responsive);\n\n    if (!this.initialized) {\n      return;\n    }\n    if (this.responsive) {\n      ResponsiveManager.get().reset(this, true);\n    } else {\n      ResponsiveManager.get().reset(this, true);\n      if (this.responsive === null) {\n        var parent = this.findParent(function(parent) {\n          return parent instanceof GroupBox && parent.responsive;\n        });\n        ResponsiveManager.get().reset(parent, true);\n      }\n    }\n    this.invalidateLayoutTree();\n  }\n\n  clone(model, options) {\n    var clone = super.clone(model);\n    this._deepCloneProperties(clone, ['fields'], options);\n    clone._prepareFields();\n    return clone;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}