{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AppLinkKeyStroke, ValueField } from '../../../index';\nimport $ from 'jquery';\n/**\n * Base class for fields where the value should be visualized.\n */\n\nvar BeanField = /*#__PURE__*/function (_ValueField) {\n  _inherits(BeanField, _ValueField);\n\n  var _super = _createSuper(BeanField);\n\n  function BeanField() {\n    var _this;\n\n    _classCallCheck(this, BeanField);\n\n    _this = _super.call(this);\n    _this.preventInitialFocus = true;\n    return _this;\n  }\n\n  _createClass(BeanField, [{\n    key: \"_render\",\n    value: function _render() {\n      this.addContainer(this.$parent, 'bean-field');\n      this.addLabel();\n      this.addField(this.$parent.makeDiv());\n      this.addStatus();\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(BeanField.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderValue();\n    }\n    /**\n     * @override FormField.js\n     */\n\n  }, {\n    key: \"_initKeyStrokeContext\",\n    value: function _initKeyStrokeContext() {\n      _get(_getPrototypeOf(BeanField.prototype), \"_initKeyStrokeContext\", this).call(this);\n\n      this.keyStrokeContext.registerKeyStroke(new AppLinkKeyStroke(this, this._onAppLinkAction));\n    }\n  }, {\n    key: \"_formatValue\",\n    value: function _formatValue(value) {\n      // The value cannot be changed by the user, therefore we always return the initial displayText property.\n      //\n      // Strange things happen, if an other value is returned... Example:\n      // 1. The value is set asynchronously on the field using setValue().\n      // 2. This causes the display text to be updated (using _formatValue).\n      // 3. When acceptInput() is called (via aboutToBlurByMouseDown), the \"current\" displayText\n      //    is read using _readDisplayText(). The default ValueField.js implementation returns\n      //    an empty string, which is different from this.displayText (which is equal to the value,\n      //    because of step 2).\n      // 4. Because the displayText has changed, parseAndSetValue() is called, which\n      //    causes the value to be set to the empty string. The _renderValue() method\n      //    will then most likely clear the bean field's content.\n      //\n      // Test case:\n      //   bf.setValue({...}) --> should not update displayText property\n      //   bf.acceptInput() --> should not do anything\n      return this.displayText;\n    }\n  }, {\n    key: \"_parseValue\",\n    value: function _parseValue(displayText) {\n      // DisplayText cannot be converted to value, use original value (see comment in _formatValue).\n      return this.value;\n    }\n  }, {\n    key: \"_readDisplayText\",\n    value: function _readDisplayText() {\n      // DisplayText cannot be changed, therefore it must be equal to the current value (see comment in _formatValue)\n      return this.displayText;\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_renderDisplayText\",\n    value: function _renderDisplayText() {// nop\n    }\n  }, {\n    key: \"_renderValue\",\n    value: function _renderValue() {// to be implemented by the subclass\n    }\n  }, {\n    key: \"triggerAppLinkAction\",\n    value: function triggerAppLinkAction(ref) {\n      this.trigger('appLinkAction', {\n        ref: ref\n      });\n    }\n  }, {\n    key: \"_onAppLinkAction\",\n    value: function _onAppLinkAction(event) {\n      var $target = $(event.delegateTarget);\n      var ref = $target.data('ref');\n      this.triggerAppLinkAction(ref);\n    }\n  }]);\n\n  return BeanField;\n}(ValueField);\n\nexport { BeanField as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/beanfield/BeanField.js"],"names":["AppLinkKeyStroke","ValueField","$","BeanField","preventInitialFocus","addContainer","$parent","addLabel","addField","makeDiv","addStatus","_renderValue","keyStrokeContext","registerKeyStroke","_onAppLinkAction","value","displayText","ref","trigger","event","$target","delegateTarget","data","triggerAppLinkAction"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,gBAAR,EAA0BC,UAA1B,QAA2C,gBAA3C;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA;AACA;AACA;;IACqBC,S;;;;;AAEnB,uBAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,mBAAL,GAA2B,IAA3B;AAHY;AAIb;;;;8BAES;AACR,WAAKC,YAAL,CAAkB,KAAKC,OAAvB,EAAgC,YAAhC;AACA,WAAKC,QAAL;AACA,WAAKC,QAAL,CAAc,KAAKF,OAAL,CAAaG,OAAb,EAAd;AACA,WAAKC,SAAL;AACD;;;wCAEmB;AAClB;;AACA,WAAKC,YAAL;AACD;AAED;AACF;AACA;;;;4CAC0B;AACtB;;AAEA,WAAKC,gBAAL,CAAsBC,iBAAtB,CAAwC,IAAIb,gBAAJ,CAAqB,IAArB,EAA2B,KAAKc,gBAAhC,CAAxC;AACD;;;iCAEYC,K,EAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,KAAKC,WAAZ;AACD;;;gCAEWA,W,EAAa;AACvB;AACA,aAAO,KAAKD,KAAZ;AACD;;;uCAEkB;AACjB;AACA,aAAO,KAAKC,WAAZ;AACD;AAED;AACF;AACA;;;;yCACuB,CACnB;AACD;;;mCAEc,CACb;AACD;;;yCAEoBC,G,EAAK;AACxB,WAAKC,OAAL,CAAa,eAAb,EAA8B;AAC5BD,QAAAA,GAAG,EAAEA;AADuB,OAA9B;AAGD;;;qCAEgBE,K,EAAO;AACtB,UAAIC,OAAO,GAAGlB,CAAC,CAACiB,KAAK,CAACE,cAAP,CAAf;AACA,UAAIJ,GAAG,GAAGG,OAAO,CAACE,IAAR,CAAa,KAAb,CAAV;AACA,WAAKC,oBAAL,CAA0BN,GAA1B;AACD;;;;EAhFoChB,U;;SAAlBE,S","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AppLinkKeyStroke, ValueField} from '../../../index';\nimport $ from 'jquery';\n\n/**\n * Base class for fields where the value should be visualized.\n */\nexport default class BeanField extends ValueField {\n\n  constructor() {\n    super();\n\n    this.preventInitialFocus = true;\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'bean-field');\n    this.addLabel();\n    this.addField(this.$parent.makeDiv());\n    this.addStatus();\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderValue();\n  }\n\n  /**\n   * @override FormField.js\n   */\n  _initKeyStrokeContext() {\n    super._initKeyStrokeContext();\n\n    this.keyStrokeContext.registerKeyStroke(new AppLinkKeyStroke(this, this._onAppLinkAction));\n  }\n\n  _formatValue(value) {\n    // The value cannot be changed by the user, therefore we always return the initial displayText property.\n    //\n    // Strange things happen, if an other value is returned... Example:\n    // 1. The value is set asynchronously on the field using setValue().\n    // 2. This causes the display text to be updated (using _formatValue).\n    // 3. When acceptInput() is called (via aboutToBlurByMouseDown), the \"current\" displayText\n    //    is read using _readDisplayText(). The default ValueField.js implementation returns\n    //    an empty string, which is different from this.displayText (which is equal to the value,\n    //    because of step 2).\n    // 4. Because the displayText has changed, parseAndSetValue() is called, which\n    //    causes the value to be set to the empty string. The _renderValue() method\n    //    will then most likely clear the bean field's content.\n    //\n    // Test case:\n    //   bf.setValue({...}) --> should not update displayText property\n    //   bf.acceptInput() --> should not do anything\n    return this.displayText;\n  }\n\n  _parseValue(displayText) {\n    // DisplayText cannot be converted to value, use original value (see comment in _formatValue).\n    return this.value;\n  }\n\n  _readDisplayText() {\n    // DisplayText cannot be changed, therefore it must be equal to the current value (see comment in _formatValue)\n    return this.displayText;\n  }\n\n  /**\n   * @override\n   */\n  _renderDisplayText() {\n    // nop\n  }\n\n  _renderValue() {\n    // to be implemented by the subclass\n  }\n\n  triggerAppLinkAction(ref) {\n    this.trigger('appLinkAction', {\n      ref: ref\n    });\n  }\n\n  _onAppLinkAction(event) {\n    var $target = $(event.delegateTarget);\n    var ref = $target.data('ref');\n    this.triggerAppLinkAction(ref);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}