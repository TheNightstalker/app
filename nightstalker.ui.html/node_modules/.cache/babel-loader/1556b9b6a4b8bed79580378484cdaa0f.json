{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { GridData, HtmlComponent, LoadingSupport, SingleLayout, strings, Widget } from '../index';\nimport $ from 'jquery';\n\nvar Tile = /*#__PURE__*/function (_Widget) {\n  _inherits(Tile, _Widget);\n\n  var _super = _createSuper(Tile);\n\n  function Tile() {\n    var _this;\n\n    _classCallCheck(this, Tile);\n\n    _this = _super.call(this);\n    _this.displayStyle = Tile.DisplayStyle.DEFAULT;\n    _this.filterAccepted = true;\n    _this.gridData = null;\n    _this.gridDataHints = new GridData();\n    _this.colorScheme = null;\n    _this.selected = false;\n    _this.selectable = false;\n    return _this;\n  } // These constants need to correspond to the IDs defined in TileColorScheme.java\n\n\n  _createClass(Tile, [{\n    key: \"_createLoadingSupport\",\n\n    /**\n     * @override\n     */\n    value: function _createLoadingSupport() {\n      return new LoadingSupport({\n        widget: this\n      });\n    }\n  }, {\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(Tile.prototype), \"_init\", this).call(this, model);\n\n      this._setGridDataHints(this.gridDataHints);\n\n      this._setColorScheme(this.colorScheme);\n\n      this._setSelectable(this.selectable);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.$container = this.$parent.appendDiv('tile');\n      this.htmlComp = HtmlComponent.install(this.$container, this.session);\n      this.htmlComp.setLayout(new SingleLayout());\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(Tile.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderColorScheme();\n\n      this._renderSelectable();\n\n      this._renderSelected();\n\n      this._renderDisplayStyle();\n    }\n  }, {\n    key: \"_postRender\",\n    value: function _postRender() {\n      this.$container.addClass('tile'); // Make sure prefSize returns the size the tile has after the animation even if it is called while the animation runs\n      // Otherwise the tile may have the wrong size after making a tile with useUiHeight = true visible\n\n      this.htmlComp.layout.animateClasses = ['animate-visible', 'animate-invisible', 'animate-insert', 'animate-remove'];\n    }\n  }, {\n    key: \"_renderDisplayStyle\",\n    value: function _renderDisplayStyle() {\n      this.$container.toggleClass('default-tile', this.displayStyle === Tile.DisplayStyle.DEFAULT);\n    }\n  }, {\n    key: \"setGridDataHints\",\n    value: function setGridDataHints(gridData) {\n      this.setProperty('gridDataHints', gridData);\n\n      if (this.rendered) {\n        // Do it here instead of _renderGridDataHints because grid does not need to be invalidated when rendering, only when hints change\n        // Otherwise it forces too many unnecessary recalculations when tile grid is rendering tiles due to virtual scrolling\n        this.parent.invalidateLogicalGrid();\n      }\n    }\n  }, {\n    key: \"_setGridDataHints\",\n    value: function _setGridDataHints(gridData) {\n      if (!gridData) {\n        gridData = new GridData();\n      }\n\n      this._setProperty('gridDataHints', GridData.ensure(gridData));\n    }\n  }, {\n    key: \"setColorScheme\",\n    value: function setColorScheme(colorScheme) {\n      this.setProperty('colorScheme', colorScheme);\n    }\n  }, {\n    key: \"_setColorScheme\",\n    value: function _setColorScheme(colorScheme) {\n      var defaultScheme = {\n        scheme: Tile.ColorSchemeId.DEFAULT,\n        inverted: false\n      };\n      colorScheme = this._ensureColorScheme(colorScheme);\n      colorScheme = $.extend({}, defaultScheme, colorScheme);\n\n      this._setProperty('colorScheme', colorScheme);\n    }\n    /**\n     * ColorScheme may be a string -> convert to an object\n     */\n\n  }, {\n    key: \"_ensureColorScheme\",\n    value: function _ensureColorScheme(colorScheme) {\n      if (_typeof(colorScheme) === 'object') {\n        return colorScheme;\n      }\n\n      var colorSchemeObj = {};\n\n      if (typeof colorScheme === 'string') {\n        // Split up colorScheme in two individual parts (\"scheme\" and \"inverted\").\n        // This information is then used when rendering the color scheme.\n        if (strings.startsWith(colorScheme, Tile.ColorSchemeId.ALTERNATIVE)) {\n          colorSchemeObj.scheme = Tile.ColorSchemeId.ALTERNATIVE;\n        }\n\n        if (strings.startsWith(colorScheme, Tile.ColorSchemeId.RAINBOW)) {\n          colorSchemeObj.scheme = Tile.ColorSchemeId.RAINBOW;\n        }\n\n        colorSchemeObj.inverted = strings.endsWith(colorScheme, '-inverted');\n      }\n\n      return colorSchemeObj;\n    }\n  }, {\n    key: \"_renderColorScheme\",\n    value: function _renderColorScheme() {\n      this.$container.toggleClass('color-alternative', this.colorScheme.scheme === Tile.ColorSchemeId.ALTERNATIVE);\n      this.$container.toggleClass('color-rainbow', this.colorScheme.scheme === Tile.ColorSchemeId.RAINBOW);\n      this.$container.toggleClass('inverted', this.colorScheme.inverted);\n    }\n  }, {\n    key: \"setSelected\",\n    value: function setSelected(selected) {\n      if (selected && !this.selectable) {\n        return;\n      }\n\n      this.setProperty('selected', selected);\n    }\n  }, {\n    key: \"_renderSelected\",\n    value: function _renderSelected() {\n      this.$container.toggleClass('selected', this.selected);\n    }\n  }, {\n    key: \"setSelectable\",\n    value: function setSelectable(selectable) {\n      this.setProperty('selectable', selectable);\n    }\n  }, {\n    key: \"_setSelectable\",\n    value: function _setSelectable(selectable) {\n      this._setProperty('selectable', selectable);\n\n      if (!this.selectable) {\n        this.setSelected(false);\n      }\n    }\n  }, {\n    key: \"_renderSelectable\",\n    value: function _renderSelectable() {\n      this.$container.toggleClass('selectable', this.selectable);\n    }\n  }, {\n    key: \"setFilterAccepted\",\n    value: function setFilterAccepted(filterAccepted) {\n      this.setProperty('filterAccepted', filterAccepted);\n    }\n  }, {\n    key: \"_renderFilterAccepted\",\n    value: function _renderFilterAccepted() {\n      this._renderVisible();\n    }\n  }, {\n    key: \"_renderVisible\",\n    value: function _renderVisible() {\n      if (this.rendering) {\n        this.$container.setVisible(this.isVisible());\n        return;\n      }\n\n      if (this.removalPending) {\n        // Do nothing if removal is in progress. May happen if filter is set, tile is removed by the filter animation, filter is removed again while animation is still running\n        // Adding animate-visible in that case would trigger the animationEnd listener of widget._removeAnimated even though it is not the remove animation which finishes\n        // That would cause the animate-visible animation to be executed twice because tileGrid._renderTile would render the tile and start the animation anew.\n        return;\n      }\n\n      if (!this.isVisible()) {\n        // Remove animate-visible first to show correct animation even if tile is made invisible while visible animation is still in progress\n        // It is also necessary if the container is made invisible before the animation is finished because animationEnd won't fire in that case\n        // which means that animate-invisible is still on the element and will trigger the (wrong) animation when container is made visible again\n        this.$container.removeClass('invisible animate-visible');\n        this.$container.addClassForAnimation('animate-invisible');\n        this.$container.oneAnimationEnd(function () {\n          // Make the element invisible after the animation (but only if visibility has not changed again in the meantime)\n          this.$container.setVisible(this.isVisible());\n        }.bind(this));\n      } else {\n        this.$container.addClass('invisible'); // Don't show it until it has the correct size and position to prevent flickering (Scout JS, non virtual)\n\n        this.$container.setVisible(true); // Wait until the tile is layouted before trying to animate it to make sure the layout does not read the size while the animation runs (because it will be the wrong one)\n\n        this.session.layoutValidator.schedulePostValidateFunction(function () {\n          if (!this.rendered || !this.isVisible()) {\n            return;\n          }\n\n          this.$container.removeClass('invisible animate-invisible');\n          this.$container.addClassForAnimation('animate-visible');\n        }.bind(this));\n      }\n\n      this.invalidateParentLogicalGrid();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this.visible && this.filterAccepted;\n    }\n  }]);\n\n  return Tile;\n}(Widget);\n\n_defineProperty(Tile, \"ColorSchemeId\", {\n  DEFAULT: 'default',\n  ALTERNATIVE: 'alternative',\n  RAINBOW: 'rainbow'\n});\n\n_defineProperty(Tile, \"DisplayStyle\", {\n  DEFAULT: 'default',\n  PLAIN: 'plain'\n});\n\nexport { Tile as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/tile/Tile.js"],"names":["GridData","HtmlComponent","LoadingSupport","SingleLayout","strings","Widget","$","Tile","displayStyle","DisplayStyle","DEFAULT","filterAccepted","gridData","gridDataHints","colorScheme","selected","selectable","widget","model","_setGridDataHints","_setColorScheme","_setSelectable","$container","$parent","appendDiv","htmlComp","install","session","setLayout","_renderColorScheme","_renderSelectable","_renderSelected","_renderDisplayStyle","addClass","layout","animateClasses","toggleClass","setProperty","rendered","parent","invalidateLogicalGrid","_setProperty","ensure","defaultScheme","scheme","ColorSchemeId","inverted","_ensureColorScheme","extend","colorSchemeObj","startsWith","ALTERNATIVE","RAINBOW","endsWith","setSelected","_renderVisible","rendering","setVisible","isVisible","removalPending","removeClass","addClassForAnimation","oneAnimationEnd","bind","layoutValidator","schedulePostValidateFunction","invalidateParentLogicalGrid","visible","PLAIN"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {GridData, HtmlComponent, LoadingSupport, SingleLayout, strings, Widget} from '../index';\nimport $ from 'jquery';\n\nexport default class Tile extends Widget {\n\n  constructor() {\n    super();\n    this.displayStyle = Tile.DisplayStyle.DEFAULT;\n    this.filterAccepted = true;\n    this.gridData = null;\n    this.gridDataHints = new GridData();\n    this.colorScheme = null;\n    this.selected = false;\n    this.selectable = false;\n  }\n\n  // These constants need to correspond to the IDs defined in TileColorScheme.java\n  static ColorSchemeId = {\n    DEFAULT: 'default',\n    ALTERNATIVE: 'alternative',\n    RAINBOW: 'rainbow'\n  };\n\n  static DisplayStyle = {\n    DEFAULT: 'default',\n    PLAIN: 'plain'\n  };\n\n  /**\n   * @override\n   */\n  _createLoadingSupport() {\n    return new LoadingSupport({\n      widget: this\n    });\n  }\n\n  _init(model) {\n    super._init(model);\n    this._setGridDataHints(this.gridDataHints);\n    this._setColorScheme(this.colorScheme);\n    this._setSelectable(this.selectable);\n  }\n\n  _render() {\n    this.$container = this.$parent.appendDiv('tile');\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(new SingleLayout());\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderColorScheme();\n    this._renderSelectable();\n    this._renderSelected();\n    this._renderDisplayStyle();\n  }\n\n  _postRender() {\n    this.$container.addClass('tile');\n    // Make sure prefSize returns the size the tile has after the animation even if it is called while the animation runs\n    // Otherwise the tile may have the wrong size after making a tile with useUiHeight = true visible\n    this.htmlComp.layout.animateClasses = ['animate-visible', 'animate-invisible', 'animate-insert', 'animate-remove'];\n  }\n\n  _renderDisplayStyle() {\n    this.$container.toggleClass('default-tile', this.displayStyle === Tile.DisplayStyle.DEFAULT);\n  }\n\n  setGridDataHints(gridData) {\n    this.setProperty('gridDataHints', gridData);\n    if (this.rendered) {\n      // Do it here instead of _renderGridDataHints because grid does not need to be invalidated when rendering, only when hints change\n      // Otherwise it forces too many unnecessary recalculations when tile grid is rendering tiles due to virtual scrolling\n      this.parent.invalidateLogicalGrid();\n    }\n  }\n\n  _setGridDataHints(gridData) {\n    if (!gridData) {\n      gridData = new GridData();\n    }\n    this._setProperty('gridDataHints', GridData.ensure(gridData));\n  }\n\n  setColorScheme(colorScheme) {\n    this.setProperty('colorScheme', colorScheme);\n  }\n\n  _setColorScheme(colorScheme) {\n    var defaultScheme = {\n      scheme: Tile.ColorSchemeId.DEFAULT,\n      inverted: false\n    };\n    colorScheme = this._ensureColorScheme(colorScheme);\n    colorScheme = $.extend({}, defaultScheme, colorScheme);\n    this._setProperty('colorScheme', colorScheme);\n  }\n\n  /**\n   * ColorScheme may be a string -> convert to an object\n   */\n  _ensureColorScheme(colorScheme) {\n    if (typeof colorScheme === 'object') {\n      return colorScheme;\n    }\n    var colorSchemeObj = {};\n    if (typeof colorScheme === 'string') {\n      // Split up colorScheme in two individual parts (\"scheme\" and \"inverted\").\n      // This information is then used when rendering the color scheme.\n      if (strings.startsWith(colorScheme, Tile.ColorSchemeId.ALTERNATIVE)) {\n        colorSchemeObj.scheme = Tile.ColorSchemeId.ALTERNATIVE;\n      }\n      if (strings.startsWith(colorScheme, Tile.ColorSchemeId.RAINBOW)) {\n        colorSchemeObj.scheme = Tile.ColorSchemeId.RAINBOW;\n      }\n      colorSchemeObj.inverted = strings.endsWith(colorScheme, '-inverted');\n    }\n    return colorSchemeObj;\n  }\n\n  _renderColorScheme() {\n    this.$container.toggleClass('color-alternative', (this.colorScheme.scheme === Tile.ColorSchemeId.ALTERNATIVE));\n    this.$container.toggleClass('color-rainbow', (this.colorScheme.scheme === Tile.ColorSchemeId.RAINBOW));\n    this.$container.toggleClass('inverted', this.colorScheme.inverted);\n  }\n\n  setSelected(selected) {\n    if (selected && !this.selectable) {\n      return;\n    }\n    this.setProperty('selected', selected);\n  }\n\n  _renderSelected() {\n    this.$container.toggleClass('selected', this.selected);\n  }\n\n  setSelectable(selectable) {\n    this.setProperty('selectable', selectable);\n  }\n\n  _setSelectable(selectable) {\n    this._setProperty('selectable', selectable);\n    if (!this.selectable) {\n      this.setSelected(false);\n    }\n  }\n\n  _renderSelectable() {\n    this.$container.toggleClass('selectable', this.selectable);\n  }\n\n  setFilterAccepted(filterAccepted) {\n    this.setProperty('filterAccepted', filterAccepted);\n  }\n\n  _renderFilterAccepted() {\n    this._renderVisible();\n  }\n\n  _renderVisible() {\n    if (this.rendering) {\n      this.$container.setVisible(this.isVisible());\n      return;\n    }\n    if (this.removalPending) {\n      // Do nothing if removal is in progress. May happen if filter is set, tile is removed by the filter animation, filter is removed again while animation is still running\n      // Adding animate-visible in that case would trigger the animationEnd listener of widget._removeAnimated even though it is not the remove animation which finishes\n      // That would cause the animate-visible animation to be executed twice because tileGrid._renderTile would render the tile and start the animation anew.\n      return;\n    }\n    if (!this.isVisible()) {\n      // Remove animate-visible first to show correct animation even if tile is made invisible while visible animation is still in progress\n      // It is also necessary if the container is made invisible before the animation is finished because animationEnd won't fire in that case\n      // which means that animate-invisible is still on the element and will trigger the (wrong) animation when container is made visible again\n      this.$container.removeClass('invisible animate-visible');\n      this.$container.addClassForAnimation('animate-invisible');\n      this.$container.oneAnimationEnd(function() {\n        // Make the element invisible after the animation (but only if visibility has not changed again in the meantime)\n        this.$container.setVisible(this.isVisible());\n      }.bind(this));\n    } else {\n      this.$container.addClass('invisible'); // Don't show it until it has the correct size and position to prevent flickering (Scout JS, non virtual)\n      this.$container.setVisible(true);\n      // Wait until the tile is layouted before trying to animate it to make sure the layout does not read the size while the animation runs (because it will be the wrong one)\n      this.session.layoutValidator.schedulePostValidateFunction(function() {\n        if (!this.rendered || !this.isVisible()) {\n          return;\n        }\n        this.$container.removeClass('invisible animate-invisible');\n        this.$container.addClassForAnimation('animate-visible');\n      }.bind(this));\n    }\n    this.invalidateParentLogicalGrid();\n  }\n\n  /**\n   * @override\n   */\n  isVisible() {\n    return this.visible && this.filterAccepted;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}