{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { BasicField, Calculator, DecimalFormat, fields, InputFieldKeyStrokeContext, numbers, objects } from '../../../index';\n\nvar NumberField = /*#__PURE__*/function (_BasicField) {\n  _inherits(NumberField, _BasicField);\n\n  var _super = _createSuper(NumberField);\n\n  function NumberField() {\n    var _this;\n\n    _classCallCheck(this, NumberField);\n\n    _this = _super.call(this);\n    _this.calc = new Calculator();\n    _this.minValue = null;\n    _this.maxValue = null;\n    _this.decimalFormat = null;\n    _this.invalidValueMessageKey = 'InvalidNumberMessageX';\n    _this.gridDataHints.horizontalAlignment = 1; // number fields are right aligned by default.\n\n    return _this;\n  }\n\n  _createClass(NumberField, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(NumberField.prototype), \"_init\", this).call(this, model);\n\n      this._setMinValue(this.minValue);\n\n      this._setMaxValue(this.maxValue);\n\n      this._setDecimalFormat(this.decimalFormat);\n    }\n    /**\n     * Initializes the decimal format before calling set value.\n     * This cannot be done in _init because the value field would call _setValue first\n     */\n\n  }, {\n    key: \"_initValue\",\n    value: function _initValue(value) {\n      this._setDecimalFormat(this.decimalFormat);\n\n      _get(_getPrototypeOf(NumberField.prototype), \"_initValue\", this).call(this, value);\n    }\n    /**\n     * @override Widget.js\n     */\n\n  }, {\n    key: \"_createKeyStrokeContext\",\n    value: function _createKeyStrokeContext() {\n      return new InputFieldKeyStrokeContext();\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.addContainer(this.$parent, 'number-field');\n      this.addLabel();\n      this.addMandatoryIndicator();\n      var $field = fields.makeTextField(this.$parent);\n      this.addField($field);\n      this.addStatus();\n    }\n  }, {\n    key: \"_renderGridData\",\n    value: function _renderGridData() {\n      _get(_getPrototypeOf(NumberField.prototype), \"_renderGridData\", this).call(this);\n\n      this.updateInnerAlignment({\n        useHorizontalAlignment: true\n      });\n    }\n  }, {\n    key: \"_renderGridDataHints\",\n    value: function _renderGridDataHints() {\n      _get(_getPrototypeOf(NumberField.prototype), \"_renderGridDataHints\", this).call(this);\n\n      this.updateInnerAlignment({\n        useHorizontalAlignment: true\n      });\n    }\n  }, {\n    key: \"_getDefaultFormat\",\n    value: function _getDefaultFormat(locale) {\n      return locale.decimalFormatPatternDefault;\n    }\n  }, {\n    key: \"setDecimalFormat\",\n    value: function setDecimalFormat(decimalFormat) {\n      this.setProperty('decimalFormat', decimalFormat);\n    }\n  }, {\n    key: \"_setDecimalFormat\",\n    value: function _setDecimalFormat(decimalFormat) {\n      if (!decimalFormat) {\n        decimalFormat = this._getDefaultFormat(this.session.locale);\n      }\n\n      decimalFormat = DecimalFormat.ensure(this.session.locale, decimalFormat);\n\n      this._setProperty('decimalFormat', decimalFormat);\n\n      if (this.initialized) {\n        // if format changes on the fly, just update the display text\n        this._updateDisplayText();\n      }\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_parseValue\",\n    value: function _parseValue(displayText) {\n      if (!displayText) {\n        return null;\n      }\n\n      return this.decimalFormat.parse(displayText, this._evaluateNumber.bind(this));\n    }\n  }, {\n    key: \"_evaluateNumber\",\n    value: function _evaluateNumber(normalizedNumberString) {\n      // Convert to JS number format (remove groupingChar, replace decimalSeparatorChar with '.')\n      // Only needed for calculator\n      // if only math symbols are in the input string...\n      if (this.calc.isFormula(normalizedNumberString)) {\n        // ...evaluate and return. If the display text changed, ValueField.js will make sure, the new display text is sent to the model.\n        var calculated = this.calc.evalFormula(normalizedNumberString);\n\n        if (isNaN(calculated)) {\n          // catch input that is not a valid expression (although it looks like one, e.g. \"1.2.3\")\n          throw new Error(normalizedNumberString + ' is not a valid expression');\n        }\n\n        return calculated;\n      }\n\n      return Number(normalizedNumberString);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_ensureValue\",\n    value: function _ensureValue(value) {\n      return numbers.ensure(value);\n    }\n    /**\n     * @param {number} the number to validate\n     * @return {number} the validated number\n     * @override\n     */\n\n  }, {\n    key: \"_validateValue\",\n    value: function _validateValue(value) {\n      if (objects.isNullOrUndefined(value)) {\n        return value;\n      }\n\n      if (!numbers.isNumber(value)) {\n        throw this.session.text(this.invalidValueMessageKey, value);\n      }\n\n      if (!objects.isNullOrUndefined(this.minValue) && value < this.minValue) {\n        this._onNumberTooSmall();\n      }\n\n      if (!objects.isNullOrUndefined(this.maxValue) && value > this.maxValue) {\n        this._onNumberTooLarge();\n      }\n\n      return value;\n    }\n  }, {\n    key: \"_onNumberTooLarge\",\n    value: function _onNumberTooLarge() {\n      if (objects.isNullOrUndefined(this.minValue)) {\n        throw this.session.text('NumberTooLargeMessageX', this._formatValue(this.maxValue));\n      }\n\n      throw this.session.text('NumberTooLargeMessageXY', this._formatValue(this.minValue), this._formatValue(this.maxValue));\n    }\n  }, {\n    key: \"_onNumberTooSmall\",\n    value: function _onNumberTooSmall() {\n      if (objects.isNullOrUndefined(this.maxValue)) {\n        throw this.session.text('NumberTooSmallMessageX', this._formatValue(this.minValue));\n      }\n\n      throw this.session.text('NumberTooSmallMessageXY', this._formatValue(this.minValue), this._formatValue(this.maxValue));\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_formatValue\",\n    value: function _formatValue(value) {\n      if (objects.isNullOrUndefined(value)) {\n        return '';\n      }\n\n      if (typeof value !== 'number') {\n        // if setValue() would be called with something other than a number don't try to format it\n        return value + '';\n      }\n\n      return this.decimalFormat.format(value, true);\n    }\n    /**\n     * Set the minimum value. Value <code>null</code> means no limitation.\n     * <p>\n     * If the new minimum value is bigger than the current maxValue, the current maximum value is changed to the new minimum value.\n     * @param {number} the new minimum value\n     */\n\n  }, {\n    key: \"setMinValue\",\n    value: function setMinValue(minValue) {\n      if (this.minValue === minValue) {\n        return;\n      }\n\n      this._setMinValue(minValue);\n\n      this.validate();\n    }\n  }, {\n    key: \"_setMinValue\",\n    value: function _setMinValue(minValue) {\n      this._setProperty('minValue', minValue);\n\n      if (!objects.isNullOrUndefined(this.maxValue) && !objects.isNullOrUndefined(this.minValue) && minValue > this.maxValue) {\n        this._setMaxValue(minValue);\n      }\n    }\n    /**\n     * Set the maximum value. Value <code>null</code> means no limitation.\n     * <p>\n     * If the new maximum value is smaller than the current minValue, the current minimum value is changed to the new maximum value.\n     * @param {number} the new minimum value\n     */\n\n  }, {\n    key: \"setMaxValue\",\n    value: function setMaxValue(maxValue) {\n      if (this.maxValue === maxValue) {\n        return;\n      }\n\n      this._setMaxValue(maxValue);\n\n      this.validate();\n    }\n  }, {\n    key: \"_setMaxValue\",\n    value: function _setMaxValue(maxValue) {\n      this._setProperty('maxValue', maxValue);\n\n      if (!objects.isNullOrUndefined(this.maxValue) && !objects.isNullOrUndefined(this.minValue) && maxValue < this.minValue) {\n        this._setMinValue(maxValue);\n      }\n    }\n  }]);\n\n  return NumberField;\n}(BasicField);\n\nexport { NumberField as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/numberfield/NumberField.js"],"names":["BasicField","Calculator","DecimalFormat","fields","InputFieldKeyStrokeContext","numbers","objects","NumberField","calc","minValue","maxValue","decimalFormat","invalidValueMessageKey","gridDataHints","horizontalAlignment","model","_setMinValue","_setMaxValue","_setDecimalFormat","value","addContainer","$parent","addLabel","addMandatoryIndicator","$field","makeTextField","addField","addStatus","updateInnerAlignment","useHorizontalAlignment","locale","decimalFormatPatternDefault","setProperty","_getDefaultFormat","session","ensure","_setProperty","initialized","_updateDisplayText","displayText","parse","_evaluateNumber","bind","normalizedNumberString","isFormula","calculated","evalFormula","isNaN","Error","Number","isNullOrUndefined","isNumber","text","_onNumberTooSmall","_onNumberTooLarge","_formatValue","format","validate"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {BasicField, Calculator, DecimalFormat, fields, InputFieldKeyStrokeContext, numbers, objects} from '../../../index';\n\nexport default class NumberField extends BasicField {\n\n  constructor() {\n    super();\n    this.calc = new Calculator();\n    this.minValue = null;\n    this.maxValue = null;\n    this.decimalFormat = null;\n    this.invalidValueMessageKey = 'InvalidNumberMessageX';\n    this.gridDataHints.horizontalAlignment = 1; // number fields are right aligned by default.\n  }\n\n  _init(model) {\n    super._init(model);\n    this._setMinValue(this.minValue);\n    this._setMaxValue(this.maxValue);\n    this._setDecimalFormat(this.decimalFormat);\n  }\n\n  /**\n   * Initializes the decimal format before calling set value.\n   * This cannot be done in _init because the value field would call _setValue first\n   */\n  _initValue(value) {\n    this._setDecimalFormat(this.decimalFormat);\n    super._initValue(value);\n  }\n\n  /**\n   * @override Widget.js\n   */\n  _createKeyStrokeContext() {\n    return new InputFieldKeyStrokeContext();\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'number-field');\n    this.addLabel();\n    this.addMandatoryIndicator();\n    var $field = fields.makeTextField(this.$parent);\n    this.addField($field);\n    this.addStatus();\n  }\n\n  _renderGridData() {\n    super._renderGridData();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: true\n    });\n  }\n\n  _renderGridDataHints() {\n    super._renderGridDataHints();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: true\n    });\n  }\n\n  _getDefaultFormat(locale) {\n    return locale.decimalFormatPatternDefault;\n  }\n\n  setDecimalFormat(decimalFormat) {\n    this.setProperty('decimalFormat', decimalFormat);\n  }\n\n  _setDecimalFormat(decimalFormat) {\n    if (!decimalFormat) {\n      decimalFormat = this._getDefaultFormat(this.session.locale);\n    }\n    decimalFormat = DecimalFormat.ensure(this.session.locale, decimalFormat);\n    this._setProperty('decimalFormat', decimalFormat);\n\n    if (this.initialized) {\n      // if format changes on the fly, just update the display text\n      this._updateDisplayText();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _parseValue(displayText) {\n    if (!displayText) {\n      return null;\n    }\n\n    return this.decimalFormat.parse(displayText, this._evaluateNumber.bind(this));\n  }\n\n  _evaluateNumber(normalizedNumberString) {\n    // Convert to JS number format (remove groupingChar, replace decimalSeparatorChar with '.')\n    // Only needed for calculator\n    // if only math symbols are in the input string...\n    if (this.calc.isFormula(normalizedNumberString)) {\n      // ...evaluate and return. If the display text changed, ValueField.js will make sure, the new display text is sent to the model.\n      var calculated = this.calc.evalFormula(normalizedNumberString);\n      if (isNaN(calculated)) {\n        // catch input that is not a valid expression (although it looks like one, e.g. \"1.2.3\")\n        throw new Error(normalizedNumberString + ' is not a valid expression');\n      }\n      return calculated;\n    }\n\n    return Number(normalizedNumberString);\n  }\n\n  /**\n   * @override\n   */\n  _ensureValue(value) {\n    return numbers.ensure(value);\n  }\n\n  /**\n   * @param {number} the number to validate\n   * @return {number} the validated number\n   * @override\n   */\n  _validateValue(value) {\n    if (objects.isNullOrUndefined(value)) {\n      return value;\n    }\n    if (!numbers.isNumber(value)) {\n      throw this.session.text(this.invalidValueMessageKey, value);\n    }\n    if (!objects.isNullOrUndefined(this.minValue) && value < this.minValue) {\n      this._onNumberTooSmall();\n    }\n    if (!objects.isNullOrUndefined(this.maxValue) && value > this.maxValue) {\n      this._onNumberTooLarge();\n    }\n    return value;\n  }\n\n  _onNumberTooLarge() {\n    if (objects.isNullOrUndefined(this.minValue)) {\n      throw this.session.text('NumberTooLargeMessageX', this._formatValue(this.maxValue));\n    }\n    throw this.session.text('NumberTooLargeMessageXY', this._formatValue(this.minValue), this._formatValue(this.maxValue));\n  }\n\n  _onNumberTooSmall() {\n    if (objects.isNullOrUndefined(this.maxValue)) {\n      throw this.session.text('NumberTooSmallMessageX', this._formatValue(this.minValue));\n    }\n    throw this.session.text('NumberTooSmallMessageXY', this._formatValue(this.minValue), this._formatValue(this.maxValue));\n  }\n\n  /**\n   * @override\n   */\n  _formatValue(value) {\n    if (objects.isNullOrUndefined(value)) {\n      return '';\n    }\n    if (typeof value !== 'number') {\n      // if setValue() would be called with something other than a number don't try to format it\n      return value + '';\n    }\n    return this.decimalFormat.format(value, true);\n  }\n\n  /**\n   * Set the minimum value. Value <code>null</code> means no limitation.\n   * <p>\n   * If the new minimum value is bigger than the current maxValue, the current maximum value is changed to the new minimum value.\n   * @param {number} the new minimum value\n   */\n  setMinValue(minValue) {\n    if (this.minValue === minValue) {\n      return;\n    }\n    this._setMinValue(minValue);\n    this.validate();\n  }\n\n  _setMinValue(minValue) {\n    this._setProperty('minValue', minValue);\n    if (!objects.isNullOrUndefined(this.maxValue) && !objects.isNullOrUndefined(this.minValue) && minValue > this.maxValue) {\n      this._setMaxValue(minValue);\n    }\n  }\n\n  /**\n   * Set the maximum value. Value <code>null</code> means no limitation.\n   * <p>\n   * If the new maximum value is smaller than the current minValue, the current minimum value is changed to the new maximum value.\n   * @param {number} the new minimum value\n   */\n  setMaxValue(maxValue) {\n    if (this.maxValue === maxValue) {\n      return;\n    }\n    this._setMaxValue(maxValue);\n    this.validate();\n  }\n\n  _setMaxValue(maxValue) {\n    this._setProperty('maxValue', maxValue);\n    if (!objects.isNullOrUndefined(this.maxValue) && !objects.isNullOrUndefined(this.minValue) && maxValue < this.minValue) {\n      this._setMinValue(maxValue);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}