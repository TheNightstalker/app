{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { strings } from '../index';\nimport $ from 'jquery';\n/**\n * @class\n * @constructor\n */\n\nvar Cell = /*#__PURE__*/function () {\n  function Cell() {\n    _classCallCheck(this, Cell);\n\n    this.cssClass = null;\n    this.editable = null;\n    /* do not initialize with false. This is required because there's a subtle logic in Column.js (_initCell) which checks if a value is set. */\n\n    this.errorStatus = null;\n    this.horizontalAlignment = null;\n    /* do not initialize with -1. This is required because there's a subtle logic in Column.js (_initCell) which checks if a value is set. */\n\n    this.htmlEnabled = null;\n    /* do not initialize with false. This is required because there's a subtle logic in Column.js (_initCell) which checks if a value is set. */\n\n    this.iconId = null;\n    this.mandatory = null;\n    /* do not initialize with false. This is required because there's a subtle logic in Column.js (_initCell) which checks if a value is set. */\n\n    this._cachedEncodedText = null;\n    this.text = null;\n    this.value = null;\n    this.tooltipText = null;\n  }\n\n  _createClass(Cell, [{\n    key: \"init\",\n    value: function init(model) {\n      this._init(model);\n    }\n  }, {\n    key: \"_init\",\n    value: function _init(model) {\n      $.extend(this, model);\n    }\n  }, {\n    key: \"update\",\n    value: function update(model) {\n      this.setText(model.text);\n      $.extend(this, model);\n    }\n  }, {\n    key: \"setEditable\",\n    value: function setEditable(editable) {\n      this.editable = editable;\n    }\n  }, {\n    key: \"setMandatory\",\n    value: function setMandatory(mandatory) {\n      this.mandatory = mandatory;\n    }\n  }, {\n    key: \"setHorizontalAlignment\",\n    value: function setHorizontalAlignment(hAlign) {\n      this.horizontalAlignment = hAlign;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.value = value;\n    }\n  }, {\n    key: \"setErrorStatus\",\n    value: function setErrorStatus(errorStatus) {\n      this.errorStatus = errorStatus;\n    }\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      var oldText = this.text;\n      this.text = text; // reset cached encodedText, so when encodedText() is called the next time\n      // will be set to the a new value\n\n      if (oldText !== this.text) {\n        this._cachedEncodedText = null;\n      }\n    }\n  }, {\n    key: \"encodedText\",\n    value: function encodedText() {\n      if (!this._cachedEncodedText) {\n        // Encode text and cache it, encoding is expensive\n        this._cachedEncodedText = strings.encode(this.text);\n      }\n\n      return this._cachedEncodedText;\n    }\n  }, {\n    key: \"setCssClass\",\n    value: function setCssClass(cssClass) {\n      this.cssClass = cssClass;\n    }\n  }]);\n\n  return Cell;\n}();\n\nexport { Cell as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/cell/Cell.js"],"names":["strings","$","Cell","cssClass","editable","errorStatus","horizontalAlignment","htmlEnabled","iconId","mandatory","_cachedEncodedText","text","value","tooltipText","model","_init","extend","setText","hAlign","oldText","encode"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,OAAR,QAAsB,UAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA;AACA;AACA;AACA;;IACqBC,I;AAEnB,kBAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,QAAL,GAAgB,IAAhB;AAAsB;;AACtB,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,mBAAL,GAA2B,IAA3B;AAAiC;;AACjC,SAAKC,WAAL,GAAmB,IAAnB;AAAyB;;AACzB,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,SAAL,GAAiB,IAAjB;AAAuB;;AACvB,SAAKC,kBAAL,GAA0B,IAA1B;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACD;;;;yBAEIC,K,EAAO;AACV,WAAKC,KAAL,CAAWD,KAAX;AACD;;;0BAEKA,K,EAAO;AACXb,MAAAA,CAAC,CAACe,MAAF,CAAS,IAAT,EAAeF,KAAf;AACD;;;2BAEMA,K,EAAO;AACZ,WAAKG,OAAL,CAAaH,KAAK,CAACH,IAAnB;AACAV,MAAAA,CAAC,CAACe,MAAF,CAAS,IAAT,EAAeF,KAAf;AACD;;;gCAEWV,Q,EAAU;AACpB,WAAKA,QAAL,GAAgBA,QAAhB;AACD;;;iCAEYK,S,EAAW;AACtB,WAAKA,SAAL,GAAiBA,SAAjB;AACD;;;2CAEsBS,M,EAAQ;AAC7B,WAAKZ,mBAAL,GAA2BY,MAA3B;AACD;;;6BAEQN,K,EAAO;AACd,WAAKA,KAAL,GAAaA,KAAb;AACD;;;mCAEcP,W,EAAa;AAC1B,WAAKA,WAAL,GAAmBA,WAAnB;AACD;;;4BAEOM,I,EAAM;AACZ,UAAIQ,OAAO,GAAG,KAAKR,IAAnB;AACA,WAAKA,IAAL,GAAYA,IAAZ,CAFY,CAIZ;AACA;;AACA,UAAIQ,OAAO,KAAK,KAAKR,IAArB,EAA2B;AACzB,aAAKD,kBAAL,GAA0B,IAA1B;AACD;AACF;;;kCAEa;AACZ,UAAI,CAAC,KAAKA,kBAAV,EAA8B;AAC5B;AACA,aAAKA,kBAAL,GAA0BV,OAAO,CAACoB,MAAR,CAAe,KAAKT,IAApB,CAA1B;AACD;;AACD,aAAO,KAAKD,kBAAZ;AACD;;;gCAEWP,Q,EAAU;AACpB,WAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;;;SAtEkBD,I","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {strings} from '../index';\nimport $ from 'jquery';\n\n/**\n * @class\n * @constructor\n */\nexport default class Cell {\n\n  constructor() {\n    this.cssClass = null;\n    this.editable = null; /* do not initialize with false. This is required because there's a subtle logic in Column.js (_initCell) which checks if a value is set. */\n    this.errorStatus = null;\n    this.horizontalAlignment = null; /* do not initialize with -1. This is required because there's a subtle logic in Column.js (_initCell) which checks if a value is set. */\n    this.htmlEnabled = null; /* do not initialize with false. This is required because there's a subtle logic in Column.js (_initCell) which checks if a value is set. */\n    this.iconId = null;\n    this.mandatory = null; /* do not initialize with false. This is required because there's a subtle logic in Column.js (_initCell) which checks if a value is set. */\n    this._cachedEncodedText = null;\n    this.text = null;\n    this.value = null;\n    this.tooltipText = null;\n  }\n\n  init(model) {\n    this._init(model);\n  }\n\n  _init(model) {\n    $.extend(this, model);\n  }\n\n  update(model) {\n    this.setText(model.text);\n    $.extend(this, model);\n  }\n\n  setEditable(editable) {\n    this.editable = editable;\n  }\n\n  setMandatory(mandatory) {\n    this.mandatory = mandatory;\n  }\n\n  setHorizontalAlignment(hAlign) {\n    this.horizontalAlignment = hAlign;\n  }\n\n  setValue(value) {\n    this.value = value;\n  }\n\n  setErrorStatus(errorStatus) {\n    this.errorStatus = errorStatus;\n  }\n\n  setText(text) {\n    var oldText = this.text;\n    this.text = text;\n\n    // reset cached encodedText, so when encodedText() is called the next time\n    // will be set to the a new value\n    if (oldText !== this.text) {\n      this._cachedEncodedText = null;\n    }\n  }\n\n  encodedText() {\n    if (!this._cachedEncodedText) {\n      // Encode text and cache it, encoding is expensive\n      this._cachedEncodedText = strings.encode(this.text);\n    }\n    return this._cachedEncodedText;\n  }\n\n  setCssClass(cssClass) {\n    this.cssClass = cssClass;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}