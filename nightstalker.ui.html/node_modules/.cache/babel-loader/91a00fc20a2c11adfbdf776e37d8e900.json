{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { LogicalGridMatrixCell, LogicalGridMatrixCursor } from '../../../index';\n\nvar LogicalGridMatrix = /*#__PURE__*/function () {\n  function LogicalGridMatrix(cursor) {\n    _classCallCheck(this, LogicalGridMatrix);\n\n    this._cursor = cursor;\n    this._assignedCells = [];\n  }\n\n  _createClass(LogicalGridMatrix, [{\n    key: \"getColumnCount\",\n    value: function getColumnCount() {\n      return this._cursor.columnCount;\n    }\n  }, {\n    key: \"getRowCount\",\n    value: function getRowCount() {\n      return this._cursor.rowCount;\n    }\n  }, {\n    key: \"_setAssignedCell\",\n    value: function _setAssignedCell(index, val) {\n      if (!this._assignedCells[index.x]) {\n        this._assignedCells[index.x] = [];\n      }\n\n      this._assignedCells[index.x][index.y] = val;\n    }\n  }, {\n    key: \"_getAssignedCell\",\n    value: function _getAssignedCell(index) {\n      if (!this._assignedCells[index.x]) {\n        return null;\n      }\n\n      return this._assignedCells[index.x][index.y];\n    }\n  }, {\n    key: \"_nextFree\",\n    value: function _nextFree(w, h) {\n      if (!this._cursor.increment()) {\n        return false;\n      }\n\n      var currentIndex = this._cursor.currentIndex();\n\n      if (!this._isAllCellFree(currentIndex.x, currentIndex.y, w, h)) {\n        if (!this._getAssignedCell(currentIndex)) {\n          this._setAssignedCell(currentIndex, new LogicalGridMatrixCell());\n        }\n\n        return this._nextFree(w, h);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_isAllCellFree\",\n    value: function _isAllCellFree(x, y, w, h) {\n      if (x + w > this._cursor.startX + this._cursor.columnCount || y + h > this._cursor.startY + this._cursor.rowCount) {\n        return false;\n      }\n\n      return this._assignedCells.slice(x, x + w).every(function (valX) {\n        return (valX || []).slice(y, y + h).every(function (valY) {\n          return !valY;\n        });\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var ret = '----Group Box Grid Matrix [orientation=' + this._cursor.orientation + ', columnCount=' + this.getColumnCount() + ', rowCount=' + this.getRowCount() + ']--------------\\n';\n      var tempCursor = new LogicalGridMatrixCursor(0, 0, this.getColumnCount(), this.getRowCount(), this._cursor.orientation);\n\n      while (tempCursor.increment()) {\n        var cell = this._getAssignedCell(tempCursor.currentIndex());\n\n        ret += 'cell[' + tempCursor.currentIndex().x + ', ' + tempCursor.currentIndex().y + '] ';\n\n        if (!cell) {\n          ret += 'NULL';\n        } else if (!cell.widget) {\n          ret += 'Placeholder';\n        } else {\n          ret += cell.widget + (cell.widget ? ', [' + cell.widget.label + ']' : '');\n        }\n\n        ret += '\\n';\n      }\n\n      return ret;\n    }\n  }]);\n\n  return LogicalGridMatrix;\n}();\n\nexport { LogicalGridMatrix as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/layout/logicalgrid/matrix/LogicalGridMatrix.js"],"names":["LogicalGridMatrixCell","LogicalGridMatrixCursor","LogicalGridMatrix","cursor","_cursor","_assignedCells","columnCount","rowCount","index","val","x","y","w","h","increment","currentIndex","_isAllCellFree","_getAssignedCell","_setAssignedCell","_nextFree","startX","startY","slice","every","valX","valY","ret","orientation","getColumnCount","getRowCount","tempCursor","cell","widget","label"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,qBAAR,EAA+BC,uBAA/B,QAA6D,gBAA7D;;IAEqBC,iB;AAEnB,6BAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKC,OAAL,GAAeD,MAAf;AACA,SAAKE,cAAL,GAAsB,EAAtB;AACD;;;;qCAEgB;AACf,aAAO,KAAKD,OAAL,CAAaE,WAApB;AACD;;;kCAEa;AACZ,aAAO,KAAKF,OAAL,CAAaG,QAApB;AACD;;;qCAEgBC,K,EAAOC,G,EAAK;AAC3B,UAAI,CAAC,KAAKJ,cAAL,CAAoBG,KAAK,CAACE,CAA1B,CAAL,EAAmC;AACjC,aAAKL,cAAL,CAAoBG,KAAK,CAACE,CAA1B,IAA+B,EAA/B;AACD;;AACD,WAAKL,cAAL,CAAoBG,KAAK,CAACE,CAA1B,EAA6BF,KAAK,CAACG,CAAnC,IAAwCF,GAAxC;AACD;;;qCAEgBD,K,EAAO;AACtB,UAAI,CAAC,KAAKH,cAAL,CAAoBG,KAAK,CAACE,CAA1B,CAAL,EAAmC;AACjC,eAAO,IAAP;AACD;;AACD,aAAO,KAAKL,cAAL,CAAoBG,KAAK,CAACE,CAA1B,EAA6BF,KAAK,CAACG,CAAnC,CAAP;AACD;;;8BAESC,C,EAAGC,C,EAAG;AACd,UAAI,CAAC,KAAKT,OAAL,CAAaU,SAAb,EAAL,EAA+B;AAC7B,eAAO,KAAP;AACD;;AACD,UAAIC,YAAY,GAAG,KAAKX,OAAL,CAAaW,YAAb,EAAnB;;AACA,UAAI,CAAC,KAAKC,cAAL,CAAoBD,YAAY,CAACL,CAAjC,EAAoCK,YAAY,CAACJ,CAAjD,EAAoDC,CAApD,EAAuDC,CAAvD,CAAL,EAAgE;AAC9D,YAAI,CAAC,KAAKI,gBAAL,CAAsBF,YAAtB,CAAL,EAA0C;AACxC,eAAKG,gBAAL,CAAsBH,YAAtB,EAAoC,IAAIf,qBAAJ,EAApC;AACD;;AACD,eAAO,KAAKmB,SAAL,CAAeP,CAAf,EAAkBC,CAAlB,CAAP;AACD;;AACD,aAAO,IAAP;AACD;;;mCAEcH,C,EAAGC,C,EAAGC,C,EAAGC,C,EAAG;AACzB,UAAIH,CAAC,GAAGE,CAAJ,GAAQ,KAAKR,OAAL,CAAagB,MAAb,GAAsB,KAAKhB,OAAL,CAAaE,WAA3C,IAA0DK,CAAC,GAAGE,CAAJ,GAAQ,KAAKT,OAAL,CAAaiB,MAAb,GAAsB,KAAKjB,OAAL,CAAaG,QAAzG,EAAmH;AACjH,eAAO,KAAP;AACD;;AACD,aAAO,KAAKF,cAAL,CAAoBiB,KAApB,CAA0BZ,CAA1B,EAA6BA,CAAC,GAAGE,CAAjC,EAAoCW,KAApC,CAA0C,UAASC,IAAT,EAAe;AAC9D,eAAO,CAACA,IAAI,IAAI,EAAT,EAAaF,KAAb,CAAmBX,CAAnB,EAAsBA,CAAC,GAAGE,CAA1B,EAA6BU,KAA7B,CAAmC,UAASE,IAAT,EAAe;AACvD,iBAAO,CAACA,IAAR;AACD,SAFM,CAAP;AAGD,OAJM,CAAP;AAKD;;;+BAEU;AACT,UAAIC,GAAG,GAAG,4CAA4C,KAAKtB,OAAL,CAAauB,WAAzD,GAAuE,gBAAvE,GAA0F,KAAKC,cAAL,EAA1F,GAAkH,aAAlH,GAAkI,KAAKC,WAAL,EAAlI,GAAuJ,mBAAjK;AACA,UAAIC,UAAU,GAAG,IAAI7B,uBAAJ,CAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAK2B,cAAL,EAAlC,EAAyD,KAAKC,WAAL,EAAzD,EAA6E,KAAKzB,OAAL,CAAauB,WAA1F,CAAjB;;AACA,aAAOG,UAAU,CAAChB,SAAX,EAAP,EAA+B;AAC7B,YAAIiB,IAAI,GAAG,KAAKd,gBAAL,CAAsBa,UAAU,CAACf,YAAX,EAAtB,CAAX;;AACAW,QAAAA,GAAG,IAAI,UAAUI,UAAU,CAACf,YAAX,GAA0BL,CAApC,GAAwC,IAAxC,GAA+CoB,UAAU,CAACf,YAAX,GAA0BJ,CAAzE,GAA6E,IAApF;;AACA,YAAI,CAACoB,IAAL,EAAW;AACTL,UAAAA,GAAG,IAAI,MAAP;AACD,SAFD,MAEO,IAAI,CAACK,IAAI,CAACC,MAAV,EAAkB;AACvBN,UAAAA,GAAG,IAAI,aAAP;AACD,SAFM,MAEA;AACLA,UAAAA,GAAG,IAAIK,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACC,MAAL,GAAc,QAAQD,IAAI,CAACC,MAAL,CAAYC,KAApB,GAA4B,GAA1C,GAAgD,EAA/D,CAAP;AACD;;AACDP,QAAAA,GAAG,IAAI,IAAP;AACD;;AACD,aAAOA,GAAP;AACD;;;;;;SAtEkBxB,iB","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {LogicalGridMatrixCell, LogicalGridMatrixCursor} from '../../../index';\n\nexport default class LogicalGridMatrix {\n\n  constructor(cursor) {\n    this._cursor = cursor;\n    this._assignedCells = [];\n  }\n\n  getColumnCount() {\n    return this._cursor.columnCount;\n  }\n\n  getRowCount() {\n    return this._cursor.rowCount;\n  }\n\n  _setAssignedCell(index, val) {\n    if (!this._assignedCells[index.x]) {\n      this._assignedCells[index.x] = [];\n    }\n    this._assignedCells[index.x][index.y] = val;\n  }\n\n  _getAssignedCell(index) {\n    if (!this._assignedCells[index.x]) {\n      return null;\n    }\n    return this._assignedCells[index.x][index.y];\n  }\n\n  _nextFree(w, h) {\n    if (!this._cursor.increment()) {\n      return false;\n    }\n    var currentIndex = this._cursor.currentIndex();\n    if (!this._isAllCellFree(currentIndex.x, currentIndex.y, w, h)) {\n      if (!this._getAssignedCell(currentIndex)) {\n        this._setAssignedCell(currentIndex, new LogicalGridMatrixCell());\n      }\n      return this._nextFree(w, h);\n    }\n    return true;\n  }\n\n  _isAllCellFree(x, y, w, h) {\n    if (x + w > this._cursor.startX + this._cursor.columnCount || y + h > this._cursor.startY + this._cursor.rowCount) {\n      return false;\n    }\n    return this._assignedCells.slice(x, x + w).every(function(valX) {\n      return (valX || []).slice(y, y + h).every(function(valY) {\n        return !valY;\n      });\n    });\n  }\n\n  toString() {\n    var ret = '----Group Box Grid Matrix [orientation=' + this._cursor.orientation + ', columnCount=' + this.getColumnCount() + ', rowCount=' + this.getRowCount() + ']--------------\\n';\n    var tempCursor = new LogicalGridMatrixCursor(0, 0, this.getColumnCount(), this.getRowCount(), this._cursor.orientation);\n    while (tempCursor.increment()) {\n      var cell = this._getAssignedCell(tempCursor.currentIndex());\n      ret += 'cell[' + tempCursor.currentIndex().x + ', ' + tempCursor.currentIndex().y + '] ';\n      if (!cell) {\n        ret += 'NULL';\n      } else if (!cell.widget) {\n        ret += 'Placeholder';\n      } else {\n        ret += cell.widget + (cell.widget ? ', [' + cell.widget.label + ']' : '');\n      }\n      ret += '\\n';\n    }\n    return ret;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}