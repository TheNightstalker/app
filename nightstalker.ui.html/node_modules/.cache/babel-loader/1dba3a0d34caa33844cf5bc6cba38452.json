{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Cell, ColumnOptimalWidthMeasurer, comparators, EventSupport, FormField, GridData, icons, objects, scout, Status, strings, styles, Table, TableRow, texts } from '../../index';\nimport $ from 'jquery';\n\nvar Column = /*#__PURE__*/function () {\n  function Column() {\n    _classCallCheck(this, Column);\n\n    this.autoOptimizeWidth = false;\n    this.autoOptimizeWidthRequired = false; // true if content of the column changed and width has to be optimized\n\n    this.autoOptimizeMaxWidth = -1;\n    this.cssClass = null;\n    this.editable = false;\n    this.removable = false;\n    this.modifiable = false;\n    this.fixedWidth = false;\n    this.fixedPosition = false;\n    this.grouped = false;\n    this.headerCssClass = null;\n    this.headerIconId = null;\n    this.headerHtmlEnabled = false;\n    this.headerTooltipText = null;\n    this.horizontalAlignment = -1;\n    this.htmlEnabled = false;\n    this.index = -1;\n    this.initialized = false;\n    this.mandatory = false;\n    this.optimalWidthMeasurer = new ColumnOptimalWidthMeasurer(this);\n    this.sortActive = false;\n    this.sortAscending = true;\n    this.sortIndex = -1;\n    this.summary = false;\n    this.type = 'text';\n    this.width = 60;\n    this.initialWidth = undefined; // the width the column initially has\n\n    this.prefMinWidth = null;\n    this.minWidth = Column.DEFAULT_MIN_WIDTH; // the minimal width the column can have\n\n    this.showSeparator = true;\n    this.table = null;\n    this.tableNodeColumn = false;\n    this.maxLength = 4000;\n    this.text = null;\n    this.textWrap = false;\n    this.filterType = 'TextColumnUserFilter';\n    this.comparator = comparators.TEXT;\n    this.displayable = true;\n    this.visible = true;\n    this.textBased = true;\n    this.headerMenuEnabled = true;\n    this.tableNodeLevel0CellPadding = 28;\n    this.expandableIconLevel0CellPadding = 13;\n    this.nodeColumnCandidate = true;\n    this.events = this._createEventSupport();\n    this._tableColumnsChangedHandler = this._onTableColumnsChanged.bind(this); // Contains the width the cells of the column really have (only set in Chrome due to a Chrome bug, see Table._updateRealColumnWidths)\n\n    this._realWidth = null;\n  }\n\n  _createClass(Column, [{\n    key: \"init\",\n    // for columns without text (icon, check box)\n    value: function init(model) {\n      this.session = model.session; // Copy all properties from model to this\n\n      $.extend(this, model); // Initial width is only sent if it differs from width\n\n      if (this.initialWidth === undefined) {\n        this.initialWidth = scout.nvl(this.width, 0);\n      }\n\n      this._init(model);\n\n      this.initialized = true;\n    }\n    /**\n     * Override this function in order to implement custom init logic.\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init(model) {\n      texts.resolveTextProperty(this, 'text');\n      texts.resolveTextProperty(this, 'headerTooltipText');\n      icons.resolveIconProperty(this, 'headerIconId');\n\n      this._setTable(this.table);\n\n      this._setDisplayable(this.displayable);\n\n      this._setAutoOptimizeWidth(this.autoOptimizeWidth); // no need to call setEditable here. cell propagation is done in _initCell\n\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._destroy();\n\n      this._setTable(null);\n    }\n    /**\n     * Override this function in order to implement custom destroy logic.\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(model) {// NOP\n    }\n  }, {\n    key: \"_setTable\",\n    value: function _setTable(table) {\n      if (this.table) {\n        this.table.off('columnMoved columnStructureChanged', this._tableColumnsChangedHandler);\n      }\n\n      this.table = table;\n\n      if (this.table) {\n        this.table.on('columnMoved columnStructureChanged', this._tableColumnsChangedHandler);\n      }\n    }\n    /**\n     * Converts the vararg if it is of type string to an object with\n     * a property 'text' with the original value.\n     *\n     * Example:\n     * 'My Company' --> { text: 'MyCompany'; }\n     *\n     * @see JsonCell.java\n     * @param {Cell|string|number|object} vararg either a Cell instance or a scalar value\n     */\n\n  }, {\n    key: \"initCell\",\n    value: function initCell(vararg, row) {\n      var cell = this._ensureCell(vararg);\n\n      this._initCell(cell); // If a text is provided, use that text instead of using formatValue to generate a text based on the value\n\n\n      if (objects.isNullOrUndefined(cell.text)) {\n        this._updateCellText(row, cell);\n      }\n\n      return cell;\n    }\n    /**\n     * Ensures that a Cell instance is returned. When vararg is a scalar value a new Cell instance is created and\n     * the value is set as cell.value property.\n     *\n     * @param {Cell|string|number|object} vararg either a Cell instance or a scalar value\n     * @returns {*}\n     * @private\n     */\n\n  }, {\n    key: \"_ensureCell\",\n    value: function _ensureCell(vararg) {\n      var cell;\n\n      if (vararg instanceof Cell) {\n        cell = vararg; // value may be set but may have the wrong type (e.g. text instead of date) -> ensure type\n\n        cell.value = this._parseValue(cell.value);\n      } else {\n        // in this case 'vararg' is only a scalar value, typically a string\n        cell = scout.create('Cell', {\n          value: this._parseValue(vararg)\n        });\n      }\n\n      return cell;\n    }\n    /**\n     * Override this method to create a value based on the given scalar value.\n     */\n\n  }, {\n    key: \"_parseValue\",\n    value: function _parseValue(scalar) {\n      return scalar;\n    }\n  }, {\n    key: \"_updateCellText\",\n    value: function _updateCellText(row, cell) {\n      var value = cell.value;\n\n      if (!row) {\n        // row is omitted when creating aggregate cells\n        return;\n      }\n\n      var returned = this._formatValue(value);\n\n      if (returned && $.isFunction(returned.promise)) {\n        // Promise is returned -> set display text later\n        this.setCellTextDeferred(returned, row, cell);\n      } else {\n        this.setCellText(row, returned, cell);\n      }\n    }\n  }, {\n    key: \"_formatValue\",\n    value: function _formatValue(value) {\n      return scout.nvl(value, '');\n    }\n    /**\n     * If cell does not define properties, use column values.\n     * Override this function to impl. type specific init cell behavior.\n     *\n     * @param {Cell} cell\n     */\n\n  }, {\n    key: \"_initCell\",\n    value: function _initCell(cell) {\n      cell.cssClass = scout.nvl(cell.cssClass, this.cssClass);\n      cell.editable = scout.nvl(cell.editable, this.editable);\n      cell.horizontalAlignment = scout.nvl(cell.horizontalAlignment, this.horizontalAlignment);\n      cell.htmlEnabled = scout.nvl(cell.htmlEnabled, this.htmlEnabled);\n      cell.mandatory = scout.nvl(cell.mandatory, this.mandatory);\n      return cell;\n    }\n  }, {\n    key: \"buildCellForRow\",\n    value: function buildCellForRow(row) {\n      var cell = this.cell(row);\n      return this.buildCell(cell, row);\n    }\n  }, {\n    key: \"buildCellForAggregateRow\",\n    value: function buildCellForAggregateRow(aggregateRow) {\n      var cell;\n\n      if (this.grouped) {\n        var refRow = this.table.groupingStyle === Table.GroupingStyle.TOP ? aggregateRow.nextRow : aggregateRow.prevRow;\n        cell = this.createAggrGroupCell(refRow);\n      } else {\n        var aggregateValue = aggregateRow.contents[this.table.columns.indexOf(this)];\n        cell = this.createAggrValueCell(aggregateValue);\n      }\n\n      return this.buildCell(cell, {});\n    }\n  }, {\n    key: \"buildCell\",\n    value: function buildCell(cell, row) {\n      scout.assertParameter('cell', cell, Cell);\n      var tableNodeColumn = this.table.isTableNodeColumn(this),\n          rowPadding = 0;\n\n      if (tableNodeColumn) {\n        rowPadding = this.table._calcRowLevelPadding(row);\n      }\n\n      var text = this._text(cell);\n\n      var iconId = cell.iconId;\n      var icon = this._icon(iconId, !!text) || '';\n\n      var cssClass = this._cellCssClass(cell, tableNodeColumn);\n\n      var style = this._cellStyle(cell, tableNodeColumn, rowPadding);\n\n      if (cell.errorStatus) {\n        row.hasError = true;\n      }\n\n      var content;\n\n      if (!text && !icon) {\n        // If every cell of a row is empty the row would collapse, using nbsp makes sure the row is as height as the others even if it is empty\n        content = '&nbsp;';\n        cssClass = strings.join(' ', cssClass, 'empty');\n      } else {\n        content = icon + text;\n      }\n\n      if (tableNodeColumn && row._expandable) {\n        this.tableNodeColumn = true;\n        content = this._expandIcon(row.expanded, rowPadding) + content;\n\n        if (row.expanded) {\n          cssClass += ' expanded';\n        }\n      }\n\n      return this._buildCell(content, style, cssClass);\n    }\n  }, {\n    key: \"_buildCell\",\n    value: function _buildCell(content, style, cssClass) {\n      return '<div class=\"' + cssClass + '\" style=\"' + style + '\">' + content + '</div>';\n    }\n  }, {\n    key: \"_expandIcon\",\n    value: function _expandIcon(expanded, rowPadding) {\n      var style = 'padding-left: ' + (rowPadding + this.expandableIconLevel0CellPadding) + 'px';\n      var cssClasses = 'table-row-control';\n\n      if (expanded) {\n        cssClasses += ' expanded';\n      }\n\n      return '<div class=\"' + cssClasses + '\" style=\"' + style + '\"></div>';\n    }\n  }, {\n    key: \"_icon\",\n    value: function _icon(iconId, hasText) {\n      var cssClass, icon;\n\n      if (!iconId) {\n        return;\n      }\n\n      cssClass = 'table-cell-icon';\n\n      if (hasText) {\n        cssClass += ' with-text';\n      }\n\n      icon = icons.parseIconId(iconId);\n\n      if (icon.isFontIcon()) {\n        cssClass += ' font-icon';\n        return '<span class=\"' + icon.appendCssClass(cssClass) + '\">' + icon.iconCharacter + '</span>';\n      }\n\n      cssClass += ' image-icon';\n      return '<img class=\"' + cssClass + '\" src=\"' + icon.iconUrl + '\">';\n    }\n  }, {\n    key: \"_text\",\n    value: function _text(cell) {\n      var text = cell.text || '';\n\n      if (!cell.htmlEnabled) {\n        text = cell.encodedText() || '';\n\n        if (this.table.multilineText) {\n          text = strings.nl2br(text, false);\n        }\n      }\n\n      return text;\n    }\n  }, {\n    key: \"_cellCssClass\",\n    value: function _cellCssClass(cell, tableNode) {\n      var cssClass = 'table-cell';\n\n      if (cell.mandatory) {\n        cssClass += ' mandatory';\n      }\n\n      if (!this.table.multilineText || !this.textWrap) {\n        cssClass += ' white-space-nowrap';\n      }\n\n      if (cell.editable) {\n        cssClass += ' editable';\n      }\n\n      if (cell.errorStatus) {\n        cssClass += ' has-error';\n      }\n\n      cssClass += ' halign-' + Table.parseHorizontalAlignment(cell.horizontalAlignment);\n      var visibleColumns = this.table.visibleColumns();\n      var overAllColumnPosition = visibleColumns.indexOf(this);\n\n      if (overAllColumnPosition === 0) {\n        cssClass += ' first';\n      }\n\n      if (overAllColumnPosition === visibleColumns.length - 1) {\n        cssClass += ' last';\n      }\n\n      if (tableNode) {\n        cssClass += ' table-node';\n      }\n\n      if (cell.cssClass) {\n        cssClass += ' ' + cell.cssClass;\n      }\n\n      return cssClass;\n    }\n  }, {\n    key: \"_cellStyle\",\n    value: function _cellStyle(cell, tableNodeColumn, rowPadding) {\n      var style,\n          width = this.width;\n\n      if (width === 0) {\n        return 'display: none;';\n      }\n\n      style = 'min-width: ' + width + 'px; max-width: ' + width + 'px; ';\n\n      if (tableNodeColumn) {\n        // calculate padding\n        style += ' padding-left: ' + (this.tableNodeLevel0CellPadding + rowPadding) + 'px; ';\n      }\n\n      style += styles.legacyStyle(cell);\n      return style;\n    }\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(event, $row) {\n      var row = $row.data('row'),\n          cell = this.cell(row);\n\n      if (this.isCellEditable(row, cell, event)) {\n        this.table.prepareCellEdit(this, row, true);\n      }\n    }\n  }, {\n    key: \"isCellEditable\",\n    value: function isCellEditable(row, cell, event) {\n      return this.table.enabledComputed && row.enabled && cell.editable && !event.ctrlKey && !event.shiftKey;\n    }\n  }, {\n    key: \"startCellEdit\",\n    value: function startCellEdit(row, field) {\n      var popup,\n          $row = row.$row,\n          cell = this.cell(row),\n          $cell = this.table.$cell(this, $row);\n      cell.field = field; // Override field alignment with the cell's alignment\n\n      cell.field.gridData.horizontalAlignment = cell.horizontalAlignment;\n      popup = scout.create('CellEditorPopup', {\n        parent: this.table,\n        column: this,\n        row: row,\n        cell: cell\n      });\n      popup.$anchor = $cell;\n      popup.open(this.table.$data);\n      return popup;\n    }\n    /**\n     * @returns {Cell} the cell object for this column from the given row.\n     */\n\n  }, {\n    key: \"cell\",\n    value: function cell(row) {\n      return this.table.cell(this, row);\n    }\n    /**\n     * @returns {Cell} the cell object for this column from the first selected row in the table.\n     */\n\n  }, {\n    key: \"selectedCell\",\n    value: function selectedCell() {\n      var selectedRow = this.table.selectedRow();\n      return this.table.cell(this, selectedRow);\n    }\n  }, {\n    key: \"cellValueOrText\",\n    value: function cellValueOrText(row) {\n      if (this.textBased) {\n        return this.table.cellText(this, row);\n      }\n\n      return this.table.cellValue(this, row);\n    }\n    /**\n     * @returns {*} the cell value to be used for grouping and filtering (chart, column filter).\n     */\n\n  }, {\n    key: \"cellValueOrTextForCalculation\",\n    value: function cellValueOrTextForCalculation(row) {\n      var cell = this.cell(row);\n      var value = this.cellValueOrText(row);\n\n      if (objects.isNullOrUndefined(value)) {\n        return null;\n      }\n\n      return this._preprocessValueOrTextForCalculation(value, cell);\n    }\n  }, {\n    key: \"_preprocessValueOrTextForCalculation\",\n    value: function _preprocessValueOrTextForCalculation(value, cell) {\n      if (typeof value === 'string') {\n        // In case of string columns, value and text are equal -> use _preprocessStringForCalculation to handle html tags and new lines correctly\n        return this._preprocessTextForCalculation(value, cell.htmlEnabled);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"_preprocessTextForCalculation\",\n    value: function _preprocessTextForCalculation(text, htmlEnabled) {\n      return this._preprocessText(text, {\n        removeHtmlTags: htmlEnabled,\n        removeNewlines: true,\n        trim: true\n      });\n    }\n    /**\n     * @returns {string} the cell text to be used for table grouping\n     */\n\n  }, {\n    key: \"cellTextForGrouping\",\n    value: function cellTextForGrouping(row) {\n      var cell = this.cell(row);\n      return this._preprocessTextForGrouping(cell.text, cell.htmlEnabled);\n    }\n  }, {\n    key: \"_preprocessTextForGrouping\",\n    value: function _preprocessTextForGrouping(text, htmlEnabled) {\n      return this._preprocessText(text, {\n        removeHtmlTags: htmlEnabled,\n        trim: true\n      });\n    }\n    /**\n     * @returns {string} the cell text to be used for the text filter\n     */\n\n  }, {\n    key: \"cellTextForTextFilter\",\n    value: function cellTextForTextFilter(row) {\n      var cell = this.cell(row);\n      return this._preprocessTextForTextFilter(cell.text, cell.htmlEnabled);\n    }\n  }, {\n    key: \"_preprocessTextForTextFilter\",\n    value: function _preprocessTextForTextFilter(text, htmlEnabled) {\n      return this._preprocessText(text, {\n        removeHtmlTags: htmlEnabled\n      });\n    }\n    /**\n     * @returns {string} the cell text to be used for the table row detail.\n     */\n\n  }, {\n    key: \"cellTextForRowDetail\",\n    value: function cellTextForRowDetail(row) {\n      var cell = this.cell(row);\n      return this._preprocessText(this._text(cell), {\n        removeHtmlTags: cell.htmlEnabled\n      });\n    }\n    /**\n     * Removes html tags, converts to single line, removes leading and trailing whitespaces.\n     */\n\n  }, {\n    key: \"_preprocessText\",\n    value: function _preprocessText(text, options) {\n      if (text === null || text === undefined) {\n        return text;\n      }\n\n      options = options || {};\n\n      if (options.removeHtmlTags) {\n        text = strings.plainText(text);\n      }\n\n      if (options.removeNewlines) {\n        text = text.replace('\\n', ' ');\n      }\n\n      if (options.trim) {\n        text = text.trim();\n      }\n\n      return text;\n    }\n  }, {\n    key: \"setCellValue\",\n    value: function setCellValue(row, value) {\n      var cell = this.cell(row); // value may have the wrong type (e.g. text instead of date) -> ensure type\n\n      value = this._parseValue(value); // do not trigger value change when value did not change\n\n      if (cell.value === value) {\n        return;\n      }\n\n      cell.setValue(value);\n\n      if (row.status === TableRow.Status.NON_CHANGED) {\n        row.status = TableRow.Status.UPDATED;\n      }\n\n      this._updateCellText(row, cell);\n    }\n  }, {\n    key: \"setCellTextDeferred\",\n    value: function setCellTextDeferred(promise, row, cell) {\n      promise.done(function (text) {\n        this.setCellText(row, text, cell);\n      }.bind(this)).fail(function (error) {\n        this.setCellText(row, '', cell);\n        $.log.error('Could not resolve cell text for value ' + cell.value, error);\n      }.bind(this)); // (then) promises always resolve asynchronously which means the text will always be set later after row is initialized and will generate an update row event.\n      // To make sure not every cell update will render the viewport (which is an expensive operation), the update is buffered and done as soon as all promises resolve.\n\n      this.table.updateBuffer.pushPromise(promise);\n    }\n  }, {\n    key: \"setCellText\",\n    value: function setCellText(row, text, cell) {\n      if (!cell) {\n        cell = this.cell(row);\n      }\n\n      cell.setText(text); // Don't update row while initializing (it is either added to the table later, or being added / updated right now)\n      // The check for \"this.table\" is necessary, because the column could already have been destroyed (method is called\n      // asynchronously by setCellTextDeferred).\n\n      if (row.initialized && this.table) {\n        this.table.updateRow(row);\n      }\n    }\n  }, {\n    key: \"setCellErrorStatus\",\n    value: function setCellErrorStatus(row, errorStatus, cell) {\n      if (!cell) {\n        cell = this.cell(row);\n      }\n\n      cell.setErrorStatus(errorStatus);\n    }\n  }, {\n    key: \"setHorizontalAlignment\",\n    value: function setHorizontalAlignment(hAlign) {\n      if (this.horizontalAlignment === hAlign) {\n        return;\n      }\n\n      this.horizontalAlignment = hAlign;\n      this.table.rows.forEach(function (row) {\n        this.cell(row).setHorizontalAlignment(hAlign);\n      }.bind(this));\n      this.table.updateRows(this.table.rows);\n\n      if (this.table.header) {\n        this.table.header.updateHeader(this);\n      }\n    }\n  }, {\n    key: \"setEditable\",\n    value: function setEditable(editable) {\n      if (this.editable === editable) {\n        return;\n      }\n\n      this.editable = editable;\n      this.table.rows.forEach(function (row) {\n        this.cell(row).setEditable(editable);\n      }.bind(this));\n      this.table.updateRows(this.table.rows);\n    }\n  }, {\n    key: \"setMandatory\",\n    value: function setMandatory(mandatory) {\n      if (this.mandatory === mandatory) {\n        return;\n      }\n\n      this.mandatory = mandatory;\n      this.table.rows.forEach(function (row) {\n        this.cell(row).setMandatory(mandatory);\n      }.bind(this));\n      this.table.updateRows(this.table.rows);\n    }\n  }, {\n    key: \"setCssClass\",\n    value: function setCssClass(cssClass) {\n      if (this.cssClass === cssClass) {\n        return;\n      }\n\n      this.cssClass = cssClass;\n      this.table.rows.forEach(function (row) {\n        this.cell(row).setCssClass(cssClass);\n      }, this);\n      this.table.updateRows(this.table.rows);\n    }\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(width) {\n      if (this.width === width) {\n        return;\n      }\n\n      this.table.resizeColumn(this, width);\n    }\n  }, {\n    key: \"createAggrGroupCell\",\n    value: function createAggrGroupCell(row) {\n      var cell = this.cell(row);\n      return this.initCell(scout.create('Cell', {\n        // value necessary for value based columns (e.g. checkbox column)\n        value: cell.value,\n        text: this.cellTextForGrouping(row),\n        iconId: cell.iconId,\n        horizontalAlignment: this.horizontalAlignment,\n        cssClass: 'table-aggregate-cell'\n      }));\n    }\n  }, {\n    key: \"createAggrValueCell\",\n    value: function createAggrValueCell(value) {\n      return this.createAggrEmptyCell();\n    }\n  }, {\n    key: \"createAggrEmptyCell\",\n    value: function createAggrEmptyCell() {\n      return this.initCell(scout.create('Cell', {\n        empty: true,\n        cssClass: 'table-aggregate-cell'\n      }));\n    }\n  }, {\n    key: \"calculateOptimalWidth\",\n    value: function calculateOptimalWidth() {\n      return this.optimalWidthMeasurer.measure();\n    }\n    /**\n     * Returns a type specific column user-filter. The default impl. returns a ColumnUserFilter.\n     * Sub-classes that must return another type, must simply change the value of the 'filterType' property.\n     */\n\n  }, {\n    key: \"createFilter\",\n    value: function createFilter(model) {\n      return scout.create(this.filterType, {\n        session: this.session,\n        table: this.table,\n        column: this\n      });\n    }\n    /**\n     * Returns a table header menu. Sub-classes can override this method to create a column specific table header menu.\n     */\n\n  }, {\n    key: \"createTableHeaderMenu\",\n    value: function createTableHeaderMenu(tableHeader) {\n      var $header = this.$header;\n      return scout.create('TableHeaderMenu', {\n        parent: tableHeader,\n        column: $header.data('column'),\n        tableHeader: tableHeader,\n        $anchor: $header,\n        focusableContainer: true\n      });\n    }\n    /**\n     * @returns a field instance used as editor when a cell of this column is in edit mode.\n     */\n\n  }, {\n    key: \"createEditor\",\n    value: function createEditor(row) {\n      var field = this._createEditor(row);\n\n      var cell = this.cell(row);\n\n      this._initEditorField(field, cell);\n\n      field.setLabelVisible(false);\n      field.setFieldStyle(FormField.FieldStyle.CLASSIC);\n      var hints = new GridData(field.gridDataHints);\n      hints.horizontalAlignment = cell.horizontalAlignment;\n      field.setGridDataHints(hints);\n      return field;\n    }\n    /**\n     * Depending on the type of column the editor may need to be initialized differently.\n     * The default implementation calls setValue on the field.\n     */\n\n  }, {\n    key: \"_initEditorField\",\n    value: function _initEditorField(field, cell) {\n      field.setValue(cell.value);\n    }\n  }, {\n    key: \"_createEditor\",\n    value: function _createEditor() {\n      return scout.create('StringField', {\n        parent: this.table,\n        maxLength: this.maxLength,\n        multilineText: this.table.multilineText,\n        wrapText: this.textWrap\n      });\n    }\n    /**\n     * Override this function to install a specific compare function on a column instance.\n     * The default impl. installs a generic comparator working with less than and greater than.\n     *\n     * @returns whether or not it was possible to install a compare function. If not, client side sorting is disabled.\n     */\n\n  }, {\n    key: \"installComparator\",\n    value: function installComparator() {\n      return this.comparator.install(this.session);\n    }\n    /**\n     * @returns {boolean} whether or not it is possible to sort this column.\n     * As a side effect a comparator is installed.\n     */\n\n  }, {\n    key: \"isSortingPossible\",\n    value: function isSortingPossible() {\n      // If installation fails sorting is still possible (in case of the text comparator just without a collator)\n      this.installComparator();\n      return true;\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(row1, row2) {\n      var valueA = this.cellValueOrText(row1);\n      var valueB = this.cellValueOrText(row2);\n      return this.comparator.compare(valueA, valueB);\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this.displayable && this.visible;\n    }\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(visible) {\n      if (this.visible === visible) {\n        return;\n      }\n\n      this._setVisible(visible);\n    }\n  }, {\n    key: \"_setVisible\",\n    value: function _setVisible(visible) {\n      this.visible = visible;\n\n      if (this.initialized) {\n        this.table.onColumnVisibilityChanged(this);\n      }\n    }\n  }, {\n    key: \"setDisplayable\",\n    value: function setDisplayable(displayable) {\n      if (this.displayable === displayable) {\n        return;\n      }\n\n      this._setDisplayable(displayable);\n    }\n  }, {\n    key: \"_setDisplayable\",\n    value: function _setDisplayable(displayable) {\n      this.displayable = displayable;\n\n      if (this.initialized) {\n        this.table.onColumnVisibilityChanged(this);\n      }\n    }\n  }, {\n    key: \"setAutoOptimizeWidth\",\n    value: function setAutoOptimizeWidth(autoOptimizeWidth) {\n      if (this.autoOptimizeWidth === autoOptimizeWidth) {\n        return;\n      }\n\n      this._setAutoOptimizeWidth(autoOptimizeWidth);\n    }\n  }, {\n    key: \"_setAutoOptimizeWidth\",\n    value: function _setAutoOptimizeWidth(autoOptimizeWidth) {\n      this.autoOptimizeWidth = autoOptimizeWidth;\n      this.autoOptimizeWidthRequired = autoOptimizeWidth;\n\n      if (this.initialized) {\n        this.table.columnLayoutDirty = true;\n        this.table.invalidateLayoutTree();\n      }\n    }\n  }, {\n    key: \"setMaxLength\",\n    value: function setMaxLength(maxLength) {\n      this.maxLength = maxLength;\n    }\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      if (this.text === text) {\n        return;\n      }\n\n      this.text = text;\n\n      if (this.table.header) {\n        this.table.header.updateHeader(this);\n      }\n    }\n  }, {\n    key: \"setHeaderIconId\",\n    value: function setHeaderIconId(headerIconId) {\n      if (this.headerIconId === headerIconId) {\n        return;\n      }\n\n      this.headerIconId = headerIconId;\n\n      if (this.table.header) {\n        this.table.header.updateHeader(this);\n      }\n    }\n  }, {\n    key: \"setHeaderCssClass\",\n    value: function setHeaderCssClass(headerCssClass) {\n      if (this.headerCssClass === headerCssClass) {\n        return;\n      }\n\n      var oldState = $.extend({}, this);\n      this.headerCssClass = headerCssClass;\n\n      if (this.table.header) {\n        this.table.header.updateHeader(this, oldState);\n      }\n    }\n  }, {\n    key: \"setHeaderHtmlEnabled\",\n    value: function setHeaderHtmlEnabled(headerHtmlEnabled) {\n      if (this.headerHtmlEnabled === headerHtmlEnabled) {\n        return;\n      }\n\n      this.headerHtmlEnabled = headerHtmlEnabled;\n\n      if (this.table.header) {\n        this.table.header.updateHeader(this);\n      }\n    }\n  }, {\n    key: \"setHeaderTooltipText\",\n    value: function setHeaderTooltipText(headerTooltipText) {\n      this.headerTooltipText = headerTooltipText;\n    }\n  }, {\n    key: \"setHeaderTooltipHtmlEnabled\",\n    value: function setHeaderTooltipHtmlEnabled(headerTooltipHtmlEnabled) {\n      this.headerTooltipHtmlEnabled = headerTooltipHtmlEnabled;\n    }\n  }, {\n    key: \"setTextWrap\",\n    value: function setTextWrap(textWrap) {\n      if (this.textWrap === textWrap) {\n        return;\n      }\n\n      this.textWrap = textWrap;\n\n      if (this.table.rendered && this.table.multilineText) {\n        // If multilineText is disabled toggling textWrap has no effect\n        // See also table._renderMultilineText(), requires similar operations\n        this.autoOptimizeWidthRequired = true;\n\n        this.table._redraw();\n\n        this.table.invalidateLayoutTree();\n      }\n    }\n  }, {\n    key: \"isContentValid\",\n    value: function isContentValid(row) {\n      var cell = this.cell(row);\n      var validByErrorStatus = !cell.errorStatus || cell.errorStatus.severity !== Status.Severity.ERROR;\n\n      var validByMandatory = !cell.mandatory || this._hasCellValue(cell);\n\n      return {\n        valid: validByErrorStatus && validByMandatory,\n        validByErrorStatus: validByErrorStatus,\n        validByMandatory: validByMandatory\n      };\n    }\n  }, {\n    key: \"_hasCellValue\",\n    value: function _hasCellValue(cell) {\n      return !!cell.value;\n    }\n  }, {\n    key: \"_onTableColumnsChanged\",\n    value: function _onTableColumnsChanged(event) {\n      if (this.table.visibleColumns().indexOf(this) === 0) {\n        this.tableNodeLevel0CellPadding = 28;\n        this.expandableIconLevel0CellPadding = 13;\n      } else {\n        this.tableNodeLevel0CellPadding = 23;\n        this.expandableIconLevel0CellPadding = 8;\n      }\n    }\n  }, {\n    key: \"_realWidthIfAvailable\",\n    value: function _realWidthIfAvailable() {\n      return this._realWidth || this.width;\n    } // --- Event handling methods ---\n\n  }, {\n    key: \"_createEventSupport\",\n    value: function _createEventSupport() {\n      return new EventSupport();\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(type, event) {\n      event = event || {};\n      event.source = this;\n      this.events.trigger(type, event);\n    }\n  }, {\n    key: \"one\",\n    value: function one(type, func) {\n      this.events.one(type, func);\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, func) {\n      return this.events.on(type, func);\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, func) {\n      this.events.off(type, func);\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      this.events.addListener(listener);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      this.events.removeListener(listener);\n    }\n    /**\n     * Adds an event handler using {@link #one()} and returns a promise.\n     * The promise is resolved as soon as the event is triggered.\n     */\n\n  }, {\n    key: \"when\",\n    value: function when(type) {\n      return this.events.when(type);\n    }\n  }]);\n\n  return Column;\n}();\n\n_defineProperty(Column, \"DEFAULT_MIN_WIDTH\", 60);\n\n_defineProperty(Column, \"NARROW_MIN_WIDTH\", 32);\n\nexport { Column as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/table/columns/Column.js"],"names":["Cell","ColumnOptimalWidthMeasurer","comparators","EventSupport","FormField","GridData","icons","objects","scout","Status","strings","styles","Table","TableRow","texts","$","Column","autoOptimizeWidth","autoOptimizeWidthRequired","autoOptimizeMaxWidth","cssClass","editable","removable","modifiable","fixedWidth","fixedPosition","grouped","headerCssClass","headerIconId","headerHtmlEnabled","headerTooltipText","horizontalAlignment","htmlEnabled","index","initialized","mandatory","optimalWidthMeasurer","sortActive","sortAscending","sortIndex","summary","type","width","initialWidth","undefined","prefMinWidth","minWidth","DEFAULT_MIN_WIDTH","showSeparator","table","tableNodeColumn","maxLength","text","textWrap","filterType","comparator","TEXT","displayable","visible","textBased","headerMenuEnabled","tableNodeLevel0CellPadding","expandableIconLevel0CellPadding","nodeColumnCandidate","events","_createEventSupport","_tableColumnsChangedHandler","_onTableColumnsChanged","bind","_realWidth","model","session","extend","nvl","_init","resolveTextProperty","resolveIconProperty","_setTable","_setDisplayable","_setAutoOptimizeWidth","_destroy","off","on","vararg","row","cell","_ensureCell","_initCell","isNullOrUndefined","_updateCellText","value","_parseValue","create","scalar","returned","_formatValue","isFunction","promise","setCellTextDeferred","setCellText","buildCell","aggregateRow","refRow","groupingStyle","GroupingStyle","TOP","nextRow","prevRow","createAggrGroupCell","aggregateValue","contents","columns","indexOf","createAggrValueCell","assertParameter","isTableNodeColumn","rowPadding","_calcRowLevelPadding","_text","iconId","icon","_icon","_cellCssClass","style","_cellStyle","errorStatus","hasError","content","join","_expandable","_expandIcon","expanded","_buildCell","cssClasses","hasText","parseIconId","isFontIcon","appendCssClass","iconCharacter","iconUrl","encodedText","multilineText","nl2br","tableNode","parseHorizontalAlignment","visibleColumns","overAllColumnPosition","length","legacyStyle","event","$row","data","isCellEditable","prepareCellEdit","enabledComputed","enabled","ctrlKey","shiftKey","field","popup","$cell","gridData","parent","column","$anchor","open","$data","selectedRow","cellText","cellValue","cellValueOrText","_preprocessValueOrTextForCalculation","_preprocessTextForCalculation","_preprocessText","removeHtmlTags","removeNewlines","trim","_preprocessTextForGrouping","_preprocessTextForTextFilter","options","plainText","replace","setValue","status","NON_CHANGED","UPDATED","done","fail","error","log","updateBuffer","pushPromise","setText","updateRow","setErrorStatus","hAlign","rows","forEach","setHorizontalAlignment","updateRows","header","updateHeader","setEditable","setMandatory","setCssClass","resizeColumn","initCell","cellTextForGrouping","createAggrEmptyCell","empty","measure","tableHeader","$header","focusableContainer","_createEditor","_initEditorField","setLabelVisible","setFieldStyle","FieldStyle","CLASSIC","hints","gridDataHints","setGridDataHints","wrapText","install","installComparator","row1","row2","valueA","valueB","compare","_setVisible","onColumnVisibilityChanged","columnLayoutDirty","invalidateLayoutTree","oldState","headerTooltipHtmlEnabled","rendered","_redraw","validByErrorStatus","severity","Severity","ERROR","validByMandatory","_hasCellValue","valid","source","trigger","func","one","listener","addListener","removeListener","when"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Cell, ColumnOptimalWidthMeasurer, comparators, EventSupport, FormField, GridData, icons, objects, scout, Status, strings, styles, Table, TableRow, texts} from '../../index';\nimport $ from 'jquery';\n\nexport default class Column {\n\n  constructor() {\n    this.autoOptimizeWidth = false;\n    this.autoOptimizeWidthRequired = false; // true if content of the column changed and width has to be optimized\n    this.autoOptimizeMaxWidth = -1;\n    this.cssClass = null;\n    this.editable = false;\n    this.removable = false;\n    this.modifiable = false;\n    this.fixedWidth = false;\n    this.fixedPosition = false;\n    this.grouped = false;\n    this.headerCssClass = null;\n    this.headerIconId = null;\n    this.headerHtmlEnabled = false;\n    this.headerTooltipText = null;\n    this.horizontalAlignment = -1;\n    this.htmlEnabled = false;\n    this.index = -1;\n    this.initialized = false;\n    this.mandatory = false;\n    this.optimalWidthMeasurer = new ColumnOptimalWidthMeasurer(this);\n    this.sortActive = false;\n    this.sortAscending = true;\n    this.sortIndex = -1;\n    this.summary = false;\n    this.type = 'text';\n    this.width = 60;\n    this.initialWidth = undefined; // the width the column initially has\n    this.prefMinWidth = null;\n    this.minWidth = Column.DEFAULT_MIN_WIDTH; // the minimal width the column can have\n    this.showSeparator = true;\n    this.table = null;\n    this.tableNodeColumn = false;\n    this.maxLength = 4000;\n    this.text = null;\n    this.textWrap = false;\n    this.filterType = 'TextColumnUserFilter';\n    this.comparator = comparators.TEXT;\n    this.displayable = true;\n    this.visible = true;\n    this.textBased = true;\n    this.headerMenuEnabled = true;\n    this.tableNodeLevel0CellPadding = 28;\n    this.expandableIconLevel0CellPadding = 13;\n    this.nodeColumnCandidate = true;\n\n    this.events = this._createEventSupport();\n\n    this._tableColumnsChangedHandler = this._onTableColumnsChanged.bind(this);\n    // Contains the width the cells of the column really have (only set in Chrome due to a Chrome bug, see Table._updateRealColumnWidths)\n    this._realWidth = null;\n  }\n\n  static DEFAULT_MIN_WIDTH = 60;\n  static NARROW_MIN_WIDTH = 32; // for columns without text (icon, check box)\n\n  init(model) {\n    this.session = model.session;\n\n    // Copy all properties from model to this\n    $.extend(this, model);\n\n    // Initial width is only sent if it differs from width\n    if (this.initialWidth === undefined) {\n      this.initialWidth = scout.nvl(this.width, 0);\n    }\n    this._init(model);\n    this.initialized = true;\n  }\n\n  /**\n   * Override this function in order to implement custom init logic.\n   */\n  _init(model) {\n    texts.resolveTextProperty(this, 'text');\n    texts.resolveTextProperty(this, 'headerTooltipText');\n    icons.resolveIconProperty(this, 'headerIconId');\n    this._setTable(this.table);\n    this._setDisplayable(this.displayable);\n    this._setAutoOptimizeWidth(this.autoOptimizeWidth);\n    // no need to call setEditable here. cell propagation is done in _initCell\n  }\n\n  destroy() {\n    this._destroy();\n    this._setTable(null);\n  }\n\n  /**\n   * Override this function in order to implement custom destroy logic.\n   */\n  _destroy(model) {\n    // NOP\n  }\n\n  _setTable(table) {\n    if (this.table) {\n      this.table.off('columnMoved columnStructureChanged', this._tableColumnsChangedHandler);\n    }\n    this.table = table;\n    if (this.table) {\n      this.table.on('columnMoved columnStructureChanged', this._tableColumnsChangedHandler);\n    }\n  }\n\n  /**\n   * Converts the vararg if it is of type string to an object with\n   * a property 'text' with the original value.\n   *\n   * Example:\n   * 'My Company' --> { text: 'MyCompany'; }\n   *\n   * @see JsonCell.java\n   * @param {Cell|string|number|object} vararg either a Cell instance or a scalar value\n   */\n  initCell(vararg, row) {\n    var cell = this._ensureCell(vararg);\n    this._initCell(cell);\n\n    // If a text is provided, use that text instead of using formatValue to generate a text based on the value\n    if (objects.isNullOrUndefined(cell.text)) {\n      this._updateCellText(row, cell);\n    }\n    return cell;\n  }\n\n  /**\n   * Ensures that a Cell instance is returned. When vararg is a scalar value a new Cell instance is created and\n   * the value is set as cell.value property.\n   *\n   * @param {Cell|string|number|object} vararg either a Cell instance or a scalar value\n   * @returns {*}\n   * @private\n   */\n  _ensureCell(vararg) {\n    var cell;\n\n    if (vararg instanceof Cell) {\n      cell = vararg;\n\n      // value may be set but may have the wrong type (e.g. text instead of date) -> ensure type\n      cell.value = this._parseValue(cell.value);\n    } else {\n      // in this case 'vararg' is only a scalar value, typically a string\n      cell = scout.create('Cell', {\n        value: this._parseValue(vararg)\n      });\n    }\n\n    return cell;\n  }\n\n  /**\n   * Override this method to create a value based on the given scalar value.\n   */\n  _parseValue(scalar) {\n    return scalar;\n  }\n\n  _updateCellText(row, cell) {\n    var value = cell.value;\n    if (!row) {\n      // row is omitted when creating aggregate cells\n      return;\n    }\n\n    var returned = this._formatValue(value);\n    if (returned && $.isFunction(returned.promise)) {\n      // Promise is returned -> set display text later\n      this.setCellTextDeferred(returned, row, cell);\n    } else {\n      this.setCellText(row, returned, cell);\n    }\n  }\n\n  _formatValue(value) {\n    return scout.nvl(value, '');\n  }\n\n  /**\n   * If cell does not define properties, use column values.\n   * Override this function to impl. type specific init cell behavior.\n   *\n   * @param {Cell} cell\n   */\n  _initCell(cell) {\n    cell.cssClass = scout.nvl(cell.cssClass, this.cssClass);\n    cell.editable = scout.nvl(cell.editable, this.editable);\n    cell.horizontalAlignment = scout.nvl(cell.horizontalAlignment, this.horizontalAlignment);\n    cell.htmlEnabled = scout.nvl(cell.htmlEnabled, this.htmlEnabled);\n    cell.mandatory = scout.nvl(cell.mandatory, this.mandatory);\n    return cell;\n  }\n\n  buildCellForRow(row) {\n    var cell = this.cell(row);\n    return this.buildCell(cell, row);\n  }\n\n  buildCellForAggregateRow(aggregateRow) {\n    var cell;\n    if (this.grouped) {\n      var refRow = (this.table.groupingStyle === Table.GroupingStyle.TOP ? aggregateRow.nextRow : aggregateRow.prevRow);\n      cell = this.createAggrGroupCell(refRow);\n    } else {\n      var aggregateValue = aggregateRow.contents[this.table.columns.indexOf(this)];\n      cell = this.createAggrValueCell(aggregateValue);\n    }\n    return this.buildCell(cell, {});\n  }\n\n  buildCell(cell, row) {\n    scout.assertParameter('cell', cell, Cell);\n\n    var tableNodeColumn = this.table.isTableNodeColumn(this),\n      rowPadding = 0;\n\n    if (tableNodeColumn) {\n      rowPadding = this.table._calcRowLevelPadding(row);\n    }\n\n    var text = this._text(cell);\n    var iconId = cell.iconId;\n    var icon = this._icon(iconId, !!text) || '';\n    var cssClass = this._cellCssClass(cell, tableNodeColumn);\n    var style = this._cellStyle(cell, tableNodeColumn, rowPadding);\n\n    if (cell.errorStatus) {\n      row.hasError = true;\n    }\n\n    var content;\n    if (!text && !icon) {\n      // If every cell of a row is empty the row would collapse, using nbsp makes sure the row is as height as the others even if it is empty\n      content = '&nbsp;';\n      cssClass = strings.join(' ', cssClass, 'empty');\n    } else {\n      content = icon + text;\n    }\n\n    if (tableNodeColumn && row._expandable) {\n      this.tableNodeColumn = true;\n      content = this._expandIcon(row.expanded, rowPadding) + content;\n      if (row.expanded) {\n        cssClass += ' expanded';\n      }\n    }\n\n    return this._buildCell(content, style, cssClass);\n  }\n\n  _buildCell(content, style, cssClass) {\n    return '<div class=\"' + cssClass + '\" style=\"' + style + '\">' + content + '</div>';\n  }\n\n  _expandIcon(expanded, rowPadding) {\n    var style = 'padding-left: ' + (rowPadding + this.expandableIconLevel0CellPadding) + 'px';\n    var cssClasses = 'table-row-control';\n    if (expanded) {\n      cssClasses += ' expanded';\n    }\n    return '<div class=\"' + cssClasses + '\" style=\"' + style + '\"></div>';\n  }\n\n  _icon(iconId, hasText) {\n    var cssClass, icon;\n    if (!iconId) {\n      return;\n    }\n    cssClass = 'table-cell-icon';\n    if (hasText) {\n      cssClass += ' with-text';\n    }\n    icon = icons.parseIconId(iconId);\n    if (icon.isFontIcon()) {\n      cssClass += ' font-icon';\n      return '<span class=\"' + icon.appendCssClass(cssClass) + '\">' + icon.iconCharacter + '</span>';\n    }\n    cssClass += ' image-icon';\n    return '<img class=\"' + cssClass + '\" src=\"' + icon.iconUrl + '\">';\n  }\n\n  _text(cell) {\n    var text = cell.text || '';\n\n    if (!cell.htmlEnabled) {\n      text = cell.encodedText() || '';\n      if (this.table.multilineText) {\n        text = strings.nl2br(text, false);\n      }\n    }\n\n    return text;\n  }\n\n  _cellCssClass(cell, tableNode) {\n    var cssClass = 'table-cell';\n    if (cell.mandatory) {\n      cssClass += ' mandatory';\n    }\n    if (!this.table.multilineText || !this.textWrap) {\n      cssClass += ' white-space-nowrap';\n    }\n    if (cell.editable) {\n      cssClass += ' editable';\n    }\n    if (cell.errorStatus) {\n      cssClass += ' has-error';\n    }\n    cssClass += ' halign-' + Table.parseHorizontalAlignment(cell.horizontalAlignment);\n    var visibleColumns = this.table.visibleColumns();\n    var overAllColumnPosition = visibleColumns.indexOf(this);\n    if (overAllColumnPosition === 0) {\n      cssClass += ' first';\n    }\n    if (overAllColumnPosition === visibleColumns.length - 1) {\n      cssClass += ' last';\n    }\n    if (tableNode) {\n      cssClass += ' table-node';\n    }\n\n    if (cell.cssClass) {\n      cssClass += ' ' + cell.cssClass;\n    }\n    return cssClass;\n  }\n\n  _cellStyle(cell, tableNodeColumn, rowPadding) {\n    var style,\n      width = this.width;\n\n    if (width === 0) {\n      return 'display: none;';\n    }\n    style = 'min-width: ' + width + 'px; max-width: ' + width + 'px; ';\n    if (tableNodeColumn) {\n      // calculate padding\n      style += ' padding-left: ' + (this.tableNodeLevel0CellPadding + rowPadding) + 'px; ';\n    }\n    style += styles.legacyStyle(cell);\n    return style;\n  }\n\n  onMouseUp(event, $row) {\n    var row = $row.data('row'),\n      cell = this.cell(row);\n\n    if (this.isCellEditable(row, cell, event)) {\n      this.table.prepareCellEdit(this, row, true);\n    }\n  }\n\n  isCellEditable(row, cell, event) {\n    return this.table.enabledComputed && row.enabled && cell.editable && !event.ctrlKey && !event.shiftKey;\n  }\n\n  startCellEdit(row, field) {\n    var popup,\n      $row = row.$row,\n      cell = this.cell(row),\n      $cell = this.table.$cell(this, $row);\n\n    cell.field = field;\n    // Override field alignment with the cell's alignment\n    cell.field.gridData.horizontalAlignment = cell.horizontalAlignment;\n\n    popup = scout.create('CellEditorPopup', {\n      parent: this.table,\n      column: this,\n      row: row,\n      cell: cell\n    });\n    popup.$anchor = $cell;\n    popup.open(this.table.$data);\n    return popup;\n  }\n\n  /**\n   * @returns {Cell} the cell object for this column from the given row.\n   */\n  cell(row) {\n    return this.table.cell(this, row);\n  }\n\n  /**\n   * @returns {Cell} the cell object for this column from the first selected row in the table.\n   */\n  selectedCell() {\n    var selectedRow = this.table.selectedRow();\n    return this.table.cell(this, selectedRow);\n  }\n\n  cellValueOrText(row) {\n    if (this.textBased) {\n      return this.table.cellText(this, row);\n    }\n    return this.table.cellValue(this, row);\n  }\n\n  /**\n   * @returns {*} the cell value to be used for grouping and filtering (chart, column filter).\n   */\n  cellValueOrTextForCalculation(row) {\n    var cell = this.cell(row);\n    var value = this.cellValueOrText(row);\n    if (objects.isNullOrUndefined(value)) {\n      return null;\n    }\n    return this._preprocessValueOrTextForCalculation(value, cell);\n  }\n\n  _preprocessValueOrTextForCalculation(value, cell) {\n    if (typeof value === 'string') {\n      // In case of string columns, value and text are equal -> use _preprocessStringForCalculation to handle html tags and new lines correctly\n      return this._preprocessTextForCalculation(value, cell.htmlEnabled);\n    }\n    return value;\n  }\n\n  _preprocessTextForCalculation(text, htmlEnabled) {\n    return this._preprocessText(text, {\n      removeHtmlTags: htmlEnabled,\n      removeNewlines: true,\n      trim: true\n    });\n  }\n\n  /**\n   * @returns {string} the cell text to be used for table grouping\n   */\n  cellTextForGrouping(row) {\n    var cell = this.cell(row);\n    return this._preprocessTextForGrouping(cell.text, cell.htmlEnabled);\n  }\n\n  _preprocessTextForGrouping(text, htmlEnabled) {\n    return this._preprocessText(text, {\n      removeHtmlTags: htmlEnabled,\n      trim: true\n    });\n  }\n\n  /**\n   * @returns {string} the cell text to be used for the text filter\n   */\n  cellTextForTextFilter(row) {\n    var cell = this.cell(row);\n    return this._preprocessTextForTextFilter(cell.text, cell.htmlEnabled);\n  }\n\n  _preprocessTextForTextFilter(text, htmlEnabled) {\n    return this._preprocessText(text, {\n      removeHtmlTags: htmlEnabled\n    });\n  }\n\n  /**\n   * @returns {string} the cell text to be used for the table row detail.\n   */\n  cellTextForRowDetail(row) {\n    var cell = this.cell(row);\n\n    return this._preprocessText(this._text(cell), {\n      removeHtmlTags: cell.htmlEnabled\n    });\n  }\n\n  /**\n   * Removes html tags, converts to single line, removes leading and trailing whitespaces.\n   */\n  _preprocessText(text, options) {\n    if (text === null || text === undefined) {\n      return text;\n    }\n    options = options || {};\n    if (options.removeHtmlTags) {\n      text = strings.plainText(text);\n    }\n    if (options.removeNewlines) {\n      text = text.replace('\\n', ' ');\n    }\n    if (options.trim) {\n      text = text.trim();\n    }\n    return text;\n  }\n\n  setCellValue(row, value) {\n    var cell = this.cell(row);\n\n    // value may have the wrong type (e.g. text instead of date) -> ensure type\n    value = this._parseValue(value);\n\n    // do not trigger value change when value did not change\n    if (cell.value === value) {\n      return;\n    }\n\n    cell.setValue(value);\n    if (row.status === TableRow.Status.NON_CHANGED) {\n      row.status = TableRow.Status.UPDATED;\n    }\n    this._updateCellText(row, cell);\n  }\n\n  setCellTextDeferred(promise, row, cell) {\n    promise\n      .done(function(text) {\n        this.setCellText(row, text, cell);\n      }.bind(this))\n      .fail(function(error) {\n        this.setCellText(row, '', cell);\n        $.log.error('Could not resolve cell text for value ' + cell.value, error);\n      }.bind(this));\n\n    // (then) promises always resolve asynchronously which means the text will always be set later after row is initialized and will generate an update row event.\n    // To make sure not every cell update will render the viewport (which is an expensive operation), the update is buffered and done as soon as all promises resolve.\n    this.table.updateBuffer.pushPromise(promise);\n  }\n\n  setCellText(row, text, cell) {\n    if (!cell) {\n      cell = this.cell(row);\n    }\n    cell.setText(text);\n\n    // Don't update row while initializing (it is either added to the table later, or being added / updated right now)\n    // The check for \"this.table\" is necessary, because the column could already have been destroyed (method is called\n    // asynchronously by setCellTextDeferred).\n    if (row.initialized && this.table) {\n      this.table.updateRow(row);\n    }\n  }\n\n  setCellErrorStatus(row, errorStatus, cell) {\n    if (!cell) {\n      cell = this.cell(row);\n    }\n    cell.setErrorStatus(errorStatus);\n  }\n\n  setHorizontalAlignment(hAlign) {\n    if (this.horizontalAlignment === hAlign) {\n      return;\n    }\n    this.horizontalAlignment = hAlign;\n\n    this.table.rows.forEach(function(row) {\n      this.cell(row).setHorizontalAlignment(hAlign);\n    }.bind(this));\n\n    this.table.updateRows(this.table.rows);\n\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n\n  setEditable(editable) {\n    if (this.editable === editable) {\n      return;\n    }\n    this.editable = editable;\n\n    this.table.rows.forEach(function(row) {\n      this.cell(row).setEditable(editable);\n    }.bind(this));\n\n    this.table.updateRows(this.table.rows);\n  }\n\n  setMandatory(mandatory) {\n    if (this.mandatory === mandatory) {\n      return;\n    }\n    this.mandatory = mandatory;\n\n    this.table.rows.forEach(function(row) {\n      this.cell(row).setMandatory(mandatory);\n    }.bind(this));\n\n    this.table.updateRows(this.table.rows);\n  }\n\n  setCssClass(cssClass) {\n    if (this.cssClass === cssClass) {\n      return;\n    }\n\n    this.cssClass = cssClass;\n\n    this.table.rows.forEach(function(row) {\n      this.cell(row).setCssClass(cssClass);\n    }, this);\n\n    this.table.updateRows(this.table.rows);\n  }\n\n  setWidth(width) {\n    if (this.width === width) {\n      return;\n    }\n    this.table.resizeColumn(this, width);\n  }\n\n  createAggrGroupCell(row) {\n    var cell = this.cell(row);\n    return this.initCell(scout.create('Cell', {\n      // value necessary for value based columns (e.g. checkbox column)\n      value: cell.value,\n      text: this.cellTextForGrouping(row),\n      iconId: cell.iconId,\n      horizontalAlignment: this.horizontalAlignment,\n      cssClass: 'table-aggregate-cell'\n    }));\n  }\n\n  createAggrValueCell(value) {\n    return this.createAggrEmptyCell();\n  }\n\n  createAggrEmptyCell() {\n    return this.initCell(scout.create('Cell', {\n      empty: true,\n      cssClass: 'table-aggregate-cell'\n    }));\n  }\n\n  calculateOptimalWidth() {\n    return this.optimalWidthMeasurer.measure();\n  }\n\n  /**\n   * Returns a type specific column user-filter. The default impl. returns a ColumnUserFilter.\n   * Sub-classes that must return another type, must simply change the value of the 'filterType' property.\n   */\n  createFilter(model) {\n    return scout.create(this.filterType, {\n      session: this.session,\n      table: this.table,\n      column: this\n    });\n  }\n\n  /**\n   * Returns a table header menu. Sub-classes can override this method to create a column specific table header menu.\n   */\n  createTableHeaderMenu(tableHeader) {\n    var $header = this.$header;\n    return scout.create('TableHeaderMenu', {\n      parent: tableHeader,\n      column: $header.data('column'),\n      tableHeader: tableHeader,\n      $anchor: $header,\n      focusableContainer: true\n    });\n  }\n\n  /**\n   * @returns a field instance used as editor when a cell of this column is in edit mode.\n   */\n  createEditor(row) {\n    var field = this._createEditor(row);\n    var cell = this.cell(row);\n    this._initEditorField(field, cell);\n    field.setLabelVisible(false);\n    field.setFieldStyle(FormField.FieldStyle.CLASSIC);\n    var hints = new GridData(field.gridDataHints);\n    hints.horizontalAlignment = cell.horizontalAlignment;\n    field.setGridDataHints(hints);\n    return field;\n  }\n\n  /**\n   * Depending on the type of column the editor may need to be initialized differently.\n   * The default implementation calls setValue on the field.\n   */\n  _initEditorField(field, cell) {\n    field.setValue(cell.value);\n  }\n\n  _createEditor() {\n    return scout.create('StringField', {\n      parent: this.table,\n      maxLength: this.maxLength,\n      multilineText: this.table.multilineText,\n      wrapText: this.textWrap\n    });\n  }\n\n  /**\n   * Override this function to install a specific compare function on a column instance.\n   * The default impl. installs a generic comparator working with less than and greater than.\n   *\n   * @returns whether or not it was possible to install a compare function. If not, client side sorting is disabled.\n   */\n  installComparator() {\n    return this.comparator.install(this.session);\n  }\n\n  /**\n   * @returns {boolean} whether or not it is possible to sort this column.\n   * As a side effect a comparator is installed.\n   */\n  isSortingPossible() {\n    // If installation fails sorting is still possible (in case of the text comparator just without a collator)\n    this.installComparator();\n    return true;\n  }\n\n  compare(row1, row2) {\n    var valueA = this.cellValueOrText(row1);\n    var valueB = this.cellValueOrText(row2);\n    return this.comparator.compare(valueA, valueB);\n  }\n\n  isVisible() {\n    return this.displayable && this.visible;\n  }\n\n  setVisible(visible) {\n    if (this.visible === visible) {\n      return;\n    }\n    this._setVisible(visible);\n  }\n\n  _setVisible(visible) {\n    this.visible = visible;\n    if (this.initialized) {\n      this.table.onColumnVisibilityChanged(this);\n    }\n  }\n\n  setDisplayable(displayable) {\n    if (this.displayable === displayable) {\n      return;\n    }\n    this._setDisplayable(displayable);\n  }\n\n  _setDisplayable(displayable) {\n    this.displayable = displayable;\n    if (this.initialized) {\n      this.table.onColumnVisibilityChanged(this);\n    }\n  }\n\n  setAutoOptimizeWidth(autoOptimizeWidth) {\n    if (this.autoOptimizeWidth === autoOptimizeWidth) {\n      return;\n    }\n    this._setAutoOptimizeWidth(autoOptimizeWidth);\n  }\n\n  _setAutoOptimizeWidth(autoOptimizeWidth) {\n    this.autoOptimizeWidth = autoOptimizeWidth;\n    this.autoOptimizeWidthRequired = autoOptimizeWidth;\n    if (this.initialized) {\n      this.table.columnLayoutDirty = true;\n      this.table.invalidateLayoutTree();\n    }\n  }\n\n  setMaxLength(maxLength) {\n    this.maxLength = maxLength;\n  }\n\n  setText(text) {\n    if (this.text === text) {\n      return;\n    }\n    this.text = text;\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n\n  setHeaderIconId(headerIconId) {\n    if (this.headerIconId === headerIconId) {\n      return;\n    }\n    this.headerIconId = headerIconId;\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n\n  setHeaderCssClass(headerCssClass) {\n    if (this.headerCssClass === headerCssClass) {\n      return;\n    }\n    var oldState = $.extend({}, this);\n    this.headerCssClass = headerCssClass;\n    if (this.table.header) {\n      this.table.header.updateHeader(this, oldState);\n    }\n  }\n\n  setHeaderHtmlEnabled(headerHtmlEnabled) {\n    if (this.headerHtmlEnabled === headerHtmlEnabled) {\n      return;\n    }\n    this.headerHtmlEnabled = headerHtmlEnabled;\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n\n  setHeaderTooltipText(headerTooltipText) {\n    this.headerTooltipText = headerTooltipText;\n  }\n\n  setHeaderTooltipHtmlEnabled(headerTooltipHtmlEnabled) {\n    this.headerTooltipHtmlEnabled = headerTooltipHtmlEnabled;\n  }\n\n  setTextWrap(textWrap) {\n    if (this.textWrap === textWrap) {\n      return;\n    }\n    this.textWrap = textWrap;\n    if (this.table.rendered && this.table.multilineText) { // If multilineText is disabled toggling textWrap has no effect\n      // See also table._renderMultilineText(), requires similar operations\n      this.autoOptimizeWidthRequired = true;\n      this.table._redraw();\n      this.table.invalidateLayoutTree();\n    }\n  }\n\n  isContentValid(row) {\n    let cell = this.cell(row);\n    var validByErrorStatus = !cell.errorStatus || cell.errorStatus.severity !== Status.Severity.ERROR;\n    var validByMandatory = !cell.mandatory || this._hasCellValue(cell);\n    return {\n      valid: validByErrorStatus && validByMandatory,\n      validByErrorStatus: validByErrorStatus,\n      validByMandatory: validByMandatory\n    };\n  }\n\n  _hasCellValue(cell) {\n    return !!cell.value;\n  }\n\n  _onTableColumnsChanged(event) {\n    if (this.table.visibleColumns().indexOf(this) === 0) {\n      this.tableNodeLevel0CellPadding = 28;\n      this.expandableIconLevel0CellPadding = 13;\n    } else {\n      this.tableNodeLevel0CellPadding = 23;\n      this.expandableIconLevel0CellPadding = 8;\n    }\n  }\n\n  _realWidthIfAvailable() {\n    return this._realWidth || this.width;\n  }\n\n  // --- Event handling methods ---\n  _createEventSupport() {\n    return new EventSupport();\n  }\n\n  trigger(type, event) {\n    event = event || {};\n    event.source = this;\n    this.events.trigger(type, event);\n  }\n\n  one(type, func) {\n    this.events.one(type, func);\n  }\n\n  on(type, func) {\n    return this.events.on(type, func);\n  }\n\n  off(type, func) {\n    this.events.off(type, func);\n  }\n\n  addListener(listener) {\n    this.events.addListener(listener);\n  }\n\n  removeListener(listener) {\n    this.events.removeListener(listener);\n  }\n\n  /**\n   * Adds an event handler using {@link #one()} and returns a promise.\n   * The promise is resolved as soon as the event is triggered.\n   */\n  when(type) {\n    return this.events.when(type);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}