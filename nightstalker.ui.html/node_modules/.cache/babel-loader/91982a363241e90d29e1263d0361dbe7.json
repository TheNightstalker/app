{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Device, graphics, icons, TableControl, tooltips } from '../../index';\nimport $ from 'jquery';\n\nvar AggregateTableControl = /*#__PURE__*/function (_TableControl) {\n  _inherits(AggregateTableControl, _TableControl);\n\n  var _super = _createSuper(AggregateTableControl);\n\n  function AggregateTableControl() {\n    var _this;\n\n    _classCallCheck(this, AggregateTableControl);\n\n    _this = _super.call(this);\n    _this._tableDataScrollHandler = _this._onTableDataScroll.bind(_assertThisInitialized(_this));\n    _this._tableColumnResizedHandler = _this._onTableColumnResized.bind(_assertThisInitialized(_this));\n    _this._tableColumnMovedHandler = _this._onTableColumnMoved.bind(_assertThisInitialized(_this));\n    _this._tableColumnStructureChangedHandler = _this._onTableColumnStructureChanged.bind(_assertThisInitialized(_this));\n    _this._tableChangedHandler = _this._onTableChanged.bind(_assertThisInitialized(_this));\n    _this._aggregationFunctionChangedHandler = _this._onAggregationFunctionChanged.bind(_assertThisInitialized(_this));\n    _this.animateDuration = AggregateTableControl.CONTAINER_ANIMATE_DURATION;\n    _this.aggregateRow = [];\n    _this.cssClass = 'aggregate';\n    _this.height = 0; // Will be as height as a row\n\n    _this.iconId = icons.SUM;\n    _this.tooltipText = '${textKey:ui.Total}';\n    _this.resizerVisible = false;\n    return _this;\n  }\n\n  _createClass(AggregateTableControl, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(AggregateTableControl.prototype), \"_init\", this).call(this, model);\n\n      this.table.on('columnStructureChanged', this._tableColumnStructureChangedHandler);\n      this.table.on('aggregationFunctionChanged', this._aggregationFunctionChangedHandler);\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      _get(_getPrototypeOf(AggregateTableControl.prototype), \"_destroy\", this).call(this);\n\n      this.table.off('columnStructureChanged', this._tableColumnStructureChangedHandler);\n      this.table.off('aggregationFunctionChanged', this._aggregationFunctionChangedHandler);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(AggregateTableControl.prototype), \"_render\", this).call(this);\n\n      this._updateEnabledAndSelectedState();\n\n      this.height = this.table.rowHeight + graphics.insets(this.table.footer.$controlContainer).vertical();\n    }\n  }, {\n    key: \"_renderContent\",\n    value: function _renderContent($parent) {\n      this.$contentContainer = $parent.appendDiv('table-aggregate');\n\n      this._aggregate();\n\n      this._renderAggregate();\n\n      this._reconcileScrollPos();\n\n      this.table.$data.on('scroll', this._tableDataScrollHandler);\n      this.table.on('columnResized', this._tableColumnResizedHandler);\n      this.table.on('columnMoved', this._tableColumnMovedHandler);\n      this.table.on('rowsSelected rowsInserted rowsUpdated rowsDeleted filter group allRowsDeleted', this._tableChangedHandler);\n    }\n  }, {\n    key: \"_removeContent\",\n    value: function _removeContent() {\n      this.$contentContainer.remove();\n      this.table.$data.off('scroll', this._tableDataScrollHandler);\n      this.table.off('columnResized', this._tableColumnResizedHandler);\n      this.table.off('columnMoved', this._tableColumnMovedHandler);\n      this.table.off('rowsSelected rowsInserted rowsUpdated rowsDeleted filter group allRowsDeleted', this._tableChangedHandler);\n    }\n  }, {\n    key: \"_renderAggregate\",\n    value: function _renderAggregate() {\n      this.table.visibleColumns().forEach(function (column, c) {\n        var aggregateValue, cell, $cell;\n        aggregateValue = this.aggregateRow[c]; // Aggregation functions are not available if column is grouped -> do not show aggregated value\n\n        if (aggregateValue === undefined || aggregateValue === null || column.grouped) {\n          cell = column.createAggrEmptyCell();\n        } else {\n          cell = column.createAggrValueCell(aggregateValue);\n        }\n\n        $cell = $(column.buildCell(cell, {})); // install tooltips\n\n        this._installCellTooltip($cell); // If aggregation is based on the selection and not on all rows -> mark it\n\n\n        if (this.aggregateRow.selection) {\n          $cell.addClass('selection');\n        }\n\n        $cell.appendTo(this.$contentContainer);\n\n        if ($cell.isContentTruncated()) {\n          $cell.children('.table-cell-icon').setVisible(false);\n        }\n      }, this);\n\n      if (this.aggregateRow.selection) {\n        this.$contentContainer.addClass('selection');\n      }\n    }\n  }, {\n    key: \"_rerenderAggregate\",\n    value: function _rerenderAggregate() {\n      this.$contentContainer.empty();\n\n      this._renderAggregate();\n    }\n  }, {\n    key: \"_installCellTooltip\",\n    value: function _installCellTooltip($cell) {\n      tooltips.install($cell, {\n        parent: this,\n        text: this._cellTooltipText.bind(this),\n        htmlEnabled: true,\n        arrowPosition: 50,\n        arrowPositionUnit: '%',\n        nativeTooltip: !Device.get().isCustomEllipsisTooltipPossible()\n      });\n    }\n  }, {\n    key: \"_cellTooltipText\",\n    value: function _cellTooltipText($cell) {\n      if ($cell.text().trim() && ($cell.isContentTruncated() || $cell.children('.table-cell-icon').length && !$cell.children('.table-cell-icon').isVisible())) {\n        $cell = $cell.clone();\n        $cell.children('.table-cell-icon').setVisible(true);\n        return $cell.html();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_aggregate\",\n    value: function _aggregate() {\n      var rows,\n          aggregateRow = [],\n          selectedRows = this.table.selectedRows;\n\n      if (selectedRows.length > 1) {\n        rows = selectedRows;\n        aggregateRow.selection = true;\n      } else {\n        rows = this.table.filteredRows();\n      }\n\n      this.table._forEachVisibleColumn('aggrStart', aggregateRow);\n\n      rows.forEach(function (row) {\n        this.table._forEachVisibleColumn('aggrStep', aggregateRow, row);\n      }, this);\n\n      this.table._forEachVisibleColumn('aggrFinish', aggregateRow);\n\n      this.aggregateRow = aggregateRow;\n\n      if (this.contentRendered && this.selected) {\n        this._rerenderAggregate();\n      }\n    }\n  }, {\n    key: \"_reconcileScrollPos\",\n    value: function _reconcileScrollPos() {\n      // When scrolling horizontally scroll aggregate content as well\n      var scrollLeft = this.table.$data.scrollLeft();\n      this.$contentContainer.scrollLeft(scrollLeft);\n    }\n  }, {\n    key: \"_updateEnabledAndSelectedState\",\n    value: function _updateEnabledAndSelectedState(aggregationFunctionChanged) {\n      if (!this.initialized) {\n        // During init the columns are not resolved yet -> containsAggregatedNumberColumn won't return a correct value\n        return;\n      }\n\n      var enabled = this.table.containsAggregatedNumberColumn(); // Select control if enabled, aggregation function changed and table is not grouped\n\n      if (enabled) {\n        if (aggregationFunctionChanged && !this.table.isGrouped()) {\n          this.setSelected(true);\n        }\n      } else if (this.selected) {\n        // Make sure a disabled control is not selected\n        this.setSelected(false);\n      }\n\n      this.setEnabled(enabled);\n    }\n  }, {\n    key: \"_setEnabled\",\n    value: function _setEnabled(enabled) {\n      _get(_getPrototypeOf(AggregateTableControl.prototype), \"_setEnabled\", this).call(this, enabled);\n\n      this._updateEnabledAndSelectedState();\n    }\n  }, {\n    key: \"_setSelected\",\n    value: function _setSelected(selected) {\n      this._setProperty('selected', selected);\n\n      this._updateEnabledAndSelectedState();\n    }\n  }, {\n    key: \"_onTableDataScroll\",\n    value: function _onTableDataScroll() {\n      this._reconcileScrollPos();\n    }\n    /**\n     * Generic handler for various events\n     * @private\n     */\n\n  }, {\n    key: \"_onTableChanged\",\n    value: function _onTableChanged() {\n      this._aggregate();\n    }\n  }, {\n    key: \"_onAggregationFunctionChanged\",\n    value: function _onAggregationFunctionChanged() {\n      this._updateEnabledAndSelectedState(true);\n\n      if (this.contentRendered && this.selected) {\n        this._aggregate();\n      }\n    }\n  }, {\n    key: \"_onTableColumnResized\",\n    value: function _onTableColumnResized() {\n      this._rerenderAggregate();\n    }\n  }, {\n    key: \"_onTableColumnMoved\",\n    value: function _onTableColumnMoved(event) {\n      // move aggregated value in aggregateRow\n      arrays.move(this.aggregateRow, event.oldPos, event.newPos);\n\n      this._rerenderAggregate();\n    }\n  }, {\n    key: \"_onTableColumnStructureChanged\",\n    value: function _onTableColumnStructureChanged() {\n      this._updateEnabledAndSelectedState();\n\n      if (this.contentRendered && this.selected) {\n        this._aggregate();\n      }\n    }\n  }]);\n\n  return AggregateTableControl;\n}(TableControl);\n\n_defineProperty(AggregateTableControl, \"CONTAINER_ANIMATE_DURATION\", 200);\n\nexport { AggregateTableControl as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/table/controls/AggregateTableControl.js"],"names":["arrays","Device","graphics","icons","TableControl","tooltips","$","AggregateTableControl","_tableDataScrollHandler","_onTableDataScroll","bind","_tableColumnResizedHandler","_onTableColumnResized","_tableColumnMovedHandler","_onTableColumnMoved","_tableColumnStructureChangedHandler","_onTableColumnStructureChanged","_tableChangedHandler","_onTableChanged","_aggregationFunctionChangedHandler","_onAggregationFunctionChanged","animateDuration","CONTAINER_ANIMATE_DURATION","aggregateRow","cssClass","height","iconId","SUM","tooltipText","resizerVisible","model","table","on","off","_updateEnabledAndSelectedState","rowHeight","insets","footer","$controlContainer","vertical","$parent","$contentContainer","appendDiv","_aggregate","_renderAggregate","_reconcileScrollPos","$data","remove","visibleColumns","forEach","column","c","aggregateValue","cell","$cell","undefined","grouped","createAggrEmptyCell","createAggrValueCell","buildCell","_installCellTooltip","selection","addClass","appendTo","isContentTruncated","children","setVisible","empty","install","parent","text","_cellTooltipText","htmlEnabled","arrowPosition","arrowPositionUnit","nativeTooltip","get","isCustomEllipsisTooltipPossible","trim","length","isVisible","clone","html","rows","selectedRows","filteredRows","_forEachVisibleColumn","row","contentRendered","selected","_rerenderAggregate","scrollLeft","aggregationFunctionChanged","initialized","enabled","containsAggregatedNumberColumn","isGrouped","setSelected","setEnabled","_setProperty","event","move","oldPos","newPos"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Device, graphics, icons, TableControl, tooltips} from '../../index';\nimport $ from 'jquery';\n\nexport default class AggregateTableControl extends TableControl {\n\n  constructor() {\n    super();\n    this._tableDataScrollHandler = this._onTableDataScroll.bind(this);\n    this._tableColumnResizedHandler = this._onTableColumnResized.bind(this);\n    this._tableColumnMovedHandler = this._onTableColumnMoved.bind(this);\n    this._tableColumnStructureChangedHandler = this._onTableColumnStructureChanged.bind(this);\n    this._tableChangedHandler = this._onTableChanged.bind(this);\n    this._aggregationFunctionChangedHandler = this._onAggregationFunctionChanged.bind(this);\n\n    this.animateDuration = AggregateTableControl.CONTAINER_ANIMATE_DURATION;\n    this.aggregateRow = [];\n    this.cssClass = 'aggregate';\n    this.height = 0; // Will be as height as a row\n    this.iconId = icons.SUM;\n    this.tooltipText = '${textKey:ui.Total}';\n    this.resizerVisible = false;\n  }\n\n  static CONTAINER_ANIMATE_DURATION = 200;\n\n  _init(model) {\n    super._init(model);\n    this.table.on('columnStructureChanged', this._tableColumnStructureChangedHandler);\n    this.table.on('aggregationFunctionChanged', this._aggregationFunctionChangedHandler);\n  }\n\n  _destroy() {\n    super._destroy();\n    this.table.off('columnStructureChanged', this._tableColumnStructureChangedHandler);\n    this.table.off('aggregationFunctionChanged', this._aggregationFunctionChangedHandler);\n  }\n\n  _render() {\n    super._render();\n    this._updateEnabledAndSelectedState();\n    this.height = this.table.rowHeight + graphics.insets(this.table.footer.$controlContainer).vertical();\n  }\n\n  _renderContent($parent) {\n    this.$contentContainer = $parent.appendDiv('table-aggregate');\n\n    this._aggregate();\n    this._renderAggregate();\n    this._reconcileScrollPos();\n\n    this.table.$data.on('scroll', this._tableDataScrollHandler);\n    this.table.on('columnResized', this._tableColumnResizedHandler);\n    this.table.on('columnMoved', this._tableColumnMovedHandler);\n    this.table.on('rowsSelected rowsInserted rowsUpdated rowsDeleted filter group allRowsDeleted', this._tableChangedHandler);\n  }\n\n  _removeContent() {\n    this.$contentContainer.remove();\n\n    this.table.$data.off('scroll', this._tableDataScrollHandler);\n    this.table.off('columnResized', this._tableColumnResizedHandler);\n    this.table.off('columnMoved', this._tableColumnMovedHandler);\n    this.table.off('rowsSelected rowsInserted rowsUpdated rowsDeleted filter group allRowsDeleted', this._tableChangedHandler);\n  }\n\n  _renderAggregate() {\n    this.table.visibleColumns().forEach(function(column, c) {\n      var aggregateValue, cell, $cell;\n\n      aggregateValue = this.aggregateRow[c];\n      // Aggregation functions are not available if column is grouped -> do not show aggregated value\n      if (aggregateValue === undefined || aggregateValue === null || column.grouped) {\n        cell = column.createAggrEmptyCell();\n      } else {\n        cell = column.createAggrValueCell(aggregateValue);\n      }\n      $cell = $(column.buildCell(cell, {}));\n\n      // install tooltips\n      this._installCellTooltip($cell);\n\n      // If aggregation is based on the selection and not on all rows -> mark it\n      if (this.aggregateRow.selection) {\n        $cell.addClass('selection');\n      }\n\n      $cell.appendTo(this.$contentContainer);\n\n      if ($cell.isContentTruncated()) {\n        $cell.children('.table-cell-icon').setVisible(false);\n      }\n    }, this);\n\n    if (this.aggregateRow.selection) {\n      this.$contentContainer.addClass('selection');\n    }\n  }\n\n  _rerenderAggregate() {\n    this.$contentContainer.empty();\n    this._renderAggregate();\n  }\n\n  _installCellTooltip($cell) {\n    tooltips.install($cell, {\n      parent: this,\n      text: this._cellTooltipText.bind(this),\n      htmlEnabled: true,\n      arrowPosition: 50,\n      arrowPositionUnit: '%',\n      nativeTooltip: !Device.get().isCustomEllipsisTooltipPossible()\n    });\n  }\n\n  _cellTooltipText($cell) {\n    if ($cell.text().trim() && ($cell.isContentTruncated() || ($cell.children('.table-cell-icon').length && !$cell.children('.table-cell-icon').isVisible()))) {\n      $cell = $cell.clone();\n      $cell.children('.table-cell-icon').setVisible(true);\n      return $cell.html();\n    }\n    return null;\n  }\n\n  _aggregate() {\n    var rows,\n      aggregateRow = [],\n      selectedRows = this.table.selectedRows;\n\n    if (selectedRows.length > 1) {\n      rows = selectedRows;\n      aggregateRow.selection = true;\n    } else {\n      rows = this.table.filteredRows();\n    }\n\n    this.table._forEachVisibleColumn('aggrStart', aggregateRow);\n    rows.forEach(function(row) {\n      this.table._forEachVisibleColumn('aggrStep', aggregateRow, row);\n    }, this);\n    this.table._forEachVisibleColumn('aggrFinish', aggregateRow);\n\n    this.aggregateRow = aggregateRow;\n    if (this.contentRendered && this.selected) {\n      this._rerenderAggregate();\n    }\n  }\n\n  _reconcileScrollPos() {\n    // When scrolling horizontally scroll aggregate content as well\n    var scrollLeft = this.table.$data.scrollLeft();\n    this.$contentContainer.scrollLeft(scrollLeft);\n  }\n\n  _updateEnabledAndSelectedState(aggregationFunctionChanged) {\n    if (!this.initialized) {\n      // During init the columns are not resolved yet -> containsAggregatedNumberColumn won't return a correct value\n      return;\n    }\n    var enabled = this.table.containsAggregatedNumberColumn();\n\n    // Select control if enabled, aggregation function changed and table is not grouped\n    if (enabled) {\n      if (aggregationFunctionChanged && !this.table.isGrouped()) {\n        this.setSelected(true);\n      }\n    } else if (this.selected) {\n      // Make sure a disabled control is not selected\n      this.setSelected(false);\n    }\n    this.setEnabled(enabled);\n  }\n\n  _setEnabled(enabled) {\n    super._setEnabled(enabled);\n    this._updateEnabledAndSelectedState();\n  }\n\n  _setSelected(selected) {\n    this._setProperty('selected', selected);\n    this._updateEnabledAndSelectedState();\n  }\n\n  _onTableDataScroll() {\n    this._reconcileScrollPos();\n  }\n\n  /**\n   * Generic handler for various events\n   * @private\n   */\n  _onTableChanged() {\n    this._aggregate();\n  }\n\n  _onAggregationFunctionChanged() {\n    this._updateEnabledAndSelectedState(true);\n    if (this.contentRendered && this.selected) {\n      this._aggregate();\n    }\n  }\n\n  _onTableColumnResized() {\n    this._rerenderAggregate();\n  }\n\n  _onTableColumnMoved(event) {\n    // move aggregated value in aggregateRow\n    arrays.move(this.aggregateRow, event.oldPos, event.newPos);\n    this._rerenderAggregate();\n  }\n\n  _onTableColumnStructureChanged() {\n    this._updateEnabledAndSelectedState();\n    if (this.contentRendered && this.selected) {\n      this._aggregate();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}