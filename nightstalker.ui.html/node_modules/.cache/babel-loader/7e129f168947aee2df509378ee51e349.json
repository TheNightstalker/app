{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, DragAndDropHandler } from '../index';\nvar SCOUT_TYPES = {\n  FILE_TRANSFER: 1 << 0,\n  // IDNDSupport.TYPE_FILE_TRANSFER (NOSONAR)\n  JAVA_ELEMENT_TRANSFER: 1 << 1,\n  // IDNDSupport.TYPE_JAVA_ELEMENT_TRANSFER (NOSONAR)\n  TEXT_TRANSFER: 1 << 2,\n  // IDNDSupport.TYPE_TEXT_TRANSFER (NOSONAR)\n  IMAGE_TRANSFER: 1 << 3 // IDNDSupport.TYPE_IMAGE_TRANSFER (NOSONAR)\n\n};\nvar DEFAULT_DROP_MAXIMUM_SIZE = 50 * 1024 * 1024; // 50 MB\n\n/**\n * Mapping function from scout drag types to browser drag types.\n *\n * @param scoutTypesArray array of SCOUT_TYPES\n * @returns {Array} return array\n */\n\nexport function scoutTypeToDragTypeMapping(scoutTypesArray) {\n  scoutTypesArray = arrays.ensure(scoutTypesArray);\n  var ret = [];\n\n  if (scoutTypesArray.indexOf(SCOUT_TYPES.FILE_TRANSFER) >= 0) {\n    ret.push('Files');\n  }\n\n  return ret;\n}\n/**\n * Check if specific scout type is supported by dataTransfer, if event is not handled by this field (desktop might handle it)\n *\n * @param event including event.originalEvent.dataTransfer\n * @param fieldAllowedTypes allowed types on field (integer, bitwise comparision used)\n * @param scoutTypeArray e.g. FILE_TRANSFER\n */\n\nexport function verifyDataTransferTypesScoutTypes(event, scoutTypeArray, fieldAllowedTypes) {\n  scoutTypeArray = arrays.ensure(scoutTypeArray);\n  var dragTypeArray = []; // check if any scout type is allowed for field allowed types (or no field allowed types defined)\n\n  if (fieldAllowedTypes !== undefined) {\n    scoutTypeArray.forEach(function fieldAllowedTypesContainsElement(scoutType) {\n      if ((fieldAllowedTypes & scoutType) === scoutType) {\n        // NOSONAR\n        arrays.pushAll(dragTypeArray, scoutTypeToDragTypeMapping(scoutTypeArray));\n      }\n    });\n  } else {\n    dragTypeArray = scoutTypeToDragTypeMapping(scoutTypeArray);\n  }\n\n  if (Array.isArray(dragTypeArray) && dragTypeArray.length > 0) {\n    verifyDataTransferTypes(event, dragTypeArray);\n  }\n}\n/**\n * Check if specific type is supported by dataTransfer, if event is not handled by this field (upstream field might handle it, at the latest desktop)\n *\n * @param dataTransfer dataTransfer object (not dataTransfer.types)\n * @param needleArray e.g. 'Files'\n */\n\nexport function verifyDataTransferTypes(event, needleArray) {\n  var dataTransfer = event.originalEvent.dataTransfer;\n\n  if (dataTransferTypesContains(dataTransfer, needleArray)) {\n    event.stopPropagation();\n    event.preventDefault();\n    return true;\n  }\n\n  return false;\n}\n/**\n * dataTransfer.types might be an array (Chrome, IE) or a DOMStringList.\n *\n * Unfortunately there is no intersecting contains method for both types.\n *\n * @param dataTransfer dataTransfer object (not dataTransfer.types)\n * @param scoutTypesArray e.g. FILE_TRANSFER\n */\n\nexport function dataTransferTypesContainsScoutTypes(dataTransfer, scoutTypesArray) {\n  scoutTypesArray = arrays.ensure(scoutTypesArray);\n  var dragTypesArray = scoutTypeToDragTypeMapping(scoutTypesArray);\n  return dataTransferTypesContains(dataTransfer, dragTypesArray);\n}\n/**\n * dataTransfer.types might be an array (Chrome, IE) or a DOMStringList.\n *\n * Unfortunately there is no intersecting contains method for both types.\n *\n * @param dataTransfer dataTransfer object (not dataTransfer.types)\n * @param needleArray e.g. 'Files'\n */\n\nexport function dataTransferTypesContains(dataTransfer, needleArray) {\n  needleArray = arrays.ensure(needleArray);\n\n  if (dataTransfer && dataTransfer.types) {\n    if (Array.isArray(dataTransfer.types) && arrays.containsAny(dataTransfer.types, needleArray)) {\n      // Array: indexOf function\n      return true;\n    } else if (dataTransfer.types.contains) {\n      // DOMStringList: contains function\n      return needleArray.some(function containsElement(element) {\n        return dataTransfer.types.contains(element);\n      });\n    }\n  }\n\n  return false;\n}\nexport function handler(target, options) {\n  options = options || {};\n  options.target = target;\n  return new DragAndDropHandler(options);\n}\nexport default {\n  DEFAULT_DROP_MAXIMUM_SIZE: DEFAULT_DROP_MAXIMUM_SIZE,\n  SCOUT_TYPES: SCOUT_TYPES,\n  dataTransferTypesContains: dataTransferTypesContains,\n  dataTransferTypesContainsScoutTypes: dataTransferTypesContainsScoutTypes,\n  handler: handler,\n  scoutTypeToDragTypeMapping: scoutTypeToDragTypeMapping,\n  verifyDataTransferTypes: verifyDataTransferTypes,\n  verifyDataTransferTypesScoutTypes: verifyDataTransferTypesScoutTypes\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/util/dragAndDrop.js"],"names":["arrays","DragAndDropHandler","SCOUT_TYPES","FILE_TRANSFER","JAVA_ELEMENT_TRANSFER","TEXT_TRANSFER","IMAGE_TRANSFER","DEFAULT_DROP_MAXIMUM_SIZE","scoutTypeToDragTypeMapping","scoutTypesArray","ensure","ret","indexOf","push","verifyDataTransferTypesScoutTypes","event","scoutTypeArray","fieldAllowedTypes","dragTypeArray","undefined","forEach","fieldAllowedTypesContainsElement","scoutType","pushAll","Array","isArray","length","verifyDataTransferTypes","needleArray","dataTransfer","originalEvent","dataTransferTypesContains","stopPropagation","preventDefault","dataTransferTypesContainsScoutTypes","dragTypesArray","types","containsAny","contains","some","containsElement","element","handler","target","options"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAR,EAAgBC,kBAAhB,QAAyC,UAAzC;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,aAAa,EAAE,KAAK,CADF;AACK;AACvBC,EAAAA,qBAAqB,EAAE,KAAK,CAFV;AAEa;AAC/BC,EAAAA,aAAa,EAAE,KAAK,CAHF;AAGK;AACvBC,EAAAA,cAAc,EAAE,KAAK,CAJH,CAIK;;AAJL,CAApB;AAOA,IAAMC,yBAAyB,GAAG,KAAK,IAAL,GAAY,IAA9C,C,CAAoD;;AAEpD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,0BAAT,CAAoCC,eAApC,EAAqD;AAC1DA,EAAAA,eAAe,GAAGT,MAAM,CAACU,MAAP,CAAcD,eAAd,CAAlB;AACA,MAAIE,GAAG,GAAG,EAAV;;AACA,MAAIF,eAAe,CAACG,OAAhB,CAAwBV,WAAW,CAACC,aAApC,KAAsD,CAA1D,EAA6D;AAC3DQ,IAAAA,GAAG,CAACE,IAAJ,CAAS,OAAT;AACD;;AACD,SAAOF,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,iCAAT,CAA2CC,KAA3C,EAAkDC,cAAlD,EAAkEC,iBAAlE,EAAqF;AAC1FD,EAAAA,cAAc,GAAGhB,MAAM,CAACU,MAAP,CAAcM,cAAd,CAAjB;AACA,MAAIE,aAAa,GAAG,EAApB,CAF0F,CAI1F;;AACA,MAAID,iBAAiB,KAAKE,SAA1B,EAAqC;AACnCH,IAAAA,cAAc,CAACI,OAAf,CAAuB,SAASC,gCAAT,CAA0CC,SAA1C,EAAqD;AAC1E,UAAI,CAACL,iBAAiB,GAAGK,SAArB,MAAoCA,SAAxC,EAAmD;AAAE;AACnDtB,QAAAA,MAAM,CAACuB,OAAP,CAAeL,aAAf,EAA8BV,0BAA0B,CAACQ,cAAD,CAAxD;AACD;AACF,KAJD;AAKD,GAND,MAMO;AACLE,IAAAA,aAAa,GAAGV,0BAA0B,CAACQ,cAAD,CAA1C;AACD;;AAED,MAAIQ,KAAK,CAACC,OAAN,CAAcP,aAAd,KAAgCA,aAAa,CAACQ,MAAd,GAAuB,CAA3D,EAA8D;AAC5DC,IAAAA,uBAAuB,CAACZ,KAAD,EAAQG,aAAR,CAAvB;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASS,uBAAT,CAAiCZ,KAAjC,EAAwCa,WAAxC,EAAqD;AAC1D,MAAIC,YAAY,GAAGd,KAAK,CAACe,aAAN,CAAoBD,YAAvC;;AAEA,MAAIE,yBAAyB,CAACF,YAAD,EAAeD,WAAf,CAA7B,EAA0D;AACxDb,IAAAA,KAAK,CAACiB,eAAN;AACAjB,IAAAA,KAAK,CAACkB,cAAN;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mCAAT,CAA6CL,YAA7C,EAA2DpB,eAA3D,EAA4E;AACjFA,EAAAA,eAAe,GAAGT,MAAM,CAACU,MAAP,CAAcD,eAAd,CAAlB;AACA,MAAI0B,cAAc,GAAG3B,0BAA0B,CAACC,eAAD,CAA/C;AACA,SAAOsB,yBAAyB,CAACF,YAAD,EAAeM,cAAf,CAAhC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASJ,yBAAT,CAAmCF,YAAnC,EAAiDD,WAAjD,EAA8D;AACnEA,EAAAA,WAAW,GAAG5B,MAAM,CAACU,MAAP,CAAckB,WAAd,CAAd;;AACA,MAAIC,YAAY,IAAIA,YAAY,CAACO,KAAjC,EAAwC;AACtC,QAAIZ,KAAK,CAACC,OAAN,CAAcI,YAAY,CAACO,KAA3B,KAAqCpC,MAAM,CAACqC,WAAP,CAAmBR,YAAY,CAACO,KAAhC,EAAuCR,WAAvC,CAAzC,EAA8F;AAC5F;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIC,YAAY,CAACO,KAAb,CAAmBE,QAAvB,EAAiC;AACtC;AACA,aAAOV,WAAW,CAACW,IAAZ,CAAiB,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACxD,eAAOZ,YAAY,CAACO,KAAb,CAAmBE,QAAnB,CAA4BG,OAA5B,CAAP;AACD,OAFM,CAAP;AAGD;AACF;;AACD,SAAO,KAAP;AACD;AAED,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,OAAzB,EAAkC;AACvCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,EAAAA,OAAO,CAACD,MAAR,GAAiBA,MAAjB;AACA,SAAO,IAAI1C,kBAAJ,CAAuB2C,OAAvB,CAAP;AACD;AAED,eAAe;AACbrC,EAAAA,yBAAyB,EAAzBA,yBADa;AAEbL,EAAAA,WAAW,EAAXA,WAFa;AAGb6B,EAAAA,yBAAyB,EAAzBA,yBAHa;AAIbG,EAAAA,mCAAmC,EAAnCA,mCAJa;AAKbQ,EAAAA,OAAO,EAAPA,OALa;AAMblC,EAAAA,0BAA0B,EAA1BA,0BANa;AAObmB,EAAAA,uBAAuB,EAAvBA,uBAPa;AAQbb,EAAAA,iCAAiC,EAAjCA;AARa,CAAf","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, DragAndDropHandler} from '../index';\n\nconst SCOUT_TYPES = {\n  FILE_TRANSFER: 1 << 0, // IDNDSupport.TYPE_FILE_TRANSFER (NOSONAR)\n  JAVA_ELEMENT_TRANSFER: 1 << 1, // IDNDSupport.TYPE_JAVA_ELEMENT_TRANSFER (NOSONAR)\n  TEXT_TRANSFER: 1 << 2, // IDNDSupport.TYPE_TEXT_TRANSFER (NOSONAR)\n  IMAGE_TRANSFER: 1 << 3 // IDNDSupport.TYPE_IMAGE_TRANSFER (NOSONAR)\n};\n\nconst DEFAULT_DROP_MAXIMUM_SIZE = 50 * 1024 * 1024; // 50 MB\n\n/**\n * Mapping function from scout drag types to browser drag types.\n *\n * @param scoutTypesArray array of SCOUT_TYPES\n * @returns {Array} return array\n */\nexport function scoutTypeToDragTypeMapping(scoutTypesArray) {\n  scoutTypesArray = arrays.ensure(scoutTypesArray);\n  var ret = [];\n  if (scoutTypesArray.indexOf(SCOUT_TYPES.FILE_TRANSFER) >= 0) {\n    ret.push('Files');\n  }\n  return ret;\n}\n\n/**\n * Check if specific scout type is supported by dataTransfer, if event is not handled by this field (desktop might handle it)\n *\n * @param event including event.originalEvent.dataTransfer\n * @param fieldAllowedTypes allowed types on field (integer, bitwise comparision used)\n * @param scoutTypeArray e.g. FILE_TRANSFER\n */\nexport function verifyDataTransferTypesScoutTypes(event, scoutTypeArray, fieldAllowedTypes) {\n  scoutTypeArray = arrays.ensure(scoutTypeArray);\n  var dragTypeArray = [];\n\n  // check if any scout type is allowed for field allowed types (or no field allowed types defined)\n  if (fieldAllowedTypes !== undefined) {\n    scoutTypeArray.forEach(function fieldAllowedTypesContainsElement(scoutType) {\n      if ((fieldAllowedTypes & scoutType) === scoutType) { // NOSONAR\n        arrays.pushAll(dragTypeArray, scoutTypeToDragTypeMapping(scoutTypeArray));\n      }\n    });\n  } else {\n    dragTypeArray = scoutTypeToDragTypeMapping(scoutTypeArray);\n  }\n\n  if (Array.isArray(dragTypeArray) && dragTypeArray.length > 0) {\n    verifyDataTransferTypes(event, dragTypeArray);\n  }\n}\n\n/**\n * Check if specific type is supported by dataTransfer, if event is not handled by this field (upstream field might handle it, at the latest desktop)\n *\n * @param dataTransfer dataTransfer object (not dataTransfer.types)\n * @param needleArray e.g. 'Files'\n */\nexport function verifyDataTransferTypes(event, needleArray) {\n  var dataTransfer = event.originalEvent.dataTransfer;\n\n  if (dataTransferTypesContains(dataTransfer, needleArray)) {\n    event.stopPropagation();\n    event.preventDefault();\n    return true;\n  }\n  return false;\n}\n\n/**\n * dataTransfer.types might be an array (Chrome, IE) or a DOMStringList.\n *\n * Unfortunately there is no intersecting contains method for both types.\n *\n * @param dataTransfer dataTransfer object (not dataTransfer.types)\n * @param scoutTypesArray e.g. FILE_TRANSFER\n */\nexport function dataTransferTypesContainsScoutTypes(dataTransfer, scoutTypesArray) {\n  scoutTypesArray = arrays.ensure(scoutTypesArray);\n  var dragTypesArray = scoutTypeToDragTypeMapping(scoutTypesArray);\n  return dataTransferTypesContains(dataTransfer, dragTypesArray);\n}\n\n/**\n * dataTransfer.types might be an array (Chrome, IE) or a DOMStringList.\n *\n * Unfortunately there is no intersecting contains method for both types.\n *\n * @param dataTransfer dataTransfer object (not dataTransfer.types)\n * @param needleArray e.g. 'Files'\n */\nexport function dataTransferTypesContains(dataTransfer, needleArray) {\n  needleArray = arrays.ensure(needleArray);\n  if (dataTransfer && dataTransfer.types) {\n    if (Array.isArray(dataTransfer.types) && arrays.containsAny(dataTransfer.types, needleArray)) {\n      // Array: indexOf function\n      return true;\n    } else if (dataTransfer.types.contains) {\n      // DOMStringList: contains function\n      return needleArray.some(function containsElement(element) {\n        return dataTransfer.types.contains(element);\n      });\n    }\n  }\n  return false;\n}\n\nexport function handler(target, options) {\n  options = options || {};\n  options.target = target;\n  return new DragAndDropHandler(options);\n}\n\nexport default {\n  DEFAULT_DROP_MAXIMUM_SIZE,\n  SCOUT_TYPES,\n  dataTransferTypesContains,\n  dataTransferTypesContainsScoutTypes,\n  handler,\n  scoutTypeToDragTypeMapping,\n  verifyDataTransferTypes,\n  verifyDataTransferTypesScoutTypes\n};\n"]},"metadata":{},"sourceType":"module"}