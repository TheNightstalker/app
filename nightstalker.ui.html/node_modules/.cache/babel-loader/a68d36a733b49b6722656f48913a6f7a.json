{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { CheckBoxField, CompositeField, DateField, dates, HtmlComponent, LogicalGridData, LogicalGridLayoutConfig, scout, SequenceBoxGridConfig, SequenceBoxLayout } from '../../../index';\n\nvar SequenceBox = /*#__PURE__*/function (_CompositeField) {\n  _inherits(SequenceBox, _CompositeField);\n\n  var _super = _createSuper(SequenceBox);\n\n  function SequenceBox() {\n    var _this;\n\n    _classCallCheck(this, SequenceBox);\n\n    _this = _super.call(this);\n\n    _this._addWidgetProperties('fields');\n\n    _this._addCloneProperties(['layoutConfig']);\n\n    _this.logicalGrid = scout.create('scout.HorizontalGrid');\n    _this.layoutConfig = null;\n    _this.fields = [];\n    return _this;\n  }\n\n  _createClass(SequenceBox, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(SequenceBox.prototype), \"_init\", this).call(this, model);\n\n      this._setLayoutConfig(this.layoutConfig);\n\n      this._initDateFields();\n\n      this.setErrorStatus(this.errorStatus);\n      this.setTooltipText(this.tooltipText);\n      this.setMenus(this.menus);\n      this.setMenusVisible(this.menusVisible);\n    }\n    /**\n     * Initialize all DateFields in this SequenceBox with a meaningful autoDate, except fields which already have an autoDate provided by the model.\n     */\n\n  }, {\n    key: \"_initDateFields\",\n    value: function _initDateFields() {\n      var dateFields = this._getDateFields();\n\n      var newAutoDate = null;\n\n      for (var i = 0; i < dateFields.length; i++) {\n        var currField = dateFields[i];\n\n        if (currField.autoDate) {\n          // is the autoDate already set by the field's model remember to not change this value.\n          currField.hasModelAutoDateSet = true;\n        }\n\n        if (!currField.hasModelAutoDateSet) {\n          currField.setAutoDate(newAutoDate);\n        }\n\n        newAutoDate = this._getAutoDateProposal(currField);\n      }\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      var field, i;\n      this.addContainer(this.$parent, 'sequence-box');\n      this.addLabel();\n      this.addField(this.$parent.makeDiv());\n      this.addStatus();\n\n      this._handleStatus();\n\n      this.htmlBody = HtmlComponent.install(this.$field, this.session);\n      this.htmlBody.setLayout(this._createBodyLayout());\n\n      for (i = 0; i < this.fields.length; i++) {\n        field = this.fields[i];\n        field.labelUseUiWidth = true;\n        field.on('propertyChange', this._onFieldPropertyChange.bind(this));\n        field.render(this.$field);\n\n        this._modifyLabel(field); // set each children layout data to logical grid data\n\n\n        field.setLayoutData(new LogicalGridData(field));\n      }\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(SequenceBox.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderLayoutConfig();\n    }\n  }, {\n    key: \"_createBodyLayout\",\n    value: function _createBodyLayout() {\n      return new SequenceBoxLayout(this, this.layoutConfig);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"invalidateLogicalGrid\",\n    value: function invalidateLogicalGrid(invalidateLayout) {\n      _get(_getPrototypeOf(SequenceBox.prototype), \"invalidateLogicalGrid\", this).call(this, false);\n\n      if (scout.nvl(invalidateLayout, true) && this.rendered) {\n        this.htmlBody.invalidateLayoutTree();\n      }\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_setLogicalGrid\",\n    value: function _setLogicalGrid(logicalGrid) {\n      _get(_getPrototypeOf(SequenceBox.prototype), \"_setLogicalGrid\", this).call(this, logicalGrid);\n\n      if (this.logicalGrid) {\n        this.logicalGrid.setGridConfig(new SequenceBoxGridConfig());\n      }\n    }\n  }, {\n    key: \"setLayoutConfig\",\n    value: function setLayoutConfig(layoutConfig) {\n      this.setProperty('layoutConfig', layoutConfig);\n    }\n  }, {\n    key: \"_setLayoutConfig\",\n    value: function _setLayoutConfig(layoutConfig) {\n      if (!layoutConfig) {\n        layoutConfig = new LogicalGridLayoutConfig();\n      }\n\n      this._setProperty('layoutConfig', LogicalGridLayoutConfig.ensure(layoutConfig));\n    }\n  }, {\n    key: \"_renderLayoutConfig\",\n    value: function _renderLayoutConfig() {\n      this.layoutConfig.applyToLayout(this.htmlBody.layout);\n\n      if (this.rendered) {\n        this.htmlBody.invalidateLayoutTree();\n      }\n    }\n  }, {\n    key: \"_onFieldPropertyChange\",\n    value: function _onFieldPropertyChange(event) {\n      var visibiltyChanged = event.propertyName === 'visible';\n\n      if (scout.isOneOf(event.propertyName, ['errorStatus', 'tooltipText', 'visible', 'menus', 'menusVisible'])) {\n        this._handleStatus(visibiltyChanged);\n      }\n\n      if (event.propertyName === 'value') {\n        this._onFieldValueChange(event);\n      }\n    }\n    /**\n     * Moves the status relevant properties from the last visible field to the sequencebox. This makes sure that the fields inside the sequencebox have the same size.\n     */\n\n  }, {\n    key: \"_handleStatus\",\n    value: function _handleStatus(visibilityChanged) {\n      if (visibilityChanged && this._lastVisibleField) {\n        // if there is a new last visible field, make sure the status is shown on the previously last one\n        this._lastVisibleField.suppressStatus = false;\n\n        if (this._lastVisibleField.rendered) {\n          this._lastVisibleField._renderErrorStatus();\n\n          this._lastVisibleField._renderTooltipText();\n\n          this._lastVisibleField._renderMenus();\n        }\n      }\n\n      this._lastVisibleField = this._getLastVisibleField();\n\n      if (!this._lastVisibleField) {\n        return;\n      } // Update the sequencebox with the status relevant flags\n\n\n      this._isOverwritingStatusFromField = true;\n\n      if (this._lastVisibleField.errorStatus) {\n        this.setErrorStatus(this._lastVisibleField.errorStatus);\n        this._isErrorStatusOverwritten = true;\n      } else {\n        this.setErrorStatus(this.boxErrorStatus);\n        this._isErrorStatusOverwritten = false;\n      }\n\n      if (this._lastVisibleField.hasStatusTooltip()) {\n        this.setTooltipText(this._lastVisibleField.tooltipText);\n        this._isTooltipTextOverwritten = true;\n      } else {\n        this.setTooltipText(this.boxTooltipText);\n        this._isTooltipTextOverwritten = false;\n      }\n\n      if (this._lastVisibleField.menus && this._lastVisibleField.menus.length > 0) {\n        // Change owner to make sure menu won't be destroyed when setMenus is called\n        this._updateBoxMenuOwner(this.fieldStatus);\n\n        this.setMenus(this._lastVisibleField.menus);\n        this.setMenusVisible(this._lastVisibleField.menusVisible);\n        this._isMenusOverwritten = true;\n      } else {\n        this._updateBoxMenuOwner(this);\n\n        this.setMenus(this.boxMenus);\n        this.setMenusVisible(this.boxMenusVisible);\n        this._isMenusOverwritten = false;\n      }\n\n      this._isOverwritingStatusFromField = false; // Make sure the last field won't display a status\n\n      this._lastVisibleField.suppressStatus = true;\n\n      if (visibilityChanged) {\n        // If the last field got invisible, make sure the new last field does not display a status anymore (now done by the seq box)\n        if (this._lastVisibleField.rendered) {\n          this._lastVisibleField._renderErrorStatus();\n\n          this._lastVisibleField._renderTooltipText();\n\n          this._lastVisibleField._renderMenus();\n        }\n      }\n    }\n  }, {\n    key: \"setErrorStatus\",\n    value: function setErrorStatus(errorStatus) {\n      if (this._isOverwritingStatusFromField && !this._isErrorStatusOverwritten) {\n        // was not overwritten, will be overwritten now -> backup old value\n        this.boxErrorStatus = this.errorStatus;\n      } else if (!this._isOverwritingStatusFromField) {\n        // directly changed on seq box -> update backed-up value\n        this.boxErrorStatus = errorStatus;\n      }\n\n      if (this._isOverwritingStatusFromField || !this._isErrorStatusOverwritten) {\n        // prevent setting value if directly changed on seq box and is already overwritten\n        _get(_getPrototypeOf(SequenceBox.prototype), \"setErrorStatus\", this).call(this, errorStatus);\n      }\n    }\n  }, {\n    key: \"setTooltipText\",\n    value: function setTooltipText(tooltipText) {\n      if (this._isOverwritingStatusFromField && !this._isTooltipTextOverwritten) {\n        // was not overwritten, will be overwritten now -> backup old value\n        this.boxTooltipText = this.tooltipText;\n      } else if (!this._isOverwritingStatusFromField) {\n        // directly changed on seq box -> update backed-up value\n        this.boxTooltipText = tooltipText;\n      }\n\n      if (this._isOverwritingStatusFromField || !this._isTooltipTextOverwritten) {\n        // prevent setting value if directly changed on seq box and is already overwritten\n        _get(_getPrototypeOf(SequenceBox.prototype), \"setTooltipText\", this).call(this, tooltipText);\n      }\n    }\n  }, {\n    key: \"setMenus\",\n    value: function setMenus(menus) {\n      // ensure menus are real and not just model objects\n      menus = this._createChildren(menus);\n\n      if (this._isOverwritingStatusFromField && !this._isMenusOverwritten) {\n        // was not overwritten, will be overwritten now -> backup old value\n        this.boxMenus = this.menus;\n      } else if (!this._isOverwritingStatusFromField) {\n        // directly changed on seq box -> update backed-up value\n        this.boxMenus = menus;\n      }\n\n      if (this._isOverwritingStatusFromField || !this._isMenusOverwritten) {\n        // prevent setting value if directly changed on seq box and is already overwritten\n        _get(_getPrototypeOf(SequenceBox.prototype), \"setMenus\", this).call(this, menus);\n      }\n    }\n  }, {\n    key: \"_updateBoxMenuOwner\",\n    value: function _updateBoxMenuOwner(newOwner) {\n      this.boxMenus.forEach(function (menu) {\n        menu.setOwner(newOwner);\n      });\n    }\n  }, {\n    key: \"setMenusVisible\",\n    value: function setMenusVisible(menusVisible) {\n      if (this._isOverwritingStatusFromField && !this._isMenusOverwritten) {\n        // was not overwritten, will be overwritten now -> backup old value\n        this.boxMenusVisible = this.menusVisible;\n      } else if (!this._isOverwritingStatusFromField) {\n        // directly changed on seq box -> update backed-up value\n        this.boxMenusVisible = menusVisible;\n      }\n\n      if (this._isOverwritingStatusFromField || !this._isMenusOverwritten) {\n        // prevent setting value if directly changed on seq box and is already overwritten\n        _get(_getPrototypeOf(SequenceBox.prototype), \"setMenusVisible\", this).call(this, menusVisible);\n      }\n    }\n  }, {\n    key: \"_getLastVisibleField\",\n    value: function _getLastVisibleField() {\n      var visibleFields = this.fields.filter(function (field) {\n        return field.visible;\n      });\n\n      if (visibleFields.length === 0) {\n        return;\n      }\n\n      return visibleFields[visibleFields.length - 1];\n    }\n  }, {\n    key: \"_onFieldValueChange\",\n    value: function _onFieldValueChange(event) {\n      if (event.source instanceof DateField) {\n        this._onDateFieldValueChange(event);\n      }\n    }\n  }, {\n    key: \"_onDateFieldValueChange\",\n    value: function _onDateFieldValueChange(event) {\n      // For a better user experience preselect a meaningful date on all following DateFields in the sequence box.\n      var field = event.source;\n\n      var dateFields = this._getDateFields();\n\n      var newAutoDate = this._getAutoDateProposal(field);\n\n      for (var i = dateFields.indexOf(field) + 1; i < dateFields.length; i++) {\n        var currField = dateFields[i];\n\n        if (!currField.hasModelAutoDateSet) {\n          currField.setAutoDate(newAutoDate);\n        }\n\n        if (currField.value) {\n          // only update fields in between the current field and the next field with a value set. Otherwise already set autoDates would be overwritten.\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"_getDateFields\",\n    value: function _getDateFields() {\n      return this.fields.filter(function (field) {\n        return field instanceof DateField;\n      });\n    }\n  }, {\n    key: \"_getAutoDateProposal\",\n    value: function _getAutoDateProposal(field) {\n      var newAutoDate = null; // if it's only a time field, add one hour, otherwise add one day\n\n      if (field && field.value) {\n        if (!field.hasDate && field.hasTime) {\n          newAutoDate = dates.shiftTime(field.value, 1, 0, 0);\n        } else {\n          newAutoDate = dates.shift(field.value, 0, 0, 1);\n        }\n      }\n\n      return newAutoDate;\n    } // The new sequence-box sets the label to invisible on the model.\n\n  }, {\n    key: \"_modifyLabel\",\n    value: function _modifyLabel(field) {\n      if (field instanceof CheckBoxField) {\n        field.labelVisible = false;\n      }\n\n      if (field instanceof DateField) {\n        // The DateField has two inputs ($dateField and $timeField), field.$field refers to the composite which is irrelevant here\n        // In order to support aria-labelledby for date fields also, the individual inputs have to be linked with the label rather than the composite\n        if (field.$dateField) {\n          this._linkWithLabel(field.$dateField);\n        }\n\n        if (field.$timeField) {\n          this._linkWithLabel(field.$timeField);\n        }\n      } else if (field.$field) {\n        // If $field is set depends on the concrete field e.g. a group box does not have a $field\n        this._linkWithLabel(field.$field);\n      }\n    }\n  }, {\n    key: \"setFields\",\n    value: function setFields(fields) {\n      if (this.rendered) {\n        throw new Error('Setting fields is not supported if sequence box is already rendered.');\n      }\n\n      this.setProperty('fields', fields);\n    }\n    /**\n     * @override CompositeField.js\n     */\n\n  }, {\n    key: \"getFields\",\n    value: function getFields() {\n      return this.fields;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(model, options) {\n      var clone = _get(_getPrototypeOf(SequenceBox.prototype), \"clone\", this).call(this, model, options);\n\n      this._deepCloneProperties(clone, 'fields', options);\n\n      return clone;\n    }\n  }]);\n\n  return SequenceBox;\n}(CompositeField);\n\nexport { SequenceBox as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/sequencebox/SequenceBox.js"],"names":["CheckBoxField","CompositeField","DateField","dates","HtmlComponent","LogicalGridData","LogicalGridLayoutConfig","scout","SequenceBoxGridConfig","SequenceBoxLayout","SequenceBox","_addWidgetProperties","_addCloneProperties","logicalGrid","create","layoutConfig","fields","model","_setLayoutConfig","_initDateFields","setErrorStatus","errorStatus","setTooltipText","tooltipText","setMenus","menus","setMenusVisible","menusVisible","dateFields","_getDateFields","newAutoDate","i","length","currField","autoDate","hasModelAutoDateSet","setAutoDate","_getAutoDateProposal","field","addContainer","$parent","addLabel","addField","makeDiv","addStatus","_handleStatus","htmlBody","install","$field","session","setLayout","_createBodyLayout","labelUseUiWidth","on","_onFieldPropertyChange","bind","render","_modifyLabel","setLayoutData","_renderLayoutConfig","invalidateLayout","nvl","rendered","invalidateLayoutTree","setGridConfig","setProperty","_setProperty","ensure","applyToLayout","layout","event","visibiltyChanged","propertyName","isOneOf","_onFieldValueChange","visibilityChanged","_lastVisibleField","suppressStatus","_renderErrorStatus","_renderTooltipText","_renderMenus","_getLastVisibleField","_isOverwritingStatusFromField","_isErrorStatusOverwritten","boxErrorStatus","hasStatusTooltip","_isTooltipTextOverwritten","boxTooltipText","_updateBoxMenuOwner","fieldStatus","_isMenusOverwritten","boxMenus","boxMenusVisible","_createChildren","newOwner","forEach","menu","setOwner","visibleFields","filter","visible","source","_onDateFieldValueChange","indexOf","value","hasDate","hasTime","shiftTime","shift","labelVisible","$dateField","_linkWithLabel","$timeField","Error","options","clone","_deepCloneProperties"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {CheckBoxField, CompositeField, DateField, dates, HtmlComponent, LogicalGridData, LogicalGridLayoutConfig, scout, SequenceBoxGridConfig, SequenceBoxLayout} from '../../../index';\n\nexport default class SequenceBox extends CompositeField {\n\n  constructor() {\n    super();\n    this._addWidgetProperties('fields');\n    this._addCloneProperties(['layoutConfig']);\n    this.logicalGrid = scout.create('scout.HorizontalGrid');\n    this.layoutConfig = null;\n    this.fields = [];\n  }\n\n  _init(model) {\n    super._init(model);\n\n    this._setLayoutConfig(this.layoutConfig);\n\n    this._initDateFields();\n\n    this.setErrorStatus(this.errorStatus);\n    this.setTooltipText(this.tooltipText);\n    this.setMenus(this.menus);\n    this.setMenusVisible(this.menusVisible);\n  }\n\n  /**\n   * Initialize all DateFields in this SequenceBox with a meaningful autoDate, except fields which already have an autoDate provided by the model.\n   */\n  _initDateFields() {\n    var dateFields = this._getDateFields();\n    var newAutoDate = null;\n    for (var i = 0; i < dateFields.length; i++) {\n      var currField = dateFields[i];\n      if (currField.autoDate) {\n        // is the autoDate already set by the field's model remember to not change this value.\n        currField.hasModelAutoDateSet = true;\n      }\n      if (!currField.hasModelAutoDateSet) {\n        currField.setAutoDate(newAutoDate);\n      }\n      newAutoDate = this._getAutoDateProposal(currField);\n    }\n  }\n\n  _render() {\n    var field, i;\n    this.addContainer(this.$parent, 'sequence-box');\n    this.addLabel();\n    this.addField(this.$parent.makeDiv());\n    this.addStatus();\n    this._handleStatus();\n    this.htmlBody = HtmlComponent.install(this.$field, this.session);\n    this.htmlBody.setLayout(this._createBodyLayout());\n    for (i = 0; i < this.fields.length; i++) {\n      field = this.fields[i];\n      field.labelUseUiWidth = true;\n      field.on('propertyChange', this._onFieldPropertyChange.bind(this));\n      field.render(this.$field);\n      this._modifyLabel(field);\n\n      // set each children layout data to logical grid data\n      field.setLayoutData(new LogicalGridData(field));\n    }\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderLayoutConfig();\n  }\n\n  _createBodyLayout() {\n    return new SequenceBoxLayout(this, this.layoutConfig);\n  }\n\n  /**\n   * @override\n   */\n  invalidateLogicalGrid(invalidateLayout) {\n    super.invalidateLogicalGrid(false);\n    if (scout.nvl(invalidateLayout, true) && this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _setLogicalGrid(logicalGrid) {\n    super._setLogicalGrid(logicalGrid);\n    if (this.logicalGrid) {\n      this.logicalGrid.setGridConfig(new SequenceBoxGridConfig());\n    }\n  }\n\n  setLayoutConfig(layoutConfig) {\n    this.setProperty('layoutConfig', layoutConfig);\n  }\n\n  _setLayoutConfig(layoutConfig) {\n    if (!layoutConfig) {\n      layoutConfig = new LogicalGridLayoutConfig();\n    }\n    this._setProperty('layoutConfig', LogicalGridLayoutConfig.ensure(layoutConfig));\n  }\n\n  _renderLayoutConfig() {\n    this.layoutConfig.applyToLayout(this.htmlBody.layout);\n    if (this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n\n  _onFieldPropertyChange(event) {\n    var visibiltyChanged = (event.propertyName === 'visible');\n    if (scout.isOneOf(event.propertyName, ['errorStatus', 'tooltipText', 'visible', 'menus', 'menusVisible'])) {\n      this._handleStatus(visibiltyChanged);\n    }\n    if (event.propertyName === 'value') {\n      this._onFieldValueChange(event);\n    }\n  }\n\n  /**\n   * Moves the status relevant properties from the last visible field to the sequencebox. This makes sure that the fields inside the sequencebox have the same size.\n   */\n  _handleStatus(visibilityChanged) {\n    if (visibilityChanged && this._lastVisibleField) {\n      // if there is a new last visible field, make sure the status is shown on the previously last one\n      this._lastVisibleField.suppressStatus = false;\n      if (this._lastVisibleField.rendered) {\n        this._lastVisibleField._renderErrorStatus();\n        this._lastVisibleField._renderTooltipText();\n        this._lastVisibleField._renderMenus();\n      }\n    }\n    this._lastVisibleField = this._getLastVisibleField();\n    if (!this._lastVisibleField) {\n      return;\n    }\n\n    // Update the sequencebox with the status relevant flags\n    this._isOverwritingStatusFromField = true;\n    if (this._lastVisibleField.errorStatus) {\n      this.setErrorStatus(this._lastVisibleField.errorStatus);\n      this._isErrorStatusOverwritten = true;\n    } else {\n      this.setErrorStatus(this.boxErrorStatus);\n      this._isErrorStatusOverwritten = false;\n    }\n\n    if (this._lastVisibleField.hasStatusTooltip()) {\n      this.setTooltipText(this._lastVisibleField.tooltipText);\n      this._isTooltipTextOverwritten = true;\n    } else {\n      this.setTooltipText(this.boxTooltipText);\n      this._isTooltipTextOverwritten = false;\n    }\n\n    if (this._lastVisibleField.menus && this._lastVisibleField.menus.length > 0) {\n      // Change owner to make sure menu won't be destroyed when setMenus is called\n      this._updateBoxMenuOwner(this.fieldStatus);\n      this.setMenus(this._lastVisibleField.menus);\n      this.setMenusVisible(this._lastVisibleField.menusVisible);\n      this._isMenusOverwritten = true;\n    } else {\n      this._updateBoxMenuOwner(this);\n      this.setMenus(this.boxMenus);\n      this.setMenusVisible(this.boxMenusVisible);\n      this._isMenusOverwritten = false;\n    }\n    this._isOverwritingStatusFromField = false;\n\n    // Make sure the last field won't display a status\n    this._lastVisibleField.suppressStatus = true;\n    if (visibilityChanged) {\n      // If the last field got invisible, make sure the new last field does not display a status anymore (now done by the seq box)\n      if (this._lastVisibleField.rendered) {\n        this._lastVisibleField._renderErrorStatus();\n        this._lastVisibleField._renderTooltipText();\n        this._lastVisibleField._renderMenus();\n      }\n    }\n  }\n\n  setErrorStatus(errorStatus) {\n    if (this._isOverwritingStatusFromField && !this._isErrorStatusOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxErrorStatus = this.errorStatus;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxErrorStatus = errorStatus;\n    }\n    if (this._isOverwritingStatusFromField || !this._isErrorStatusOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setErrorStatus(errorStatus);\n    }\n  }\n\n  setTooltipText(tooltipText) {\n    if (this._isOverwritingStatusFromField && !this._isTooltipTextOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxTooltipText = this.tooltipText;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxTooltipText = tooltipText;\n    }\n    if (this._isOverwritingStatusFromField || !this._isTooltipTextOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setTooltipText(tooltipText);\n    }\n  }\n\n  setMenus(menus) {\n    // ensure menus are real and not just model objects\n    menus = this._createChildren(menus);\n\n    if (this._isOverwritingStatusFromField && !this._isMenusOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxMenus = this.menus;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxMenus = menus;\n    }\n    if (this._isOverwritingStatusFromField || !this._isMenusOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setMenus(menus);\n    }\n  }\n\n  _updateBoxMenuOwner(newOwner) {\n    this.boxMenus.forEach(function(menu) {\n      menu.setOwner(newOwner);\n    });\n  }\n\n  setMenusVisible(menusVisible) {\n    if (this._isOverwritingStatusFromField && !this._isMenusOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxMenusVisible = this.menusVisible;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxMenusVisible = menusVisible;\n    }\n    if (this._isOverwritingStatusFromField || !this._isMenusOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setMenusVisible(menusVisible);\n    }\n  }\n\n  _getLastVisibleField() {\n    var visibleFields = this.fields.filter(function(field) {\n      return field.visible;\n    });\n    if (visibleFields.length === 0) {\n      return;\n    }\n\n    return visibleFields[visibleFields.length - 1];\n  }\n\n  _onFieldValueChange(event) {\n    if (event.source instanceof DateField) {\n      this._onDateFieldValueChange(event);\n    }\n  }\n\n  _onDateFieldValueChange(event) {\n    // For a better user experience preselect a meaningful date on all following DateFields in the sequence box.\n    var field = event.source;\n    var dateFields = this._getDateFields();\n    var newAutoDate = this._getAutoDateProposal(field);\n    for (var i = dateFields.indexOf(field) + 1; i < dateFields.length; i++) {\n      var currField = dateFields[i];\n      if (!currField.hasModelAutoDateSet) {\n        currField.setAutoDate(newAutoDate);\n      }\n      if (currField.value) {\n        // only update fields in between the current field and the next field with a value set. Otherwise already set autoDates would be overwritten.\n        break;\n      }\n    }\n  }\n\n  _getDateFields() {\n    return this.fields.filter(function(field) {\n      return field instanceof DateField;\n    });\n  }\n\n  _getAutoDateProposal(field) {\n    var newAutoDate = null;\n    // if it's only a time field, add one hour, otherwise add one day\n    if (field && field.value) {\n      if (!field.hasDate && field.hasTime) {\n        newAutoDate = dates.shiftTime(field.value, 1, 0, 0);\n      } else {\n        newAutoDate = dates.shift(field.value, 0, 0, 1);\n      }\n    }\n    return newAutoDate;\n  }\n\n  // The new sequence-box sets the label to invisible on the model.\n  _modifyLabel(field) {\n    if (field instanceof CheckBoxField) {\n      field.labelVisible = false;\n    }\n\n    if (field instanceof DateField) {\n      // The DateField has two inputs ($dateField and $timeField), field.$field refers to the composite which is irrelevant here\n      // In order to support aria-labelledby for date fields also, the individual inputs have to be linked with the label rather than the composite\n      if (field.$dateField) {\n        this._linkWithLabel(field.$dateField);\n      }\n      if (field.$timeField) {\n        this._linkWithLabel(field.$timeField);\n      }\n    } else if (field.$field) { // If $field is set depends on the concrete field e.g. a group box does not have a $field\n      this._linkWithLabel(field.$field);\n    }\n  }\n\n  setFields(fields) {\n    if (this.rendered) {\n      throw new Error('Setting fields is not supported if sequence box is already rendered.');\n    }\n    this.setProperty('fields', fields);\n  }\n\n  /**\n   * @override CompositeField.js\n   */\n  getFields() {\n    return this.fields;\n  }\n\n  clone(model, options) {\n    var clone = super.clone(model, options);\n    this._deepCloneProperties(clone, 'fields', options);\n    return clone;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}