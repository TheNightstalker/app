{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Dimension, FormController, PopupBlockerHandler, PopupWindow } from '../index';\nimport $ from 'jquery';\n\nvar DesktopFormController = /*#__PURE__*/function (_FormController) {\n  _inherits(DesktopFormController, _FormController);\n\n  var _super = _createSuper(DesktopFormController);\n\n  function DesktopFormController(model) {\n    var _this;\n\n    _classCallCheck(this, DesktopFormController);\n\n    _this = _super.call(this, model);\n    _this.desktop = model.displayParent;\n    _this._popupWindows = [];\n    _this._documentPopupWindowReadyHandler = _this._onDocumentPopupWindowReady.bind(_assertThisInitialized(_this)); // must use a document-event, since when popup-window is reloading it does\n    // only know the opener of its own window (and nothing about Scout).\n\n    $(document).on('popupWindowReady', _this._documentPopupWindowReadyHandler);\n    return _this;\n  }\n\n  _createClass(DesktopFormController, [{\n    key: \"render\",\n    value: function render() {\n      _get(_getPrototypeOf(DesktopFormController.prototype), \"render\", this).call(this);\n\n      var activeForm = this.desktop.activeForm;\n\n      if (activeForm) {\n        activeForm.activate();\n      } else {\n        this.desktop.bringOutlineToFront();\n      }\n    }\n  }, {\n    key: \"_renderViews\",\n    value: function _renderViews() {\n      _get(_getPrototypeOf(DesktopFormController.prototype), \"_renderViews\", this).call(this);\n\n      if (this.desktop.selectedViewTabs) {\n        this.desktop.selectedViewTabs.forEach(function (selectedView) {\n          this._activateView(selectedView);\n        }.bind(this));\n      } // ensure in all view stacks the last view is activated\n\n\n      if (this.desktop.bench) {\n        this.desktop.bench.postRender(); // ensure layout is done before continuing rendering dialogs.\n\n        this.desktop.bench.htmlComp.validateLayoutTree();\n      }\n    }\n    /**\n     * @override FormController.js\n     */\n\n  }, {\n    key: \"_renderPopupWindow\",\n    value: function _renderPopupWindow(form) {\n      var windowSpecs, resizeToPrefSize; // flag used to resize browser-window later (see PopupWindow.js)\n\n      var bounds = form.readCacheBounds();\n\n      if (bounds) {\n        windowSpecs = 'left=' + bounds.x + ',top=' + bounds.y + ',width=' + bounds.width + ',height=' + bounds.height;\n        resizeToPrefSize = false;\n      } else {\n        var $mainDocument = $(document),\n            documentSize = new Dimension($mainDocument.width(), $mainDocument.height());\n        windowSpecs = 'left=0,top=0,width=' + documentSize.width + ',height=' + documentSize.height;\n        resizeToPrefSize = true;\n      } // Note: Chrome does not allow to position a popup outside of the primary monitor (Firefox does)\n      // So the popup will always appear on the primary monitor even if we have stored the correct\n      // bounds to position the popup on the secondary monitor!\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Position_and_size_features\n\n\n      windowSpecs += ',location=no,toolbar=no,menubar=no,resizable=yes';\n      var popupBlockerHandler = new PopupBlockerHandler(this.session, true\n      /* no external untrusted URI: Can keep the opener for callback. */\n      ),\n          // form ID in URL is required for 'reload window' support\n      url = 'popup-window.html?formId=' + form.id; // use '_blank' as window-name so browser-windows are never reused\n\n      popupBlockerHandler.openWindow(url, '_blank', windowSpecs, function (popup) {\n        this._addPopupWindow(popup, form, resizeToPrefSize);\n      }.bind(this));\n    }\n  }, {\n    key: \"_addPopupWindow\",\n    value: function _addPopupWindow(newWindow, form, resizeToPrefSize) {\n      var popupWindow = new PopupWindow(newWindow, form);\n      popupWindow.resizeToPrefSize = resizeToPrefSize;\n      popupWindow.events.on('popupWindowUnload', this._onPopupWindowUnload.bind(this));\n\n      this._popupWindows.push(popupWindow);\n\n      $.log.isDebugEnabled() && $.log.debug('Opened new popup window for form ID ' + form.id);\n    }\n  }, {\n    key: \"_onDocumentPopupWindowReady\",\n    value: function _onDocumentPopupWindowReady(event, data) {\n      $.log.isDebugEnabled() && $.log.debug('(FormController#_onDocumentPopupWindowReady) data=' + data);\n      var popupWindow;\n\n      if (data.formId) {\n        // reload (existing popup window)\n        var i,\n            formId = data.formId;\n        $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + formId + ' has been reloaded');\n\n        for (i = 0; i < this._popupWindows.length; i++) {\n          popupWindow = this._popupWindows[i];\n\n          if (popupWindow.form.id === formId) {\n            break;\n          }\n        }\n\n        if (!popupWindow) {\n          throw new Error('Couldn\\'t find popupWindow reference while popup window was reloaded');\n        }\n      } else if (data.popupWindow) {\n        // open new child window\n        popupWindow = data.popupWindow;\n      } else {\n        // error assertion\n        throw new Error('Neither property \\'formId\\' nor \\'popupWindow\\' exists on data parameter');\n      }\n\n      popupWindow._onReady();\n    }\n  }, {\n    key: \"_onPopupWindowUnload\",\n    value: function _onPopupWindowUnload(popupWindow) {\n      var form = popupWindow.form;\n      $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + form.id + ' is unloaded - don\\'t know if its closed or reloaded yet'); // this remove() is important: when a popup-window in IE is closed, all references to a HTMLDivElement become\n      // invalid. Every call or read on such invalid objects will cause an Error. Even though the DOM element\n      // is invalid, the JQuery object which references the DOM element is still alive and occupies memory. That's\n      // why we must remove JQuery objects _before_ the popup-window is closed finally.\n\n      form.remove(); // must do this with setTimeout because at this point window is always still open\n      // Note: timeout with 0 milliseconds will not work\n\n      setTimeout(function () {\n        // Check if popup is closed (when the unload event was triggered by page reload it will still be open)\n        if (popupWindow.isClosed()) {\n          $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + form.id + ' has been closed');\n          form.close();\n        }\n      }, 250);\n    }\n    /**\n     * We only close browser windows here, since during an unload event, we cannot send\n     * anything with a HTTP request anyway. So we cannot inform the server that it\n     * should \"kill\" the forms - instead we simply render the popupWindows and forms\n     * again when the page has been reloaded.\n     */\n\n  }, {\n    key: \"closePopupWindows\",\n    value: function closePopupWindows() {\n      this._popupWindows.forEach(function (popupWindow) {\n        this._removePopupWindow(popupWindow.form);\n      }, this);\n\n      this._popupWindows = [];\n    }\n    /**\n     * @override FormController.js\n     */\n\n  }, {\n    key: \"_removePopupWindow\",\n    value: function _removePopupWindow(form) {\n      var popupWindow = form.popupWindow;\n\n      if (!popupWindow) {\n        throw new Error('Form has no popupWindow reference');\n      }\n\n      delete form.popupWindow;\n      arrays.remove(this._popupWindows, popupWindow);\n\n      if (form.rendered) {\n        form.remove();\n        popupWindow.close();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      $(document).off('popupWindowReady', this._documentPopupWindowReadyHandler);\n    }\n  }]);\n\n  return DesktopFormController;\n}(FormController);\n\nexport { DesktopFormController as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/DesktopFormController.js"],"names":["arrays","Dimension","FormController","PopupBlockerHandler","PopupWindow","$","DesktopFormController","model","desktop","displayParent","_popupWindows","_documentPopupWindowReadyHandler","_onDocumentPopupWindowReady","bind","document","on","activeForm","activate","bringOutlineToFront","selectedViewTabs","forEach","selectedView","_activateView","bench","postRender","htmlComp","validateLayoutTree","form","windowSpecs","resizeToPrefSize","bounds","readCacheBounds","x","y","width","height","$mainDocument","documentSize","popupBlockerHandler","session","url","id","openWindow","popup","_addPopupWindow","newWindow","popupWindow","events","_onPopupWindowUnload","push","log","isDebugEnabled","debug","event","data","formId","i","length","Error","_onReady","remove","setTimeout","isClosed","close","_removePopupWindow","rendered","off"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Dimension, FormController, PopupBlockerHandler, PopupWindow} from '../index';\nimport $ from 'jquery';\n\nexport default class DesktopFormController extends FormController {\n\n  constructor(model) {\n    super(model);\n    this.desktop = model.displayParent;\n    this._popupWindows = [];\n    this._documentPopupWindowReadyHandler = this._onDocumentPopupWindowReady.bind(this);\n\n    // must use a document-event, since when popup-window is reloading it does\n    // only know the opener of its own window (and nothing about Scout).\n    $(document).on('popupWindowReady', this._documentPopupWindowReadyHandler);\n  }\n\n  render() {\n    super.render();\n    var activeForm = this.desktop.activeForm;\n    if (activeForm) {\n      activeForm.activate();\n    } else {\n      this.desktop.bringOutlineToFront();\n    }\n  }\n\n  _renderViews() {\n    super._renderViews();\n\n    if (this.desktop.selectedViewTabs) {\n      this.desktop.selectedViewTabs.forEach(function(selectedView) {\n        this._activateView(selectedView);\n      }.bind(this));\n    }\n\n    // ensure in all view stacks the last view is activated\n    if (this.desktop.bench) {\n      this.desktop.bench.postRender();\n      // ensure layout is done before continuing rendering dialogs.\n      this.desktop.bench.htmlComp.validateLayoutTree();\n    }\n  }\n\n  /**\n   * @override FormController.js\n   */\n  _renderPopupWindow(form) {\n    var windowSpecs,\n      resizeToPrefSize; // flag used to resize browser-window later (see PopupWindow.js)\n\n    var bounds = form.readCacheBounds();\n    if (bounds) {\n      windowSpecs = 'left=' + bounds.x + ',top=' + bounds.y + ',width=' + bounds.width + ',height=' + bounds.height;\n      resizeToPrefSize = false;\n    } else {\n      var $mainDocument = $(document),\n        documentSize = new Dimension($mainDocument.width(), $mainDocument.height());\n      windowSpecs = 'left=0,top=0,width=' + documentSize.width + ',height=' + documentSize.height;\n      resizeToPrefSize = true;\n    }\n\n    // Note: Chrome does not allow to position a popup outside of the primary monitor (Firefox does)\n    // So the popup will always appear on the primary monitor even if we have stored the correct\n    // bounds to position the popup on the secondary monitor!\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Position_and_size_features\n    windowSpecs += ',location=no,toolbar=no,menubar=no,resizable=yes';\n\n    var popupBlockerHandler = new PopupBlockerHandler(this.session, true /* no external untrusted URI: Can keep the opener for callback. */),\n      // form ID in URL is required for 'reload window' support\n      url = 'popup-window.html?formId=' + form.id;\n\n    // use '_blank' as window-name so browser-windows are never reused\n    popupBlockerHandler.openWindow(url, '_blank', windowSpecs, function(popup) {\n      this._addPopupWindow(popup, form, resizeToPrefSize);\n    }.bind(this));\n  }\n\n  _addPopupWindow(newWindow, form, resizeToPrefSize) {\n    var popupWindow = new PopupWindow(newWindow, form);\n    popupWindow.resizeToPrefSize = resizeToPrefSize;\n    popupWindow.events.on('popupWindowUnload', this._onPopupWindowUnload.bind(this));\n    this._popupWindows.push(popupWindow);\n    $.log.isDebugEnabled() && $.log.debug('Opened new popup window for form ID ' + form.id);\n  }\n\n  _onDocumentPopupWindowReady(event, data) {\n    $.log.isDebugEnabled() && $.log.debug('(FormController#_onDocumentPopupWindowReady) data=' + data);\n    var popupWindow;\n    if (data.formId) {\n      // reload (existing popup window)\n      var i, formId = data.formId;\n      $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + formId + ' has been reloaded');\n      for (i = 0; i < this._popupWindows.length; i++) {\n        popupWindow = this._popupWindows[i];\n        if (popupWindow.form.id === formId) {\n          break;\n        }\n      }\n      if (!popupWindow) {\n        throw new Error('Couldn\\'t find popupWindow reference while popup window was reloaded');\n      }\n    } else if (data.popupWindow) {\n      // open new child window\n      popupWindow = data.popupWindow;\n    } else {\n      // error assertion\n      throw new Error('Neither property \\'formId\\' nor \\'popupWindow\\' exists on data parameter');\n    }\n    popupWindow._onReady();\n  }\n\n  _onPopupWindowUnload(popupWindow) {\n    var form = popupWindow.form;\n    $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + form.id + ' is unloaded - don\\'t know if its closed or reloaded yet');\n\n    // this remove() is important: when a popup-window in IE is closed, all references to a HTMLDivElement become\n    // invalid. Every call or read on such invalid objects will cause an Error. Even though the DOM element\n    // is invalid, the JQuery object which references the DOM element is still alive and occupies memory. That's\n    // why we must remove JQuery objects _before_ the popup-window is closed finally.\n    form.remove();\n\n    // must do this with setTimeout because at this point window is always still open\n    // Note: timeout with 0 milliseconds will not work\n    setTimeout(function() {\n      // Check if popup is closed (when the unload event was triggered by page reload it will still be open)\n      if (popupWindow.isClosed()) {\n        $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + form.id + ' has been closed');\n        form.close();\n      }\n    }, 250);\n  }\n\n  /**\n   * We only close browser windows here, since during an unload event, we cannot send\n   * anything with a HTTP request anyway. So we cannot inform the server that it\n   * should \"kill\" the forms - instead we simply render the popupWindows and forms\n   * again when the page has been reloaded.\n   */\n  closePopupWindows() {\n    this._popupWindows.forEach(function(popupWindow) {\n      this._removePopupWindow(popupWindow.form);\n    }, this);\n    this._popupWindows = [];\n  }\n\n  /**\n   * @override FormController.js\n   */\n  _removePopupWindow(form) {\n    var popupWindow = form.popupWindow;\n    if (!popupWindow) {\n      throw new Error('Form has no popupWindow reference');\n    }\n    delete form.popupWindow;\n    arrays.remove(this._popupWindows, popupWindow);\n    if (form.rendered) {\n      form.remove();\n      popupWindow.close();\n    }\n  }\n\n  dispose() {\n    $(document).off('popupWindowReady', this._documentPopupWindowReadyHandler);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}