{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, BasicField, Device, Dimension, FormField, graphics, HtmlComponent, HtmlEnvironment, Insets, Rectangle, scout, scrollbars } from '../../index';\n/**\n * Form-Field Layout, for a form-field with label, status, mandatory-indicator and a field.\n * This layout class works with a FormField instance, since we must access properties of the model.\n * Note: we use optGet() here, since some form-fields have only a bare HTML element as field, other\n * (composite) form-fields work with a HtmlComponent which has its own LayoutManager.\n */\n\nvar FormFieldLayout = /*#__PURE__*/function (_AbstractLayout) {\n  _inherits(FormFieldLayout, _AbstractLayout);\n\n  var _super = _createSuper(FormFieldLayout);\n\n  function FormFieldLayout(formField) {\n    var _this;\n\n    _classCallCheck(this, FormFieldLayout);\n\n    _this = _super.call(this);\n    _this.formField = formField;\n\n    _this._initDefaults();\n\n    _this.htmlPropertyChangeHandler = _this._onHtmlEnvironmenPropertyChange.bind(_assertThisInitialized(_this));\n    HtmlEnvironment.get().on('propertyChange', _this.htmlPropertyChangeHandler);\n\n    _this.formField.one('remove', function () {\n      HtmlEnvironment.get().off('propertyChange', this.htmlPropertyChangeHandler);\n    }.bind(_assertThisInitialized(_this)));\n\n    return _this;\n  } // Minimum field with to normal state, for smaller widths the \"compact\" style is applied.\n\n\n  _createClass(FormFieldLayout, [{\n    key: \"_initDefaults\",\n    value: function _initDefaults() {\n      this.mandatoryIndicatorWidth = HtmlEnvironment.get().fieldMandatoryIndicatorWidth;\n      this.statusWidth = HtmlEnvironment.get().fieldStatusWidth;\n      this.rowHeight = HtmlEnvironment.get().formRowHeight;\n    }\n  }, {\n    key: \"_onHtmlEnvironmenPropertyChange\",\n    value: function _onHtmlEnvironmenPropertyChange() {\n      this._initDefaults();\n\n      this.formField.invalidateLayoutTree();\n    }\n  }, {\n    key: \"layout\",\n    value: function layout($container) {\n      var containerPadding,\n          fieldOffset,\n          fieldSize,\n          fieldBounds,\n          htmlField,\n          labelHasFieldWidth,\n          top,\n          bottom,\n          left,\n          right,\n          htmlContainer = HtmlComponent.get($container),\n          formField = this.formField,\n          tooltip = formField._tooltip(),\n          labelWidth = this.labelWidth(),\n          statusWidth = this.statusWidth; // Note: Position coordinates start _inside_ the border, therefore we only use the padding\n\n\n      containerPadding = htmlContainer.insets({\n        includeBorder: false\n      });\n      top = containerPadding.top;\n      right = containerPadding.right;\n      bottom = containerPadding.bottom;\n      left = containerPadding.left;\n\n      if (this._isLabelVisible()) {\n        // currently a gui only flag, necessary for sequencebox\n        if (formField.labelWidthInPixel === FormField.LabelWidth.UI || formField.labelUseUiWidth) {\n          if (formField.$label.hasClass('empty')) {\n            labelWidth = 0;\n          } else {\n            labelWidth = graphics.prefSize(formField.$label).width;\n          }\n        }\n\n        if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n          graphics.setBounds(formField.$label, left, top, labelWidth, this.rowHeight);\n          left += labelWidth + formField.$label.cssMarginX();\n        } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n          var labelHeight = graphics.prefSize(formField.$label).height; // prefSize rounds the value -> ensure label height is set to that value to prevent gaps between container and label.\n          // In addition, this also ensures that the correct height is set when changing the label position from left to top\n\n          formField.$label.cssHeight(labelHeight);\n          top += labelHeight + formField.$label.cssMarginY();\n          labelHasFieldWidth = true;\n        }\n      }\n\n      if (formField.$mandatory && formField.$mandatory.isVisible()) {\n        formField.$mandatory.cssTop(top).cssLeft(left).cssWidth(this.mandatoryIndicatorWidth);\n        left += formField.$mandatory.outerWidth(true);\n      }\n\n      if (this._isStatusVisible()) {\n        formField.$status.cssWidth(statusWidth); // If both status and label position is \"top\", pull status up (without margin on the right side)\n\n        if (formField.statusPosition === FormField.StatusPosition.TOP && labelHasFieldWidth) {\n          var statusHeight = graphics.prefSize(formField.$status, {\n            useCssSize: true\n          }).height; // Vertically center status with label\n\n          var statusTop = containerPadding.top + formField.$label.cssPaddingTop() + formField.$label.height() / 2 - statusHeight / 2;\n          formField.$status.cssTop(statusTop).cssRight(right + formField.$label.cssMarginRight()).cssHeight(statusHeight).cssLineHeight(null); // Add padding to label to prevent overlay of text and status icon\n\n          var w = graphics.size(formField.$status, true).width;\n          formField.$label.cssPaddingRight(w);\n        } else {\n          // Default status position\n          formField.$status.cssTop(top).cssRight(right).cssHeight(this.rowHeight).cssLineHeight(this.rowHeight);\n          right += statusWidth + formField.$status.cssMarginX();\n        }\n      }\n\n      if (formField.$fieldContainer) {\n        // Calculate the additional field offset (because of label, mandatory indicator etc.) without the containerInset.\n        fieldOffset = new Insets(top - containerPadding.top, right - containerPadding.right, bottom - containerPadding.bottom, left - containerPadding.left); // Calculate field size: \"available size\" - \"insets (border and padding)\" - \"additional offset\" - \"field's margin\"\n\n        var fieldMargins = graphics.margins(formField.$fieldContainer);\n        fieldSize = htmlContainer.availableSize({\n          exact: true\n        }).subtract(htmlContainer.insets()).subtract(fieldOffset).subtract(fieldMargins);\n        fieldBounds = new Rectangle(left, top, fieldSize.width, fieldSize.height);\n\n        if (formField.$fieldContainer.css('position') !== 'absolute') {\n          fieldBounds.x = 0;\n          fieldBounds.y = 0;\n        }\n\n        htmlField = HtmlComponent.optGet(formField.$fieldContainer);\n\n        if (htmlField) {\n          htmlField.setBounds(fieldBounds);\n        } else {\n          graphics.setBounds(formField.$fieldContainer, fieldBounds);\n        }\n\n        formField.$field.toggleClass('compact', fieldBounds.width <= FormFieldLayout.MIN_FIELD_WIDTH);\n        formField.$container.toggleClass('compact', fieldBounds.width <= FormFieldLayout.MIN_FIELD_WIDTH);\n\n        if (labelHasFieldWidth) {\n          var fieldWidth = fieldSize.add(fieldMargins).width - formField.$label.cssMarginX();\n\n          if (formField.$mandatory && formField.$mandatory.isVisible()) {\n            fieldWidth += formField.$mandatory.outerWidth(true);\n          }\n\n          formField.$label.cssWidth(fieldWidth);\n        }\n      }\n\n      if (formField.$fieldContainer) {\n        // Icons are placed inside the field (as overlay)\n        var $iconInput = this._$elementForIconLayout();\n\n        var fieldBorder = graphics.borders($iconInput);\n        var inputBounds = graphics.offsetBounds($iconInput);\n        top += fieldBorder.top;\n        right += fieldBorder.right;\n        fieldBounds.x += fieldBorder.left;\n        fieldBounds.y += fieldBorder.top;\n        fieldBounds.height = inputBounds.height - fieldBorder.top - fieldBorder.bottom;\n        fieldBounds.width = inputBounds.width - fieldBorder.left - fieldBorder.right;\n\n        if (formField.$icon) {\n          this._layoutIcon(formField, fieldBounds, right, top);\n        } // Clear icon if present\n\n\n        if (formField.$clearIcon) {\n          this._layoutClearIcon(formField, fieldBounds, right, top);\n        }\n      } // Make sure tooltip is at correct position after layouting, if there is one\n\n\n      if (tooltip && tooltip.rendered) {\n        tooltip.position();\n      } // Check for scrollbars, update them if necessary\n\n\n      if (formField.$field) {\n        scrollbars.update(formField.$field);\n      }\n\n      this._layoutDisabledCopyOverlay();\n    }\n  }, {\n    key: \"_layoutDisabledCopyOverlay\",\n    value: function _layoutDisabledCopyOverlay() {\n      if (this.formField.$field && this.formField.$disabledCopyOverlay) {\n        var $overlay = this.formField.$disabledCopyOverlay;\n        var $field = this.formField.$field;\n        var pos = $field.position();\n        var padding = graphics.insets($field, {\n          includePadding: true\n        }); // subtract scrollbars sizes from width and height so overlay does not block scrollbars\n        // we read the size from the scrollbar from our device, because we already determined\n        // it on startup. Only do this when element is scrollable.\n\n        var elem = $field[0];\n        var overflowX = $field.css('overflow-x');\n        var overflowY = $field.css('overflow-y');\n        var scrollHorizontal = overflowX === 'scroll' || overflowX === 'auto' && elem.scrollWidth - elem.clientWidth > 0;\n        var scrollVertical = overflowY === 'scroll' || overflowY === 'auto' && elem.scrollHeight - elem.clientHeight > 0;\n        var scrollbarSize = Device.get().scrollbarWidth;\n        $overlay.css('top', pos.top).css('left', pos.left).width($field.width() + padding.horizontal() - (scrollVertical ? scrollbarSize : 0)).height($field.height() + padding.vertical() - (scrollHorizontal ? scrollbarSize : 0));\n      }\n    }\n  }, {\n    key: \"_isLabelVisible\",\n    value: function _isLabelVisible() {\n      return !!this.formField.$label && this.formField.labelVisible;\n    }\n  }, {\n    key: \"_isStatusVisible\",\n    value: function _isStatusVisible() {\n      return !!this.formField.$status && (this.formField.statusVisible || this.formField.$status.isVisible());\n    }\n  }, {\n    key: \"preferredLayoutSize\",\n    value: function preferredLayoutSize($container, options) {\n      var htmlContainer = HtmlComponent.get(this.formField.$container);\n      var formField = this.formField;\n      var prefSizeLabel = new Dimension();\n      var prefSizeMandatory = new Dimension();\n      var prefSizeStatus = new Dimension();\n      var prefSizeField = new Dimension();\n      var widthHint = scout.nvl(options.widthHint, 0);\n      var heightHint = scout.nvl(options.heightHint, 0); // Status is only pulled up if status AND label are on top\n\n      var statusOnTop = formField.statusPosition === FormField.StatusPosition.TOP && this._isLabelVisible() && formField.labelPosition === FormField.LabelPosition.TOP; // Calculate the preferred sizes of the individual parts\n      // Mandatory indicator\n\n      if (formField.$mandatory && formField.$mandatory.isVisible()) {\n        prefSizeMandatory.width = this.mandatoryIndicatorWidth + formField.$mandatory.cssMarginX();\n        widthHint -= prefSizeMandatory.width;\n      } // Label\n\n\n      if (this._isLabelVisible()) {\n        prefSizeLabel.width = this.labelWidth() + formField.$label.cssMarginX();\n        prefSizeLabel.height = this.rowHeight;\n\n        if (formField.labelPosition === FormField.LabelPosition.TOP) {\n          // Label is always as width as the field if it is on top\n          prefSizeLabel.width = 0;\n          prefSizeLabel.height = graphics.prefSize(formField.$label, true).height;\n        } else if (formField.labelWidthInPixel === FormField.LabelWidth.UI || formField.labelUseUiWidth) {\n          if (formField.$label.hasClass('empty')) {\n            prefSizeLabel.width = 0;\n          } else {\n            prefSizeLabel = graphics.prefSize(formField.$label, true);\n          }\n        }\n\n        if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n          widthHint -= prefSizeLabel.width;\n        } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n          heightHint -= prefSizeLabel.height;\n        }\n      } // Status\n\n\n      if (this._isStatusVisible()) {\n        prefSizeStatus.width = this.statusWidth + formField.$status.cssMarginX();\n\n        if (!statusOnTop) {\n          prefSizeStatus.height = this.rowHeight;\n          widthHint -= prefSizeStatus.width;\n        }\n      } // Field\n\n\n      if (formField.$fieldContainer) {\n        var fieldMargins = graphics.margins(formField.$fieldContainer);\n        var htmlField = HtmlComponent.optGet(formField.$fieldContainer);\n\n        if (!htmlField) {\n          widthHint -= fieldMargins.horizontal();\n          heightHint -= fieldMargins.vertical();\n        }\n\n        if (options.widthHint) {\n          options.widthHint = widthHint;\n        }\n\n        if (options.heightHint) {\n          options.heightHint = heightHint;\n        }\n\n        if (htmlField) {\n          prefSizeField = htmlField.prefSize(options).add(fieldMargins);\n        } else {\n          prefSizeField = graphics.prefSize(formField.$fieldContainer, options).add(fieldMargins);\n        }\n      } // Now sum up to calculate the preferred size of the container\n\n\n      var prefSize = new Dimension(); // Field is the base, and it should be at least as height as a form row height.\n\n      prefSize.width = prefSizeField.width;\n      prefSize.height = prefSizeField.height; // Mandatory\n\n      prefSize.width += prefSizeMandatory.width;\n      prefSize.height = Math.max(prefSize.height, prefSizeMandatory.height); // Label\n\n      if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n        prefSize.width += prefSizeLabel.width;\n        prefSize.height = Math.max(prefSize.height, prefSizeLabel.height);\n      } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n        prefSize.width = Math.max(prefSize.width, prefSizeLabel.width);\n        prefSize.height += prefSizeLabel.height;\n      } // Status\n\n\n      if (!statusOnTop) {\n        prefSize.width += prefSizeStatus.width;\n        prefSize.height = Math.max(prefSize.height, prefSizeStatus.height);\n      } // Add padding and border\n\n\n      prefSize = prefSize.add(htmlContainer.insets());\n      return prefSize;\n    }\n    /**\n     * @returns {$} the input element used to position the icon. May be overridden if another element than $field should be used.\n     */\n\n  }, {\n    key: \"_$elementForIconLayout\",\n    value: function _$elementForIconLayout() {\n      return this.formField.$field;\n    }\n  }, {\n    key: \"_layoutIcon\",\n    value: function _layoutIcon(formField, fieldBounds, right, top) {\n      var height = this.rowHeight;\n\n      if (fieldBounds) {\n        // If field is bigger than rowHeight (e.g. if used in desktop cell editor), make sure icon is as height as field\n        height = fieldBounds.height;\n      }\n\n      formField.$icon.cssRight(right).cssTop(fieldBounds.y).cssHeight(height).cssLineHeight(height);\n    }\n  }, {\n    key: \"_layoutClearIcon\",\n    value: function _layoutClearIcon(formField, fieldBounds, right, top) {\n      var height = this.rowHeight;\n\n      if (fieldBounds) {\n        // If field is bigger than rowHeight (e.g. if used in desktop cell editor), make sure icon is as height as field\n        height = fieldBounds.height;\n      }\n\n      if (formField instanceof BasicField && formField.gridData.horizontalAlignment > 0) {\n        formField.$clearIcon.cssLeft(fieldBounds.x).cssRight('').cssTop(fieldBounds.y).cssHeight(height).cssLineHeight(height);\n      } else {\n        formField.$clearIcon.cssLeft('').cssRight(right).cssTop(fieldBounds.y).cssHeight(height).cssLineHeight(height);\n      }\n    }\n  }, {\n    key: \"labelWidth\",\n    value: function labelWidth() {\n      // use configured label width in pixel or default label width\n      if (FormField.LabelWidth.DEFAULT === this.formField.labelWidthInPixel) {\n        return HtmlEnvironment.get().fieldLabelWidth;\n      }\n\n      return this.formField.labelWidthInPixel;\n    }\n  }]);\n\n  return FormFieldLayout;\n}(AbstractLayout);\n\n_defineProperty(FormFieldLayout, \"MIN_FIELD_WIDTH\", 61);\n\nexport { FormFieldLayout as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/FormFieldLayout.js"],"names":["AbstractLayout","BasicField","Device","Dimension","FormField","graphics","HtmlComponent","HtmlEnvironment","Insets","Rectangle","scout","scrollbars","FormFieldLayout","formField","_initDefaults","htmlPropertyChangeHandler","_onHtmlEnvironmenPropertyChange","bind","get","on","one","off","mandatoryIndicatorWidth","fieldMandatoryIndicatorWidth","statusWidth","fieldStatusWidth","rowHeight","formRowHeight","invalidateLayoutTree","$container","containerPadding","fieldOffset","fieldSize","fieldBounds","htmlField","labelHasFieldWidth","top","bottom","left","right","htmlContainer","tooltip","_tooltip","labelWidth","insets","includeBorder","_isLabelVisible","labelWidthInPixel","LabelWidth","UI","labelUseUiWidth","$label","hasClass","prefSize","width","isOneOf","labelPosition","LabelPosition","DEFAULT","LEFT","setBounds","cssMarginX","TOP","labelHeight","height","cssHeight","cssMarginY","$mandatory","isVisible","cssTop","cssLeft","cssWidth","outerWidth","_isStatusVisible","$status","statusPosition","StatusPosition","statusHeight","useCssSize","statusTop","cssPaddingTop","cssRight","cssMarginRight","cssLineHeight","w","size","cssPaddingRight","$fieldContainer","fieldMargins","margins","availableSize","exact","subtract","css","x","y","optGet","$field","toggleClass","MIN_FIELD_WIDTH","fieldWidth","add","$iconInput","_$elementForIconLayout","fieldBorder","borders","inputBounds","offsetBounds","$icon","_layoutIcon","$clearIcon","_layoutClearIcon","rendered","position","update","_layoutDisabledCopyOverlay","$disabledCopyOverlay","$overlay","pos","padding","includePadding","elem","overflowX","overflowY","scrollHorizontal","scrollWidth","clientWidth","scrollVertical","scrollHeight","clientHeight","scrollbarSize","scrollbarWidth","horizontal","vertical","labelVisible","statusVisible","options","prefSizeLabel","prefSizeMandatory","prefSizeStatus","prefSizeField","widthHint","nvl","heightHint","statusOnTop","Math","max","gridData","horizontalAlignment","fieldLabelWidth"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, BasicField, Device, Dimension, FormField, graphics, HtmlComponent, HtmlEnvironment, Insets, Rectangle, scout, scrollbars} from '../../index';\n\n/**\n * Form-Field Layout, for a form-field with label, status, mandatory-indicator and a field.\n * This layout class works with a FormField instance, since we must access properties of the model.\n * Note: we use optGet() here, since some form-fields have only a bare HTML element as field, other\n * (composite) form-fields work with a HtmlComponent which has its own LayoutManager.\n */\nexport default class FormFieldLayout extends AbstractLayout {\n\n  constructor(formField) {\n    super();\n    this.formField = formField;\n    this._initDefaults();\n\n    this.htmlPropertyChangeHandler = this._onHtmlEnvironmenPropertyChange.bind(this);\n    HtmlEnvironment.get().on('propertyChange', this.htmlPropertyChangeHandler);\n    this.formField.one('remove', function() {\n      HtmlEnvironment.get().off('propertyChange', this.htmlPropertyChangeHandler);\n    }.bind(this));\n  }\n\n  // Minimum field with to normal state, for smaller widths the \"compact\" style is applied.\n  static MIN_FIELD_WIDTH = 61;\n\n  _initDefaults() {\n    this.mandatoryIndicatorWidth = HtmlEnvironment.get().fieldMandatoryIndicatorWidth;\n    this.statusWidth = HtmlEnvironment.get().fieldStatusWidth;\n    this.rowHeight = HtmlEnvironment.get().formRowHeight;\n  }\n\n  _onHtmlEnvironmenPropertyChange() {\n    this._initDefaults();\n    this.formField.invalidateLayoutTree();\n  }\n\n  layout($container) {\n    var containerPadding, fieldOffset, fieldSize, fieldBounds, htmlField, labelHasFieldWidth, top, bottom, left, right,\n      htmlContainer = HtmlComponent.get($container),\n      formField = this.formField,\n      tooltip = formField._tooltip(),\n      labelWidth = this.labelWidth(),\n      statusWidth = this.statusWidth;\n\n    // Note: Position coordinates start _inside_ the border, therefore we only use the padding\n    containerPadding = htmlContainer.insets({\n      includeBorder: false\n    });\n    top = containerPadding.top;\n    right = containerPadding.right;\n    bottom = containerPadding.bottom;\n    left = containerPadding.left;\n\n    if (this._isLabelVisible()) {\n      // currently a gui only flag, necessary for sequencebox\n      if (formField.labelWidthInPixel === FormField.LabelWidth.UI || formField.labelUseUiWidth) {\n        if (formField.$label.hasClass('empty')) {\n          labelWidth = 0;\n        } else {\n          labelWidth = graphics.prefSize(formField.$label).width;\n        }\n      }\n      if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n        graphics.setBounds(formField.$label, left, top, labelWidth, this.rowHeight);\n        left += labelWidth + formField.$label.cssMarginX();\n      } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n        var labelHeight = graphics.prefSize(formField.$label).height;\n        // prefSize rounds the value -> ensure label height is set to that value to prevent gaps between container and label.\n        // In addition, this also ensures that the correct height is set when changing the label position from left to top\n        formField.$label.cssHeight(labelHeight);\n        top += labelHeight + formField.$label.cssMarginY();\n        labelHasFieldWidth = true;\n      }\n    }\n    if (formField.$mandatory && formField.$mandatory.isVisible()) {\n      formField.$mandatory\n        .cssTop(top)\n        .cssLeft(left)\n        .cssWidth(this.mandatoryIndicatorWidth);\n      left += formField.$mandatory.outerWidth(true);\n    }\n    if (this._isStatusVisible()) {\n      formField.$status\n        .cssWidth(statusWidth);\n      // If both status and label position is \"top\", pull status up (without margin on the right side)\n      if (formField.statusPosition === FormField.StatusPosition.TOP && labelHasFieldWidth) {\n        var statusHeight = graphics.prefSize(formField.$status, {\n          useCssSize: true\n        }).height;\n        // Vertically center status with label\n        var statusTop = containerPadding.top + formField.$label.cssPaddingTop() + (formField.$label.height() / 2) - (statusHeight / 2);\n        formField.$status\n          .cssTop(statusTop)\n          .cssRight(right + formField.$label.cssMarginRight())\n          .cssHeight(statusHeight)\n          .cssLineHeight(null);\n        // Add padding to label to prevent overlay of text and status icon\n        var w = graphics.size(formField.$status, true).width;\n        formField.$label.cssPaddingRight(w);\n      } else {\n        // Default status position\n        formField.$status\n          .cssTop(top)\n          .cssRight(right)\n          .cssHeight(this.rowHeight)\n          .cssLineHeight(this.rowHeight);\n        right += statusWidth + formField.$status.cssMarginX();\n      }\n    }\n\n    if (formField.$fieldContainer) {\n      // Calculate the additional field offset (because of label, mandatory indicator etc.) without the containerInset.\n      fieldOffset = new Insets(\n        top - containerPadding.top,\n        right - containerPadding.right,\n        bottom - containerPadding.bottom,\n        left - containerPadding.left);\n      // Calculate field size: \"available size\" - \"insets (border and padding)\" - \"additional offset\" - \"field's margin\"\n      var fieldMargins = graphics.margins(formField.$fieldContainer);\n      fieldSize = htmlContainer.availableSize({\n        exact: true\n      })\n        .subtract(htmlContainer.insets())\n        .subtract(fieldOffset)\n        .subtract(fieldMargins);\n      fieldBounds = new Rectangle(left, top, fieldSize.width, fieldSize.height);\n      if (formField.$fieldContainer.css('position') !== 'absolute') {\n        fieldBounds.x = 0;\n        fieldBounds.y = 0;\n      }\n      htmlField = HtmlComponent.optGet(formField.$fieldContainer);\n      if (htmlField) {\n        htmlField.setBounds(fieldBounds);\n      } else {\n        graphics.setBounds(formField.$fieldContainer, fieldBounds);\n      }\n      formField.$field.toggleClass('compact', fieldBounds.width <= FormFieldLayout.MIN_FIELD_WIDTH);\n      formField.$container.toggleClass('compact', fieldBounds.width <= FormFieldLayout.MIN_FIELD_WIDTH);\n\n      if (labelHasFieldWidth) {\n        var fieldWidth = fieldSize.add(fieldMargins).width - formField.$label.cssMarginX();\n        if (formField.$mandatory && formField.$mandatory.isVisible()) {\n          fieldWidth += formField.$mandatory.outerWidth(true);\n        }\n        formField.$label.cssWidth(fieldWidth);\n      }\n    }\n\n    if (formField.$fieldContainer) {\n      // Icons are placed inside the field (as overlay)\n      var $iconInput = this._$elementForIconLayout();\n      var fieldBorder = graphics.borders($iconInput);\n      var inputBounds = graphics.offsetBounds($iconInput);\n      top += fieldBorder.top;\n      right += fieldBorder.right;\n      fieldBounds.x += fieldBorder.left;\n      fieldBounds.y += fieldBorder.top;\n      fieldBounds.height = inputBounds.height - fieldBorder.top - fieldBorder.bottom;\n      fieldBounds.width = inputBounds.width - fieldBorder.left - fieldBorder.right;\n\n      if (formField.$icon) {\n        this._layoutIcon(formField, fieldBounds, right, top);\n      }\n\n      // Clear icon if present\n      if (formField.$clearIcon) {\n        this._layoutClearIcon(formField, fieldBounds, right, top);\n      }\n    }\n\n    // Make sure tooltip is at correct position after layouting, if there is one\n    if (tooltip && tooltip.rendered) {\n      tooltip.position();\n    }\n\n    // Check for scrollbars, update them if necessary\n    if (formField.$field) {\n      scrollbars.update(formField.$field);\n    }\n\n    this._layoutDisabledCopyOverlay();\n  }\n\n  _layoutDisabledCopyOverlay() {\n    if (this.formField.$field && this.formField.$disabledCopyOverlay) {\n      var $overlay = this.formField.$disabledCopyOverlay;\n      var $field = this.formField.$field;\n\n      var pos = $field.position();\n      var padding = graphics.insets($field, {\n        includePadding: true\n      });\n\n      // subtract scrollbars sizes from width and height so overlay does not block scrollbars\n      // we read the size from the scrollbar from our device, because we already determined\n      // it on startup. Only do this when element is scrollable.\n      var elem = $field[0];\n      var overflowX = $field.css('overflow-x');\n      var overflowY = $field.css('overflow-y');\n      var scrollHorizontal = overflowX === 'scroll' || overflowX === 'auto' && (elem.scrollWidth - elem.clientWidth) > 0;\n      var scrollVertical = overflowY === 'scroll' || overflowY === 'auto' && (elem.scrollHeight - elem.clientHeight) > 0;\n      var scrollbarSize = Device.get().scrollbarWidth;\n\n      $overlay\n        .css('top', pos.top)\n        .css('left', pos.left)\n        .width($field.width() + padding.horizontal() - (scrollVertical ? scrollbarSize : 0))\n        .height($field.height() + padding.vertical() - (scrollHorizontal ? scrollbarSize : 0));\n\n    }\n  }\n\n  _isLabelVisible() {\n    return !!this.formField.$label && this.formField.labelVisible;\n  }\n\n  _isStatusVisible() {\n    return !!this.formField.$status && (this.formField.statusVisible || this.formField.$status.isVisible());\n  }\n\n  preferredLayoutSize($container, options) {\n    var htmlContainer = HtmlComponent.get(this.formField.$container);\n    var formField = this.formField;\n    var prefSizeLabel = new Dimension();\n    var prefSizeMandatory = new Dimension();\n    var prefSizeStatus = new Dimension();\n    var prefSizeField = new Dimension();\n    var widthHint = scout.nvl(options.widthHint, 0);\n    var heightHint = scout.nvl(options.heightHint, 0);\n    // Status is only pulled up if status AND label are on top\n    var statusOnTop = formField.statusPosition === FormField.StatusPosition.TOP && this._isLabelVisible() && formField.labelPosition === FormField.LabelPosition.TOP;\n\n    // Calculate the preferred sizes of the individual parts\n    // Mandatory indicator\n    if (formField.$mandatory && formField.$mandatory.isVisible()) {\n      prefSizeMandatory.width = this.mandatoryIndicatorWidth + formField.$mandatory.cssMarginX();\n      widthHint -= prefSizeMandatory.width;\n    }\n\n    // Label\n    if (this._isLabelVisible()) {\n      prefSizeLabel.width = this.labelWidth() + formField.$label.cssMarginX();\n      prefSizeLabel.height = this.rowHeight;\n      if (formField.labelPosition === FormField.LabelPosition.TOP) {\n        // Label is always as width as the field if it is on top\n        prefSizeLabel.width = 0;\n        prefSizeLabel.height = graphics.prefSize(formField.$label, true).height;\n      } else if (formField.labelWidthInPixel === FormField.LabelWidth.UI || formField.labelUseUiWidth) {\n        if (formField.$label.hasClass('empty')) {\n          prefSizeLabel.width = 0;\n        } else {\n          prefSizeLabel = graphics.prefSize(formField.$label, true);\n        }\n      }\n\n      if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n        widthHint -= prefSizeLabel.width;\n      } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n        heightHint -= prefSizeLabel.height;\n      }\n    }\n\n    // Status\n    if (this._isStatusVisible()) {\n      prefSizeStatus.width = this.statusWidth + formField.$status.cssMarginX();\n      if (!statusOnTop) {\n        prefSizeStatus.height = this.rowHeight;\n        widthHint -= prefSizeStatus.width;\n      }\n    }\n\n    // Field\n    if (formField.$fieldContainer) {\n      var fieldMargins = graphics.margins(formField.$fieldContainer);\n      var htmlField = HtmlComponent.optGet(formField.$fieldContainer);\n      if (!htmlField) {\n        widthHint -= fieldMargins.horizontal();\n        heightHint -= fieldMargins.vertical();\n      }\n      if (options.widthHint) {\n        options.widthHint = widthHint;\n      }\n      if (options.heightHint) {\n        options.heightHint = heightHint;\n      }\n      if (htmlField) {\n        prefSizeField = htmlField.prefSize(options)\n          .add(fieldMargins);\n      } else {\n        prefSizeField = graphics.prefSize(formField.$fieldContainer, options)\n          .add(fieldMargins);\n      }\n    }\n\n    // Now sum up to calculate the preferred size of the container\n    var prefSize = new Dimension();\n\n    // Field is the base, and it should be at least as height as a form row height.\n    prefSize.width = prefSizeField.width;\n    prefSize.height = prefSizeField.height;\n\n    // Mandatory\n    prefSize.width += prefSizeMandatory.width;\n    prefSize.height = Math.max(prefSize.height, prefSizeMandatory.height);\n\n    // Label\n    if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n      prefSize.width += prefSizeLabel.width;\n      prefSize.height = Math.max(prefSize.height, prefSizeLabel.height);\n    } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n      prefSize.width = Math.max(prefSize.width, prefSizeLabel.width);\n      prefSize.height += prefSizeLabel.height;\n    }\n\n    // Status\n    if (!statusOnTop) {\n      prefSize.width += prefSizeStatus.width;\n      prefSize.height = Math.max(prefSize.height, prefSizeStatus.height);\n    }\n\n    // Add padding and border\n    prefSize = prefSize.add(htmlContainer.insets());\n\n    return prefSize;\n  }\n\n  /**\n   * @returns {$} the input element used to position the icon. May be overridden if another element than $field should be used.\n   */\n  _$elementForIconLayout() {\n    return this.formField.$field;\n  }\n\n  _layoutIcon(formField, fieldBounds, right, top) {\n    var height = this.rowHeight;\n    if (fieldBounds) {\n      // If field is bigger than rowHeight (e.g. if used in desktop cell editor), make sure icon is as height as field\n      height = fieldBounds.height;\n    }\n    formField.$icon\n      .cssRight(right)\n      .cssTop(fieldBounds.y)\n      .cssHeight(height)\n      .cssLineHeight(height);\n  }\n\n  _layoutClearIcon(formField, fieldBounds, right, top) {\n    var height = this.rowHeight;\n    if (fieldBounds) {\n      // If field is bigger than rowHeight (e.g. if used in desktop cell editor), make sure icon is as height as field\n      height = fieldBounds.height;\n    }\n    if (formField instanceof BasicField && formField.gridData.horizontalAlignment > 0) {\n      formField.$clearIcon\n        .cssLeft(fieldBounds.x)\n        .cssRight('')\n        .cssTop(fieldBounds.y)\n        .cssHeight(height)\n        .cssLineHeight(height);\n    } else {\n      formField.$clearIcon\n        .cssLeft('')\n        .cssRight(right)\n        .cssTop(fieldBounds.y)\n        .cssHeight(height)\n        .cssLineHeight(height);\n    }\n  }\n\n  labelWidth() {\n    // use configured label width in pixel or default label width\n    if (FormField.LabelWidth.DEFAULT === this.formField.labelWidthInPixel) {\n      return HtmlEnvironment.get().fieldLabelWidth;\n    }\n    return this.formField.labelWidthInPixel;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}