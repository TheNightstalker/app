{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport $ from 'jquery';\n\nvar Reconnector = /*#__PURE__*/function () {\n  function Reconnector(session) {\n    _classCallCheck(this, Reconnector);\n\n    this.session = session;\n    this.started = false; // Delay before first ping\n\n    this.initialDelay = 1000; // ms\n    // Interval to be used between pings (indefinite retries).\n\n    this.interval = 3000; // ms\n    // Minimal assumed ping duration (to prevent flickering of the reconnect notification when AJAX call fails very fast)\n\n    this.minPingDuration = 1000; // ms\n  }\n\n  _createClass(Reconnector, [{\n    key: \"start\",\n    value: function start() {\n      if (this.started) {\n        return;\n      }\n\n      $.log.isTraceEnabled() && $.log.trace('[ajax reconnector] start');\n      this.started = true;\n\n      this._schedulePing(this.initialDelay);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.started = false;\n    }\n  }, {\n    key: \"_schedulePing\",\n    value: function _schedulePing(delay) {\n      $.log.isTraceEnabled() && $.log.trace('[ajax reconnector] schedule ping() in ' + delay + ' ms');\n      setTimeout(this._ping.bind(this), delay);\n    } //\n    //   [START]\n    //      |\n    //      v\n    // +---------+          .--------.  (yes)\n    // | _ping() | ------> < success? > ------> [END]\n    // +---------+          '--------'\n    //      ^                   |(no)\n    //      |                   |\n    //      +-------------------+\n    //\n\n  }, {\n    key: \"_ping\",\n    value: function _ping() {\n      this.session.onReconnecting();\n      var pingAjaxOptions = this.session.defaultAjaxOptions({\n        ping: true\n      });\n      $.log.isTraceEnabled() && $.log.trace('[ajax reconnector] ' + pingAjaxOptions.type + ' \"' + pingAjaxOptions.url + '\"');\n      this.pingStartTimestamp = Date.now();\n      $.ajax(pingAjaxOptions).done(this._onPingDone.bind(this)).fail(this._onPingFail.bind(this));\n    }\n  }, {\n    key: \"_onPingDone\",\n    value: function _onPingDone(data, textStatus, jqXHR) {\n      $.log.isTraceEnabled() && $.log.trace('[ajax reconnector] ping success -> connection re-established!');\n      this.session.onReconnectingSucceeded();\n      this.stop();\n    }\n  }, {\n    key: \"_onPingFail\",\n    value: function _onPingFail(jqXHR, textStatus, errorThrown) {\n      var handleFailedPing = function handleFailedPing() {\n        $.log.isTraceEnabled() && $.log.trace('[ajax reconnector] ping failed');\n        this.session.onReconnectingFailed();\n\n        this._schedulePing(this.interval);\n      }.bind(this);\n\n      var pingDuration = Date.now() - this.pingStartTimestamp;\n\n      if (pingDuration < this.minPingDuration) {\n        // Wait at least a certain time before informing about connection failure (to prevent flickering of the reconnecting notification)\n        setTimeout(handleFailedPing, this.minPingDuration - pingDuration);\n      } else {\n        handleFailedPing();\n      }\n    }\n  }]);\n\n  return Reconnector;\n}();\n\nexport { Reconnector as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/session/Reconnector.js"],"names":["$","Reconnector","session","started","initialDelay","interval","minPingDuration","log","isTraceEnabled","trace","_schedulePing","delay","setTimeout","_ping","bind","onReconnecting","pingAjaxOptions","defaultAjaxOptions","ping","type","url","pingStartTimestamp","Date","now","ajax","done","_onPingDone","fail","_onPingFail","data","textStatus","jqXHR","onReconnectingSucceeded","stop","errorThrown","handleFailedPing","onReconnectingFailed","pingDuration"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport $ from 'jquery';\n\nexport default class Reconnector {\n\n  constructor(session) {\n    this.session = session;\n    this.started = false;\n\n    // Delay before first ping\n    this.initialDelay = 1000; // ms\n    // Interval to be used between pings (indefinite retries).\n    this.interval = 3000; // ms\n    // Minimal assumed ping duration (to prevent flickering of the reconnect notification when AJAX call fails very fast)\n    this.minPingDuration = 1000; // ms\n  }\n\n  start() {\n    if (this.started) {\n      return;\n    }\n\n    $.log.isTraceEnabled() && $.log.trace('[ajax reconnector] start');\n    this.started = true;\n    this._schedulePing(this.initialDelay);\n  }\n\n  stop() {\n    this.started = false;\n  }\n\n  _schedulePing(delay) {\n    $.log.isTraceEnabled() && $.log.trace('[ajax reconnector] schedule ping() in ' + delay + ' ms');\n    setTimeout(this._ping.bind(this), delay);\n  }\n\n  //\n  //   [START]\n  //      |\n  //      v\n  // +---------+          .--------.  (yes)\n  // | _ping() | ------> < success? > ------> [END]\n  // +---------+          '--------'\n  //      ^                   |(no)\n  //      |                   |\n  //      +-------------------+\n  //\n  _ping() {\n    this.session.onReconnecting();\n\n    var pingAjaxOptions = this.session.defaultAjaxOptions({\n      ping: true\n    });\n\n    $.log.isTraceEnabled() && $.log.trace('[ajax reconnector] ' + pingAjaxOptions.type + ' \"' + pingAjaxOptions.url + '\"');\n    this.pingStartTimestamp = Date.now();\n    $.ajax(pingAjaxOptions)\n      .done(this._onPingDone.bind(this))\n      .fail(this._onPingFail.bind(this));\n  }\n\n  _onPingDone(data, textStatus, jqXHR) {\n    $.log.isTraceEnabled() && $.log.trace('[ajax reconnector] ping success -> connection re-established!');\n    this.session.onReconnectingSucceeded();\n    this.stop();\n  }\n\n  _onPingFail(jqXHR, textStatus, errorThrown) {\n    var handleFailedPing = function handleFailedPing() {\n      $.log.isTraceEnabled() && $.log.trace('[ajax reconnector] ping failed');\n      this.session.onReconnectingFailed();\n      this._schedulePing(this.interval);\n    }.bind(this);\n\n    var pingDuration = Date.now() - this.pingStartTimestamp;\n    if (pingDuration < this.minPingDuration) {\n      // Wait at least a certain time before informing about connection failure (to prevent flickering of the reconnecting notification)\n      setTimeout(handleFailedPing, this.minPingDuration - pingDuration);\n    } else {\n      handleFailedPing();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}