{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { TextMap } from '../index';\nimport $ from 'jquery';\nvar TEXT_KEY_REGEX = /\\${textKey:([^}]*)}/;\nvar textsByLocale = {};\nexport function bootstrap(url) {\n  var promise = url ? $.ajaxJson(url) : $.resolvedPromise({});\n  return promise.then(_preInit.bind(this, url));\n} // private\n\nexport function _setTextsByLocale(val) {\n  textsByLocale = val;\n} // private\n\nexport function _preInit(url, data) {\n  if (data && data.error) {\n    // The result may contain a json error (e.g. session timeout) -> abort processing\n    throw {\n      error: data.error,\n      url: url\n    };\n  }\n\n  init(data);\n}\nexport function init(model) {\n  var languageTags = Object.keys(model);\n  languageTags.forEach(function (languageTag) {\n    get(languageTag).addAll(model[languageTag]);\n  }, this);\n}\n/**\n * Links the texts of the given languageTag to make parent lookup possible (e.g. look first in de-CH, then in de, then in default)\n */\n\nexport function link(languageTag) {\n  var tags = createOrderedLanguageTags(languageTag);\n  var child;\n  tags.forEach(function (tag) {\n    var texts = _get(tag);\n\n    if (!texts) {\n      // If there are no texts for the given tag, create an empty Texts object for linking purpose\n      texts = new TextMap();\n      put(tag, texts);\n    }\n\n    if (child) {\n      child.setParent(texts);\n    }\n\n    child = texts;\n  }, this);\n}\n/**\n * Creates an array containing all relevant tags.\n * <p>\n * Examples:<br>\n * - 'de-CH' generates the array: ['de-CH', 'de', 'default']\n * - 'de' generates the array: ['de', 'default']\n * - 'default' generates the array: ['default']\n */\n\nexport function createOrderedLanguageTags(languageTag) {\n  var tags = [],\n      i = languageTag.lastIndexOf('-');\n  tags.push(languageTag);\n\n  while (i >= 0) {\n    languageTag = languageTag.substring(0, i);\n    tags.push(languageTag);\n    i = languageTag.lastIndexOf('-');\n  }\n\n  if (languageTag !== 'default') {\n    tags.push('default');\n  }\n\n  return tags;\n}\n/**\n * Returns the (modifiable) TextMap for the given language tag.\n */\n\nexport function get(languageTag) {\n  var texts = _get(languageTag);\n\n  if (texts) {\n    return texts;\n  }\n\n  link(languageTag);\n  texts = _get(languageTag);\n\n  if (!texts) {\n    throw new Error('Texts missing for the language tag ' + languageTag);\n  }\n\n  return texts;\n} // private\n\nexport function _get(languageTag) {\n  return textsByLocale[languageTag];\n}\n/**\n * Registers the text map for the given locale.\n * If there already is a text map registered for that locale, it will be replaced, meaning existing texts for that locale are deleted.\n *\n * @param {TextMap} textMap\n */\n\nexport function put(languageTag, textMap) {\n  textsByLocale[languageTag] = textMap;\n}\n/**\n * Extracts NLS texts from the DOM tree. Texts are expected in the following format:\n *\n *   <scout-text data-key=\"...\" data-value=\"...\" />\n *\n * This method returns a map with all found texts. It must be called before scout.prepareDOM()\n * is called, as that method removes all <scout-text> tags.\n */\n\nexport function readFromDOM() {\n  var textMap = {};\n  $('scout-text').each(function () {\n    // No need to unescape strings (the browser did this already)\n    var key = $(this).data('key'); // noinspection UnnecessaryLocalVariableJS\n\n    var value = $(this).data('value');\n    textMap[key] = value;\n  });\n  return textMap;\n}\n/**\n * @param key to convert into a string with the form '${textKey:AKey}'.\n * @return text containing the text key like like '${textKey:AKey}'.\n */\n\nexport function buildKey(key) {\n  return '${textKey:' + key + '}';\n}\n/**\n * @param value text which contains a text key like '${textKey:AKey}'.\n * @return {string} the resolved key or the unchanged value if the text key could not be extracted.\n */\n\nexport function resolveKey(value) {\n  var result = TEXT_KEY_REGEX.exec(value);\n\n  if (result && result.length === 2) {\n    return result[1];\n  }\n\n  return value;\n}\n/**\n * @param value text which contains a text key like '${textKey:AKey}'.\n * @param languageTag the languageTag to use for the text lookup with the resolved key.\n * @return the resolved text in the language of the given session or the unchanged text if the text key could not be extracted.\n */\n\nexport function resolveText(value, languageTag) {\n  var key = resolveKey(value);\n\n  if (key !== value) {\n    return get(languageTag).get(key);\n  }\n\n  return value;\n}\n/**\n * Utility function to easily replace an object property which contains a text key like '${textKey:AKey}'.\n *\n * @param object object having a text property which contains a text-key\n * @param textProperty (optional) name of the property where a text-key should be replaced by a text. By default 'text' is used as property name.\n * @param session (optional) can be undefined when given 'object' has a session property, otherwise mandatory\n */\n\nexport function resolveTextProperty(object, textProperty, session) {\n  textProperty = textProperty || 'text';\n  session = object.session || session;\n  var value = object[textProperty];\n  var text = resolveText(value, session.locale.languageTag);\n\n  if (text !== value) {\n    object[textProperty] = text;\n  }\n}\nexport default {\n  TEXT_KEY_REGEX: TEXT_KEY_REGEX,\n  bootstrap: bootstrap,\n  buildKey: buildKey,\n  createOrderedLanguageTags: createOrderedLanguageTags,\n  get: get,\n  init: init,\n  link: link,\n  put: put,\n  readFromDOM: readFromDOM,\n  resolveKey: resolveKey,\n  resolveText: resolveText,\n  resolveTextProperty: resolveTextProperty,\n  textsByLocale: textsByLocale\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/text/texts.js"],"names":["TextMap","$","TEXT_KEY_REGEX","textsByLocale","bootstrap","url","promise","ajaxJson","resolvedPromise","then","_preInit","bind","_setTextsByLocale","val","data","error","init","model","languageTags","Object","keys","forEach","languageTag","get","addAll","link","tags","createOrderedLanguageTags","child","tag","texts","_get","put","setParent","i","lastIndexOf","push","substring","Error","textMap","readFromDOM","each","key","value","buildKey","resolveKey","result","exec","length","resolveText","resolveTextProperty","object","textProperty","session","text","locale"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {TextMap} from '../index';\nimport $ from 'jquery';\n\nconst TEXT_KEY_REGEX = /\\${textKey:([^}]*)}/;\n\nlet textsByLocale = {};\n\nexport function bootstrap(url) {\n  var promise = url ? $.ajaxJson(url) : $.resolvedPromise({});\n  return promise.then(_preInit.bind(this, url));\n}\n\n// private\nexport function _setTextsByLocale(val) {\n  textsByLocale = val;\n}\n\n// private\nexport function _preInit(url, data) {\n  if (data && data.error) {\n    // The result may contain a json error (e.g. session timeout) -> abort processing\n    throw {\n      error: data.error,\n      url: url\n    };\n  }\n  init(data);\n}\n\nexport function init(model) {\n  var languageTags = Object.keys(model);\n  languageTags.forEach(function(languageTag) {\n    get(languageTag).addAll(model[languageTag]);\n  }, this);\n}\n\n/**\n * Links the texts of the given languageTag to make parent lookup possible (e.g. look first in de-CH, then in de, then in default)\n */\nexport function link(languageTag) {\n  var tags = createOrderedLanguageTags(languageTag);\n  var child;\n  tags.forEach(function(tag) {\n    var texts = _get(tag);\n    if (!texts) {\n      // If there are no texts for the given tag, create an empty Texts object for linking purpose\n      texts = new TextMap();\n      put(tag, texts);\n    }\n    if (child) {\n      child.setParent(texts);\n    }\n    child = texts;\n  }, this);\n}\n\n/**\n * Creates an array containing all relevant tags.\n * <p>\n * Examples:<br>\n * - 'de-CH' generates the array: ['de-CH', 'de', 'default']\n * - 'de' generates the array: ['de', 'default']\n * - 'default' generates the array: ['default']\n */\nexport function createOrderedLanguageTags(languageTag) {\n  var tags = [],\n    i = languageTag.lastIndexOf('-');\n\n  tags.push(languageTag);\n\n  while (i >= 0) {\n    languageTag = languageTag.substring(0, i);\n    tags.push(languageTag);\n    i = languageTag.lastIndexOf('-');\n  }\n\n  if (languageTag !== 'default') {\n    tags.push('default');\n  }\n  return tags;\n}\n\n/**\n * Returns the (modifiable) TextMap for the given language tag.\n */\nexport function get(languageTag) {\n  var texts = _get(languageTag);\n  if (texts) {\n    return texts;\n  }\n\n  link(languageTag);\n  texts = _get(languageTag);\n  if (!texts) {\n    throw new Error('Texts missing for the language tag ' + languageTag);\n  }\n  return texts;\n}\n\n// private\nexport function _get(languageTag) {\n  return textsByLocale[languageTag];\n}\n\n/**\n * Registers the text map for the given locale.\n * If there already is a text map registered for that locale, it will be replaced, meaning existing texts for that locale are deleted.\n *\n * @param {TextMap} textMap\n */\nexport function put(languageTag, textMap) {\n  textsByLocale[languageTag] = textMap;\n}\n\n/**\n * Extracts NLS texts from the DOM tree. Texts are expected in the following format:\n *\n *   <scout-text data-key=\"...\" data-value=\"...\" />\n *\n * This method returns a map with all found texts. It must be called before scout.prepareDOM()\n * is called, as that method removes all <scout-text> tags.\n */\nexport function readFromDOM() {\n  var textMap = {};\n  $('scout-text').each(function() {\n    // No need to unescape strings (the browser did this already)\n    var key = $(this).data('key');\n    // noinspection UnnecessaryLocalVariableJS\n    var value = $(this).data('value');\n    textMap[key] = value;\n  });\n  return textMap;\n}\n\n/**\n * @param key to convert into a string with the form '${textKey:AKey}'.\n * @return text containing the text key like like '${textKey:AKey}'.\n */\nexport function buildKey(key) {\n  return '${textKey:' + key + '}';\n}\n\n/**\n * @param value text which contains a text key like '${textKey:AKey}'.\n * @return {string} the resolved key or the unchanged value if the text key could not be extracted.\n */\nexport function resolveKey(value) {\n  var result = TEXT_KEY_REGEX.exec(value);\n  if (result && result.length === 2) {\n    return result[1];\n  }\n  return value;\n}\n\n/**\n * @param value text which contains a text key like '${textKey:AKey}'.\n * @param languageTag the languageTag to use for the text lookup with the resolved key.\n * @return the resolved text in the language of the given session or the unchanged text if the text key could not be extracted.\n */\nexport function resolveText(value, languageTag) {\n  var key = resolveKey(value);\n  if (key !== value) {\n    return get(languageTag).get(key);\n  }\n  return value;\n}\n\n/**\n * Utility function to easily replace an object property which contains a text key like '${textKey:AKey}'.\n *\n * @param object object having a text property which contains a text-key\n * @param textProperty (optional) name of the property where a text-key should be replaced by a text. By default 'text' is used as property name.\n * @param session (optional) can be undefined when given 'object' has a session property, otherwise mandatory\n */\nexport function resolveTextProperty(object, textProperty, session) {\n  textProperty = textProperty || 'text';\n  session = object.session || session;\n  var value = object[textProperty];\n  var text = resolveText(value, session.locale.languageTag);\n  if (text !== value) {\n    object[textProperty] = text;\n  }\n}\n\nexport default {\n  TEXT_KEY_REGEX,\n  bootstrap,\n  buildKey,\n  createOrderedLanguageTags,\n  get,\n  init,\n  link,\n  put,\n  readFromDOM,\n  resolveKey,\n  resolveText,\n  resolveTextProperty,\n  textsByLocale\n};\n"]},"metadata":{},"sourceType":"module"}