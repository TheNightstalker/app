{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, BasicField, fields, InputFieldKeyStrokeContext, objects, scout, Status, StringFieldCtrlEnterKeyStroke, StringFieldEnterKeyStroke, StringFieldLayout, strings, texts } from '../../../index';\n\nvar StringField = /*#__PURE__*/function (_BasicField) {\n  _inherits(StringField, _BasicField);\n\n  var _super = _createSuper(StringField);\n\n  function StringField() {\n    var _this;\n\n    _classCallCheck(this, StringField);\n\n    _this = _super.call(this);\n    _this.format;\n    _this.hasAction = false;\n    _this.inputMasked = false;\n    _this.inputObfuscated = false;\n    _this.maxLength = 4000;\n    _this.multilineText = false;\n    _this.selectionStart = 0;\n    _this.selectionEnd = 0;\n    _this.selectionTrackingEnabled = false;\n    _this.spellCheckEnabled = false;\n    _this.trimText = true;\n    _this.wrapText = false;\n    _this._onSelectionChangingActionHandler = _this._onSelectionChangingAction.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(StringField, [{\n    key: \"_initValue\",\n\n    /**\n     * Resolves the text key if value contains one.\n     * This cannot be done in _init because the value field would call _setValue first\n     */\n    value: function _initValue(value) {\n      value = texts.resolveText(value, this.session.locale.languageTag);\n\n      _get(_getPrototypeOf(StringField.prototype), \"_initValue\", this).call(this, value);\n    }\n    /**\n     * @override ModelAdapter.js\n     */\n\n  }, {\n    key: \"_initKeyStrokeContext\",\n    value: function _initKeyStrokeContext() {\n      _get(_getPrototypeOf(StringField.prototype), \"_initKeyStrokeContext\", this).call(this);\n\n      this.keyStrokeContext.registerKeyStroke([new StringFieldEnterKeyStroke(this), new StringFieldCtrlEnterKeyStroke(this)]);\n    }\n    /**\n     * @override Widget.js\n     */\n\n  }, {\n    key: \"_createKeyStrokeContext\",\n    value: function _createKeyStrokeContext() {\n      return new InputFieldKeyStrokeContext();\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.addContainer(this.$parent, 'string-field', new StringFieldLayout(this));\n      this.addLabel();\n      this.addMandatoryIndicator();\n      var $field;\n\n      if (this.multilineText) {\n        $field = this._makeMultilineField();\n        this.$container.addClass('multiline');\n      } else {\n        $field = fields.makeTextField(this.$parent);\n      }\n\n      $field.on('paste', this._onFieldPaste.bind(this));\n      this.addField($field);\n      this.addStatus();\n    }\n  }, {\n    key: \"_makeMultilineField\",\n    value: function _makeMultilineField() {\n      var mouseDownHandler = function () {\n        this.mouseClicked = true;\n      }.bind(this);\n\n      return this.$parent.makeElement('<textarea>').on('DOMMouseScroll mousewheel', this._onMouseWheel.bind(this)).on('mousedown', mouseDownHandler).on('focus', function (event) {\n        this.$field.off('mousedown', mouseDownHandler);\n\n        if (!this.mouseClicked) {\n          // only trigger on tab focus in\n          setTimeout(function () {\n            if (!this.rendered || this.session.focusManager.isElementCovertByGlassPane(this.$field)) {\n              return;\n            }\n\n            this._renderSelectionStart();\n\n            this._renderSelectionEnd();\n          }.bind(this));\n        }\n\n        this.mouseClicked = false;\n      }.bind(this)).on('focusout', function () {\n        this.$field.on('mousedown', mouseDownHandler);\n      }.bind(this)).addDeviceClass();\n    }\n  }, {\n    key: \"_onFieldBlur\",\n    value: function _onFieldBlur() {\n      _get(_getPrototypeOf(StringField.prototype), \"_onFieldBlur\", this).call(this);\n\n      if (this.multilineText) {\n        this._updateSelection();\n      }\n\n      if (this.inputObfuscated) {\n        // Restore obfuscated display text.\n        this.$field.val(this.displayText);\n      }\n    }\n  }, {\n    key: \"_onMouseWheel\",\n    value: function _onMouseWheel(event) {\n      event = event.originalEvent || this.$container.window(true).event.originalEvent; // noinspection JSUnresolvedVariable\n\n      var delta = event.wheelDelta ? -event.wheelDelta : event.detail;\n      var scrollTop = this.$field[0].scrollTop;\n\n      if (delta < 0 && scrollTop === 0) {\n        // StringField is scrolled to the very top -> parent may scroll\n        return;\n      }\n\n      var maxScrollTop = this.$field[0].scrollHeight - this.$field[0].clientHeight;\n\n      if (delta > 0 && scrollTop >= maxScrollTop - 1) {\n        // -1 because it can sometimes happen that scrollTop is maxScrollTop -1 or +1, just because clientHeight and scrollHeight are rounded values\n        // StringField is scrolled to the very bottom -> parent may scroll\n        this.$field[0].scrollTop = maxScrollTop; // Ensure it is really at the bottom (not -1px above)\n\n        return;\n      } // Don't allow others to scroll (e.g. Scrollbar) while scrolling in the text area\n\n\n      event.stopPropagation();\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(StringField.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderInputMasked();\n\n      this._renderWrapText();\n\n      this._renderFormat();\n\n      this._renderSpellCheckEnabled();\n\n      this._renderHasAction();\n\n      this._renderMaxLength();\n\n      this._renderSelectionTrackingEnabled(); // Do not render selectionStart and selectionEnd here, because that would cause the focus to\n      // be set to <textarea>s in IE. Instead, the selection is rendered when the focus has entered\n      // the field, see _render(). #168648\n\n\n      this._renderDropType();\n    }\n    /**\n     * Adds a click handler instead of a mouse down handler because it executes an action.\n     * @override\n     */\n\n  }, {\n    key: \"addIcon\",\n    value: function addIcon() {\n      this.$icon = fields.appendIcon(this.$container).on('click', this._onIconClick.bind(this));\n    }\n    /**\n     * override to ensure dropdown fields and touch mode smart fields does not have a clear icon.\n     */\n\n  }, {\n    key: \"isClearable\",\n    value: function isClearable() {\n      return _get(_getPrototypeOf(StringField.prototype), \"isClearable\", this).call(this) && !this.multilineText;\n    }\n  }, {\n    key: \"setMaxLength\",\n    value: function setMaxLength(maxLength) {\n      this.setProperty('maxLength', maxLength);\n    }\n  }, {\n    key: \"_renderMaxLength\",\n    value: function _renderMaxLength() {\n      // Check if \"maxLength\" attribute is supported by browser\n      if (this.$field[0].maxLength) {\n        this.$field.attr('maxlength', this.maxLength);\n      } else {\n        // Fallback for IE9\n        this.$field.on('keyup paste', function (e) {\n          setTimeout(truncate.bind(this), 0);\n        }.bind(this));\n      } // Make sure current text does not exceed max length\n\n\n      truncate.call(this);\n\n      if (!this.rendering) {\n        this.parseAndSetValue(this._readDisplayText());\n      }\n\n      function truncate() {\n        var text = this.$field.val();\n\n        if (text.length > this.maxLength) {\n          this.$field.val(text.slice(0, this.maxLength));\n        }\n      }\n    }\n  }, {\n    key: \"setSelectionStart\",\n    value: function setSelectionStart(selectionStart) {\n      this.setProperty('selectionStart', selectionStart);\n    }\n  }, {\n    key: \"_renderSelectionStart\",\n    value: function _renderSelectionStart() {\n      if (scout.nvl(this.selectionStart, null) !== null) {\n        this.$field[0].selectionStart = this.selectionStart;\n      }\n    }\n  }, {\n    key: \"setSelectionEnd\",\n    value: function setSelectionEnd(selectionEnd) {\n      this.setProperty('selectionEnd', selectionEnd);\n    }\n  }, {\n    key: \"_renderSelectionEnd\",\n    value: function _renderSelectionEnd() {\n      if (scout.nvl(this.selectionEnd, null) !== null) {\n        this.$field[0].selectionEnd = this.selectionEnd;\n      }\n    }\n  }, {\n    key: \"setSelectionTrackingEnabled\",\n    value: function setSelectionTrackingEnabled(selectionTrackingEnabled) {\n      this.setProperty('selectionTrackingEnabled', selectionTrackingEnabled);\n    }\n  }, {\n    key: \"_renderSelectionTrackingEnabled\",\n    value: function _renderSelectionTrackingEnabled() {\n      this.$field.off('select', this._onSelectionChangingActionHandler).off('mousedown', this._onSelectionChangingActionHandler).off('keydown', this._onSelectionChangingActionHandler).off('input', this._onSelectionChangingActionHandler);\n\n      if (this.selectionTrackingEnabled) {\n        this.$field.on('select', this._onSelectionChangingActionHandler).on('mousedown', this._onSelectionChangingActionHandler).on('keydown', this._onSelectionChangingActionHandler).on('input', this._onSelectionChangingActionHandler);\n      }\n    }\n  }, {\n    key: \"setInputMasked\",\n    value: function setInputMasked(inputMasked) {\n      this.setProperty('inputMasked', inputMasked);\n    }\n  }, {\n    key: \"_renderInputMasked\",\n    value: function _renderInputMasked() {\n      if (this.multilineText) {\n        return;\n      }\n\n      this.$field.attr('type', this.inputMasked ? 'password' : 'text');\n    }\n  }, {\n    key: \"_renderInputObfuscated\",\n    value: function _renderInputObfuscated() {\n      if (this.inputObfuscated && this.focused) {\n        // If a new display text is set (e.g. because value in model changed) and field is focused,\n        // do not display new display text but clear content (as in _onFieldFocus).\n        // Depending on order of property render, either this or _renderDisplayText is called first\n        // (inputObfuscated flag might be still in the old state in _renderDisplayText).\n        this.$field.val('');\n      }\n    }\n  }, {\n    key: \"setHasAction\",\n    value: function setHasAction(hasAction) {\n      this.setProperty('hasAction', hasAction);\n    }\n  }, {\n    key: \"_renderHasAction\",\n    value: function _renderHasAction() {\n      if (this.hasAction) {\n        if (!this.$icon) {\n          this.addIcon();\n        }\n\n        this.$container.addClass('has-icon');\n      } else {\n        this._removeIcon();\n\n        this.$container.removeClass('has-icon');\n      }\n\n      this.revalidateLayout();\n    }\n  }, {\n    key: \"setFormatUpper\",\n    value: function setFormatUpper(formatUpper) {\n      if (formatUpper) {\n        this.setFormat(StringField.Format.UPPER);\n      } else {\n        this.setFormat(null);\n      }\n    }\n  }, {\n    key: \"setFormatLower\",\n    value: function setFormatLower(formatLower) {\n      if (formatLower) {\n        this.setFormat(StringField.Format.LOWER);\n      } else {\n        this.setFormat(null);\n      }\n    }\n  }, {\n    key: \"setFormat\",\n    value: function setFormat(format) {\n      this.setProperty('format', format);\n    }\n  }, {\n    key: \"_renderFormat\",\n    value: function _renderFormat() {\n      if (this.format === StringField.Format.LOWER) {\n        this.$field.css('text-transform', 'lowercase');\n      } else if (this.format === StringField.Format.UPPER) {\n        this.$field.css('text-transform', 'uppercase');\n      } else {\n        this.$field.css('text-transform', '');\n      }\n    }\n  }, {\n    key: \"setSpellCheckEnabled\",\n    value: function setSpellCheckEnabled(spellCheckEnabled) {\n      this.setProperty('spellCheckEnabled', spellCheckEnabled);\n    }\n  }, {\n    key: \"_renderSpellCheckEnabled\",\n    value: function _renderSpellCheckEnabled() {\n      if (this.spellCheckEnabled) {\n        this.$field.attr('spellcheck', 'true');\n      } else {\n        this.$field.attr('spellcheck', 'false');\n      }\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_renderDisplayText\",\n    value: function _renderDisplayText() {\n      if (this.inputObfuscated && this.focused) {\n        // If a new display text is set (e.g. because value in model changed) and field is focused,\n        // do not display new display text but clear content (as in _onFieldFocus).\n        // Depending on order of property render, either this or _renderInputObfuscated is called first\n        // (inputObfuscated flag might be still in the old state in this method).\n        this.$field.val('');\n        return;\n      }\n\n      var displayText = strings.nvl(this.displayText);\n      var oldDisplayText = strings.nvl(this.$field.val());\n\n      var oldSelection = this._getSelection();\n\n      _get(_getPrototypeOf(StringField.prototype), \"_renderDisplayText\", this).call(this); // Try to keep the current selection for cases where the old and new display\n      // text only differ because of the automatic trimming.\n\n\n      if (this.trimText && oldDisplayText !== displayText) {\n        var matches = oldDisplayText.match(StringField.TRIM_REGEXP);\n\n        if (matches && matches[2] === displayText) {\n          this._setSelection({\n            start: Math.max(oldSelection.start - matches[1].length, 0),\n            end: Math.min(oldSelection.end - matches[1].length, displayText.length)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"insertText\",\n    value: function insertText(text) {\n      if (!this.rendered) {\n        this._postRenderActions.push(this.insertText.bind(this, text));\n\n        return;\n      }\n\n      this._insertText(text);\n    }\n  }, {\n    key: \"_insertText\",\n    value: function _insertText(textToInsert) {\n      if (!textToInsert) {\n        return;\n      } // Prevent insert if new length would exceed maxLength to prevent unintended deletion of characters at the end of the string\n\n\n      var selection = this._getSelection();\n\n      var text = this._applyTextToSelection(this.$field.val(), textToInsert, selection);\n\n      if (text.length > this.maxLength) {\n        this._showNotification('ui.CannotInsertTextTooLong');\n\n        return;\n      }\n\n      this.$field.val(text);\n\n      this._setSelection(selection.start + textToInsert.length); // Make sure display text gets sent (necessary if field does not have the focus)\n\n\n      if (this.updateDisplayTextOnModify) {\n        // If flag is true, we need to send two events (First while typing=true, second = false)\n        this.acceptInput(true);\n      }\n\n      this.acceptInput();\n    }\n  }, {\n    key: \"_applyTextToSelection\",\n    value: function _applyTextToSelection(text, textToInsert, selection) {\n      if (this.inputObfuscated) {\n        // Use empty text when input is obfuscated, otherwise text will be added to obfuscated text\n        text = '';\n      }\n\n      return text.slice(0, selection.start) + textToInsert + text.slice(selection.end);\n    }\n  }, {\n    key: \"setWrapText\",\n    value: function setWrapText(wrapText) {\n      this.setProperty('wrapText', wrapText);\n    }\n  }, {\n    key: \"_renderWrapText\",\n    value: function _renderWrapText() {\n      this.$field.attr('wrap', this.wrapText ? 'soft' : 'off');\n    }\n  }, {\n    key: \"setTrimText\",\n    value: function setTrimText(trimText) {\n      this.setProperty('trimText', trimText);\n    }\n  }, {\n    key: \"_renderTrimText\",\n    value: function _renderTrimText() {// nop, property used in _validateDisplayText()\n    }\n  }, {\n    key: \"_renderGridData\",\n    value: function _renderGridData() {\n      _get(_getPrototypeOf(StringField.prototype), \"_renderGridData\", this).call(this);\n\n      this.updateInnerAlignment({\n        useHorizontalAlignment: !this.multilineText\n      });\n    }\n  }, {\n    key: \"_renderGridDataHints\",\n    value: function _renderGridDataHints() {\n      _get(_getPrototypeOf(StringField.prototype), \"_renderGridDataHints\", this).call(this);\n\n      this.updateInnerAlignment({\n        useHorizontalAlignment: true\n      });\n    }\n  }, {\n    key: \"_onIconClick\",\n    value: function _onIconClick(event) {\n      this.acceptInput();\n      this.$field.focus();\n      this.trigger('action');\n    }\n  }, {\n    key: \"_onSelectionChangingAction\",\n    value: function _onSelectionChangingAction(event) {\n      if (event.type === 'mousedown') {\n        this.$field.window().one('mouseup.stringfield', function () {\n          // For some reason, when clicking side an existing selection (which clears the selection), the old\n          // selection is still visible. To get around this case, we use setTimeout to handle the new selection\n          // after it really has been changed.\n          setTimeout(this._updateSelection.bind(this));\n        }.bind(this));\n      } else if (event.type === 'keydown') {\n        // Use set timeout to let the cursor move to the target position\n        setTimeout(this._updateSelection.bind(this));\n      } else {\n        this._updateSelection();\n      }\n    }\n  }, {\n    key: \"_getSelection\",\n    value: function _getSelection() {\n      var start = scout.nvl(this.$field[0].selectionStart, null);\n      var end = scout.nvl(this.$field[0].selectionEnd, null);\n\n      if (start === null || end === null) {\n        start = 0;\n        end = 0;\n      }\n\n      return {\n        start: start,\n        end: end\n      };\n    }\n  }, {\n    key: \"_setSelection\",\n    value: function _setSelection(selectionStart, selectionEnd) {\n      if (typeof selectionStart === 'number') {\n        selectionEnd = scout.nvl(selectionEnd, selectionStart);\n      } else if (_typeof(selectionStart) === 'object') {\n        selectionEnd = selectionStart.end;\n        selectionStart = selectionStart.start;\n      }\n\n      this.$field[0].selectionStart = selectionStart;\n      this.$field[0].selectionEnd = selectionEnd;\n\n      this._updateSelection();\n    }\n  }, {\n    key: \"_updateSelection\",\n    value: function _updateSelection() {\n      var oldSelectionStart = this.selectionStart;\n      var oldSelectionEnd = this.selectionEnd;\n      this.selectionStart = this.$field[0].selectionStart;\n      this.selectionEnd = this.$field[0].selectionEnd;\n\n      if (this.selectionTrackingEnabled) {\n        var selectionChanged = this.selectionStart !== oldSelectionStart || this.selectionEnd !== oldSelectionEnd;\n\n        if (selectionChanged) {\n          this.triggerSelectionChange();\n        }\n      }\n    }\n  }, {\n    key: \"triggerSelectionChange\",\n    value: function triggerSelectionChange() {\n      this.trigger('selectionChange', {\n        selectionStart: this.selectionStart,\n        selectionEnd: this.selectionEnd\n      });\n    }\n  }, {\n    key: \"_validateValue\",\n    value: function _validateValue(value) {\n      if (objects.isNullOrUndefined(value)) {\n        return value;\n      }\n\n      value = strings.asString(value);\n\n      if (this.trimText) {\n        value = value.trim();\n      }\n\n      return _get(_getPrototypeOf(StringField.prototype), \"_validateValue\", this).call(this, value);\n    }\n    /**\n     * @override ValueField.js\n     */\n\n  }, {\n    key: \"_clear\",\n    value: function _clear() {\n      _get(_getPrototypeOf(StringField.prototype), \"_clear\", this).call(this); // Disable obfuscation when user clicks on clear icon.\n\n\n      this.inputObfuscated = false;\n    }\n    /**\n     * @override ValueField.js\n     */\n\n  }, {\n    key: \"_updateEmpty\",\n    value: function _updateEmpty() {\n      this.empty = strings.empty(this.value);\n    }\n    /**\n     * @override ValueField.js\n     */\n\n  }, {\n    key: \"acceptInput\",\n    value: function acceptInput(whileTyping) {\n      var displayText = scout.nvl(this._readDisplayText(), '');\n\n      if (this.inputObfuscated && displayText !== '') {\n        // Disable obfuscation if user has typed text (on focus, field will be cleared if obfuscated, so any typed text is new text).\n        this.inputObfuscated = false;\n      }\n\n      _get(_getPrototypeOf(StringField.prototype), \"acceptInput\", this).call(this, whileTyping);\n    }\n    /**\n     * @override BasicField.js\n     */\n\n  }, {\n    key: \"_onFieldFocus\",\n    value: function _onFieldFocus(event) {\n      _get(_getPrototypeOf(StringField.prototype), \"_onFieldFocus\", this).call(this, event);\n\n      if (this.inputObfuscated) {\n        this.$field.val(''); // Without properly setting selection start and end, cursor is not visible in IE and Firefox.\n\n        setTimeout(function () {\n          if (!this.rendered) {\n            return;\n          }\n\n          var $field = this.$field[0];\n          $field.selectionStart = 0;\n          $field.selectionEnd = 0;\n        }.bind(this));\n      }\n    }\n    /**\n     * Get clipboard data, different strategies for browsers.\n     * Must use a callback because this is required by Chrome's clipboard API.\n     */\n\n  }, {\n    key: \"_getClipboardData\",\n    value: function _getClipboardData(event, doneHandler) {\n      var data = event.originalEvent.clipboardData || this.$container.window(true).clipboardData;\n\n      if (data) {\n        // Chrome, Firefox\n        if (data.items && data.items.length) {\n          var item = arrays.find(data.items, function (item) {\n            return item.type === 'text/plain';\n          });\n\n          if (item) {\n            item.getAsString(doneHandler);\n          }\n\n          return;\n        } // IE, Safari\n\n\n        if (data.getData) {\n          doneHandler(data.getData('Text'));\n        }\n      } // Can't access clipboard -> don't call done handler\n\n    }\n  }, {\n    key: \"_onFieldPaste\",\n    value: function _onFieldPaste(event) {\n      // must store text and selection because when the callback is executed, the clipboard content has already been applied to the input field\n      var text = this.$field.val();\n\n      var selection = this._getSelection();\n\n      this._getClipboardData(event, function (pastedText) {\n        if (!pastedText) {\n          return;\n        } // Make sure the user is notified about pasted text which is cut off because of maxlength constraints\n\n\n        text = this._applyTextToSelection(text, pastedText, selection);\n\n        if (text.length > this.maxLength) {\n          this._showNotification('ui.PastedTextTooLong');\n        }\n      }.bind(this));\n    }\n  }, {\n    key: \"_showNotification\",\n    value: function _showNotification(textKey) {\n      scout.create('DesktopNotification', {\n        parent: this,\n        severity: Status.Severity.WARNING,\n        message: this.session.text(textKey)\n      }).show();\n    }\n    /**\n     * @override BasicField.js\n     */\n\n  }, {\n    key: \"_checkDisplayTextChanged\",\n    value: function _checkDisplayTextChanged(displayText, whileTyping) {\n      var displayTextChanged = _get(_getPrototypeOf(StringField.prototype), \"_checkDisplayTextChanged\", this).call(this, displayText, whileTyping); // Display text hasn't changed if input is obfuscated and current display text is empty (because field will be cleared if user focuses obfuscated text field).\n\n\n      if (displayTextChanged && this.inputObfuscated && displayText === '') {\n        return false;\n      }\n\n      return displayTextChanged;\n    }\n  }]);\n\n  return StringField;\n}(BasicField);\n\n_defineProperty(StringField, \"Format\", {\n  LOWER: 'a'\n  /* IStringField.FORMAT_LOWER */\n  ,\n  UPPER: 'A'\n  /* IStringField.FORMAT_UPPER */\n\n});\n\n_defineProperty(StringField, \"TRIM_REGEXP\", new RegExp('^(\\\\s*)(.*?)(\\\\s*)$'));\n\nexport { StringField as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/stringfield/StringField.js"],"names":["arrays","BasicField","fields","InputFieldKeyStrokeContext","objects","scout","Status","StringFieldCtrlEnterKeyStroke","StringFieldEnterKeyStroke","StringFieldLayout","strings","texts","StringField","format","hasAction","inputMasked","inputObfuscated","maxLength","multilineText","selectionStart","selectionEnd","selectionTrackingEnabled","spellCheckEnabled","trimText","wrapText","_onSelectionChangingActionHandler","_onSelectionChangingAction","bind","value","resolveText","session","locale","languageTag","keyStrokeContext","registerKeyStroke","addContainer","$parent","addLabel","addMandatoryIndicator","$field","_makeMultilineField","$container","addClass","makeTextField","on","_onFieldPaste","addField","addStatus","mouseDownHandler","mouseClicked","makeElement","_onMouseWheel","event","off","setTimeout","rendered","focusManager","isElementCovertByGlassPane","_renderSelectionStart","_renderSelectionEnd","addDeviceClass","_updateSelection","val","displayText","originalEvent","window","delta","wheelDelta","detail","scrollTop","maxScrollTop","scrollHeight","clientHeight","stopPropagation","_renderInputMasked","_renderWrapText","_renderFormat","_renderSpellCheckEnabled","_renderHasAction","_renderMaxLength","_renderSelectionTrackingEnabled","_renderDropType","$icon","appendIcon","_onIconClick","setProperty","attr","e","truncate","call","rendering","parseAndSetValue","_readDisplayText","text","length","slice","nvl","focused","addIcon","_removeIcon","removeClass","revalidateLayout","formatUpper","setFormat","Format","UPPER","formatLower","LOWER","css","oldDisplayText","oldSelection","_getSelection","matches","match","TRIM_REGEXP","_setSelection","start","Math","max","end","min","_postRenderActions","push","insertText","_insertText","textToInsert","selection","_applyTextToSelection","_showNotification","updateDisplayTextOnModify","acceptInput","updateInnerAlignment","useHorizontalAlignment","focus","trigger","type","one","oldSelectionStart","oldSelectionEnd","selectionChanged","triggerSelectionChange","isNullOrUndefined","asString","trim","empty","whileTyping","doneHandler","data","clipboardData","items","item","find","getAsString","getData","_getClipboardData","pastedText","textKey","create","parent","severity","Severity","WARNING","message","show","displayTextChanged","RegExp"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {\n  arrays,\n  BasicField,\n  fields,\n  InputFieldKeyStrokeContext,\n  objects,\n  scout,\n  Status,\n  StringFieldCtrlEnterKeyStroke,\n  StringFieldEnterKeyStroke,\n  StringFieldLayout,\n  strings,\n  texts\n} from '../../../index';\n\nexport default class StringField extends BasicField {\n  constructor() {\n    super();\n\n    this.format;\n    this.hasAction = false;\n    this.inputMasked = false;\n    this.inputObfuscated = false;\n    this.maxLength = 4000;\n    this.multilineText = false;\n    this.selectionStart = 0;\n    this.selectionEnd = 0;\n    this.selectionTrackingEnabled = false;\n    this.spellCheckEnabled = false;\n    this.trimText = true;\n    this.wrapText = false;\n\n    this._onSelectionChangingActionHandler = this._onSelectionChangingAction.bind(this);\n  }\n\n  static Format = {\n    LOWER: 'a' /* IStringField.FORMAT_LOWER */,\n    UPPER: 'A' /* IStringField.FORMAT_UPPER */\n  };\n\n  static TRIM_REGEXP = new RegExp('^(\\\\s*)(.*?)(\\\\s*)$');\n\n  /**\n   * Resolves the text key if value contains one.\n   * This cannot be done in _init because the value field would call _setValue first\n   */\n  _initValue(value) {\n    value = texts.resolveText(value, this.session.locale.languageTag);\n    super._initValue(value);\n  }\n\n  /**\n   * @override ModelAdapter.js\n   */\n  _initKeyStrokeContext() {\n    super._initKeyStrokeContext();\n\n    this.keyStrokeContext.registerKeyStroke([\n      new StringFieldEnterKeyStroke(this),\n      new StringFieldCtrlEnterKeyStroke(this)\n    ]);\n  }\n\n  /**\n   * @override Widget.js\n   */\n  _createKeyStrokeContext() {\n    return new InputFieldKeyStrokeContext();\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'string-field', new StringFieldLayout(this));\n    this.addLabel();\n    this.addMandatoryIndicator();\n\n    var $field;\n    if (this.multilineText) {\n      $field = this._makeMultilineField();\n      this.$container.addClass('multiline');\n    } else {\n      $field = fields.makeTextField(this.$parent);\n    }\n    $field.on('paste', this._onFieldPaste.bind(this));\n\n    this.addField($field);\n    this.addStatus();\n  }\n\n  _makeMultilineField() {\n    var mouseDownHandler = function() {\n      this.mouseClicked = true;\n    }.bind(this);\n\n    return this.$parent.makeElement('<textarea>')\n      .on('DOMMouseScroll mousewheel', this._onMouseWheel.bind(this))\n      .on('mousedown', mouseDownHandler)\n      .on('focus', function(event) {\n        this.$field.off('mousedown', mouseDownHandler);\n        if (!this.mouseClicked) { // only trigger on tab focus in\n          setTimeout(function() {\n            if (!this.rendered || this.session.focusManager.isElementCovertByGlassPane(this.$field)) {\n              return;\n            }\n            this._renderSelectionStart();\n            this._renderSelectionEnd();\n          }.bind(this));\n        }\n        this.mouseClicked = false;\n      }.bind(this))\n      .on('focusout', function() {\n        this.$field.on('mousedown', mouseDownHandler);\n      }.bind(this))\n      .addDeviceClass();\n  }\n\n  _onFieldBlur() {\n    super._onFieldBlur();\n    if (this.multilineText) {\n      this._updateSelection();\n    }\n    if (this.inputObfuscated) {\n      // Restore obfuscated display text.\n      this.$field.val(this.displayText);\n    }\n  }\n\n  _onMouseWheel(event) {\n    event = event.originalEvent || this.$container.window(true).event.originalEvent;\n    // noinspection JSUnresolvedVariable\n    var delta = event.wheelDelta ? -event.wheelDelta : event.detail;\n    var scrollTop = this.$field[0].scrollTop;\n    if (delta < 0 && scrollTop === 0) {\n      // StringField is scrolled to the very top -> parent may scroll\n      return;\n    }\n    var maxScrollTop = this.$field[0].scrollHeight - this.$field[0].clientHeight;\n    if (delta > 0 && scrollTop >= maxScrollTop - 1) { // -1 because it can sometimes happen that scrollTop is maxScrollTop -1 or +1, just because clientHeight and scrollHeight are rounded values\n      // StringField is scrolled to the very bottom -> parent may scroll\n      this.$field[0].scrollTop = maxScrollTop; // Ensure it is really at the bottom (not -1px above)\n      return;\n    }\n    // Don't allow others to scroll (e.g. Scrollbar) while scrolling in the text area\n    event.stopPropagation();\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n\n    this._renderInputMasked();\n    this._renderWrapText();\n    this._renderFormat();\n    this._renderSpellCheckEnabled();\n    this._renderHasAction();\n    this._renderMaxLength();\n    this._renderSelectionTrackingEnabled();\n    // Do not render selectionStart and selectionEnd here, because that would cause the focus to\n    // be set to <textarea>s in IE. Instead, the selection is rendered when the focus has entered\n    // the field, see _render(). #168648\n    this._renderDropType();\n  }\n\n  /**\n   * Adds a click handler instead of a mouse down handler because it executes an action.\n   * @override\n   */\n  addIcon() {\n    this.$icon = fields.appendIcon(this.$container)\n      .on('click', this._onIconClick.bind(this));\n  }\n\n  /**\n   * override to ensure dropdown fields and touch mode smart fields does not have a clear icon.\n   */\n  isClearable() {\n    return super.isClearable() && !this.multilineText;\n  }\n\n  setMaxLength(maxLength) {\n    this.setProperty('maxLength', maxLength);\n  }\n\n  _renderMaxLength() {\n    // Check if \"maxLength\" attribute is supported by browser\n    if (this.$field[0].maxLength) {\n      this.$field.attr('maxlength', this.maxLength);\n    } else {\n      // Fallback for IE9\n      this.$field.on('keyup paste', function(e) {\n        setTimeout(truncate.bind(this), 0);\n      }.bind(this));\n    }\n\n    // Make sure current text does not exceed max length\n    truncate.call(this);\n    if (!this.rendering) {\n      this.parseAndSetValue(this._readDisplayText());\n    }\n\n    function truncate() {\n      var text = this.$field.val();\n      if (text.length > this.maxLength) {\n        this.$field.val(text.slice(0, this.maxLength));\n      }\n    }\n  }\n\n  setSelectionStart(selectionStart) {\n    this.setProperty('selectionStart', selectionStart);\n  }\n\n  _renderSelectionStart() {\n    if (scout.nvl(this.selectionStart, null) !== null) {\n      this.$field[0].selectionStart = this.selectionStart;\n    }\n  }\n\n  setSelectionEnd(selectionEnd) {\n    this.setProperty('selectionEnd', selectionEnd);\n  }\n\n  _renderSelectionEnd() {\n    if (scout.nvl(this.selectionEnd, null) !== null) {\n      this.$field[0].selectionEnd = this.selectionEnd;\n    }\n  }\n\n  setSelectionTrackingEnabled(selectionTrackingEnabled) {\n    this.setProperty('selectionTrackingEnabled', selectionTrackingEnabled);\n  }\n\n  _renderSelectionTrackingEnabled() {\n    this.$field\n      .off('select', this._onSelectionChangingActionHandler)\n      .off('mousedown', this._onSelectionChangingActionHandler)\n      .off('keydown', this._onSelectionChangingActionHandler)\n      .off('input', this._onSelectionChangingActionHandler);\n    if (this.selectionTrackingEnabled) {\n      this.$field.on('select', this._onSelectionChangingActionHandler)\n        .on('mousedown', this._onSelectionChangingActionHandler)\n        .on('keydown', this._onSelectionChangingActionHandler)\n        .on('input', this._onSelectionChangingActionHandler);\n    }\n  }\n\n  setInputMasked(inputMasked) {\n    this.setProperty('inputMasked', inputMasked);\n  }\n\n  _renderInputMasked() {\n    if (this.multilineText) {\n      return;\n    }\n    this.$field.attr('type', this.inputMasked ? 'password' : 'text');\n  }\n\n  _renderInputObfuscated() {\n    if (this.inputObfuscated && this.focused) {\n      // If a new display text is set (e.g. because value in model changed) and field is focused,\n      // do not display new display text but clear content (as in _onFieldFocus).\n      // Depending on order of property render, either this or _renderDisplayText is called first\n      // (inputObfuscated flag might be still in the old state in _renderDisplayText).\n      this.$field.val('');\n    }\n  }\n\n  setHasAction(hasAction) {\n    this.setProperty('hasAction', hasAction);\n  }\n\n  _renderHasAction() {\n    if (this.hasAction) {\n      if (!this.$icon) {\n        this.addIcon();\n      }\n      this.$container.addClass('has-icon');\n    } else {\n      this._removeIcon();\n      this.$container.removeClass('has-icon');\n    }\n    this.revalidateLayout();\n  }\n\n  setFormatUpper(formatUpper) {\n    if (formatUpper) {\n      this.setFormat(StringField.Format.UPPER);\n    } else {\n      this.setFormat(null);\n    }\n  }\n\n  setFormatLower(formatLower) {\n    if (formatLower) {\n      this.setFormat(StringField.Format.LOWER);\n    } else {\n      this.setFormat(null);\n    }\n  }\n\n  setFormat(format) {\n    this.setProperty('format', format);\n  }\n\n  _renderFormat() {\n    if (this.format === StringField.Format.LOWER) {\n      this.$field.css('text-transform', 'lowercase');\n    } else if (this.format === StringField.Format.UPPER) {\n      this.$field.css('text-transform', 'uppercase');\n    } else {\n      this.$field.css('text-transform', '');\n    }\n  }\n\n  setSpellCheckEnabled(spellCheckEnabled) {\n    this.setProperty('spellCheckEnabled', spellCheckEnabled);\n  }\n\n  _renderSpellCheckEnabled() {\n    if (this.spellCheckEnabled) {\n      this.$field.attr('spellcheck', 'true');\n    } else {\n      this.$field.attr('spellcheck', 'false');\n    }\n  }\n\n  /**\n   * @override\n   */\n  _renderDisplayText() {\n    if (this.inputObfuscated && this.focused) {\n      // If a new display text is set (e.g. because value in model changed) and field is focused,\n      // do not display new display text but clear content (as in _onFieldFocus).\n      // Depending on order of property render, either this or _renderInputObfuscated is called first\n      // (inputObfuscated flag might be still in the old state in this method).\n      this.$field.val('');\n      return;\n    }\n\n    var displayText = strings.nvl(this.displayText);\n    var oldDisplayText = strings.nvl(this.$field.val());\n    var oldSelection = this._getSelection();\n    super._renderDisplayText();\n    // Try to keep the current selection for cases where the old and new display\n    // text only differ because of the automatic trimming.\n    if (this.trimText && oldDisplayText !== displayText) {\n      var matches = oldDisplayText.match(StringField.TRIM_REGEXP);\n      if (matches && matches[2] === displayText) {\n        this._setSelection({\n          start: Math.max(oldSelection.start - matches[1].length, 0),\n          end: Math.min(oldSelection.end - matches[1].length, displayText.length)\n        });\n      }\n    }\n  }\n\n  insertText(text) {\n    if (!this.rendered) {\n      this._postRenderActions.push(this.insertText.bind(this, text));\n      return;\n    }\n    this._insertText(text);\n  }\n\n  _insertText(textToInsert) {\n    if (!textToInsert) {\n      return;\n    }\n\n    // Prevent insert if new length would exceed maxLength to prevent unintended deletion of characters at the end of the string\n    var selection = this._getSelection();\n    var text = this._applyTextToSelection(this.$field.val(), textToInsert, selection);\n    if (text.length > this.maxLength) {\n      this._showNotification('ui.CannotInsertTextTooLong');\n      return;\n    }\n\n    this.$field.val(text);\n    this._setSelection(selection.start + textToInsert.length);\n\n    // Make sure display text gets sent (necessary if field does not have the focus)\n    if (this.updateDisplayTextOnModify) {\n      // If flag is true, we need to send two events (First while typing=true, second = false)\n      this.acceptInput(true);\n    }\n    this.acceptInput();\n  }\n\n  _applyTextToSelection(text, textToInsert, selection) {\n    if (this.inputObfuscated) {\n      // Use empty text when input is obfuscated, otherwise text will be added to obfuscated text\n      text = '';\n    }\n    return text.slice(0, selection.start) + textToInsert + text.slice(selection.end);\n  }\n\n  setWrapText(wrapText) {\n    this.setProperty('wrapText', wrapText);\n  }\n\n  _renderWrapText() {\n    this.$field.attr('wrap', this.wrapText ? 'soft' : 'off');\n  }\n\n  setTrimText(trimText) {\n    this.setProperty('trimText', trimText);\n  }\n\n  _renderTrimText() {\n    // nop, property used in _validateDisplayText()\n  }\n\n  _renderGridData() {\n    super._renderGridData();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: !this.multilineText\n    });\n  }\n\n  _renderGridDataHints() {\n    super._renderGridDataHints();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: true\n    });\n  }\n\n  _onIconClick(event) {\n    this.acceptInput();\n    this.$field.focus();\n    this.trigger('action');\n  }\n\n  _onSelectionChangingAction(event) {\n    if (event.type === 'mousedown') {\n      this.$field.window().one('mouseup.stringfield', function() {\n        // For some reason, when clicking side an existing selection (which clears the selection), the old\n        // selection is still visible. To get around this case, we use setTimeout to handle the new selection\n        // after it really has been changed.\n        setTimeout(this._updateSelection.bind(this));\n      }.bind(this));\n    } else if (event.type === 'keydown') {\n      // Use set timeout to let the cursor move to the target position\n      setTimeout(this._updateSelection.bind(this));\n    } else {\n      this._updateSelection();\n    }\n  }\n\n  _getSelection() {\n    var start = scout.nvl(this.$field[0].selectionStart, null);\n    var end = scout.nvl(this.$field[0].selectionEnd, null);\n    if (start === null || end === null) {\n      start = 0;\n      end = 0;\n    }\n    return {\n      start: start,\n      end: end\n    };\n  }\n\n  _setSelection(selectionStart, selectionEnd) {\n    if (typeof selectionStart === 'number') {\n      selectionEnd = scout.nvl(selectionEnd, selectionStart);\n    } else if (typeof selectionStart === 'object') {\n      selectionEnd = selectionStart.end;\n      selectionStart = selectionStart.start;\n    }\n    this.$field[0].selectionStart = selectionStart;\n    this.$field[0].selectionEnd = selectionEnd;\n    this._updateSelection();\n  }\n\n  _updateSelection() {\n    var oldSelectionStart = this.selectionStart;\n    var oldSelectionEnd = this.selectionEnd;\n    this.selectionStart = this.$field[0].selectionStart;\n    this.selectionEnd = this.$field[0].selectionEnd;\n    if (this.selectionTrackingEnabled) {\n      var selectionChanged = this.selectionStart !== oldSelectionStart || this.selectionEnd !== oldSelectionEnd;\n      if (selectionChanged) {\n        this.triggerSelectionChange();\n      }\n    }\n  }\n\n  triggerSelectionChange() {\n    this.trigger('selectionChange', {\n      selectionStart: this.selectionStart,\n      selectionEnd: this.selectionEnd\n    });\n  }\n\n  _validateValue(value) {\n    if (objects.isNullOrUndefined(value)) {\n      return value;\n    }\n    value = strings.asString(value);\n    if (this.trimText) {\n      value = value.trim();\n    }\n    return super._validateValue(value);\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  _clear() {\n    super._clear();\n\n    // Disable obfuscation when user clicks on clear icon.\n    this.inputObfuscated = false;\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  _updateEmpty() {\n    this.empty = strings.empty(this.value);\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  acceptInput(whileTyping) {\n    var displayText = scout.nvl(this._readDisplayText(), '');\n    if (this.inputObfuscated && displayText !== '') {\n      // Disable obfuscation if user has typed text (on focus, field will be cleared if obfuscated, so any typed text is new text).\n      this.inputObfuscated = false;\n    }\n\n    super.acceptInput(whileTyping);\n  }\n\n  /**\n   * @override BasicField.js\n   */\n  _onFieldFocus(event) {\n    super._onFieldFocus(event);\n\n    if (this.inputObfuscated) {\n      this.$field.val('');\n\n      // Without properly setting selection start and end, cursor is not visible in IE and Firefox.\n      setTimeout(function() {\n        if (!this.rendered) {\n          return;\n        }\n        var $field = this.$field[0];\n        $field.selectionStart = 0;\n        $field.selectionEnd = 0;\n      }.bind(this));\n    }\n  }\n\n  /**\n   * Get clipboard data, different strategies for browsers.\n   * Must use a callback because this is required by Chrome's clipboard API.\n   */\n  _getClipboardData(event, doneHandler) {\n    var data = event.originalEvent.clipboardData || this.$container.window(true).clipboardData;\n    if (data) {\n      // Chrome, Firefox\n      if (data.items && data.items.length) {\n        var item = arrays.find(data.items, function(item) {\n          return item.type === 'text/plain';\n        });\n        if (item) {\n          item.getAsString(doneHandler);\n        }\n        return;\n      }\n\n      // IE, Safari\n      if (data.getData) {\n        doneHandler(data.getData('Text'));\n      }\n    }\n\n    // Can't access clipboard -> don't call done handler\n  }\n\n  _onFieldPaste(event) {\n    // must store text and selection because when the callback is executed, the clipboard content has already been applied to the input field\n    var text = this.$field.val();\n    var selection = this._getSelection();\n\n    this._getClipboardData(event, function(pastedText) {\n      if (!pastedText) {\n        return;\n      }\n\n      // Make sure the user is notified about pasted text which is cut off because of maxlength constraints\n      text = this._applyTextToSelection(text, pastedText, selection);\n      if (text.length > this.maxLength) {\n        this._showNotification('ui.PastedTextTooLong');\n      }\n    }.bind(this));\n  }\n\n  _showNotification(textKey) {\n    scout.create('DesktopNotification', {\n      parent: this,\n      severity: Status.Severity.WARNING,\n      message: this.session.text(textKey)\n    }).show();\n  }\n\n  /**\n   * @override BasicField.js\n   */\n  _checkDisplayTextChanged(displayText, whileTyping) {\n    var displayTextChanged = super._checkDisplayTextChanged(displayText, whileTyping);\n\n    // Display text hasn't changed if input is obfuscated and current display text is empty (because field will be cleared if user focuses obfuscated text field).\n    if (displayTextChanged && this.inputObfuscated && displayText === '') {\n      return false;\n    }\n\n    return displayTextChanged;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}