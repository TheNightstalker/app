{"ast":null,"code":"/*\n * Copyright (c) 2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { FocusRule, scout, Status } from '../index';\nimport $ from 'jquery';\n/**\n * Copies the given text to the clipboard. To make this work, the method must be called inside\n * a \"user action\" (i.e. mouse or keyboard event handler). For security reasons, the access to\n * the clipboard is blocked by the browser in other contexts (e.g. asynchronous callbacks).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * text                     -               The text to write to the clipboard.\n *\n * parent                   -               Widget that wants to copy the text. Recommended.\n *                                          Used to retrieve the session and the document.\n *\n * session                  -               Scout session object, used to resolve texts and access the\n *                                          focus manager. Only required when \"parent\" is not set.\n *\n * document                 -               The DOM node for the current document. Used to copy to the\n *                                          clipboard in older browsers. Only required when \"parent\" is\n *                                          not set. If this option is missing, the global \"document\"\n *                                          object is used, which might cause security exceptions when\n *                                          called from a different document (especially in IE).\n *\n * showNotification         true            If true, a desktop notification is shown when copying has\n *                                          been completed. Requires the \"parent\" option to be present.\n *                                          If this is true, the method returns null. Otherwise, it\n *                                          returns a promise that is resolved or rejected when the\n *                                          copying is complete.\n *\n * @param options\n *          mandatory, see table above for valid attributes\n * @return a promise or null, see description of \"showNotification\" option\n */\n\nexport function copyText(options) {\n  scout.assertParameter('options', options);\n\n  if (options.parent && !options.session) {\n    options.session = options.parent.session;\n  }\n\n  scout.assertProperty(options, 'session');\n\n  var promise = _copyText(options);\n\n  if (options.parent && scout.nvl(options.showNotification, true)) {\n    _showNotification(options, promise);\n\n    return null;\n  }\n\n  return promise;\n}\nexport function _copyText(options) {\n  // Modern clipboard API\n  // https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(options.text);\n  } // Fallback for browsers that don't support the modern clipboard API (IE, Safari, Chrome < 66, Firefox < 63)\n  // Create invisible textarea field and use document command \"copy\" to copy the text to the clipboard\n\n\n  var doc = options.parent && options.parent.rendered ? options.parent.document(true) : document;\n  var f = doc.createElement('textarea');\n  f.style.position = 'fixed';\n  f.style.opacity = '0.0';\n  f.value = options.text;\n  doc.body.appendChild(f); // Preserve focus\n\n  var $f = $(f);\n  options.session.focusManager.installFocusContext($f, FocusRule.AUTO);\n  f.select(); // cannot use jquery select(), because that is overridden by jquery-scout\n\n  var deferred = $.Deferred();\n\n  try {\n    var successful = doc.execCommand('copy');\n\n    if (successful) {\n      deferred.resolve();\n    } else {\n      deferred.reject();\n    }\n  } catch (err) {\n    deferred.reject(err);\n  } finally {\n    // Restore focus\n    options.session.focusManager.uninstallFocusContext($f);\n    doc.body.removeChild(f);\n  }\n\n  return deferred.promise();\n}\nexport function _showNotification(options, promise) {\n  var status = _successStatus(options.parent.session);\n\n  promise.catch(function () {\n    status = _failedStatus(options.parent.session);\n  }).then(function () {\n    showNotification(options.parent, status);\n  });\n}\nexport function _successStatus(session) {\n  return new Status({\n    message: session.text('ui.CopyToClipboardSuccessStatus'),\n    severity: Status.Severity.INFO\n  });\n}\nexport function _failedStatus(session) {\n  return new Status({\n    message: session.text('ui.CopyToClipboardFailedStatus'),\n    severity: Status.Severity.WARNING\n  });\n}\n/**\n * Shows a short desktop notification. By default, it informs the user that the content\n * has been copied to the clipboard successfully. By passing a different status, the\n * message can be changed.\n *\n * @param parent\n *          Widget that wants show the notification. Mandatory. Required for NLS texts.\n */\n\nexport function showNotification(parent, status) {\n  scout.assertParameter('parent', parent);\n  var notification = scout.create('DesktopNotification', {\n    parent: parent,\n    closable: false,\n    duration: 1234,\n    status: status || _successStatus(parent.session)\n  });\n  notification.show();\n}\nexport default {\n  copyText: copyText,\n  showNotification: showNotification\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/util/clipboard.js"],"names":["FocusRule","scout","Status","$","copyText","options","assertParameter","parent","session","assertProperty","promise","_copyText","nvl","showNotification","_showNotification","navigator","clipboard","writeText","text","doc","rendered","document","f","createElement","style","position","opacity","value","body","appendChild","$f","focusManager","installFocusContext","AUTO","select","deferred","Deferred","successful","execCommand","resolve","reject","err","uninstallFocusContext","removeChild","status","_successStatus","catch","_failedStatus","then","message","severity","Severity","INFO","WARNING","notification","create","closable","duration","show"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {FocusRule, scout, Status} from '../index';\nimport $ from 'jquery';\n\n/**\n * Copies the given text to the clipboard. To make this work, the method must be called inside\n * a \"user action\" (i.e. mouse or keyboard event handler). For security reasons, the access to\n * the clipboard is blocked by the browser in other contexts (e.g. asynchronous callbacks).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * text                     -               The text to write to the clipboard.\n *\n * parent                   -               Widget that wants to copy the text. Recommended.\n *                                          Used to retrieve the session and the document.\n *\n * session                  -               Scout session object, used to resolve texts and access the\n *                                          focus manager. Only required when \"parent\" is not set.\n *\n * document                 -               The DOM node for the current document. Used to copy to the\n *                                          clipboard in older browsers. Only required when \"parent\" is\n *                                          not set. If this option is missing, the global \"document\"\n *                                          object is used, which might cause security exceptions when\n *                                          called from a different document (especially in IE).\n *\n * showNotification         true            If true, a desktop notification is shown when copying has\n *                                          been completed. Requires the \"parent\" option to be present.\n *                                          If this is true, the method returns null. Otherwise, it\n *                                          returns a promise that is resolved or rejected when the\n *                                          copying is complete.\n *\n * @param options\n *          mandatory, see table above for valid attributes\n * @return a promise or null, see description of \"showNotification\" option\n */\nexport function copyText(options) {\n  scout.assertParameter('options', options);\n  if (options.parent && !options.session) {\n    options.session = options.parent.session;\n  }\n  scout.assertProperty(options, 'session');\n\n  var promise = _copyText(options);\n\n  if (options.parent && scout.nvl(options.showNotification, true)) {\n    _showNotification(options, promise);\n    return null;\n  }\n  return promise;\n}\n\nexport function _copyText(options) {\n  // Modern clipboard API\n  // https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(options.text);\n  }\n\n  // Fallback for browsers that don't support the modern clipboard API (IE, Safari, Chrome < 66, Firefox < 63)\n  // Create invisible textarea field and use document command \"copy\" to copy the text to the clipboard\n  var doc = (options.parent && options.parent.rendered ? options.parent.document(true) : document);\n  var f = doc.createElement('textarea');\n  f.style.position = 'fixed';\n  f.style.opacity = '0.0';\n  f.value = options.text;\n  doc.body.appendChild(f);\n  // Preserve focus\n  var $f = $(f);\n  options.session.focusManager.installFocusContext($f, FocusRule.AUTO);\n  f.select(); // cannot use jquery select(), because that is overridden by jquery-scout\n\n  var deferred = $.Deferred();\n  try {\n    var successful = doc.execCommand('copy');\n    if (successful) {\n      deferred.resolve();\n    } else {\n      deferred.reject();\n    }\n  } catch (err) {\n    deferred.reject(err);\n  } finally {\n    // Restore focus\n    options.session.focusManager.uninstallFocusContext($f);\n    doc.body.removeChild(f);\n  }\n  return deferred.promise();\n}\n\nexport function _showNotification(options, promise) {\n  var status = _successStatus(options.parent.session);\n  promise\n    .catch(function() {\n      status = _failedStatus(options.parent.session);\n    })\n    .then(function() {\n      showNotification(options.parent, status);\n    });\n}\n\nexport function _successStatus(session) {\n  return new Status({\n    message: session.text('ui.CopyToClipboardSuccessStatus'),\n    severity: Status.Severity.INFO\n  });\n}\n\nexport function _failedStatus(session) {\n  return new Status({\n    message: session.text('ui.CopyToClipboardFailedStatus'),\n    severity: Status.Severity.WARNING\n  });\n}\n\n/**\n * Shows a short desktop notification. By default, it informs the user that the content\n * has been copied to the clipboard successfully. By passing a different status, the\n * message can be changed.\n *\n * @param parent\n *          Widget that wants show the notification. Mandatory. Required for NLS texts.\n */\nexport function showNotification(parent, status) {\n  scout.assertParameter('parent', parent);\n  var notification = scout.create('DesktopNotification', {\n    parent: parent,\n    closable: false,\n    duration: 1234,\n    status: status || _successStatus(parent.session)\n  });\n  notification.show();\n}\n\nexport default {\n  copyText,\n  showNotification\n};\n"]},"metadata":{},"sourceType":"module"}