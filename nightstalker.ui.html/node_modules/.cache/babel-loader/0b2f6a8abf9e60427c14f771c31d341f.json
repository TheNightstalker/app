{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AjaxError, App, arrays, NullLogger, scout, strings } from './index';\nimport $ from 'jquery';\nimport sourcemappedStacktrace from 'sourcemapped-stacktrace';\n\nvar ErrorHandler = /*#__PURE__*/function () {\n  function ErrorHandler() {\n    _classCallCheck(this, ErrorHandler);\n\n    this.logError = true;\n    this.displayError = true;\n    this.sendError = false;\n    this.windowErrorHandler = this._onWindowError.bind(this);\n  }\n  /**\n   * Use this constant to configure whether or not all instances of the ErrorHandler should write\n   * to the console. When you've installed a console appender to log4javascript you can set the\n   * value to false, because the ErrorHandler also calls $.log.error and thus the appender has\n   * already written the message to the console. We don't want to see it twice.\n   */\n\n\n  _createClass(ErrorHandler, [{\n    key: \"init\",\n    value: function init(options) {\n      $.extend(this, options);\n    } // Signature matches the \"window.onerror\" event handler\n    // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror\n\n  }, {\n    key: \"_onWindowError\",\n    value: function _onWindowError(errorMessage, fileName, lineNumber, columnNumber, error) {\n      try {\n        if (error instanceof Error) {\n          this.handle(error).catch(function (error) {\n            console.error('Error in global JavaScript error handler', error);\n          });\n        } else {\n          var code = 'J00';\n          var log = errorMessage + ' at ' + fileName + ':' + lineNumber + '\\n(' + 'Code ' + code + ')';\n          this.handleErrorInfo({\n            code: code,\n            message: errorMessage,\n            log: log\n          });\n        }\n      } catch (err) {\n        throw new Error('Error in global JavaScript error handler: ' + err.message + ' (original error: ' + errorMessage + ' at ' + fileName + ':' + lineNumber + ')');\n      }\n    }\n    /**\n     * Handles unexpected JavaScript errors. The arguments are first analyzed and then handled.\n     *\n     * This method may be called by passing the arguments individually or as an array (or array-like object)\n     * in the first argument.\n     * Examples:\n     *   1. try { ... } catch (err) { handler.handle(err); }\n     *   2. $.get().fail(function(jqXHR, textStatus, errorThrown) { handler.handle(jqXHR, textStatus, errorThrown); }\n     *   3. $.get().fail(function(jqXHR, textStatus, errorThrown) { handler.handle(arguments); } // <-- recommended\n     *\n     * @return {Promise} the analyzed errorInfo\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle() {\n      var args = arguments;\n\n      if (args.length === 1 && args[0] && (String(args[0]) === '[object Arguments]' || Array.isArray(args[0]))) {\n        args = args[0];\n      }\n\n      return this.analyzeError.apply(this, args).then(this.handleErrorInfo.bind(this));\n    }\n    /**\n     * Returns an \"errorInfo\" object for the given arguments. The following cases are handled:\n     * 1. Error objects           (code: computed by getJsErrorCode())\n     * 2. jQuery AJAX errors      (code: 'X' + HTTP status code)\n     * 3. Nothing                 (code: 'P3')\n     * 4. Everything else         (code: 'P4')\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"analyzeError\",\n    value: function analyzeError(error) {\n      var errorInfo = {\n        code: null,\n        message: null,\n        stack: null,\n        mappedStack: null,\n        debugInfo: null,\n        log: null,\n        error: error\n      };\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return this._analyzeError.apply(this, [errorInfo].concat(args));\n    }\n  }, {\n    key: \"_analyzeError\",\n    value: function _analyzeError(errorInfo) {\n      var error = errorInfo.error; // 1. Regular errors\n\n      if (error instanceof Error) {\n        // Map stack first before analyzing the error\n        return this.mapStack(error.stack).catch(function (result) {\n          errorInfo.mappingError = result.message + '\\n' + result.error.message + '\\n' + result.error.stack;\n          return null;\n        }).then(function (mappedStack) {\n          errorInfo.mappedStack = mappedStack;\n\n          this._analyzeRegularError(errorInfo);\n\n          return errorInfo;\n        }.bind(this));\n      } // 2. Ajax errors\n\n\n      if ($.isJqXHR(error) || Array.isArray(error) && $.isJqXHR(error[0]) || error instanceof AjaxError) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        this._analyzeAjaxError.apply(this, [errorInfo].concat(args));\n\n        return $.resolvedPromise(errorInfo);\n      } // 3. No reason provided\n\n\n      if (!error) {\n        this._analyzeNoError(errorInfo);\n\n        return $.resolvedPromise(errorInfo);\n      } // 4. Everything else (e.g. when strings are thrown)\n\n\n      this._analyzeOtherError(errorInfo);\n\n      return $.resolvedPromise(errorInfo);\n    }\n  }, {\n    key: \"_analyzeRegularError\",\n    value: function _analyzeRegularError(errorInfo) {\n      var error = errorInfo.error;\n      errorInfo.code = this.getJsErrorCode(error);\n      errorInfo.message = String(error.message || error);\n\n      if (error.stack) {\n        errorInfo.stack = String(error.stack);\n      }\n\n      if (error.debugInfo) {\n        // scout extension\n        errorInfo.debugInfo = error.debugInfo;\n      }\n\n      var stack = errorInfo.mappedStack || errorInfo.stack;\n      var log = [];\n\n      if (!stack || stack.indexOf(errorInfo.message) === -1) {\n        // Only log message if not already included in stack\n        log.push(errorInfo.message);\n      }\n\n      if (stack) {\n        log.push(stack);\n      }\n\n      if (errorInfo.mappingError) {\n        log.push(errorInfo.mappingError);\n      }\n\n      if (errorInfo.debugInfo) {\n        // Error throwers may put a \"debugInfo\" string on the error object that is then added to the log string (this is a scout extension).\n        log.push('----- Additional debug information: -----\\n' + errorInfo.debugInfo);\n      }\n\n      errorInfo.log = arrays.format(log, '\\n');\n    }\n  }, {\n    key: \"_analyzeAjaxError\",\n    value: function _analyzeAjaxError(errorInfo) {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      var error = errorInfo.error;\n      var jqXHR, errorThrown, requestOptions;\n\n      if (error instanceof AjaxError) {\n        // Scout Ajax Error\n        jqXHR = error.jqXHR;\n        errorThrown = error.errorThrown;\n        requestOptions = error.requestOptions; // scout extension\n      } else {\n        // jQuery $.ajax() error (arguments of the fail handler are: jqXHR, textStatus, errorThrown, requestOptions)\n        // The first argument (jqXHR) is stored in errorInfo.error (may even be an array) -> create args array again and extract the parameters\n        args = arrays.ensure(error).concat(args);\n        jqXHR = args[0];\n        errorThrown = args[2];\n        requestOptions = args[3]; // scout extension\n      }\n\n      var ajaxRequest = requestOptions ? strings.join(' ', requestOptions.type, requestOptions.url) : '';\n      var ajaxStatus = jqXHR.status ? strings.join(' ', jqXHR.status, errorThrown) : 'Connection error';\n      errorInfo.code = 'X' + (jqXHR.status || '0');\n      errorInfo.message = 'AJAX call' + strings.box(' \"', ajaxRequest, '\"') + ' failed' + strings.box(' [', ajaxStatus, ']');\n      errorInfo.log = errorInfo.message;\n\n      if (jqXHR.responseText) {\n        errorInfo.debugInfo = 'Response text:\\n' + jqXHR.responseText;\n        errorInfo.log += '\\n' + errorInfo.debugInfo;\n      }\n    }\n  }, {\n    key: \"_analyzeOtherError\",\n    value: function _analyzeOtherError(errorInfo) {\n      var error = errorInfo.error; // Everything else (e.g. when strings are thrown)\n\n      var s = typeof error === 'string' || typeof error === 'number' ? String(error) : null;\n      errorInfo.code = 'P4';\n      errorInfo.message = s || 'Unexpected error';\n\n      if (!s) {\n        try {\n          s = JSON.stringify(error); // may throw \"cyclic object value\" error\n        } catch (err) {\n          s = String(error);\n        }\n      }\n\n      errorInfo.log = 'Unexpected error: ' + s;\n    }\n  }, {\n    key: \"_analyzeNoError\",\n    value: function _analyzeNoError(errorInfo) {\n      errorInfo.code = 'P3';\n      errorInfo.message = 'Unknown error';\n      errorInfo.log = 'Unexpected error (no reason provided)';\n    }\n  }, {\n    key: \"mapStack\",\n    value: function mapStack(stack) {\n      var deferred = $.Deferred();\n\n      try {\n        sourcemappedStacktrace.mapStackTrace(stack, function (mappedStack) {\n          deferred.resolve(arrays.format(mappedStack, '\\n'));\n        });\n      } catch (e) {\n        return $.rejectedPromise({\n          message: 'Exception mapping failed',\n          error: e\n        });\n      }\n\n      return deferred.promise();\n    }\n    /**\n     * Expects an object as returned by analyzeError() and handles it:\n     * - If the flag \"logError\" is set, the log message is printed to the console\n     * - If there is a scout session and the flag \"displayError\" is set, the error is shown in a a message box.\n     * - If there is a scout session and the flag \"sendError\" is set, the error is sent to the UI server.\n     */\n\n  }, {\n    key: \"handleErrorInfo\",\n    value: function handleErrorInfo(errorInfo) {\n      if (this.logError && errorInfo.log) {\n        $.log.error(errorInfo.log); // Note: when the null-logger is active it has already written the error to the console\n        // when the $.log.error function has been called above, so we don't have to log again here.\n\n        var writeToConsole = ErrorHandler.CONSOLE_OUTPUT;\n\n        if ($.log instanceof NullLogger) {\n          writeToConsole = false;\n        }\n\n        if (writeToConsole && window && window.console) {\n          if (window.console.error) {\n            window.console.error(errorInfo.log);\n          } else if (window.console.log) {\n            window.console.log(errorInfo.log);\n          }\n        }\n      } // Note: The error handler is installed globally and we cannot tell in which scout session the error happened.\n      // We simply use the first scout session to display the message box and log the error. This is not ideal in the\n      // multi-session-case (portlet), but currently there is no other way. Besides, this feature is not in use yet.\n\n\n      if (App.get().sessions.length > 0) {\n        var session = App.get().sessions[0];\n\n        if (this.displayError) {\n          this._showMessageBox(session, errorInfo.message, errorInfo.code, errorInfo.log);\n        }\n\n        if (this.sendError) {\n          this._sendErrorMessage(session, errorInfo.log);\n        }\n      }\n\n      return errorInfo;\n    }\n    /**\n     * Generate a \"cool looking\" error code from the JS error object, that\n     * does not reveal too much technical information, but at least indicates\n     * that a JS runtime error has occurred. (In contrast, fatal errors from\n     * the server have numeric error codes.)\n     */\n\n  }, {\n    key: \"getJsErrorCode\",\n    value: function getJsErrorCode(error) {\n      if (error) {\n        if (error.name === 'EvalError') {\n          return 'E1';\n        }\n\n        if (error.name === 'InternalError') {\n          return 'I2';\n        }\n\n        if (error.name === 'RangeError') {\n          return 'A3';\n        }\n\n        if (error.name === 'ReferenceError') {\n          return 'R4';\n        }\n\n        if (error.name === 'SyntaxError') {\n          return 'S5';\n        }\n\n        if (error.name === 'TypeError') {\n          return 'T6';\n        }\n\n        if (error.name === 'URIError') {\n          return 'U7';\n        }\n      }\n\n      return 'J0';\n    }\n  }, {\n    key: \"_showMessageBox\",\n    value: function _showMessageBox(session, errorMessage, errorCode, logMessage) {\n      var options = {\n        header: session.optText('ui.UnexpectedProblem', 'Internal UI Error'),\n        body: strings.join('\\n\\n', session.optText('ui.InternalUiErrorMsg', errorMessage, ' (' + session.optText('ui.ErrorCodeX', 'Code ' + errorCode, errorCode) + ')'), session.optText('ui.UiInconsistentMsg', '')),\n        yesButtonText: session.optText('ui.Reload', 'Reload'),\n        yesButtonAction: scout.reloadPage,\n        noButtonText: session.optText('ui.Ignore', 'Ignore'),\n        hiddenText: logMessage\n      };\n      session.showFatalMessage(options, errorCode);\n    }\n  }, {\n    key: \"_sendErrorMessage\",\n    value: function _sendErrorMessage(session, logMessage) {\n      session.sendLogRequest(logMessage);\n    }\n  }]);\n\n  return ErrorHandler;\n}();\n\n_defineProperty(ErrorHandler, \"CONSOLE_OUTPUT\", true);\n\nexport { ErrorHandler as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/ErrorHandler.js"],"names":["AjaxError","App","arrays","NullLogger","scout","strings","$","sourcemappedStacktrace","ErrorHandler","logError","displayError","sendError","windowErrorHandler","_onWindowError","bind","options","extend","errorMessage","fileName","lineNumber","columnNumber","error","Error","handle","catch","console","code","log","handleErrorInfo","message","err","args","arguments","length","String","Array","isArray","analyzeError","apply","then","errorInfo","stack","mappedStack","debugInfo","_analyzeError","mapStack","result","mappingError","_analyzeRegularError","isJqXHR","_analyzeAjaxError","resolvedPromise","_analyzeNoError","_analyzeOtherError","getJsErrorCode","indexOf","push","format","jqXHR","errorThrown","requestOptions","ensure","concat","ajaxRequest","join","type","url","ajaxStatus","status","box","responseText","s","JSON","stringify","deferred","Deferred","mapStackTrace","resolve","e","rejectedPromise","promise","writeToConsole","CONSOLE_OUTPUT","window","get","sessions","session","_showMessageBox","_sendErrorMessage","name","errorCode","logMessage","header","optText","body","yesButtonText","yesButtonAction","reloadPage","noButtonText","hiddenText","showFatalMessage","sendLogRequest"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AjaxError, App, arrays, NullLogger, scout, strings} from './index';\nimport $ from 'jquery';\nimport sourcemappedStacktrace from 'sourcemapped-stacktrace';\n\nexport default class ErrorHandler {\n\n  constructor() {\n    this.logError = true;\n    this.displayError = true;\n    this.sendError = false;\n    this.windowErrorHandler = this._onWindowError.bind(this);\n  }\n\n  /**\n   * Use this constant to configure whether or not all instances of the ErrorHandler should write\n   * to the console. When you've installed a console appender to log4javascript you can set the\n   * value to false, because the ErrorHandler also calls $.log.error and thus the appender has\n   * already written the message to the console. We don't want to see it twice.\n   */\n  static CONSOLE_OUTPUT = true;\n\n  init(options) {\n    $.extend(this, options);\n  }\n\n  // Signature matches the \"window.onerror\" event handler\n  // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror\n  _onWindowError(errorMessage, fileName, lineNumber, columnNumber, error) {\n    try {\n      if (error instanceof Error) {\n        this.handle(error)\n          .catch(function(error) {\n            console.error('Error in global JavaScript error handler', error);\n          });\n      } else {\n        var code = 'J00';\n        var log = errorMessage + ' at ' + fileName + ':' + lineNumber + '\\n(' + 'Code ' + code + ')';\n        this.handleErrorInfo({\n          code: code,\n          message: errorMessage,\n          log: log\n        });\n      }\n    } catch (err) {\n      throw new Error('Error in global JavaScript error handler: ' + err.message + ' (original error: ' + errorMessage + ' at ' + fileName + ':' + lineNumber + ')');\n    }\n  }\n\n  /**\n   * Handles unexpected JavaScript errors. The arguments are first analyzed and then handled.\n   *\n   * This method may be called by passing the arguments individually or as an array (or array-like object)\n   * in the first argument.\n   * Examples:\n   *   1. try { ... } catch (err) { handler.handle(err); }\n   *   2. $.get().fail(function(jqXHR, textStatus, errorThrown) { handler.handle(jqXHR, textStatus, errorThrown); }\n   *   3. $.get().fail(function(jqXHR, textStatus, errorThrown) { handler.handle(arguments); } // <-- recommended\n   *\n   * @return {Promise} the analyzed errorInfo\n   */\n  handle() {\n    var args = arguments;\n    if (args.length === 1 && args[0] && (String(args[0]) === '[object Arguments]' || Array.isArray(args[0]))) {\n      args = args[0];\n    }\n    return this.analyzeError.apply(this, args)\n      .then(this.handleErrorInfo.bind(this));\n  }\n\n  /**\n   * Returns an \"errorInfo\" object for the given arguments. The following cases are handled:\n   * 1. Error objects           (code: computed by getJsErrorCode())\n   * 2. jQuery AJAX errors      (code: 'X' + HTTP status code)\n   * 3. Nothing                 (code: 'P3')\n   * 4. Everything else         (code: 'P4')\n   * @returns {Promise}\n   */\n  analyzeError(error, ...args) {\n    var errorInfo = {\n      code: null,\n      message: null,\n      stack: null,\n      mappedStack: null,\n      debugInfo: null,\n      log: null,\n      error: error\n    };\n\n    return this._analyzeError(errorInfo, ...args);\n  }\n\n  _analyzeError(errorInfo, ...args) {\n    var error = errorInfo.error;\n    // 1. Regular errors\n    if (error instanceof Error) {\n      // Map stack first before analyzing the error\n      return this.mapStack(error.stack)\n        .catch(function(result) {\n          errorInfo.mappingError = result.message + '\\n' + result.error.message + '\\n' + result.error.stack;\n          return null;\n        })\n        .then(function(mappedStack) {\n          errorInfo.mappedStack = mappedStack;\n          this._analyzeRegularError(errorInfo);\n          return errorInfo;\n        }.bind(this));\n    }\n\n    // 2. Ajax errors\n    if ($.isJqXHR(error) || (Array.isArray(error) && $.isJqXHR(error[0])) || error instanceof AjaxError) {\n      this._analyzeAjaxError(errorInfo, ...args);\n      return $.resolvedPromise(errorInfo);\n    }\n\n    // 3. No reason provided\n    if (!error) {\n      this._analyzeNoError(errorInfo);\n      return $.resolvedPromise(errorInfo);\n    }\n\n    // 4. Everything else (e.g. when strings are thrown)\n    this._analyzeOtherError(errorInfo);\n    return $.resolvedPromise(errorInfo);\n  }\n\n  _analyzeRegularError(errorInfo) {\n    var error = errorInfo.error;\n    errorInfo.code = this.getJsErrorCode(error);\n    errorInfo.message = String(error.message || error);\n    if (error.stack) {\n      errorInfo.stack = String(error.stack);\n    }\n    if (error.debugInfo) { // scout extension\n      errorInfo.debugInfo = error.debugInfo;\n    }\n    var stack = errorInfo.mappedStack || errorInfo.stack;\n    var log = [];\n    if (!stack || stack.indexOf(errorInfo.message) === -1) {\n      // Only log message if not already included in stack\n      log.push(errorInfo.message);\n    }\n    if (stack) {\n      log.push(stack);\n    }\n    if (errorInfo.mappingError) {\n      log.push(errorInfo.mappingError);\n    }\n    if (errorInfo.debugInfo) {\n      // Error throwers may put a \"debugInfo\" string on the error object that is then added to the log string (this is a scout extension).\n      log.push('----- Additional debug information: -----\\n' + errorInfo.debugInfo);\n    }\n    errorInfo.log = arrays.format(log, '\\n');\n  }\n\n  _analyzeAjaxError(errorInfo, ...args) {\n    var error = errorInfo.error;\n    var jqXHR, errorThrown, requestOptions;\n    if (error instanceof AjaxError) {\n      // Scout Ajax Error\n      jqXHR = error.jqXHR;\n      errorThrown = error.errorThrown;\n      requestOptions = error.requestOptions; // scout extension\n    } else {\n      // jQuery $.ajax() error (arguments of the fail handler are: jqXHR, textStatus, errorThrown, requestOptions)\n      // The first argument (jqXHR) is stored in errorInfo.error (may even be an array) -> create args array again and extract the parameters\n      args = arrays.ensure(error).concat(args);\n      jqXHR = args[0];\n      errorThrown = args[2];\n      requestOptions = args[3]; // scout extension\n    }\n\n    var ajaxRequest = (requestOptions ? strings.join(' ', requestOptions.type, requestOptions.url) : '');\n    var ajaxStatus = (jqXHR.status ? strings.join(' ', jqXHR.status, errorThrown) : 'Connection error');\n\n    errorInfo.code = 'X' + (jqXHR.status || '0');\n    errorInfo.message = 'AJAX call' + strings.box(' \"', ajaxRequest, '\"') + ' failed' + strings.box(' [', ajaxStatus, ']');\n    errorInfo.log = errorInfo.message;\n    if (jqXHR.responseText) {\n      errorInfo.debugInfo = 'Response text:\\n' + jqXHR.responseText;\n      errorInfo.log += '\\n' + errorInfo.debugInfo;\n    }\n  }\n\n  _analyzeOtherError(errorInfo) {\n    var error = errorInfo.error;\n    // Everything else (e.g. when strings are thrown)\n    var s = (typeof error === 'string' || typeof error === 'number') ? String(error) : null;\n    errorInfo.code = 'P4';\n    errorInfo.message = s || 'Unexpected error';\n    if (!s) {\n      try {\n        s = JSON.stringify(error); // may throw \"cyclic object value\" error\n      } catch (err) {\n        s = String(error);\n      }\n    }\n    errorInfo.log = 'Unexpected error: ' + s;\n  }\n\n  _analyzeNoError(errorInfo) {\n    errorInfo.code = 'P3';\n    errorInfo.message = 'Unknown error';\n    errorInfo.log = 'Unexpected error (no reason provided)';\n  }\n\n  mapStack(stack) {\n    var deferred = $.Deferred();\n    try {\n      sourcemappedStacktrace.mapStackTrace(stack, function(mappedStack) {\n        deferred.resolve(arrays.format(mappedStack, '\\n'));\n      });\n    } catch (e) {\n      return $.rejectedPromise({message: 'Exception mapping failed', error: e});\n    }\n\n    return deferred.promise();\n  }\n\n  /**\n   * Expects an object as returned by analyzeError() and handles it:\n   * - If the flag \"logError\" is set, the log message is printed to the console\n   * - If there is a scout session and the flag \"displayError\" is set, the error is shown in a a message box.\n   * - If there is a scout session and the flag \"sendError\" is set, the error is sent to the UI server.\n   */\n  handleErrorInfo(errorInfo) {\n    if (this.logError && errorInfo.log) {\n      $.log.error(errorInfo.log);\n\n      // Note: when the null-logger is active it has already written the error to the console\n      // when the $.log.error function has been called above, so we don't have to log again here.\n      var writeToConsole = ErrorHandler.CONSOLE_OUTPUT;\n      if ($.log instanceof NullLogger) {\n        writeToConsole = false;\n      }\n      if (writeToConsole && window && window.console) {\n        if (window.console.error) {\n          window.console.error(errorInfo.log);\n        } else if (window.console.log) {\n          window.console.log(errorInfo.log);\n        }\n      }\n    }\n\n    // Note: The error handler is installed globally and we cannot tell in which scout session the error happened.\n    // We simply use the first scout session to display the message box and log the error. This is not ideal in the\n    // multi-session-case (portlet), but currently there is no other way. Besides, this feature is not in use yet.\n    if (App.get().sessions.length > 0) {\n      var session = App.get().sessions[0];\n      if (this.displayError) {\n        this._showMessageBox(session, errorInfo.message, errorInfo.code, errorInfo.log);\n      }\n      if (this.sendError) {\n        this._sendErrorMessage(session, errorInfo.log);\n      }\n    }\n    return errorInfo;\n  }\n\n  /**\n   * Generate a \"cool looking\" error code from the JS error object, that\n   * does not reveal too much technical information, but at least indicates\n   * that a JS runtime error has occurred. (In contrast, fatal errors from\n   * the server have numeric error codes.)\n   */\n  getJsErrorCode(error) {\n    if (error) {\n      if (error.name === 'EvalError') {\n        return 'E1';\n      }\n      if (error.name === 'InternalError') {\n        return 'I2';\n      }\n      if (error.name === 'RangeError') {\n        return 'A3';\n      }\n      if (error.name === 'ReferenceError') {\n        return 'R4';\n      }\n      if (error.name === 'SyntaxError') {\n        return 'S5';\n      }\n      if (error.name === 'TypeError') {\n        return 'T6';\n      }\n      if (error.name === 'URIError') {\n        return 'U7';\n      }\n    }\n    return 'J0';\n  }\n\n  _showMessageBox(session, errorMessage, errorCode, logMessage) {\n    var options = {\n      header: session.optText('ui.UnexpectedProblem', 'Internal UI Error'),\n      body: strings.join('\\n\\n',\n        session.optText('ui.InternalUiErrorMsg', errorMessage, ' (' + session.optText('ui.ErrorCodeX', 'Code ' + errorCode, errorCode) + ')'),\n        session.optText('ui.UiInconsistentMsg', '')),\n      yesButtonText: session.optText('ui.Reload', 'Reload'),\n      yesButtonAction: scout.reloadPage,\n      noButtonText: session.optText('ui.Ignore', 'Ignore'),\n      hiddenText: logMessage\n    };\n\n    session.showFatalMessage(options, errorCode);\n  }\n\n  _sendErrorMessage(session, logMessage) {\n    session.sendLogRequest(logMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}