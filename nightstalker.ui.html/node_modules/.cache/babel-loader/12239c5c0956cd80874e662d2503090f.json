{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Tile, Widget } from '../index';\n/**\n * A tile containing a widget. The widget will be rendered and its $container used as $container for the tile.\n * If the widget has gridDataHints, they will be used as gridDataHints for the tile.\n */\n\nvar WidgetTile = /*#__PURE__*/function (_Tile) {\n  _inherits(WidgetTile, _Tile);\n\n  var _super = _createSuper(WidgetTile);\n\n  function WidgetTile() {\n    var _this;\n\n    _classCallCheck(this, WidgetTile);\n\n    _this = _super.call(this); // The referenced widget which will be rendered (it is not possible to just call it 'widget' due to the naming conflict with the widget function)\n\n    _this.tileWidget = null;\n\n    _this._addWidgetProperties(['tileWidget']);\n\n    _this._widgetPropertyChangeHandler = _this._onWidgetPropertyChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(WidgetTile, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(WidgetTile.prototype), \"_init\", this).call(this, model);\n\n      this._setTileWidget(this.tileWidget);\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      if (this.tileWidget) {\n        this.tileWidget.off('propertyChange', this._widgetPropertyChangeHandler);\n      }\n\n      _get(_getPrototypeOf(WidgetTile.prototype), \"_destroy\", this).call(this);\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(WidgetTile.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderTileWidget();\n    }\n  }, {\n    key: \"_renderTileWidget\",\n    value: function _renderTileWidget() {\n      if (this.tileWidget) {\n        // render the tileWidget into the container of this tile.\n        this.tileWidget.render();\n      }\n    }\n  }, {\n    key: \"_removeTileWidget\",\n    value: function _removeTileWidget() {\n      if (this.tileWidget) {\n        this.tileWidget.remove();\n      }\n    }\n  }, {\n    key: \"_onWidgetPropertyChange\",\n    value: function _onWidgetPropertyChange(event) {\n      if (event.propertyName === 'visible') {\n        this.setVisible(event.newValue);\n      } else if (event.propertyName === 'enabled') {\n        this.setEnabled(event.newValue);\n      } else if (event.propertyName === 'disabledStyle') {\n        this.setDisabledStyle(event.newValue);\n      }\n    }\n  }, {\n    key: \"_setTileWidget\",\n    value: function _setTileWidget(tileWidget) {\n      if (this.tileWidget) {\n        this.tileWidget.off('propertyChange', this._widgetPropertyChangeHandler);\n      }\n\n      this._setProperty('tileWidget', tileWidget);\n\n      if (tileWidget) {\n        // Hide tile if tileWidget is made invisible (don't do it if visible is true to not accidentally override the visibility state)\n        if (!this.tileWidget.visible) {\n          this.setVisible(false);\n        }\n\n        if (!this.tileWidget.enabled) {\n          this.setEnabled(false);\n        }\n\n        if (this.tileWidget.disabledStyle !== Widget.DisabledStyle.DEFAULT) {\n          this.setDisabledStyle(this.tileWidget.disabledStyle);\n        }\n\n        this.tileWidget.on('propertyChange', this._widgetPropertyChangeHandler);\n      }\n\n      this.invalidateLayoutTree();\n    }\n  }]);\n\n  return WidgetTile;\n}(Tile);\n\nexport { WidgetTile as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/tile/WidgetTile.js"],"names":["Tile","Widget","WidgetTile","tileWidget","_addWidgetProperties","_widgetPropertyChangeHandler","_onWidgetPropertyChange","bind","model","_setTileWidget","off","_renderTileWidget","render","remove","event","propertyName","setVisible","newValue","setEnabled","setDisabledStyle","_setProperty","visible","enabled","disabledStyle","DisabledStyle","DEFAULT","on","invalidateLayoutTree"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,IAAR,EAAcC,MAAd,QAA2B,UAA3B;AAEA;AACA;AACA;AACA;;IACqBC,U;;;;;AAEnB,wBAAc;AAAA;;AAAA;;AACZ,8BADY,CAEZ;;AACA,UAAKC,UAAL,GAAkB,IAAlB;;AACA,UAAKC,oBAAL,CAA0B,CAAC,YAAD,CAA1B;;AACA,UAAKC,4BAAL,GAAoC,MAAKC,uBAAL,CAA6BC,IAA7B,+BAApC;AALY;AAMb;;;;0BAEKC,K,EAAO;AACX,4EAAYA,KAAZ;;AACA,WAAKC,cAAL,CAAoB,KAAKN,UAAzB;AACD;;;+BAEU;AACT,UAAI,KAAKA,UAAT,EAAqB;AACnB,aAAKA,UAAL,CAAgBO,GAAhB,CAAoB,gBAApB,EAAsC,KAAKL,4BAA3C;AACD;;AACD;AACD;;;wCAEmB;AAClB;;AACA,WAAKM,iBAAL;AACD;;;wCAEmB;AAClB,UAAI,KAAKR,UAAT,EAAqB;AACnB;AACA,aAAKA,UAAL,CAAgBS,MAAhB;AACD;AACF;;;wCAEmB;AAClB,UAAI,KAAKT,UAAT,EAAqB;AACnB,aAAKA,UAAL,CAAgBU,MAAhB;AACD;AACF;;;4CAEuBC,K,EAAO;AAC7B,UAAIA,KAAK,CAACC,YAAN,KAAuB,SAA3B,EAAsC;AACpC,aAAKC,UAAL,CAAgBF,KAAK,CAACG,QAAtB;AACD,OAFD,MAEO,IAAIH,KAAK,CAACC,YAAN,KAAuB,SAA3B,EAAsC;AAC3C,aAAKG,UAAL,CAAgBJ,KAAK,CAACG,QAAtB;AACD,OAFM,MAEA,IAAIH,KAAK,CAACC,YAAN,KAAuB,eAA3B,EAA4C;AACjD,aAAKI,gBAAL,CAAsBL,KAAK,CAACG,QAA5B;AACD;AACF;;;mCAEcd,U,EAAY;AACzB,UAAI,KAAKA,UAAT,EAAqB;AACnB,aAAKA,UAAL,CAAgBO,GAAhB,CAAoB,gBAApB,EAAsC,KAAKL,4BAA3C;AACD;;AACD,WAAKe,YAAL,CAAkB,YAAlB,EAAgCjB,UAAhC;;AACA,UAAIA,UAAJ,EAAgB;AACd;AACA,YAAI,CAAC,KAAKA,UAAL,CAAgBkB,OAArB,EAA8B;AAC5B,eAAKL,UAAL,CAAgB,KAAhB;AACD;;AACD,YAAI,CAAC,KAAKb,UAAL,CAAgBmB,OAArB,EAA8B;AAC5B,eAAKJ,UAAL,CAAgB,KAAhB;AACD;;AACD,YAAI,KAAKf,UAAL,CAAgBoB,aAAhB,KAAkCtB,MAAM,CAACuB,aAAP,CAAqBC,OAA3D,EAAoE;AAClE,eAAKN,gBAAL,CAAsB,KAAKhB,UAAL,CAAgBoB,aAAtC;AACD;;AACD,aAAKpB,UAAL,CAAgBuB,EAAhB,CAAmB,gBAAnB,EAAqC,KAAKrB,4BAA1C;AACD;;AACD,WAAKsB,oBAAL;AACD;;;;EArEqC3B,I;;SAAnBE,U","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Tile, Widget} from '../index';\n\n/**\n * A tile containing a widget. The widget will be rendered and its $container used as $container for the tile.\n * If the widget has gridDataHints, they will be used as gridDataHints for the tile.\n */\nexport default class WidgetTile extends Tile {\n\n  constructor() {\n    super();\n    // The referenced widget which will be rendered (it is not possible to just call it 'widget' due to the naming conflict with the widget function)\n    this.tileWidget = null;\n    this._addWidgetProperties(['tileWidget']);\n    this._widgetPropertyChangeHandler = this._onWidgetPropertyChange.bind(this);\n  }\n\n  _init(model) {\n    super._init(model);\n    this._setTileWidget(this.tileWidget);\n  }\n\n  _destroy() {\n    if (this.tileWidget) {\n      this.tileWidget.off('propertyChange', this._widgetPropertyChangeHandler);\n    }\n    super._destroy();\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderTileWidget();\n  }\n\n  _renderTileWidget() {\n    if (this.tileWidget) {\n      // render the tileWidget into the container of this tile.\n      this.tileWidget.render();\n    }\n  }\n\n  _removeTileWidget() {\n    if (this.tileWidget) {\n      this.tileWidget.remove();\n    }\n  }\n\n  _onWidgetPropertyChange(event) {\n    if (event.propertyName === 'visible') {\n      this.setVisible(event.newValue);\n    } else if (event.propertyName === 'enabled') {\n      this.setEnabled(event.newValue);\n    } else if (event.propertyName === 'disabledStyle') {\n      this.setDisabledStyle(event.newValue);\n    }\n  }\n\n  _setTileWidget(tileWidget) {\n    if (this.tileWidget) {\n      this.tileWidget.off('propertyChange', this._widgetPropertyChangeHandler);\n    }\n    this._setProperty('tileWidget', tileWidget);\n    if (tileWidget) {\n      // Hide tile if tileWidget is made invisible (don't do it if visible is true to not accidentally override the visibility state)\n      if (!this.tileWidget.visible) {\n        this.setVisible(false);\n      }\n      if (!this.tileWidget.enabled) {\n        this.setEnabled(false);\n      }\n      if (this.tileWidget.disabledStyle !== Widget.DisabledStyle.DEFAULT) {\n        this.setDisabledStyle(this.tileWidget.disabledStyle);\n      }\n      this.tileWidget.on('propertyChange', this._widgetPropertyChangeHandler);\n    }\n    this.invalidateLayoutTree();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}