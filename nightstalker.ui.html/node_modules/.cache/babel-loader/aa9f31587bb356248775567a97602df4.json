{"ast":null,"code":"/*\n * Copyright (c) 2010-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, objects, scout } from '../index';\nimport $ from 'jquery';\nvar modelMap = {};\nexport function init(data) {\n  modelMap = data;\n}\n/**\n * Returns a new instance of a model supplied by the given model func\n *\n * @param {Function} modelFunc A function that returns the model instance.\n * @param {Object} [parent]\n *          Optional parent that is set on the returned object.\n * @returns {Object}\n */\n\nexport function get(modelFunc, parent) {\n  var model = modelFunc();\n\n  if (parent) {\n    model.parent = parent;\n  }\n\n  return model;\n}\n/**\n * Returns a new instance of of an extension from the global modelMap.\n *\n * @param {string} extensionId\n *          The id of the extension.\n * @returns {Object}\n */\n\nexport function getExtension(extensionId) {\n  return _get(extensionId, 'extension');\n}\n/**\n * Returns a copy of the object in the global modelMap.\n *\n * @param id\n *          ID of the requested object (model or extension)\n * @param type\n *          Expected type of the requested object ('model' or 'extension')\n * @returns {Object}\n */\n\nexport function _get(id, type) {\n  var model = modelMap[id];\n\n  if (!model) {\n    throw new Error('No model map entry found for id \\'' + id + '\\'');\n  }\n\n  if (scout.nvl(model.type, 'model') !== type) {\n    throw new Error('Model \\'' + id + '\\' is not of type \\'' + type + '\\'');\n  }\n\n  return $.extend(true, {}, model);\n}\n/**\n * Extends 'parentModel' with the contents of 'extension'.\n *\n * Parent model\n * ------------\n * The 'parentModel' argument (mandatory) will be changed and returned.\n *\n * Extension\n * ---------\n * Needs a property id on the parentModel to find the extension point.\n * Syntax of the extension:\n *\n * [appendTo]\n * Adding or overriding a property:\n *   {\n *     \"id\": \"...\"\n *     \"type\": \"extension\"\n *     \"extensions\": [\n *       {\n *         \"operation\": \"appendTo\"\n *         \"target\": {\n *           \"id\": \"someObjectID\"\n *         }\n *         \"extension\": {\n *           \"propertyX\": \"xyz\"\n *         }\n *       }\n *     ]\n *   }\n *\n * [insert]\n * Adding new object to the tree:\n *   {\n *     \"id\": \"...\"\n *     \"type\": \"extension\"\n *     \"extensions\": [\n *       {\n *         \"operation\": \"insert\",\n *         \"target\": {\n *           \"id\": \"someObjectID\",\n *           \"property\": \"collectionOfsomeObject\",\n *           \"before\": \"somObjectIDInPropertyArray\"    // (alternative \"index\": 0)\n *         },\n *         \"extension\": {\n *            \"id\": \"newObjectID\",\n *            \"propertyx\": \"someThing\",\n *            \"collectiony\": [...]\n *         }\n *       }\n *     ]\n *   }\n *\n * To extend the root object directly, \"target.root: true\" can be used instead of \"target.id\".\n *\n * To group inserted elements positions with its target use:\n *   \"target\": {\n *     \"id\": \"someObjectID\",\n *     \"property\": \"collectionOfsomeObject\",\n *     \"before\": \"somObjectIDInPropertyArray\",\n *     \"groupWithTarget\": true\n *   }\n * This will group the properties together. future extensions which use \"before\": \"somObjectIDInPropertyArray\"\n * will insert new elements before the grouped items. (Works the same with \"after\".)\n *\n * The extension property can be an object or an array of objects.\n *\n * @param extension {Object|string|function|}\n *          extension to the parentModel.\n * @param parentModel {Object}\n *          object which contains id's as properties\n * @returns parentModel extended by extension\n */\n\nexport function extend(extension, parentModel) {\n  if (typeof extension === 'string') {\n    extension = getExtension(extension);\n  }\n\n  if (typeof extension === 'function') {\n    extension = extension();\n  }\n\n  scout.assertParameter('extensions', extension.extensions);\n  extension.extensions.forEach(function (extensionConfig) {\n    var operation = scout.assertParameter('operation', extensionConfig.operation);\n    var target = scout.assertParameter('target', extensionConfig.target);\n    var targetObject;\n\n    if (target.root) {\n      targetObject = parentModel;\n    } else {\n      targetObject = objects.findChildObjectByKey(parentModel, 'id', target.id);\n    }\n\n    if (!targetObject) {\n      throw new Error('Extension target not found: [extension: ' + extension.id + ', target: ' + target.id + ']');\n    }\n\n    if (operation === 'appendTo') {\n      $.extend(targetObject, extensionConfig.extension);\n    } else if (operation === 'insert') {\n      targetObject[target.property] = targetObject[target.property] || [];\n      var targetArray = targetObject[target.property];\n      var extensionArray = arrays.ensure(extensionConfig.extension);\n\n      _bindExtensionsToBeforeOrAfter(target, extensionArray);\n\n      var insertAt = _findExtensionIndex(target, targetArray);\n\n      arrays.insertAll(targetArray, extensionArray, insertAt);\n    }\n  });\n  return parentModel;\n}\n/**\n * Finds the index in the target array which is given through the target.\n *\n * @param target\n *          target information to search the index (either fixed index or a \"before\" or \"after\" tag).\n * @param targetArray\n *          array to search the extension index in.\n * @returns extension index between 0 and targetArray.length or targetArray.length if no index is found.\n */\n\nexport function _findExtensionIndex(target, targetArray) {\n  var insertAt = targetArray.length;\n\n  if (target.before) {\n    insertAt = arrays.findIndex(targetArray, function (element) {\n      return element.id === target.before || element.groupedWith === target.before;\n    });\n\n    if (insertAt === -1) {\n      insertAt = targetArray.length;\n    }\n  } else if (target.after) {\n    insertAt = arrays.findIndex(targetArray, function (element) {\n      return element.id === target.after || element.groupedWith === target.after;\n    });\n\n    if (insertAt === -1) {\n      insertAt = targetArray.length;\n    } else {\n      insertAt++;\n    }\n  }\n\n  if ($.isNumeric(target.index)) {\n    insertAt = target.index;\n  }\n\n  return insertAt;\n}\n/**\n * Adds the groupedWith tag to all given extensions.\n *\n * @param target\n *          target to bind the extensions to.\n * @param extensionsArray\n *          extensions to bind\n */\n\nexport function _bindExtensionsToBeforeOrAfter(target, extensionsArray) {\n  var beforeOrAfter = target.before || target.after;\n\n  if (beforeOrAfter && target.groupWithTarget) {\n    extensionsArray.forEach(function (element) {\n      element.groupedWith = beforeOrAfter;\n    });\n  }\n}\nexport default {\n  init: init,\n  extend: extend,\n  get: get,\n  getExtension: getExtension,\n  modelMap: modelMap\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/util/models.js"],"names":["arrays","objects","scout","$","modelMap","init","data","get","modelFunc","parent","model","getExtension","extensionId","_get","id","type","Error","nvl","extend","extension","parentModel","assertParameter","extensions","forEach","extensionConfig","operation","target","targetObject","root","findChildObjectByKey","property","targetArray","extensionArray","ensure","_bindExtensionsToBeforeOrAfter","insertAt","_findExtensionIndex","insertAll","length","before","findIndex","element","groupedWith","after","isNumeric","index","extensionsArray","beforeOrAfter","groupWithTarget"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2010-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, objects, scout} from '../index';\nimport $ from 'jquery';\n\nlet modelMap = {};\n\nexport function init(data) {\n  modelMap = data;\n}\n\n/**\n * Returns a new instance of a model supplied by the given model func\n *\n * @param {Function} modelFunc A function that returns the model instance.\n * @param {Object} [parent]\n *          Optional parent that is set on the returned object.\n * @returns {Object}\n */\nexport function get(modelFunc, parent) {\n  var model = modelFunc();\n  if (parent) {\n    model.parent = parent;\n  }\n  return model;\n}\n\n/**\n * Returns a new instance of of an extension from the global modelMap.\n *\n * @param {string} extensionId\n *          The id of the extension.\n * @returns {Object}\n */\nexport function getExtension(extensionId) {\n  return _get(extensionId, 'extension');\n}\n\n/**\n * Returns a copy of the object in the global modelMap.\n *\n * @param id\n *          ID of the requested object (model or extension)\n * @param type\n *          Expected type of the requested object ('model' or 'extension')\n * @returns {Object}\n */\n\nexport function _get(id, type) {\n  var model = modelMap[id];\n  if (!model) {\n    throw new Error('No model map entry found for id \\'' + id + '\\'');\n  }\n  if (scout.nvl(model.type, 'model') !== type) {\n    throw new Error('Model \\'' + id + '\\' is not of type \\'' + type + '\\'');\n  }\n  return $.extend(true, {}, model);\n}\n\n/**\n * Extends 'parentModel' with the contents of 'extension'.\n *\n * Parent model\n * ------------\n * The 'parentModel' argument (mandatory) will be changed and returned.\n *\n * Extension\n * ---------\n * Needs a property id on the parentModel to find the extension point.\n * Syntax of the extension:\n *\n * [appendTo]\n * Adding or overriding a property:\n *   {\n *     \"id\": \"...\"\n *     \"type\": \"extension\"\n *     \"extensions\": [\n *       {\n *         \"operation\": \"appendTo\"\n *         \"target\": {\n *           \"id\": \"someObjectID\"\n *         }\n *         \"extension\": {\n *           \"propertyX\": \"xyz\"\n *         }\n *       }\n *     ]\n *   }\n *\n * [insert]\n * Adding new object to the tree:\n *   {\n *     \"id\": \"...\"\n *     \"type\": \"extension\"\n *     \"extensions\": [\n *       {\n *         \"operation\": \"insert\",\n *         \"target\": {\n *           \"id\": \"someObjectID\",\n *           \"property\": \"collectionOfsomeObject\",\n *           \"before\": \"somObjectIDInPropertyArray\"    // (alternative \"index\": 0)\n *         },\n *         \"extension\": {\n *            \"id\": \"newObjectID\",\n *            \"propertyx\": \"someThing\",\n *            \"collectiony\": [...]\n *         }\n *       }\n *     ]\n *   }\n *\n * To extend the root object directly, \"target.root: true\" can be used instead of \"target.id\".\n *\n * To group inserted elements positions with its target use:\n *   \"target\": {\n *     \"id\": \"someObjectID\",\n *     \"property\": \"collectionOfsomeObject\",\n *     \"before\": \"somObjectIDInPropertyArray\",\n *     \"groupWithTarget\": true\n *   }\n * This will group the properties together. future extensions which use \"before\": \"somObjectIDInPropertyArray\"\n * will insert new elements before the grouped items. (Works the same with \"after\".)\n *\n * The extension property can be an object or an array of objects.\n *\n * @param extension {Object|string|function|}\n *          extension to the parentModel.\n * @param parentModel {Object}\n *          object which contains id's as properties\n * @returns parentModel extended by extension\n */\nexport function extend(extension, parentModel) {\n  if (typeof extension === 'string') {\n    extension = getExtension(extension);\n  }\n\n  if (typeof extension === 'function') {\n    extension = extension();\n  }\n\n  scout.assertParameter('extensions', extension.extensions);\n  extension.extensions.forEach(function(extensionConfig) {\n    var operation = scout.assertParameter('operation', extensionConfig.operation);\n    var target = scout.assertParameter('target', extensionConfig.target);\n\n    var targetObject;\n    if (target.root) {\n      targetObject = parentModel;\n    } else {\n      targetObject = objects.findChildObjectByKey(parentModel, 'id', target.id);\n    }\n    if (!targetObject) {\n      throw new Error('Extension target not found: [extension: ' + extension.id + ', target: ' + target.id + ']');\n    }\n\n    if (operation === 'appendTo') {\n      $.extend(targetObject, extensionConfig.extension);\n    } else if (operation === 'insert') {\n      targetObject[target.property] = targetObject[target.property] || [];\n      var targetArray = targetObject[target.property];\n      var extensionArray = arrays.ensure(extensionConfig.extension);\n      _bindExtensionsToBeforeOrAfter(target, extensionArray);\n      var insertAt = _findExtensionIndex(target, targetArray);\n      arrays.insertAll(targetArray, extensionArray, insertAt);\n    }\n  });\n\n  return parentModel;\n}\n\n/**\n * Finds the index in the target array which is given through the target.\n *\n * @param target\n *          target information to search the index (either fixed index or a \"before\" or \"after\" tag).\n * @param targetArray\n *          array to search the extension index in.\n * @returns extension index between 0 and targetArray.length or targetArray.length if no index is found.\n */\n\nexport function _findExtensionIndex(target, targetArray) {\n  var insertAt = targetArray.length;\n  if (target.before) {\n    insertAt = arrays.findIndex(targetArray, function(element) {\n      return element.id === target.before || element.groupedWith === target.before;\n    });\n    if (insertAt === -1) {\n      insertAt = targetArray.length;\n    }\n  } else if (target.after) {\n    insertAt = arrays.findIndex(targetArray, function(element) {\n      return element.id === target.after || element.groupedWith === target.after;\n    });\n    if (insertAt === -1) {\n      insertAt = targetArray.length;\n    } else {\n      insertAt++;\n    }\n  }\n  if ($.isNumeric(target.index)) {\n    insertAt = target.index;\n  }\n  return insertAt;\n}\n\n/**\n * Adds the groupedWith tag to all given extensions.\n *\n * @param target\n *          target to bind the extensions to.\n * @param extensionsArray\n *          extensions to bind\n */\n\nexport function _bindExtensionsToBeforeOrAfter(target, extensionsArray) {\n  var beforeOrAfter = target.before || target.after;\n  if (beforeOrAfter && target.groupWithTarget) {\n    extensionsArray.forEach(function(element) {\n      element.groupedWith = beforeOrAfter;\n    });\n  }\n}\n\nexport default {\n  init,\n  extend,\n  get,\n  getExtension,\n  modelMap\n};\n"]},"metadata":{},"sourceType":"module"}