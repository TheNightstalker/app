{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractTableNavigationKeyStroke, arrays, keys } from '../../index';\n\nvar TableNavigationPageUpKeyStroke = /*#__PURE__*/function (_AbstractTableNavigat) {\n  _inherits(TableNavigationPageUpKeyStroke, _AbstractTableNavigat);\n\n  var _super = _createSuper(TableNavigationPageUpKeyStroke);\n\n  function TableNavigationPageUpKeyStroke(table) {\n    var _this;\n\n    _classCallCheck(this, TableNavigationPageUpKeyStroke);\n\n    _this = _super.call(this, table);\n    _this.which = [keys.PAGE_UP];\n    _this.renderingHints.text = 'PgUp';\n\n    _this.renderingHints.$drawingArea = function ($drawingArea, event) {\n      var viewport = this._viewportInfo();\n\n      if (viewport.firstRow) {\n        return viewport.firstRow.$row;\n      }\n    }.bind(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(TableNavigationPageUpKeyStroke, [{\n    key: \"handle\",\n    value: function handle(event) {\n      var table = this.field,\n          viewport = this._viewportInfo(),\n          rows = table.visibleRows,\n          selectedRows = table.selectedRows,\n          firstSelectedRow = arrays.first(selectedRows),\n          lastActionRow = table.selectionHandler.lastActionRow,\n          lastActionRowIndex = -1,\n          newSelectedRows; // First row may be undefined if there is only one row visible in the viewport and this row is bigger than the viewport. In that case just scroll up.\n      // If it already is at the top nothing will happen\n\n\n      if (!viewport.firstRow) {\n        table.scrollPageUp();\n        viewport = this._viewportInfo();\n\n        if (!viewport.firstRow) {\n          return;\n        }\n      }\n\n      if (lastActionRow) {\n        lastActionRowIndex = rows.indexOf(lastActionRow);\n      } // last action row index maybe < 0 if row got invisible (e.g. due to filtering), or if the user has not made a selection before\n\n\n      if (lastActionRowIndex < 0) {\n        lastActionRow = firstSelectedRow;\n        lastActionRowIndex = rows.indexOf(lastActionRow);\n      } // If first row in viewport already is selected -> scroll a page up\n      // Don't do it if multiple rows are selected and user only presses page up without shift\n\n\n      if (selectedRows.length > 0 && lastActionRow === viewport.firstRow && !(selectedRows.length > 1 && !event.shiftKey)) {\n        table.scrollPageUp();\n        viewport = this._viewportInfo();\n\n        if (!viewport.firstRow) {\n          // May happen due to same reason as above -> Row will fill the whole viewport after scrolling\n          return;\n        }\n      }\n\n      if (event.shiftKey && selectedRows.length > 0) {\n        newSelectedRows = rows.slice(rows.indexOf(viewport.firstRow), lastActionRowIndex);\n        newSelectedRows = arrays.union(selectedRows, newSelectedRows);\n      } else {\n        newSelectedRows = [viewport.firstRow];\n      }\n\n      table.selectionHandler.lastActionRow = viewport.firstRow;\n      table.selectRows(newSelectedRows, true);\n    }\n  }]);\n\n  return TableNavigationPageUpKeyStroke;\n}(AbstractTableNavigationKeyStroke);\n\nexport { TableNavigationPageUpKeyStroke as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/table/keystrokes/TableNavigationPageUpKeyStroke.js"],"names":["AbstractTableNavigationKeyStroke","arrays","keys","TableNavigationPageUpKeyStroke","table","which","PAGE_UP","renderingHints","text","$drawingArea","event","viewport","_viewportInfo","firstRow","$row","bind","field","rows","visibleRows","selectedRows","firstSelectedRow","first","lastActionRow","selectionHandler","lastActionRowIndex","newSelectedRows","scrollPageUp","indexOf","length","shiftKey","slice","union","selectRows"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractTableNavigationKeyStroke, arrays, keys} from '../../index';\n\nexport default class TableNavigationPageUpKeyStroke extends AbstractTableNavigationKeyStroke {\n\n  constructor(table) {\n    super(table);\n    this.which = [keys.PAGE_UP];\n    this.renderingHints.text = 'PgUp';\n    this.renderingHints.$drawingArea = function($drawingArea, event) {\n      var viewport = this._viewportInfo();\n      if (viewport.firstRow) {\n        return viewport.firstRow.$row;\n      }\n    }.bind(this);\n  }\n\n  handle(event) {\n    var table = this.field,\n      viewport = this._viewportInfo(),\n      rows = table.visibleRows,\n      selectedRows = table.selectedRows,\n      firstSelectedRow = arrays.first(selectedRows),\n      lastActionRow = table.selectionHandler.lastActionRow,\n      lastActionRowIndex = -1,\n      newSelectedRows;\n\n    // First row may be undefined if there is only one row visible in the viewport and this row is bigger than the viewport. In that case just scroll up.\n    // If it already is at the top nothing will happen\n    if (!viewport.firstRow) {\n      table.scrollPageUp();\n      viewport = this._viewportInfo();\n      if (!viewport.firstRow) {\n        return;\n      }\n    }\n\n    if (lastActionRow) {\n      lastActionRowIndex = rows.indexOf(lastActionRow);\n    }\n    // last action row index maybe < 0 if row got invisible (e.g. due to filtering), or if the user has not made a selection before\n    if (lastActionRowIndex < 0) {\n      lastActionRow = firstSelectedRow;\n      lastActionRowIndex = rows.indexOf(lastActionRow);\n    }\n\n    // If first row in viewport already is selected -> scroll a page up\n    // Don't do it if multiple rows are selected and user only presses page up without shift\n    if (selectedRows.length > 0 && lastActionRow === viewport.firstRow && !(selectedRows.length > 1 && !event.shiftKey)) {\n      table.scrollPageUp();\n      viewport = this._viewportInfo();\n      if (!viewport.firstRow) {\n        // May happen due to same reason as above -> Row will fill the whole viewport after scrolling\n        return;\n      }\n    }\n\n    if (event.shiftKey && selectedRows.length > 0) {\n      newSelectedRows = rows.slice(rows.indexOf(viewport.firstRow), lastActionRowIndex);\n      newSelectedRows = arrays.union(selectedRows, newSelectedRows);\n    } else {\n      newSelectedRows = [viewport.firstRow];\n    }\n\n    table.selectionHandler.lastActionRow = viewport.firstRow;\n    table.selectRows(newSelectedRows, true);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}