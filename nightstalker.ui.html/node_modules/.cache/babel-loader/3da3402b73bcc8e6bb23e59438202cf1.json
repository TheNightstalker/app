{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects } from '../index';\n\nvar PropertyChangeEventFilter = /*#__PURE__*/function () {\n  function PropertyChangeEventFilter() {\n    _classCallCheck(this, PropertyChangeEventFilter);\n\n    this._filterProperties = {};\n    this._propertiesFilter = this._propertiesFilter.bind(this);\n    this.filters = [this._propertiesFilter];\n  }\n\n  _createClass(PropertyChangeEventFilter, [{\n    key: \"addFilterForProperties\",\n    value: function addFilterForProperties(properties) {\n      objects.copyProperties(properties, this._filterProperties);\n    }\n  }, {\n    key: \"addFilter\",\n    value: function addFilter(filterFunc) {\n      this.filters.push(filterFunc);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(propertyName, value) {\n      return this.filters.some(function (filterFunc) {\n        return filterFunc(propertyName, value);\n      });\n    }\n    /**\n     * Will accept the property if the name matches, it won't check the value.\n     */\n\n  }, {\n    key: \"addFilterForPropertyName\",\n    value: function addFilterForPropertyName(filteredPropertyName) {\n      this.filters.push(function (propertyName, value) {\n        return propertyName === filteredPropertyName;\n      });\n    }\n  }, {\n    key: \"_propertiesFilter\",\n    value: function _propertiesFilter(propertyName, value) {\n      if (!this._filterProperties.hasOwnProperty(propertyName)) {\n        return false;\n      }\n\n      var filterPropertyValue = this._filterProperties[propertyName];\n      return objects.equals(filterPropertyValue, value);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._filterProperties = {};\n      this.filters = [this._propertiesFilter];\n    }\n  }]);\n\n  return PropertyChangeEventFilter;\n}();\n\nexport { PropertyChangeEventFilter as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/session/PropertyChangeEventFilter.js"],"names":["objects","PropertyChangeEventFilter","_filterProperties","_propertiesFilter","bind","filters","properties","copyProperties","filterFunc","push","propertyName","value","some","filteredPropertyName","hasOwnProperty","filterPropertyValue","equals"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,OAAR,QAAsB,UAAtB;;IAEqBC,yB;AAEnB,uCAAc;AAAA;;AACZ,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,OAAL,GAAe,CAAC,KAAKF,iBAAN,CAAf;AACD;;;;2CAEsBG,U,EAAY;AACjCN,MAAAA,OAAO,CAACO,cAAR,CAAuBD,UAAvB,EAAmC,KAAKJ,iBAAxC;AACD;;;8BAESM,U,EAAY;AACpB,WAAKH,OAAL,CAAaI,IAAb,CAAkBD,UAAlB;AACD;;;2BAEME,Y,EAAcC,K,EAAO;AAC1B,aAAO,KAAKN,OAAL,CAAaO,IAAb,CAAkB,UAASJ,UAAT,EAAqB;AAC5C,eAAOA,UAAU,CAACE,YAAD,EAAeC,KAAf,CAAjB;AACD,OAFM,CAAP;AAGD;AAED;AACF;AACA;;;;6CAC2BE,oB,EAAsB;AAC7C,WAAKR,OAAL,CAAaI,IAAb,CAAkB,UAASC,YAAT,EAAuBC,KAAvB,EAA8B;AAC9C,eAAOD,YAAY,KAAKG,oBAAxB;AACD,OAFD;AAGD;;;sCAEiBH,Y,EAAcC,K,EAAO;AACrC,UAAI,CAAC,KAAKT,iBAAL,CAAuBY,cAAvB,CAAsCJ,YAAtC,CAAL,EAA0D;AACxD,eAAO,KAAP;AACD;;AACD,UAAIK,mBAAmB,GAAG,KAAKb,iBAAL,CAAuBQ,YAAvB,CAA1B;AACA,aAAOV,OAAO,CAACgB,MAAR,CAAeD,mBAAf,EAAoCJ,KAApC,CAAP;AACD;;;4BAEO;AACN,WAAKT,iBAAL,GAAyB,EAAzB;AACA,WAAKG,OAAL,GAAe,CAAC,KAAKF,iBAAN,CAAf;AACD;;;;;;SA1CkBF,yB","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects} from '../index';\n\nexport default class PropertyChangeEventFilter {\n\n  constructor() {\n    this._filterProperties = {};\n    this._propertiesFilter = this._propertiesFilter.bind(this);\n    this.filters = [this._propertiesFilter];\n  }\n\n  addFilterForProperties(properties) {\n    objects.copyProperties(properties, this._filterProperties);\n  }\n\n  addFilter(filterFunc) {\n    this.filters.push(filterFunc);\n  }\n\n  filter(propertyName, value) {\n    return this.filters.some(function(filterFunc) {\n      return filterFunc(propertyName, value);\n    });\n  }\n\n  /**\n   * Will accept the property if the name matches, it won't check the value.\n   */\n  addFilterForPropertyName(filteredPropertyName) {\n    this.filters.push(function(propertyName, value) {\n      return propertyName === filteredPropertyName;\n    });\n  }\n\n  _propertiesFilter(propertyName, value) {\n    if (!this._filterProperties.hasOwnProperty(propertyName)) {\n      return false;\n    }\n    var filterPropertyValue = this._filterProperties[propertyName];\n    return objects.equals(filterPropertyValue, value);\n  }\n\n  reset() {\n    this._filterProperties = {};\n    this.filters = [this._propertiesFilter];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}