{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension, graphics, HtmlComponent, Rectangle, SplitBox } from '../../../index';\nimport $ from 'jquery';\n\nvar SplitBoxLayout = /*#__PURE__*/function (_AbstractLayout) {\n  _inherits(SplitBoxLayout, _AbstractLayout);\n\n  var _super = _createSuper(SplitBoxLayout);\n\n  function SplitBoxLayout(splitBox) {\n    var _this;\n\n    _classCallCheck(this, SplitBoxLayout);\n\n    _this = _super.call(this);\n    _this.splitBox = splitBox;\n    return _this;\n  }\n\n  _createClass(SplitBoxLayout, [{\n    key: \"layout\",\n    value: function layout($container) {\n      // Extract components\n      var htmlContainer = HtmlComponent.get($container),\n          // = split-area\n      $splitter = $container.children('.splitter'),\n          $fields = $container.children('.form-field'),\n          htmlFirstField = HtmlComponent.optGet($fields.eq(0)),\n          htmlSecondField = HtmlComponent.optGet($fields.eq(1)),\n          // Calculate available size for split area\n      splitXAxis = this.splitBox.splitHorizontal;\n      $splitter.removeClass('hidden');\n      var firstFieldSize,\n          secondFieldSize,\n          firstFieldBounds,\n          secondFieldBounds,\n          availableSize = htmlContainer.availableSize().subtract(htmlContainer.insets()),\n          hasFirstField = htmlFirstField && htmlFirstField.isVisible(),\n          hasSecondField = htmlSecondField && htmlSecondField.isVisible(),\n          hasTwoFields = hasFirstField && hasSecondField,\n          hasOneField = !hasTwoFields && (hasFirstField || hasSecondField),\n          splitterPosition = this.splitBox.getEffectiveSplitterPosition(); // remove splitter size from available with, only when both fields are visible\n      // otherwise the splitter is invisible and requires no space.\n\n      var availableSizeForFields = new Dimension(availableSize);\n\n      if (hasTwoFields) {\n        if (splitXAxis) {\n          // \"|\"\n          availableSizeForFields.width -= htmlFirstField.margins().right;\n        } else {\n          // \"--\"\n          availableSizeForFields.height -= htmlFirstField.margins().bottom;\n        }\n      } // Default case: two fields\n\n\n      if (hasTwoFields) {\n        // Distribute available size to the two fields according to the splitter position ratio\n        firstFieldSize = new Dimension(availableSizeForFields);\n        secondFieldSize = new Dimension(availableSizeForFields);\n        this.computeInnerFieldsDimensions(splitXAxis, firstFieldSize, secondFieldSize, splitterPosition); // Calculate and set bounds (splitter and second field have to be moved)\n\n        firstFieldBounds = new Rectangle(0, 0, firstFieldSize.width, firstFieldSize.height);\n        secondFieldBounds = new Rectangle(0, 0, secondFieldSize.width, secondFieldSize.height);\n\n        if (splitXAxis) {\n          // \"|\"\n          $splitter.cssLeft(firstFieldBounds.width);\n          secondFieldBounds.x = firstFieldBounds.width + htmlFirstField.margins().right;\n        } else {\n          // \"--\"\n          $splitter.cssTop(firstFieldBounds.height);\n          secondFieldBounds.y = firstFieldBounds.height + htmlFirstField.margins().bottom;\n        }\n\n        htmlFirstField.setBounds(firstFieldBounds);\n        htmlSecondField.setBounds(secondFieldBounds);\n      } else {\n        // Special case: only one field (or none at all)\n        if (hasOneField) {\n          var singleField = hasFirstField ? htmlFirstField : htmlSecondField,\n              singleFieldSize = availableSize.subtract(singleField.margins());\n          singleField.setBounds(new Rectangle(0, 0, singleFieldSize.width, singleFieldSize.height));\n        }\n\n        $splitter.addClass('hidden');\n      } // Calculate collapse button position\n\n\n      if (this.splitBox._collapseHandle) {\n        var $collapseHandle = this.splitBox._collapseHandle.$container; // Show collapse handle, if split box has two fields which are visible (one field may be collapsed)\n\n        var collapseHandleVisible = this.splitBox.firstField && this.splitBox.firstField.visible && this.splitBox.secondField && this.splitBox.secondField.visible;\n        $collapseHandle.setVisible(collapseHandleVisible);\n        var x = null;\n\n        if (hasTwoFields) {\n          // - if 1st field is collapsible -> align button on the right side of the field (there is not enough space on the left side)\n          // - if 2nd field is collapsible -> button is always aligned on the right side using CSS\n          if (this.splitBox.collapsibleField === this.splitBox.firstField) {\n            var collapseHandleSize = graphics.size($collapseHandle);\n            x = firstFieldBounds.width - collapseHandleSize.width;\n          }\n        }\n\n        $collapseHandle.cssLeft(x);\n      }\n    }\n  }, {\n    key: \"preferredLayoutSize\",\n    value: function preferredLayoutSize($container, options) {\n      // Extract components\n      var htmlContainer = HtmlComponent.get($container),\n          // = split-area\n      $fields = $container.children('.form-field'),\n          htmlFirstField = HtmlComponent.optGet($fields.eq(0)),\n          htmlSecondField = HtmlComponent.optGet($fields.eq(1));\n      var splitXAxis = this.splitBox.splitHorizontal;\n      var splitterPosition = this.splitBox.getEffectiveSplitterPosition(); // compute width hints\n\n      var firstFieldOptions = $.extend({}, options);\n      var secondFieldOptions = $.extend({}, options);\n\n      if (options.widthHint) {\n        var firstFieldSizeHint = new Dimension(options.widthHint, 0);\n        var secondFieldSizeHint = new Dimension(options.widthHint, 0);\n        this.computeInnerFieldsDimensions(splitXAxis, firstFieldSizeHint, secondFieldSizeHint, splitterPosition);\n        firstFieldOptions.widthHint = firstFieldSizeHint.width;\n        secondFieldOptions.widthHint = secondFieldSizeHint.width;\n      } // Get preferred size of fields\n\n\n      var firstFieldSize = new Dimension(0, 0);\n\n      if (htmlFirstField) {\n        firstFieldSize = htmlFirstField.prefSize(firstFieldOptions).add(htmlFirstField.margins());\n      }\n\n      var secondFieldSize = new Dimension(0, 0);\n\n      if (htmlSecondField) {\n        secondFieldSize = htmlSecondField.prefSize(secondFieldOptions).add(htmlSecondField.margins());\n      } // Calculate prefSize\n\n\n      var prefSize;\n\n      if (splitXAxis) {\n        // \"|\"\n        prefSize = new Dimension(firstFieldSize.width + secondFieldSize.width, Math.max(firstFieldSize.height, secondFieldSize.height));\n      } else {\n        // \"--\"\n        prefSize = new Dimension(Math.max(firstFieldSize.width, secondFieldSize.width), firstFieldSize.height + secondFieldSize.height);\n      }\n\n      prefSize = prefSize.add(htmlContainer.insets());\n      return prefSize;\n    }\n    /**\n     * Distributes the available size according to the split axis and the splitter position\n     *\n     * @param splitXAxis truthy if the splitter splits vertical |, falsy if the splitter splits horizontal --\n     * @param firstFieldSize initialize with the total available space. Will be adjusted to the available size of the first field.\n     * @param secondFieldSize initialize with the total available space. Will be adjusted to the available size of the second field.\n     * @param splitterPosition effective splitter position\n     */\n\n  }, {\n    key: \"computeInnerFieldsDimensions\",\n    value: function computeInnerFieldsDimensions(splitXAxis, firstFieldSize, secondFieldSize, splitterPosition) {\n      if (splitXAxis) {\n        // \"|\"\n        if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_FIRST) {\n          // Relative first\n          firstFieldSize.width = Math.floor(firstFieldSize.width * splitterPosition);\n          secondFieldSize.width -= firstFieldSize.width;\n        } else if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_SECOND) {\n          // Relative second\n          secondFieldSize.width = Math.floor(secondFieldSize.width * splitterPosition);\n          firstFieldSize.width -= secondFieldSize.width;\n        } else {\n          // Absolute\n          splitterPosition = Math.min(splitterPosition, firstFieldSize.width);\n\n          if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_ABSOLUTE_SECOND) {\n            firstFieldSize.width = firstFieldSize.width - splitterPosition;\n            secondFieldSize.width = splitterPosition;\n          } else {\n            firstFieldSize.width = splitterPosition;\n            secondFieldSize.width = secondFieldSize.width - splitterPosition;\n          }\n        }\n      } else {\n        // \"--\"\n        if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_FIRST) {\n          // Relative first\n          firstFieldSize.height = Math.floor(firstFieldSize.height * splitterPosition);\n          secondFieldSize.height -= firstFieldSize.height;\n        } else if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_SECOND) {\n          // Relative second\n          secondFieldSize.height = Math.floor(secondFieldSize.height * splitterPosition);\n          firstFieldSize.height -= secondFieldSize.height;\n        } else {\n          // Absolute\n          splitterPosition = Math.min(splitterPosition, firstFieldSize.height);\n\n          if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_ABSOLUTE_SECOND) {\n            firstFieldSize.height = firstFieldSize.height - splitterPosition;\n            secondFieldSize.height = splitterPosition;\n          } else {\n            firstFieldSize.height = splitterPosition;\n            secondFieldSize.height = secondFieldSize.height - splitterPosition;\n          }\n        }\n      }\n    }\n  }]);\n\n  return SplitBoxLayout;\n}(AbstractLayout);\n\nexport { SplitBoxLayout as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/splitbox/SplitBoxLayout.js"],"names":["AbstractLayout","Dimension","graphics","HtmlComponent","Rectangle","SplitBox","$","SplitBoxLayout","splitBox","$container","htmlContainer","get","$splitter","children","$fields","htmlFirstField","optGet","eq","htmlSecondField","splitXAxis","splitHorizontal","removeClass","firstFieldSize","secondFieldSize","firstFieldBounds","secondFieldBounds","availableSize","subtract","insets","hasFirstField","isVisible","hasSecondField","hasTwoFields","hasOneField","splitterPosition","getEffectiveSplitterPosition","availableSizeForFields","width","margins","right","height","bottom","computeInnerFieldsDimensions","cssLeft","x","cssTop","y","setBounds","singleField","singleFieldSize","addClass","_collapseHandle","$collapseHandle","collapseHandleVisible","firstField","visible","secondField","setVisible","collapsibleField","collapseHandleSize","size","options","firstFieldOptions","extend","secondFieldOptions","widthHint","firstFieldSizeHint","secondFieldSizeHint","prefSize","add","Math","max","splitterPositionType","SPLITTER_POSITION_TYPE_RELATIVE_FIRST","floor","SPLITTER_POSITION_TYPE_RELATIVE_SECOND","min","SPLITTER_POSITION_TYPE_ABSOLUTE_SECOND"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension, graphics, HtmlComponent, Rectangle, SplitBox} from '../../../index';\nimport $ from 'jquery';\n\nexport default class SplitBoxLayout extends AbstractLayout {\n\n  constructor(splitBox) {\n    super();\n    this.splitBox = splitBox;\n  }\n\n  layout($container) {\n    // Extract components\n    var htmlContainer = HtmlComponent.get($container), // = split-area\n      $splitter = $container.children('.splitter'),\n      $fields = $container.children('.form-field'),\n      htmlFirstField = HtmlComponent.optGet($fields.eq(0)),\n      htmlSecondField = HtmlComponent.optGet($fields.eq(1)),\n      // Calculate available size for split area\n      splitXAxis = this.splitBox.splitHorizontal;\n\n    $splitter.removeClass('hidden');\n\n    var firstFieldSize, secondFieldSize, firstFieldBounds, secondFieldBounds,\n      availableSize = htmlContainer.availableSize().subtract(htmlContainer.insets()),\n      hasFirstField = (htmlFirstField && htmlFirstField.isVisible()),\n      hasSecondField = (htmlSecondField && htmlSecondField.isVisible()),\n      hasTwoFields = hasFirstField && hasSecondField,\n      hasOneField = !hasTwoFields && (hasFirstField || hasSecondField),\n      splitterPosition = this.splitBox.getEffectiveSplitterPosition();\n\n    // remove splitter size from available with, only when both fields are visible\n    // otherwise the splitter is invisible and requires no space.\n    var availableSizeForFields = new Dimension(availableSize);\n    if (hasTwoFields) {\n      if (splitXAxis) { // \"|\"\n        availableSizeForFields.width -= htmlFirstField.margins().right;\n      } else { // \"--\"\n        availableSizeForFields.height -= htmlFirstField.margins().bottom;\n      }\n    }\n\n    // Default case: two fields\n    if (hasTwoFields) {\n      // Distribute available size to the two fields according to the splitter position ratio\n      firstFieldSize = new Dimension(availableSizeForFields);\n      secondFieldSize = new Dimension(availableSizeForFields);\n      this.computeInnerFieldsDimensions(splitXAxis, firstFieldSize, secondFieldSize, splitterPosition);\n\n      // Calculate and set bounds (splitter and second field have to be moved)\n      firstFieldBounds = new Rectangle(0, 0, firstFieldSize.width, firstFieldSize.height);\n      secondFieldBounds = new Rectangle(0, 0, secondFieldSize.width, secondFieldSize.height);\n      if (splitXAxis) { // \"|\"\n        $splitter.cssLeft(firstFieldBounds.width);\n        secondFieldBounds.x = firstFieldBounds.width + htmlFirstField.margins().right;\n      } else { // \"--\"\n        $splitter.cssTop(firstFieldBounds.height);\n        secondFieldBounds.y = firstFieldBounds.height + htmlFirstField.margins().bottom;\n      }\n      htmlFirstField.setBounds(firstFieldBounds);\n      htmlSecondField.setBounds(secondFieldBounds);\n    } else {\n      // Special case: only one field (or none at all)\n      if (hasOneField) {\n        var singleField = hasFirstField ? htmlFirstField : htmlSecondField,\n          singleFieldSize = availableSize.subtract(singleField.margins());\n        singleField.setBounds(new Rectangle(0, 0, singleFieldSize.width, singleFieldSize.height));\n      }\n      $splitter.addClass('hidden');\n    }\n\n    // Calculate collapse button position\n    if (this.splitBox._collapseHandle) {\n      var $collapseHandle = this.splitBox._collapseHandle.$container;\n\n      // Show collapse handle, if split box has two fields which are visible (one field may be collapsed)\n      var collapseHandleVisible = this.splitBox.firstField && this.splitBox.firstField.visible && this.splitBox.secondField && this.splitBox.secondField.visible;\n      $collapseHandle.setVisible(collapseHandleVisible);\n\n      var x = null;\n      if (hasTwoFields) {\n        // - if 1st field is collapsible -> align button on the right side of the field (there is not enough space on the left side)\n        // - if 2nd field is collapsible -> button is always aligned on the right side using CSS\n        if (this.splitBox.collapsibleField === this.splitBox.firstField) {\n          var collapseHandleSize = graphics.size($collapseHandle);\n          x = firstFieldBounds.width - collapseHandleSize.width;\n        }\n      }\n      $collapseHandle.cssLeft(x);\n    }\n  }\n\n  preferredLayoutSize($container, options) {\n    // Extract components\n    var htmlContainer = HtmlComponent.get($container), // = split-area\n      $fields = $container.children('.form-field'),\n      htmlFirstField = HtmlComponent.optGet($fields.eq(0)),\n      htmlSecondField = HtmlComponent.optGet($fields.eq(1));\n\n    var splitXAxis = this.splitBox.splitHorizontal;\n    var splitterPosition = this.splitBox.getEffectiveSplitterPosition();\n\n    // compute width hints\n    var firstFieldOptions = $.extend({}, options);\n    var secondFieldOptions = $.extend({}, options);\n\n    if (options.widthHint) {\n      var firstFieldSizeHint = new Dimension(options.widthHint, 0);\n      var secondFieldSizeHint = new Dimension(options.widthHint, 0);\n      this.computeInnerFieldsDimensions(splitXAxis, firstFieldSizeHint, secondFieldSizeHint, splitterPosition);\n\n      firstFieldOptions.widthHint = firstFieldSizeHint.width;\n      secondFieldOptions.widthHint = secondFieldSizeHint.width;\n    }\n\n    // Get preferred size of fields\n    var firstFieldSize = new Dimension(0, 0);\n    if (htmlFirstField) {\n      firstFieldSize = htmlFirstField.prefSize(firstFieldOptions)\n        .add(htmlFirstField.margins());\n    }\n    var secondFieldSize = new Dimension(0, 0);\n    if (htmlSecondField) {\n      secondFieldSize = htmlSecondField.prefSize(secondFieldOptions)\n        .add(htmlSecondField.margins());\n    }\n\n    // Calculate prefSize\n    var prefSize;\n    if (splitXAxis) { // \"|\"\n      prefSize = new Dimension(\n        firstFieldSize.width + secondFieldSize.width,\n        Math.max(firstFieldSize.height, secondFieldSize.height)\n      );\n    } else { // \"--\"\n      prefSize = new Dimension(\n        Math.max(firstFieldSize.width, secondFieldSize.width),\n        firstFieldSize.height + secondFieldSize.height\n      );\n    }\n    prefSize = prefSize.add(htmlContainer.insets());\n\n    return prefSize;\n  }\n\n  /**\n   * Distributes the available size according to the split axis and the splitter position\n   *\n   * @param splitXAxis truthy if the splitter splits vertical |, falsy if the splitter splits horizontal --\n   * @param firstFieldSize initialize with the total available space. Will be adjusted to the available size of the first field.\n   * @param secondFieldSize initialize with the total available space. Will be adjusted to the available size of the second field.\n   * @param splitterPosition effective splitter position\n   */\n  computeInnerFieldsDimensions(splitXAxis, firstFieldSize, secondFieldSize, splitterPosition) {\n    if (splitXAxis) { // \"|\"\n      if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_FIRST) {\n        // Relative first\n        firstFieldSize.width = Math.floor(firstFieldSize.width * splitterPosition);\n        secondFieldSize.width -= firstFieldSize.width;\n      } else if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_SECOND) {\n        // Relative second\n        secondFieldSize.width = Math.floor(secondFieldSize.width * splitterPosition);\n        firstFieldSize.width -= secondFieldSize.width;\n      } else {\n        // Absolute\n        splitterPosition = Math.min(splitterPosition, firstFieldSize.width);\n        if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_ABSOLUTE_SECOND) {\n          firstFieldSize.width = firstFieldSize.width - splitterPosition;\n          secondFieldSize.width = splitterPosition;\n        } else {\n          firstFieldSize.width = splitterPosition;\n          secondFieldSize.width = secondFieldSize.width - splitterPosition;\n        }\n      }\n    } else { // \"--\"\n      if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_FIRST) {\n        // Relative first\n        firstFieldSize.height = Math.floor(firstFieldSize.height * splitterPosition);\n        secondFieldSize.height -= firstFieldSize.height;\n      } else if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_SECOND) {\n        // Relative second\n        secondFieldSize.height = Math.floor(secondFieldSize.height * splitterPosition);\n        firstFieldSize.height -= secondFieldSize.height;\n      } else {\n        // Absolute\n        splitterPosition = Math.min(splitterPosition, firstFieldSize.height);\n        if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_ABSOLUTE_SECOND) {\n          firstFieldSize.height = firstFieldSize.height - splitterPosition;\n          secondFieldSize.height = splitterPosition;\n        } else {\n          firstFieldSize.height = splitterPosition;\n          secondFieldSize.height = secondFieldSize.height - splitterPosition;\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}