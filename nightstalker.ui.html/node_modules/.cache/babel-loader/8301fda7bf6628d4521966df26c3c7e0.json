{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects, strings, TypeDescriptor } from '../index';\nimport $ from 'jquery';\n/**\n * map of \"objectType\" -> { defaultValuesObject }\n */\n\nvar _defaults = {};\n/**\n * map of \"objectType\" -> [ \"objectType\", \"parentObjectType\", ..., \"topLevelObjectType\" ]\n */\n\nvar _objectTypeHierarchyFlat = {};\nexport function bootstrap(options) {\n  options = options || {};\n  var defaultOptions = {\n    url: 'defaultValues'\n  };\n  options = $.extend({}, defaultOptions, options); // Load default value configuration from server (and cache it)\n\n  return $.ajaxJson(options.url).done(init.bind(this));\n}\nexport function init(data) {\n  // Store defaults\n  _objectTypeHierarchyFlat = {};\n  _defaults = data.defaults || {}; // Generate object type hierarchy\n\n  var objectTypeHierarchy = data.objectTypeHierarchy || {};\n\n  _generateObjectTypeHierarchyRec(objectTypeHierarchy, undefined, _objectTypeHierarchyFlat); // For all object types in the defaults that don't have a hierarchy yet, add a dummy hierarchy with one element\n\n\n  Object.keys(_defaults).forEach(function (objectType) {\n    if (!_objectTypeHierarchyFlat[objectType]) {\n      _objectTypeHierarchyFlat[objectType] = [objectType];\n    }\n  }, this);\n}\nexport function _generateObjectTypeHierarchyRec(json, currentParentObjectTypes, targetMap) {\n  if (!json) {\n    return;\n  }\n\n  if (!targetMap) {\n    throw new Error('Argument \\'targetMap\\' must not be null');\n  }\n\n  Object.keys(json).forEach(function (objectType) {\n    var newCurrentParentObjectTypes = [objectType];\n\n    if (currentParentObjectTypes) {\n      newCurrentParentObjectTypes = newCurrentParentObjectTypes.concat(currentParentObjectTypes);\n    }\n\n    if (_typeof(json[objectType]) === 'object') {\n      _generateObjectTypeHierarchyRec(json[objectType], newCurrentParentObjectTypes, targetMap);\n    } // Store current result\n\n\n    if (targetMap[objectType]) {\n      throw new Error('Object type \\'' + objectType + '\\' has ambiguous parent object types.');\n    }\n\n    targetMap[objectType] = newCurrentParentObjectTypes;\n  }, this);\n}\n/**\n * Applies the defaults for the given object type to the given object. Properties\n * are only set if they don't exist yet. The argument 'objectType' is optional\n * if the object has a property of the same name. If the object is an array,\n * the defaults are applied to each of the elements.\n */\n\nexport function applyTo(object, objectType) {\n  if (Array.isArray(object)) {\n    for (var i = 0; i < object.length; i++) {\n      applyTo(object[i], objectType);\n    }\n  } else if (_typeof(object) === 'object') {\n    objectType = objectType || object.objectType;\n\n    if (objectType) {\n      _applyToInternal(object, objectType);\n    }\n  }\n}\nexport function _applyToInternal(object, objectType) {\n  var objectTypeHierarchy = _objectTypeHierarchyFlat[objectType];\n\n  if (!objectTypeHierarchy) {\n    // Remove model variant and try again\n    var objectInfo = TypeDescriptor.parse(objectType);\n    objectType = objectInfo.objectType.toString();\n    objectTypeHierarchy = _objectTypeHierarchyFlat[objectType];\n  }\n\n  if (!objectTypeHierarchy) {\n    // Unknown type, nothing to apply\n    return;\n  }\n\n  for (var i = 0; i < objectTypeHierarchy.length; i++) {\n    var t = objectTypeHierarchy[i];\n    var defaults = _defaults[t];\n\n    _extendWithDefaults(object, defaults);\n  }\n}\nexport function _extendWithDefaults(object, defaults) {\n  if (object === undefined || defaults === undefined) {\n    return;\n  }\n\n  Object.keys(defaults).forEach(function (prop) {\n    // Support for \"pseudo\" default values: If a property name in the default values definition\n    // starts with a \"~\" character, the defined object will _not_ be applied as a default value\n    // for a non-existing property, but inner properties of that object will be applied to an\n    // existing object.\n    var realProp = prop;\n\n    if (strings.startsWith(prop, '~')) {\n      realProp = prop.substring(1);\n    } // If property does not exist, set the default value and return.\n\n\n    if (object[realProp] === undefined) {\n      object[realProp] = objects.valueCopy(defaults[realProp]);\n    } else if (objects.isPlainObject(object[realProp]) && objects.isPlainObject(defaults[prop])) {\n      // Special case: \"default objects\". If the property value is an object and default\n      // value is also an object, extend the property value instead of replacing it.\n      _extendWithDefaults(object[realProp], defaults[prop]);\n    } else if (Array.isArray(object[realProp]) && objects.isPlainObject(defaults[prop])) {\n      // Special case: \"array of default objects\": If the property value is an array of objects and\n      // the default value is an object, extend each object in the array with the default value.\n      var objectArray = object[realProp];\n\n      for (var i = 0; i < objectArray.length; i++) {\n        if (objects.isPlainObject(objectArray[i])) {\n          _extendWithDefaults(objectArray[i], defaults[prop]);\n        }\n      }\n    }\n  }, this);\n}\nexport default {\n  applyTo: applyTo,\n  bootstrap: bootstrap,\n  init: init\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/util/defaultValues.js"],"names":["objects","strings","TypeDescriptor","$","_defaults","_objectTypeHierarchyFlat","bootstrap","options","defaultOptions","url","extend","ajaxJson","done","init","bind","data","defaults","objectTypeHierarchy","_generateObjectTypeHierarchyRec","undefined","Object","keys","forEach","objectType","json","currentParentObjectTypes","targetMap","Error","newCurrentParentObjectTypes","concat","applyTo","object","Array","isArray","i","length","_applyToInternal","objectInfo","parse","toString","t","_extendWithDefaults","prop","realProp","startsWith","substring","valueCopy","isPlainObject","objectArray"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects, strings, TypeDescriptor} from '../index';\nimport $ from 'jquery';\n\n/**\n * map of \"objectType\" -> { defaultValuesObject }\n */\nlet _defaults = {};\n\n/**\n * map of \"objectType\" -> [ \"objectType\", \"parentObjectType\", ..., \"topLevelObjectType\" ]\n */\nlet _objectTypeHierarchyFlat = {};\n\nexport function bootstrap(options) {\n  options = options || {};\n  var defaultOptions = {\n    url: 'defaultValues'\n  };\n  options = $.extend({}, defaultOptions, options);\n  // Load default value configuration from server (and cache it)\n  return $.ajaxJson(options.url)\n    .done(init.bind(this));\n}\n\nexport function init(data) {\n  // Store defaults\n  _objectTypeHierarchyFlat = {};\n  _defaults = data.defaults || {};\n\n  // Generate object type hierarchy\n  var objectTypeHierarchy = data.objectTypeHierarchy || {};\n  _generateObjectTypeHierarchyRec(objectTypeHierarchy, undefined, _objectTypeHierarchyFlat);\n\n  // For all object types in the defaults that don't have a hierarchy yet, add a dummy hierarchy with one element\n  Object.keys(_defaults).forEach(function(objectType) {\n    if (!_objectTypeHierarchyFlat[objectType]) {\n      _objectTypeHierarchyFlat[objectType] = [objectType];\n    }\n  }, this);\n}\n\nexport function _generateObjectTypeHierarchyRec(json, currentParentObjectTypes, targetMap) {\n  if (!json) {\n    return;\n  }\n  if (!targetMap) {\n    throw new Error('Argument \\'targetMap\\' must not be null');\n  }\n  Object.keys(json).forEach(function(objectType) {\n    var newCurrentParentObjectTypes = [objectType];\n    if (currentParentObjectTypes) {\n      newCurrentParentObjectTypes = newCurrentParentObjectTypes.concat(currentParentObjectTypes);\n    }\n\n    if (typeof json[objectType] === 'object') {\n      _generateObjectTypeHierarchyRec(json[objectType], newCurrentParentObjectTypes, targetMap);\n    }\n\n    // Store current result\n    if (targetMap[objectType]) {\n      throw new Error('Object type \\'' + objectType + '\\' has ambiguous parent object types.');\n    }\n    targetMap[objectType] = newCurrentParentObjectTypes;\n  }, this);\n}\n\n/**\n * Applies the defaults for the given object type to the given object. Properties\n * are only set if they don't exist yet. The argument 'objectType' is optional\n * if the object has a property of the same name. If the object is an array,\n * the defaults are applied to each of the elements.\n */\nexport function applyTo(object, objectType) {\n  if (Array.isArray(object)) {\n    for (var i = 0; i < object.length; i++) {\n      applyTo(object[i], objectType);\n    }\n  } else if (typeof object === 'object') {\n    objectType = objectType || object.objectType;\n    if (objectType) {\n      _applyToInternal(object, objectType);\n    }\n  }\n}\n\nexport function _applyToInternal(object, objectType) {\n  var objectTypeHierarchy = _objectTypeHierarchyFlat[objectType];\n  if (!objectTypeHierarchy) {\n    // Remove model variant and try again\n    var objectInfo = TypeDescriptor.parse(objectType);\n    objectType = objectInfo.objectType.toString();\n    objectTypeHierarchy = _objectTypeHierarchyFlat[objectType];\n  }\n  if (!objectTypeHierarchy) {\n    // Unknown type, nothing to apply\n    return;\n  }\n  for (var i = 0; i < objectTypeHierarchy.length; i++) {\n    var t = objectTypeHierarchy[i];\n    var defaults = _defaults[t];\n    _extendWithDefaults(object, defaults);\n  }\n}\n\nexport function _extendWithDefaults(object, defaults) {\n  if (object === undefined || defaults === undefined) {\n    return;\n  }\n  Object.keys(defaults).forEach(function(prop) {\n    // Support for \"pseudo\" default values: If a property name in the default values definition\n    // starts with a \"~\" character, the defined object will _not_ be applied as a default value\n    // for a non-existing property, but inner properties of that object will be applied to an\n    // existing object.\n    var realProp = prop;\n    if (strings.startsWith(prop, '~')) {\n      realProp = prop.substring(1);\n    }\n    // If property does not exist, set the default value and return.\n    if (object[realProp] === undefined) {\n      object[realProp] = objects.valueCopy(defaults[realProp]);\n    } else if (objects.isPlainObject(object[realProp]) && objects.isPlainObject(defaults[prop])) {\n      // Special case: \"default objects\". If the property value is an object and default\n      // value is also an object, extend the property value instead of replacing it.\n      _extendWithDefaults(object[realProp], defaults[prop]);\n    } else if (Array.isArray(object[realProp]) && objects.isPlainObject(defaults[prop])) {\n      // Special case: \"array of default objects\": If the property value is an array of objects and\n      // the default value is an object, extend each object in the array with the default value.\n      var objectArray = object[realProp];\n      for (var i = 0; i < objectArray.length; i++) {\n        if (objects.isPlainObject(objectArray[i])) {\n          _extendWithDefaults(objectArray[i], defaults[prop]);\n        }\n      }\n    }\n  }, this);\n}\n\nexport default {\n  applyTo,\n  bootstrap,\n  init\n};\n"]},"metadata":{},"sourceType":"module"}