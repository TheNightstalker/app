{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { BasicFieldAdapter } from '../../../index';\n\nvar StringFieldAdapter = /*#__PURE__*/function (_BasicFieldAdapter) {\n  _inherits(StringFieldAdapter, _BasicFieldAdapter);\n\n  var _super = _createSuper(StringFieldAdapter);\n\n  function StringFieldAdapter() {\n    _classCallCheck(this, StringFieldAdapter);\n\n    return _super.call(this);\n  }\n\n  _createClass(StringFieldAdapter, [{\n    key: \"_initProperties\",\n    value: function _initProperties(model) {\n      if (model.insertText !== undefined) {\n        // ignore pseudo property initially (to prevent the function StringField#insertText() to be replaced)\n        delete model.insertText;\n      }\n    }\n  }, {\n    key: \"_syncInsertText\",\n    value: function _syncInsertText(insertText) {\n      this.widget.insertText(insertText);\n    }\n  }, {\n    key: \"_onWidgetSelectionChange\",\n    value: function _onWidgetSelectionChange(event) {\n      // send delayed to avoid a lot of requests while selecting\n      // coalesce: only send the latest selection changed event for a field\n      this._send('selectionChange', {\n        selectionStart: event.selectionStart,\n        selectionEnd: event.selectionEnd\n      }, {\n        showBusyIndicator: false,\n        delay: 500,\n        coalesce: function coalesce(previous) {\n          return this.target === previous.target && this.type === previous.type;\n        }\n      });\n    }\n  }, {\n    key: \"_onWidgetAction\",\n    value: function _onWidgetAction(event) {\n      this._send('action');\n    }\n  }, {\n    key: \"_onWidgetEvent\",\n    value: function _onWidgetEvent(event) {\n      if (event.type === 'selectionChange') {\n        this._onWidgetSelectionChange(event);\n      } else if (event.type === 'action') {\n        this._onWidgetAction(event);\n      } else {\n        _get(_getPrototypeOf(StringFieldAdapter.prototype), \"_onWidgetEvent\", this).call(this, event);\n      }\n    }\n  }]);\n\n  return StringFieldAdapter;\n}(BasicFieldAdapter);\n\nexport { StringFieldAdapter as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/stringfield/StringFieldAdapter.js"],"names":["BasicFieldAdapter","StringFieldAdapter","model","insertText","undefined","widget","event","_send","selectionStart","selectionEnd","showBusyIndicator","delay","coalesce","previous","target","type","_onWidgetSelectionChange","_onWidgetAction"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,iBAAR,QAAgC,gBAAhC;;IAEqBC,kB;;;;;AAEnB,gCAAc;AAAA;;AAAA;AAEb;;;;oCAEeC,K,EAAO;AACrB,UAAIA,KAAK,CAACC,UAAN,KAAqBC,SAAzB,EAAoC;AAClC;AACA,eAAOF,KAAK,CAACC,UAAb;AACD;AACF;;;oCAEeA,U,EAAY;AAC1B,WAAKE,MAAL,CAAYF,UAAZ,CAAuBA,UAAvB;AACD;;;6CAEwBG,K,EAAO;AAC9B;AACA;AACA,WAAKC,KAAL,CAAW,iBAAX,EAA8B;AAC5BC,QAAAA,cAAc,EAAEF,KAAK,CAACE,cADM;AAE5BC,QAAAA,YAAY,EAAEH,KAAK,CAACG;AAFQ,OAA9B,EAGG;AACDC,QAAAA,iBAAiB,EAAE,KADlB;AAEDC,QAAAA,KAAK,EAAE,GAFN;AAGDC,QAAAA,QAAQ,EAAE,kBAASC,QAAT,EAAmB;AAC3B,iBAAO,KAAKC,MAAL,KAAgBD,QAAQ,CAACC,MAAzB,IAAmC,KAAKC,IAAL,KAAcF,QAAQ,CAACE,IAAjE;AACD;AALA,OAHH;AAUD;;;oCAEeT,K,EAAO;AACrB,WAAKC,KAAL,CAAW,QAAX;AACD;;;mCAEcD,K,EAAO;AACpB,UAAIA,KAAK,CAACS,IAAN,KAAe,iBAAnB,EAAsC;AACpC,aAAKC,wBAAL,CAA8BV,KAA9B;AACD,OAFD,MAEO,IAAIA,KAAK,CAACS,IAAN,KAAe,QAAnB,EAA6B;AAClC,aAAKE,eAAL,CAAqBX,KAArB;AACD,OAFM,MAEA;AACL,+FAAqBA,KAArB;AACD;AACF;;;;EA5C6CN,iB;;SAA3BC,kB","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {BasicFieldAdapter} from '../../../index';\n\nexport default class StringFieldAdapter extends BasicFieldAdapter {\n\n  constructor() {\n    super();\n  }\n\n  _initProperties(model) {\n    if (model.insertText !== undefined) {\n      // ignore pseudo property initially (to prevent the function StringField#insertText() to be replaced)\n      delete model.insertText;\n    }\n  }\n\n  _syncInsertText(insertText) {\n    this.widget.insertText(insertText);\n  }\n\n  _onWidgetSelectionChange(event) {\n    // send delayed to avoid a lot of requests while selecting\n    // coalesce: only send the latest selection changed event for a field\n    this._send('selectionChange', {\n      selectionStart: event.selectionStart,\n      selectionEnd: event.selectionEnd\n    }, {\n      showBusyIndicator: false,\n      delay: 500,\n      coalesce: function(previous) {\n        return this.target === previous.target && this.type === previous.type;\n      }\n    });\n  }\n\n  _onWidgetAction(event) {\n    this._send('action');\n  }\n\n  _onWidgetEvent(event) {\n    if (event.type === 'selectionChange') {\n      this._onWidgetSelectionChange(event);\n    } else if (event.type === 'action') {\n      this._onWidgetAction(event);\n    } else {\n      super._onWidgetEvent(event);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}