{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Dimension, FormLayout, graphics, HtmlComponent, Insets, Point } from '../index';\n\nvar DialogLayout = /*#__PURE__*/function (_FormLayout) {\n  _inherits(DialogLayout, _FormLayout);\n\n  var _super = _createSuper(DialogLayout);\n\n  function DialogLayout(form) {\n    var _this;\n\n    _classCallCheck(this, DialogLayout);\n\n    _this = _super.call(this, form);\n    _this.autoSize = true;\n    return _this;\n  }\n\n  _createClass(DialogLayout, [{\n    key: \"layout\",\n    value: function layout($container) {\n      if (!this.autoSize) {\n        _get(_getPrototypeOf(DialogLayout.prototype), \"layout\", this).call(this, $container);\n\n        return;\n      }\n\n      var currentBounds,\n          htmlComp = this.form.htmlComp,\n          cacheBounds = this.form.readCacheBounds(),\n          dialogMargins = htmlComp.margins(),\n          windowSize = $container.windowSize();\n\n      if (cacheBounds) {\n        currentBounds = cacheBounds;\n      } else {\n        currentBounds = htmlComp.bounds();\n      }\n\n      var dialogSize = this._calcSize($container, currentBounds, cacheBounds); // Add markers to be able to style the dialog in a different way when it uses the full width or height\n\n\n      $container.toggleClass('full-width', currentBounds.x === 0 && dialogMargins.horizontal() === 0 && windowSize.width === dialogSize.width).toggleClass('full-height', currentBounds.y === 0 && dialogMargins.vertical() === 0 && windowSize.height === dialogSize.height); // Ensure the dialog can only get larger, not smaller.\n      // This prevents 'snapping' the dialog back to the calculated size when a field changes its visibility, but the user previously enlarged the dialog.\n      // This must not happen when the dialog is laid out the first time (-> when it is opened, because it has not the right size yet and may get too big)\n\n      if (htmlComp.layouted) {\n        dialogSize.width = Math.max(dialogSize.width, currentBounds.width);\n        dialogSize.height = Math.max(dialogSize.height, currentBounds.height);\n      }\n\n      graphics.setSize($container, dialogSize);\n\n      _get(_getPrototypeOf(DialogLayout.prototype), \"layout\", this).call(this, $container);\n    }\n    /**\n     * @param currentBounds\n     *          bounds as returned by the graphics.bounds() function, i.e. position is the CSS\n     *          position (top-left of \"margin box\"), dimension excludes margins\n     * @param cacheBounds\n     *          optional cached bounds (same expectations as with \"currentBounds\")\n     * @return\n     *          adjusted size excluding margins (suitable to pass to graphics.setSize())\n     */\n\n  }, {\n    key: \"_calcSize\",\n    value: function _calcSize($container, currentBounds, cacheBounds) {\n      var dialogSize,\n          htmlComp = this.form.htmlComp,\n          dialogMargins = htmlComp.margins(),\n          windowSize = $container.windowSize();\n\n      if (cacheBounds) {\n        dialogSize = cacheBounds.dimension();\n        currentBounds = cacheBounds;\n        dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins);\n\n        if (cacheBounds.dimension().width === dialogSize.width) {\n          // If width is still the same (=fitContainerInWindow did not reduce the width), then just return it. Otherwise read pref size again\n          return dialogSize;\n        }\n      } // Calculate preferred width first...\n\n\n      dialogSize = this.preferredLayoutSize($container, {\n        widthOnly: true\n      });\n      dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins); // ...then calculate the actual preferred size based on the width. This is necessary because the dialog may contain fields with wrapping content. Without a width hint the height would not be correct.\n\n      dialogSize = this.preferredLayoutSize($container, {\n        widthHint: dialogSize.width\n      }).ceil(); // always round up. If we'd round a height of 380.00005 pixel down\n      // there is not enough space to display the group-box, thus the browser would show scrollbars.\n\n      dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins);\n      return dialogSize;\n    }\n    /**\n     * Calculates the new container size and position. If the given containerSize is larger then the windowSize, the size will be adjusted.\n     *\n     * @param windowSize total size of the window\n     * @param containerPosition {Point} current CSS position of the container (top-left of the \"margin box\")\n     * @param containerSize {Dimension} preferred size of container (excluding margins)\n     * @param containerMargins {Insets} margins of the container\n     * @returns {Dimension} the new, adjusted container size (excluding margins)\n     * @static\n     */\n\n  }], [{\n    key: \"fitContainerInWindow\",\n    value: function fitContainerInWindow(windowSize, containerPosition, containerSize, containerMargins) {\n      // class .dialog may specify a margin\n      // currentBounds.y and x are 0 initially, but if size changes while dialog is open they are greater than 0\n      // This guarantees the dialog size may not exceed the document size\n      var maxWidth = windowSize.width - containerMargins.horizontal() - containerPosition.x;\n      var maxHeight = windowSize.height - containerMargins.vertical() - containerPosition.y; // Calculate new dialog size, ensuring that the dialog is not larger than container\n\n      var size = new Dimension();\n      size.width = Math.min(maxWidth, containerSize.width);\n      size.height = Math.min(maxHeight, containerSize.height);\n      return size;\n    }\n    /**\n     * Returns the coordinates to place the given container in the optical middle of the window.\n     *\n     * @param $container\n     * @returns {Point} new X,Y position of the container\n     * @static\n     */\n\n  }, {\n    key: \"positionContainerInWindow\",\n    value: function positionContainerInWindow($container) {\n      var windowSize = $container.windowSize(),\n          containerSize = HtmlComponent.get($container).size(true),\n          left = (windowSize.width - containerSize.width) / 2,\n          top = (windowSize.height - containerSize.height) / 2; // optical middle (move up 20% of distance between window and dialog)\n\n      var opticalMiddleOffset = top / 5;\n      top -= opticalMiddleOffset; // Ensure integer numbers\n\n      left = Math.floor(left);\n      top = Math.floor(top);\n      return new Point(left, top);\n    }\n  }]);\n\n  return DialogLayout;\n}(FormLayout);\n\nexport { DialogLayout as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/DialogLayout.js"],"names":["Dimension","FormLayout","graphics","HtmlComponent","Insets","Point","DialogLayout","form","autoSize","$container","currentBounds","htmlComp","cacheBounds","readCacheBounds","dialogMargins","margins","windowSize","bounds","dialogSize","_calcSize","toggleClass","x","horizontal","width","y","vertical","height","layouted","Math","max","setSize","dimension","fitContainerInWindow","point","preferredLayoutSize","widthOnly","widthHint","ceil","containerPosition","containerSize","containerMargins","maxWidth","maxHeight","size","min","get","left","top","opticalMiddleOffset","floor"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Dimension, FormLayout, graphics, HtmlComponent, Insets, Point} from '../index';\n\nexport default class DialogLayout extends FormLayout {\n\n  constructor(form) {\n    super(form);\n    this.autoSize = true;\n  }\n\n  layout($container) {\n    if (!this.autoSize) {\n      super.layout($container);\n      return;\n    }\n\n    var currentBounds,\n      htmlComp = this.form.htmlComp,\n      cacheBounds = this.form.readCacheBounds(),\n      dialogMargins = htmlComp.margins(),\n      windowSize = $container.windowSize();\n\n    if (cacheBounds) {\n      currentBounds = cacheBounds;\n    } else {\n      currentBounds = htmlComp.bounds();\n    }\n    var dialogSize = this._calcSize($container, currentBounds, cacheBounds);\n\n    // Add markers to be able to style the dialog in a different way when it uses the full width or height\n    $container\n      .toggleClass('full-width', (currentBounds.x === 0 && dialogMargins.horizontal() === 0 && windowSize.width === dialogSize.width))\n      .toggleClass('full-height', (currentBounds.y === 0 && dialogMargins.vertical() === 0 && windowSize.height === dialogSize.height));\n\n    // Ensure the dialog can only get larger, not smaller.\n    // This prevents 'snapping' the dialog back to the calculated size when a field changes its visibility, but the user previously enlarged the dialog.\n    // This must not happen when the dialog is laid out the first time (-> when it is opened, because it has not the right size yet and may get too big)\n    if (htmlComp.layouted) {\n      dialogSize.width = Math.max(dialogSize.width, currentBounds.width);\n      dialogSize.height = Math.max(dialogSize.height, currentBounds.height);\n    }\n\n    graphics.setSize($container, dialogSize);\n    super.layout($container);\n  }\n\n  /**\n   * @param currentBounds\n   *          bounds as returned by the graphics.bounds() function, i.e. position is the CSS\n   *          position (top-left of \"margin box\"), dimension excludes margins\n   * @param cacheBounds\n   *          optional cached bounds (same expectations as with \"currentBounds\")\n   * @return\n   *          adjusted size excluding margins (suitable to pass to graphics.setSize())\n   */\n  _calcSize($container, currentBounds, cacheBounds) {\n    var dialogSize,\n      htmlComp = this.form.htmlComp,\n      dialogMargins = htmlComp.margins(),\n      windowSize = $container.windowSize();\n\n    if (cacheBounds) {\n      dialogSize = cacheBounds.dimension();\n      currentBounds = cacheBounds;\n      dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins);\n      if (cacheBounds.dimension().width === dialogSize.width) {\n        // If width is still the same (=fitContainerInWindow did not reduce the width), then just return it. Otherwise read pref size again\n        return dialogSize;\n      }\n    }\n\n    // Calculate preferred width first...\n    dialogSize = this.preferredLayoutSize($container, {\n      widthOnly: true\n    });\n    dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins);\n\n    // ...then calculate the actual preferred size based on the width. This is necessary because the dialog may contain fields with wrapping content. Without a width hint the height would not be correct.\n    dialogSize = this.preferredLayoutSize($container, {\n      widthHint: dialogSize.width\n    }).ceil(); // always round up. If we'd round a height of 380.00005 pixel down\n    // there is not enough space to display the group-box, thus the browser would show scrollbars.\n\n    dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins);\n    return dialogSize;\n  }\n\n  /**\n   * Calculates the new container size and position. If the given containerSize is larger then the windowSize, the size will be adjusted.\n   *\n   * @param windowSize total size of the window\n   * @param containerPosition {Point} current CSS position of the container (top-left of the \"margin box\")\n   * @param containerSize {Dimension} preferred size of container (excluding margins)\n   * @param containerMargins {Insets} margins of the container\n   * @returns {Dimension} the new, adjusted container size (excluding margins)\n   * @static\n   */\n  static fitContainerInWindow(windowSize, containerPosition, containerSize, containerMargins) {\n    // class .dialog may specify a margin\n    // currentBounds.y and x are 0 initially, but if size changes while dialog is open they are greater than 0\n    // This guarantees the dialog size may not exceed the document size\n    var maxWidth = (windowSize.width - containerMargins.horizontal() - containerPosition.x);\n    var maxHeight = (windowSize.height - containerMargins.vertical() - containerPosition.y);\n\n    // Calculate new dialog size, ensuring that the dialog is not larger than container\n    var size = new Dimension();\n    size.width = Math.min(maxWidth, containerSize.width);\n    size.height = Math.min(maxHeight, containerSize.height);\n\n    return size;\n  }\n\n  /**\n   * Returns the coordinates to place the given container in the optical middle of the window.\n   *\n   * @param $container\n   * @returns {Point} new X,Y position of the container\n   * @static\n   */\n  static positionContainerInWindow($container) {\n    var\n      windowSize = $container.windowSize(),\n      containerSize = HtmlComponent.get($container).size(true),\n      left = (windowSize.width - containerSize.width) / 2,\n      top = (windowSize.height - containerSize.height) / 2;\n\n    // optical middle (move up 20% of distance between window and dialog)\n    var opticalMiddleOffset = (top / 5);\n    top -= opticalMiddleOffset;\n\n    // Ensure integer numbers\n    left = Math.floor(left);\n    top = Math.floor(top);\n\n    return new Point(left, top);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}