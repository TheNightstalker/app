{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2016 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Action, keys, KeyStroke } from '../index';\n/**\n * Global key stroke on the desktop that prevents 'leaking' of the F5 keystroke to the browser.\n *\n * F5 is used in Scout applications to reload table pages or invoke application-specific logic.\n * If the application does not consume the key, some browsers would reload the page. This can\n * be confusing and annoying for the user. For example when the user presses F5 on a table\n * page to reload the data, but the table is covered with a glass pane (e.g. busy indicator\n * is active because of slow network connection), the browser would simply reload the page\n * (i.e. create a new UiSession) instead of updating the data from the database.\n *\n * To reload the page, the general key stroke 'Ctrl-R' ('Command-R' on Macintosh, respectively)\n * should be used instead.\n */\n\nvar DisableBrowserF5ReloadKeyStroke = /*#__PURE__*/function (_KeyStroke) {\n  _inherits(DisableBrowserF5ReloadKeyStroke, _KeyStroke);\n\n  var _super = _createSuper(DisableBrowserF5ReloadKeyStroke);\n\n  function DisableBrowserF5ReloadKeyStroke(desktop) {\n    var _this;\n\n    _classCallCheck(this, DisableBrowserF5ReloadKeyStroke);\n\n    _this = _super.call(this);\n    _this.field = desktop;\n    _this.which = [keys.F5];\n    _this.preventDefault = true;\n    _this.keyStrokeFirePolicy = Action.KeyStrokeFirePolicy.ALWAYS; // ignore glass panes\n\n    _this.renderingHints.render = false;\n    return _this;\n  }\n  /**\n   * @override KeyStroke.js\n   */\n\n\n  _createClass(DisableBrowserF5ReloadKeyStroke, [{\n    key: \"handle\",\n    value: function handle(event) {// NOP\n    }\n  }]);\n\n  return DisableBrowserF5ReloadKeyStroke;\n}(KeyStroke);\n\nexport { DisableBrowserF5ReloadKeyStroke as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/DisableBrowserF5ReloadKeyStroke.js"],"names":["Action","keys","KeyStroke","DisableBrowserF5ReloadKeyStroke","desktop","field","which","F5","preventDefault","keyStrokeFirePolicy","KeyStrokeFirePolicy","ALWAYS","renderingHints","render","event"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAR,EAAgBC,IAAhB,EAAsBC,SAAtB,QAAsC,UAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,+B;;;;;AAEnB,2CAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB;AACA,UAAKC,KAAL,GAAaD,OAAb;AAEA,UAAKE,KAAL,GAAa,CAACL,IAAI,CAACM,EAAN,CAAb;AACA,UAAKC,cAAL,GAAsB,IAAtB;AACA,UAAKC,mBAAL,GAA2BT,MAAM,CAACU,mBAAP,CAA2BC,MAAtD,CANmB,CAM2C;;AAC9D,UAAKC,cAAL,CAAoBC,MAApB,GAA6B,KAA7B;AAPmB;AAQpB;AAED;AACF;AACA;;;;;2BACSC,K,EAAO,CACZ;AACD;;;;EAjB0DZ,S;;SAAxCC,+B","sourcesContent":["/*\n * Copyright (c) 2014-2016 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Action, keys, KeyStroke} from '../index';\n\n/**\n * Global key stroke on the desktop that prevents 'leaking' of the F5 keystroke to the browser.\n *\n * F5 is used in Scout applications to reload table pages or invoke application-specific logic.\n * If the application does not consume the key, some browsers would reload the page. This can\n * be confusing and annoying for the user. For example when the user presses F5 on a table\n * page to reload the data, but the table is covered with a glass pane (e.g. busy indicator\n * is active because of slow network connection), the browser would simply reload the page\n * (i.e. create a new UiSession) instead of updating the data from the database.\n *\n * To reload the page, the general key stroke 'Ctrl-R' ('Command-R' on Macintosh, respectively)\n * should be used instead.\n */\nexport default class DisableBrowserF5ReloadKeyStroke extends KeyStroke {\n\n  constructor(desktop) {\n    super();\n    this.field = desktop;\n\n    this.which = [keys.F5];\n    this.preventDefault = true;\n    this.keyStrokeFirePolicy = Action.KeyStrokeFirePolicy.ALWAYS; // ignore glass panes\n    this.renderingHints.render = false;\n  }\n\n  /**\n   * @override KeyStroke.js\n   */\n  handle(event) {\n    // NOP\n  }\n}\n"]},"metadata":{},"sourceType":"module"}