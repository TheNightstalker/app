{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { App, BooleanColumn, Column, defaultValues, ModelAdapter, objects, scout, Table, TableUserFilter } from '../index';\nimport $ from 'jquery';\n\nvar TableAdapter = /*#__PURE__*/function (_ModelAdapter) {\n  _inherits(TableAdapter, _ModelAdapter);\n\n  var _super = _createSuper(TableAdapter);\n\n  function TableAdapter() {\n    var _this;\n\n    _classCallCheck(this, TableAdapter);\n\n    _this = _super.call(this);\n\n    _this._addRemoteProperties(['contextColumn']);\n\n    return _this;\n  }\n\n  _createClass(TableAdapter, [{\n    key: \"_postCreateWidget\",\n    value: function _postCreateWidget() {\n      // if a newly created table has already a userfilter defined, we need to fire the filter event after creation\n      // because the original event had been fired before the eventhandler was registered.\n      if (objects.values(this.widget._filterMap).some(function (filter) {\n        return filter instanceof TableUserFilter;\n      })) {\n        this._onWidgetFilter();\n      }\n    }\n  }, {\n    key: \"_sendRowsSelected\",\n    value: function _sendRowsSelected(rowIds, debounceSend) {\n      var eventData = {\n        rowIds: rowIds\n      }; // send delayed to avoid a lot of requests while selecting\n      // coalesce: only send the latest selection changed event for a field\n\n      this._send('rowsSelected', eventData, {\n        delay: debounceSend ? 250 : 0,\n        coalesce: function coalesce(previous) {\n          return this.target === previous.target && this.type === previous.type;\n        }\n      });\n    }\n  }, {\n    key: \"_sendRowClick\",\n    value: function _sendRowClick(rowId, mouseButton, columnId) {\n      var data = {\n        rowId: rowId,\n        columnId: columnId,\n        mouseButton: mouseButton\n      };\n\n      this._send('rowClick', data);\n    }\n  }, {\n    key: \"_onWidgetRowsSelected\",\n    value: function _onWidgetRowsSelected(event) {\n      var rowIds = this.widget._rowsToIds(this.widget.selectedRows);\n\n      this._sendRowsSelected(rowIds, event.debounce);\n    }\n  }, {\n    key: \"_onWidgetRowClick\",\n    value: function _onWidgetRowClick(event) {\n      var columnId;\n\n      if (event.column !== undefined) {\n        columnId = event.column.id;\n      }\n\n      this._sendRowClick(event.row.id, event.mouseButton, columnId);\n    }\n  }, {\n    key: \"_onWidgetFilterAdded\",\n    value: function _onWidgetFilterAdded(event) {\n      var filter = event.filter;\n\n      if (filter instanceof TableUserFilter) {\n        this._send('filterAdded', filter.createFilterAddedEventData());\n      }\n    }\n  }, {\n    key: \"_onWidgetFilterRemoved\",\n    value: function _onWidgetFilterRemoved(event) {\n      var filter = event.filter;\n\n      if (filter instanceof TableUserFilter) {\n        this._send('filterRemoved', filter.createFilterRemovedEventData());\n      }\n    }\n  }, {\n    key: \"_onWidgetColumnResized\",\n    value: function _onWidgetColumnResized(event) {\n      this._sendColumnResized(event.column);\n    }\n  }, {\n    key: \"_sendColumnResized\",\n    value: function _sendColumnResized(column) {\n      if (column.fixedWidth || this.widget.autoResizeColumns) {\n        return;\n      }\n\n      var eventData = {\n        columnId: column.id,\n        width: column.width\n      }; // send delayed to avoid a lot of requests while resizing\n      // coalesce: only send the latest resize event for a column\n\n      this._send('columnResized', eventData, {\n        delay: 750,\n        coalesce: function coalesce(previous) {\n          return this.target === previous.target && this.type === previous.type && this.columnId === previous.columnId;\n        },\n        showBusyIndicator: false\n      });\n    }\n  }, {\n    key: \"_onWidgetAggregationFunctionChanged\",\n    value: function _onWidgetAggregationFunctionChanged(event) {\n      this._sendAggregationFunctionChanged(event.column);\n    }\n  }, {\n    key: \"_sendAggregationFunctionChanged\",\n    value: function _sendAggregationFunctionChanged(column) {\n      var data = {\n        columnId: column.id,\n        aggregationFunction: column.aggregationFunction\n      };\n\n      this._send('aggregationFunctionChanged', data);\n    }\n  }, {\n    key: \"_onWidgetColumnBackgroundEffectChanged\",\n    value: function _onWidgetColumnBackgroundEffectChanged(event) {\n      this._sendColumnBackgroundEffectChanged(event.column);\n    }\n  }, {\n    key: \"_sendColumnBackgroundEffectChanged\",\n    value: function _sendColumnBackgroundEffectChanged(column) {\n      var data = {\n        columnId: column.id,\n        backgroundEffect: column.backgroundEffect\n      };\n\n      this._send('columnBackgroundEffectChanged', data);\n    }\n  }, {\n    key: \"_onWidgetColumnOrganizeAction\",\n    value: function _onWidgetColumnOrganizeAction(event) {\n      this._send('columnOrganizeAction', {\n        action: event.action,\n        columnId: event.column.id\n      });\n    }\n  }, {\n    key: \"_onWidgetColumnMoved\",\n    value: function _onWidgetColumnMoved(event) {\n      var index = event.newPos;\n      this.widget.columns.forEach(function (iteratingColumn, i) {\n        // Adjust index if column is only known on the gui\n        if (iteratingColumn.guiOnly) {\n          index--;\n        }\n      });\n\n      this._sendColumnMoved(event.column, index);\n    }\n  }, {\n    key: \"_sendColumnMoved\",\n    value: function _sendColumnMoved(column, index) {\n      var data = {\n        columnId: column.id,\n        index: index\n      };\n\n      this._send('columnMoved', data);\n    }\n  }, {\n    key: \"_onWidgetPrepareCellEdit\",\n    value: function _onWidgetPrepareCellEdit(event) {\n      event.preventDefault();\n\n      this._sendPrepareCellEdit(event.row, event.column);\n    }\n  }, {\n    key: \"_sendPrepareCellEdit\",\n    value: function _sendPrepareCellEdit(row, column) {\n      var data = {\n        rowId: row.id,\n        columnId: column.id\n      };\n\n      this._send('prepareCellEdit', data);\n    }\n  }, {\n    key: \"_onWidgetCompleteCellEdit\",\n    value: function _onWidgetCompleteCellEdit(event) {\n      event.preventDefault();\n\n      this._sendCompleteCellEdit(event.field);\n    }\n  }, {\n    key: \"_sendCompleteCellEdit\",\n    value: function _sendCompleteCellEdit(field) {\n      var data = {\n        fieldId: field.id\n      };\n\n      this._send('completeCellEdit', data);\n    }\n  }, {\n    key: \"_onWidgetCancelCellEdit\",\n    value: function _onWidgetCancelCellEdit(event) {\n      event.preventDefault();\n\n      this._sendCancelCellEdit(event.field);\n    }\n  }, {\n    key: \"_sendCancelCellEdit\",\n    value: function _sendCancelCellEdit(field) {\n      var data = {\n        fieldId: field.id\n      };\n\n      this._send('cancelCellEdit', data);\n    }\n  }, {\n    key: \"_onWidgetRowsChecked\",\n    value: function _onWidgetRowsChecked(event) {\n      this._sendRowsChecked(event.rows);\n    }\n  }, {\n    key: \"_sendRowsChecked\",\n    value: function _sendRowsChecked(rows) {\n      var data = {\n        rows: []\n      };\n\n      for (var i = 0; i < rows.length; i++) {\n        data.rows.push({\n          rowId: rows[i].id,\n          checked: rows[i].checked\n        });\n      }\n\n      this._send('rowsChecked', data);\n    }\n  }, {\n    key: \"_onWidgetRowsExpanded\",\n    value: function _onWidgetRowsExpanded(event) {\n      this._sendRowsExpanded(event.rows);\n    }\n  }, {\n    key: \"_sendRowsExpanded\",\n    value: function _sendRowsExpanded(rows) {\n      var data = {\n        rows: rows.map(function (row) {\n          return {\n            rowId: row.id,\n            expanded: row.expanded\n          };\n        })\n      };\n\n      this._send('rowsExpanded', data);\n    }\n  }, {\n    key: \"_onWidgetFilter\",\n    value: function _onWidgetFilter(event) {\n      var rowIds = this.widget._rowsToIds(this.widget.filteredRows());\n\n      this._sendFilter(rowIds);\n    }\n  }, {\n    key: \"_sendFilter\",\n    value: function _sendFilter(rowIds) {\n      var eventData = {};\n\n      if (rowIds.length === this.widget.rows.length) {\n        eventData.remove = true;\n      } else {\n        eventData.rowIds = rowIds;\n      } // send with timeout, mainly for incremental load of a large table\n      // coalesce: only send last event (don't coalesce remove and 'add' events, the UI server needs both)\n\n\n      this._send('filter', eventData, {\n        delay: 250,\n        coalesce: function coalesce(previous) {\n          return this.target === previous.target && this.type === previous.type && this.remove === previous.remove;\n        },\n        showBusyIndicator: false\n      });\n    }\n  }, {\n    key: \"_onWidgetSort\",\n    value: function _onWidgetSort(event) {\n      this._send('sort', {\n        columnId: event.column.id,\n        sortAscending: event.sortAscending,\n        sortingRemoved: event.sortingRemoved,\n        multiSort: event.multiSort,\n        sortingRequested: event.sortingRequested\n      });\n    }\n  }, {\n    key: \"_onWidgetGroup\",\n    value: function _onWidgetGroup(event) {\n      this._send('group', {\n        columnId: event.column.id,\n        groupAscending: event.groupAscending,\n        groupingRemoved: event.groupingRemoved,\n        multiGroup: event.multiGroup,\n        groupingRequested: event.groupingRequested\n      });\n    }\n  }, {\n    key: \"_onWidgetRowAction\",\n    value: function _onWidgetRowAction(event) {\n      this._sendRowAction(event.row, event.column);\n    }\n  }, {\n    key: \"_sendRowAction\",\n    value: function _sendRowAction(row, column) {\n      this._send('rowAction', {\n        rowId: row.id,\n        columnId: column.id\n      });\n    }\n  }, {\n    key: \"_onWidgetAppLinkAction\",\n    value: function _onWidgetAppLinkAction(event) {\n      this._sendAppLinkAction(event.column, event.ref);\n    }\n  }, {\n    key: \"_sendAppLinkAction\",\n    value: function _sendAppLinkAction(column, ref) {\n      this._send('appLinkAction', {\n        columnId: column.id,\n        ref: ref\n      });\n    }\n  }, {\n    key: \"_sendContextColumn\",\n    value: function _sendContextColumn(contextColumn) {\n      if (contextColumn.guiOnly) {\n        contextColumn = null;\n        this.widget.contextColumn = null;\n      }\n\n      var columnId = null;\n\n      if (contextColumn) {\n        columnId = contextColumn.id;\n      }\n\n      this._send('property', {\n        contextColumn: columnId\n      });\n    }\n  }, {\n    key: \"_onWidgetReload\",\n    value: function _onWidgetReload(event) {\n      var data = {\n        reloadReason: event.reloadReason\n      };\n\n      this._send('reload', data);\n    }\n  }, {\n    key: \"_onWidgetExportToClipboard\",\n    value: function _onWidgetExportToClipboard(event) {\n      this._send('clipboardExport');\n\n      event.preventDefault();\n    }\n  }, {\n    key: \"_onWidgetEvent\",\n    value: function _onWidgetEvent(event) {\n      if (event.type === 'rowsSelected') {\n        this._onWidgetRowsSelected(event);\n      } else if (event.type === 'rowsChecked') {\n        this._onWidgetRowsChecked(event);\n      } else if (event.type === 'rowsExpanded') {\n        this._onWidgetRowsExpanded(event);\n      } else if (event.type === 'filter') {\n        this._onWidgetFilter(event);\n      } else if (event.type === 'sort') {\n        this._onWidgetSort(event);\n      } else if (event.type === 'group') {\n        this._onWidgetGroup(event);\n      } else if (event.type === 'rowClick') {\n        this._onWidgetRowClick(event);\n      } else if (event.type === 'rowAction') {\n        this._onWidgetRowAction(event);\n      } else if (event.type === 'prepareCellEdit') {\n        this._onWidgetPrepareCellEdit(event);\n      } else if (event.type === 'completeCellEdit') {\n        this._onWidgetCompleteCellEdit(event);\n      } else if (event.type === 'cancelCellEdit') {\n        this._onWidgetCancelCellEdit(event);\n      } else if (event.type === 'appLinkAction') {\n        this._onWidgetAppLinkAction(event);\n      } else if (event.type === 'clipboardExport') {\n        this._onWidgetExportToClipboard(event);\n      } else if (event.type === 'reload') {\n        this._onWidgetReload(event);\n      } else if (event.type === 'filterAdded') {\n        this._onWidgetFilterAdded(event);\n      } else if (event.type === 'filterRemoved') {\n        this._onWidgetFilterRemoved(event);\n      } else if (event.type === 'columnResized') {\n        this._onWidgetColumnResized(event);\n      } else if (event.type === 'columnMoved') {\n        this._onWidgetColumnMoved(event);\n      } else if (event.type === 'columnBackgroundEffectChanged') {\n        this._onWidgetColumnBackgroundEffectChanged(event);\n      } else if (event.type === 'columnOrganizeAction') {\n        this._onWidgetColumnOrganizeAction(event);\n      } else if (event.type === 'aggregationFunctionChanged') {\n        this._onWidgetAggregationFunctionChanged(event);\n      } else {\n        _get(_getPrototypeOf(TableAdapter.prototype), \"_onWidgetEvent\", this).call(this, event);\n      }\n    }\n  }, {\n    key: \"_onRowsInserted\",\n    value: function _onRowsInserted(rows) {\n      this.widget.insertRows(rows);\n      this._rebuildingTable = false;\n    }\n  }, {\n    key: \"_onRowsDeleted\",\n    value: function _onRowsDeleted(rowIds) {\n      var rows = this.widget._rowsByIds(rowIds);\n\n      this.addFilterForWidgetEventType('rowsSelected');\n      this.widget.deleteRows(rows);\n    }\n  }, {\n    key: \"_onAllRowsDeleted\",\n    value: function _onAllRowsDeleted() {\n      this.addFilterForWidgetEventType('rowsSelected');\n      this.widget.deleteAllRows();\n    }\n  }, {\n    key: \"_onRowsUpdated\",\n    value: function _onRowsUpdated(rows) {\n      this.widget.updateRows(rows);\n    }\n  }, {\n    key: \"_onRowsSelected\",\n    value: function _onRowsSelected(rowIds) {\n      var rows = this.widget._rowsByIds(rowIds);\n\n      this.addFilterForWidgetEventType('rowsSelected');\n      this.widget.selectRows(rows); // TODO [7.0] cgu what is this for? seems wrong here\n\n      this.widget.selectionHandler.clearLastSelectedRowMarker();\n    }\n  }, {\n    key: \"_onRowsChecked\",\n    value: function _onRowsChecked(rows) {\n      var checkedRows = [],\n          uncheckedRows = [];\n      rows.forEach(function (rowData) {\n        var row = this.widget._rowById(rowData.id);\n\n        if (rowData.checked) {\n          checkedRows.push(row);\n        } else {\n          uncheckedRows.push(row);\n        }\n      }, this);\n      this.addFilterForWidgetEventType('rowsChecked');\n      this.widget.checkRows(checkedRows, {\n        checked: true,\n        checkOnlyEnabled: false\n      });\n      this.widget.uncheckRows(uncheckedRows, {\n        checkOnlyEnabled: false\n      });\n    }\n  }, {\n    key: \"_onRowsExpanded\",\n    value: function _onRowsExpanded(rows) {\n      var expandedRows = [],\n          collapsedRows = [];\n      rows.forEach(function (rowData) {\n        var row = this.widget._rowById(rowData.id);\n\n        if (rowData.expanded) {\n          expandedRows.push(row);\n        } else {\n          collapsedRows.push(row);\n        }\n      }, this);\n      this.addFilterForWidgetEventType('rowsExpanded');\n      this.widget.expandRows(expandedRows);\n      this.widget.collapseRows(collapsedRows);\n    }\n  }, {\n    key: \"_onRowOrderChanged\",\n    value: function _onRowOrderChanged(rowIds) {\n      var rows = this.widget._rowsByIds(rowIds);\n\n      this.widget.updateRowOrder(rows);\n    }\n  }, {\n    key: \"_onColumnStructureChanged\",\n    value: function _onColumnStructureChanged(columns) {\n      this._rebuildingTable = true;\n      this.widget.updateColumnStructure(columns);\n    }\n  }, {\n    key: \"_onColumnOrderChanged\",\n    value: function _onColumnOrderChanged(columnIds) {\n      var columns = this.widget.columnsByIds(columnIds);\n      this.widget.updateColumnOrder(columns);\n    }\n  }, {\n    key: \"_onColumnHeadersUpdated\",\n    value: function _onColumnHeadersUpdated(columns) {\n      columns.forEach(function (column) {\n        defaultValues.applyTo(column);\n      });\n      this.widget.updateColumnHeaders(columns);\n\n      if (this.widget.tileMode && this.widget.tableTileGridMediator) {\n        // grouping might have changed, trigger reinit of the groups on the tileGrid in tileMode\n        this.widget.tableTileGridMediator._onTableGroup(); // removing of a group column doesn't cause a rowOrderChange, nonetheless aggregation columns might need to be removed.\n\n\n        this.widget.updateRowOrder(this.widget.rows);\n      }\n    }\n  }, {\n    key: \"_onStartCellEdit\",\n    value: function _onStartCellEdit(columnId, rowId, fieldId) {\n      var column = this.widget.columnById(columnId),\n          row = this.widget._rowById(rowId),\n          field = this.session.getOrCreateWidget(fieldId, this.widget);\n\n      this.widget.startCellEdit(column, row, field);\n    }\n  }, {\n    key: \"_onEndCellEdit\",\n    value: function _onEndCellEdit(fieldId) {\n      var field = this.session.getModelAdapter(fieldId);\n      this.widget.endCellEdit(field.widget);\n    }\n  }, {\n    key: \"_onRequestFocus\",\n    value: function _onRequestFocus() {\n      this.widget.focus();\n    }\n  }, {\n    key: \"_onScrollToSelection\",\n    value: function _onScrollToSelection() {\n      this.widget.revealSelection();\n    }\n  }, {\n    key: \"_onColumnBackgroundEffectChanged\",\n    value: function _onColumnBackgroundEffectChanged(event) {\n      event.eventParts.forEach(function (eventPart) {\n        var column = this.widget.columnById(eventPart.columnId),\n            backgroundEffect = eventPart.backgroundEffect;\n        this.addFilterForWidgetEvent(function (widgetEvent) {\n          return widgetEvent.type === 'columnBackgroundEffectChanged' && widgetEvent.column.id === column.id && widgetEvent.column.backgroundEffect === backgroundEffect;\n        });\n        column.setBackgroundEffect(backgroundEffect);\n      }, this);\n    }\n  }, {\n    key: \"_onRequestFocusInCell\",\n    value: function _onRequestFocusInCell(event) {\n      var row = this.widget._rowById(event.rowId),\n          column = this.widget.columnById(event.columnId);\n\n      this.widget.focusCell(column, row);\n    }\n  }, {\n    key: \"_onAggregationFunctionChanged\",\n    value: function _onAggregationFunctionChanged(event) {\n      var columns = [],\n          functions = [];\n      event.eventParts.forEach(function (eventPart) {\n        var func = eventPart.aggregationFunction,\n            column = this.widget.columnById(eventPart.columnId);\n        this.addFilterForWidgetEvent(function (widgetEvent) {\n          return widgetEvent.type === 'aggregationFunctionChanged' && widgetEvent.column.id === column.id && widgetEvent.column.aggregationFunction === func;\n        });\n        columns.push(column);\n        functions.push(func);\n      }, this);\n      this.widget.changeAggregations(columns, functions);\n    }\n  }, {\n    key: \"_onFiltersChanged\",\n    value: function _onFiltersChanged(filters) {\n      this.addFilterForWidgetEventType('filterAdded');\n      this.addFilterForWidgetEventType('filterRemoved');\n      this.widget.setFilters(filters); // do not refilter while the table is being rebuilt (because column.index in filter and row.cells may be inconsistent)\n\n      if (!this._rebuildingTable) {\n        this.widget.filter();\n      }\n    }\n  }, {\n    key: \"onModelAction\",\n    value: function onModelAction(event) {\n      if (event.type === 'rowsInserted') {\n        this._onRowsInserted(event.rows);\n      } else if (event.type === 'rowsDeleted') {\n        this._onRowsDeleted(event.rowIds);\n      } else if (event.type === 'allRowsDeleted') {\n        this._onAllRowsDeleted();\n      } else if (event.type === 'rowsSelected') {\n        this._onRowsSelected(event.rowIds);\n      } else if (event.type === 'rowOrderChanged') {\n        this._onRowOrderChanged(event.rowIds);\n      } else if (event.type === 'rowsUpdated') {\n        this._onRowsUpdated(event.rows);\n      } else if (event.type === 'filtersChanged') {\n        this._onFiltersChanged(event.filters);\n      } else if (event.type === 'rowsChecked') {\n        this._onRowsChecked(event.rows);\n      } else if (event.type === 'rowsExpanded') {\n        this._onRowsExpanded(event.rows);\n      } else if (event.type === 'columnStructureChanged') {\n        this._onColumnStructureChanged(event.columns);\n      } else if (event.type === 'columnOrderChanged') {\n        this._onColumnOrderChanged(event.columnIds);\n      } else if (event.type === 'columnHeadersUpdated') {\n        this._onColumnHeadersUpdated(event.columns);\n      } else if (event.type === 'startCellEdit') {\n        this._onStartCellEdit(event.columnId, event.rowId, event.fieldId);\n      } else if (event.type === 'endCellEdit') {\n        this._onEndCellEdit(event.fieldId);\n      } else if (event.type === 'requestFocus') {\n        this._onRequestFocus();\n      } else if (event.type === 'scrollToSelection') {\n        this._onScrollToSelection();\n      } else if (event.type === 'aggregationFunctionChanged') {\n        this._onAggregationFunctionChanged(event);\n      } else if (event.type === 'columnBackgroundEffectChanged') {\n        this._onColumnBackgroundEffectChanged(event);\n      } else if (event.type === 'requestFocusInCell') {\n        this._onRequestFocusInCell(event);\n      } else {\n        _get(_getPrototypeOf(TableAdapter.prototype), \"onModelAction\", this).call(this, event);\n      }\n    }\n    /**\n     * @override ModelAdapter.js\n     */\n\n  }, {\n    key: \"exportAdapterData\",\n    value: function exportAdapterData(adapterData) {\n      adapterData = _get(_getPrototypeOf(TableAdapter.prototype), \"exportAdapterData\", this).call(this, adapterData);\n      delete adapterData.selectedRows;\n      adapterData.rows = [];\n      adapterData.columns.forEach(function (column) {\n        delete column.classId;\n        delete column.modelClass;\n      });\n      return adapterData;\n    }\n    /**\n     * Static method to modify the prototype of Table.\n     */\n\n  }], [{\n    key: \"modifyTablePrototype\",\n    value: function modifyTablePrototype() {\n      if (!App.get().remote) {\n        return;\n      } // _sortAfterInsert\n\n\n      objects.replacePrototypeFunction(Table, '_sortAfterInsert', function (wasEmpty) {\n        if (this.modelAdapter) {\n          // There will only be a row order changed event if table was not empty.\n          // If it was empty, there will be NO row order changed event (tableEventBuffer) -> inserted rows are already in correct order -> no sort necessary but group is\n          if (wasEmpty) {\n            this._group();\n          }\n        } else {\n          this._sortAfterInsertOrig(wasEmpty);\n        }\n      }, true); // _sortAfterUpdate\n\n      objects.replacePrototypeFunction(Table, '_sortAfterUpdate', function () {\n        if (this.modelAdapter) {\n          this._group();\n        } else {\n          this._sortAfterUpdateOrig();\n        }\n      }, true); // uiSortPossible\n\n      objects.replacePrototypeFunction(Table, '_isSortingPossible', function (sortColumns) {\n        if (this.modelAdapter) {\n          // In a JS only app the flag 'uiSortPossible' is never set and thus defaults to true. Additionally we check if each column can install\n          // its comparator used to sort. If installation failed for some reason, sorting is not possible. In a remote app the server sets the\n          // 'uiSortPossible' flag, which decides if the column must be sorted by the server or can be sorted by the client.\n          var uiSortPossible = scout.nvl(this.uiSortPossible, true);\n          return uiSortPossible && this._isSortingPossibleOrig(sortColumns);\n        }\n\n        return this._isSortingPossibleOrig(sortColumns);\n      }, true); // sort\n\n      objects.replacePrototypeFunction(Table, 'sort', function (column, direction, multiSort, remove) {\n        if (this.modelAdapter && column.guiOnly) {\n          return;\n        }\n\n        this.sortOrig(column, direction, multiSort, remove);\n      }, true); // no js default tileTableHeader in classic mode\n\n      objects.replacePrototypeFunction(Table, '_createTileTableHeader', function () {\n        if (this.modelAdapter) {\n          // nop in classic mode\n          return;\n        }\n\n        return this._createTileTableHeaderOrig();\n      }, true); // not used in classic mode since tiles are created by the server\n\n      objects.replacePrototypeFunction(Table, 'createTiles', function (rows) {\n        if (this.modelAdapter) {\n          // nop in classic mode\n          return;\n        }\n\n        return this.createTilesOrig(rows);\n      }, true);\n    }\n  }, {\n    key: \"modifyColumnPrototype\",\n    value: function modifyColumnPrototype() {\n      if (!App.get().remote) {\n        return;\n      } // init\n\n\n      objects.replacePrototypeFunction(Column, 'init', function (model) {\n        if (model.table && model.table.modelAdapter) {\n          // Fill in the missing default values only in remote case, don't do it JS case to not accidentally set undefined properties (e.g. uiSortEnabled)\n          model = $.extend({}, model);\n          defaultValues.applyTo(model);\n        }\n\n        this.initOrig(model);\n      }, true); // _ensureCell\n\n      objects.replacePrototypeFunction(Column, '_ensureCell', function (vararg) {\n        if (this.table.modelAdapter) {\n          // Note: we do almost the same thing as in _ensureCellOrig, the difference is that\n          // we treat a plain object always as cell-model and we always must apply defaultValues\n          // to this cell model. In the JS only case a plain-object has no special meaning and\n          // can be used as cell-value in the same way as a scalar value. Also we must not apply\n          // defaultValues in JS only case, because it would destroy the 'undefined' state of the\n          // cell properties, which is required because the Column checks, whether it should apply\n          // defaults from the Column instance to a cell, or use the values from the cell.\n          var model;\n\n          if (objects.isPlainObject(vararg)) {\n            model = vararg;\n            model.value = this._parseValue(model.value); // Parse the value if a text but no value is provided. The server does only set the text if value and text are equal.\n            // It is also necessary for custom columns which don't have a UI representation and never send the value.\n            // Do not parse the value if there is an error status.\n            // If editing fails, the display text will be the user input, the value unchanged, and the server will set the error status.\n\n            if (model.text && model.value === undefined && !model.errorStatus) {\n              model.value = this._parseValue(model.text);\n            } // use null instead of undefined\n\n\n            if (model.value === undefined) {\n              model.value = null;\n            }\n          } else {\n            model = {\n              value: this._parseValue(vararg)\n            };\n          }\n\n          defaultValues.applyTo(model, 'Cell');\n          return scout.create('Cell', model);\n        }\n\n        return this._ensureCellOrig(vararg);\n      }, true); // uiSortPossible\n\n      objects.replacePrototypeFunction(Column, 'isSortingPossible', function () {\n        if (this.table.modelAdapter) {\n          // Returns whether or not this column can be used to sort on the client side. In a JS only app the flag 'uiSortPossible'\n          // is never set and defaults to true. As a side effect of this function a comparator is installed.\n          // The comparator returns false if it could not be installed which means sorting should be delegated to server (e.g. collator is not available).\n          // In a remote app the server sets the 'uiSortPossible' flag, which decides if the column must be sorted by the\n          // server or can be sorted by the client.\n          var uiSortPossible = scout.nvl(this.uiSortPossible, true);\n          return uiSortPossible && this.installComparator();\n        }\n\n        return this.isSortingPossibleOrig();\n      }, true);\n    }\n  }, {\n    key: \"modifyBooleanColumnPrototype\",\n    value: function modifyBooleanColumnPrototype() {\n      if (!App.get().remote) {\n        return;\n      } // _toggleCellValue\n\n\n      objects.replacePrototypeFunction(BooleanColumn, '_toggleCellValue', function (row, cell) {\n        if (this.table.modelAdapter) {// NOP - do nothing, since server will handle the click, see Java AbstractTable#interceptRowClickSingleObserver\n        } else {\n          this._toggleCellValueOrig(row, cell);\n        }\n      }, true);\n    }\n  }]);\n\n  return TableAdapter;\n}(ModelAdapter);\n\nexport { TableAdapter as default };\nApp.addListener('bootstrap', TableAdapter.modifyTablePrototype);\nApp.addListener('bootstrap', TableAdapter.modifyColumnPrototype);\nApp.addListener('bootstrap', TableAdapter.modifyBooleanColumnPrototype);","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/table/TableAdapter.js"],"names":["App","BooleanColumn","Column","defaultValues","ModelAdapter","objects","scout","Table","TableUserFilter","$","TableAdapter","_addRemoteProperties","values","widget","_filterMap","some","filter","_onWidgetFilter","rowIds","debounceSend","eventData","_send","delay","coalesce","previous","target","type","rowId","mouseButton","columnId","data","event","_rowsToIds","selectedRows","_sendRowsSelected","debounce","column","undefined","id","_sendRowClick","row","createFilterAddedEventData","createFilterRemovedEventData","_sendColumnResized","fixedWidth","autoResizeColumns","width","showBusyIndicator","_sendAggregationFunctionChanged","aggregationFunction","_sendColumnBackgroundEffectChanged","backgroundEffect","action","index","newPos","columns","forEach","iteratingColumn","i","guiOnly","_sendColumnMoved","preventDefault","_sendPrepareCellEdit","_sendCompleteCellEdit","field","fieldId","_sendCancelCellEdit","_sendRowsChecked","rows","length","push","checked","_sendRowsExpanded","map","expanded","filteredRows","_sendFilter","remove","sortAscending","sortingRemoved","multiSort","sortingRequested","groupAscending","groupingRemoved","multiGroup","groupingRequested","_sendRowAction","_sendAppLinkAction","ref","contextColumn","reloadReason","_onWidgetRowsSelected","_onWidgetRowsChecked","_onWidgetRowsExpanded","_onWidgetSort","_onWidgetGroup","_onWidgetRowClick","_onWidgetRowAction","_onWidgetPrepareCellEdit","_onWidgetCompleteCellEdit","_onWidgetCancelCellEdit","_onWidgetAppLinkAction","_onWidgetExportToClipboard","_onWidgetReload","_onWidgetFilterAdded","_onWidgetFilterRemoved","_onWidgetColumnResized","_onWidgetColumnMoved","_onWidgetColumnBackgroundEffectChanged","_onWidgetColumnOrganizeAction","_onWidgetAggregationFunctionChanged","insertRows","_rebuildingTable","_rowsByIds","addFilterForWidgetEventType","deleteRows","deleteAllRows","updateRows","selectRows","selectionHandler","clearLastSelectedRowMarker","checkedRows","uncheckedRows","rowData","_rowById","checkRows","checkOnlyEnabled","uncheckRows","expandedRows","collapsedRows","expandRows","collapseRows","updateRowOrder","updateColumnStructure","columnIds","columnsByIds","updateColumnOrder","applyTo","updateColumnHeaders","tileMode","tableTileGridMediator","_onTableGroup","columnById","session","getOrCreateWidget","startCellEdit","getModelAdapter","endCellEdit","focus","revealSelection","eventParts","eventPart","addFilterForWidgetEvent","widgetEvent","setBackgroundEffect","focusCell","functions","func","changeAggregations","filters","setFilters","_onRowsInserted","_onRowsDeleted","_onAllRowsDeleted","_onRowsSelected","_onRowOrderChanged","_onRowsUpdated","_onFiltersChanged","_onRowsChecked","_onRowsExpanded","_onColumnStructureChanged","_onColumnOrderChanged","_onColumnHeadersUpdated","_onStartCellEdit","_onEndCellEdit","_onRequestFocus","_onScrollToSelection","_onAggregationFunctionChanged","_onColumnBackgroundEffectChanged","_onRequestFocusInCell","adapterData","classId","modelClass","get","remote","replacePrototypeFunction","wasEmpty","modelAdapter","_group","_sortAfterInsertOrig","_sortAfterUpdateOrig","sortColumns","uiSortPossible","nvl","_isSortingPossibleOrig","direction","sortOrig","_createTileTableHeaderOrig","createTilesOrig","model","table","extend","initOrig","vararg","isPlainObject","value","_parseValue","text","errorStatus","create","_ensureCellOrig","installComparator","isSortingPossibleOrig","cell","_toggleCellValueOrig","addListener","modifyTablePrototype","modifyColumnPrototype","modifyBooleanColumnPrototype"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {App, BooleanColumn, Column, defaultValues, ModelAdapter, objects, scout, Table, TableUserFilter} from '../index';\nimport $ from 'jquery';\n\nexport default class TableAdapter extends ModelAdapter {\n\n  constructor() {\n    super();\n    this._addRemoteProperties(['contextColumn']);\n  }\n\n  _postCreateWidget() {\n    // if a newly created table has already a userfilter defined, we need to fire the filter event after creation\n    // because the original event had been fired before the eventhandler was registered.\n    if (objects.values(this.widget._filterMap).some(function(filter) {\n      return filter instanceof TableUserFilter;\n    })) {\n      this._onWidgetFilter();\n    }\n  }\n\n  _sendRowsSelected(rowIds, debounceSend) {\n    var eventData = {\n      rowIds: rowIds\n    };\n\n    // send delayed to avoid a lot of requests while selecting\n    // coalesce: only send the latest selection changed event for a field\n    this._send('rowsSelected', eventData, {\n      delay: debounceSend ? 250 : 0,\n      coalesce: function(previous) {\n        return this.target === previous.target && this.type === previous.type;\n      }\n    });\n  }\n\n  _sendRowClick(rowId, mouseButton, columnId) {\n    var data = {\n      rowId: rowId,\n      columnId: columnId,\n      mouseButton: mouseButton\n    };\n    this._send('rowClick', data);\n  }\n\n  _onWidgetRowsSelected(event) {\n    var rowIds = this.widget._rowsToIds(this.widget.selectedRows);\n    this._sendRowsSelected(rowIds, event.debounce);\n  }\n\n  _onWidgetRowClick(event) {\n    var columnId;\n    if (event.column !== undefined) {\n      columnId = event.column.id;\n    }\n\n    this._sendRowClick(event.row.id, event.mouseButton, columnId);\n  }\n\n  _onWidgetFilterAdded(event) {\n    var filter = event.filter;\n    if (filter instanceof TableUserFilter) {\n      this._send('filterAdded', filter.createFilterAddedEventData());\n    }\n  }\n\n  _onWidgetFilterRemoved(event) {\n    var filter = event.filter;\n    if (filter instanceof TableUserFilter) {\n      this._send('filterRemoved', filter.createFilterRemovedEventData());\n    }\n  }\n\n  _onWidgetColumnResized(event) {\n    this._sendColumnResized(event.column);\n  }\n\n  _sendColumnResized(column) {\n    if (column.fixedWidth || this.widget.autoResizeColumns) {\n      return;\n    }\n\n    var eventData = {\n      columnId: column.id,\n      width: column.width\n    };\n\n    // send delayed to avoid a lot of requests while resizing\n    // coalesce: only send the latest resize event for a column\n    this._send('columnResized', eventData, {\n      delay: 750,\n      coalesce: function(previous) {\n        return this.target === previous.target && this.type === previous.type && this.columnId === previous.columnId;\n      },\n      showBusyIndicator: false\n    });\n  }\n\n  _onWidgetAggregationFunctionChanged(event) {\n    this._sendAggregationFunctionChanged(event.column);\n  }\n\n  _sendAggregationFunctionChanged(column) {\n    var data = {\n      columnId: column.id,\n      aggregationFunction: column.aggregationFunction\n    };\n    this._send('aggregationFunctionChanged', data);\n  }\n\n  _onWidgetColumnBackgroundEffectChanged(event) {\n    this._sendColumnBackgroundEffectChanged(event.column);\n  }\n\n  _sendColumnBackgroundEffectChanged(column) {\n    var data = {\n      columnId: column.id,\n      backgroundEffect: column.backgroundEffect\n    };\n    this._send('columnBackgroundEffectChanged', data);\n  }\n\n  _onWidgetColumnOrganizeAction(event) {\n    this._send('columnOrganizeAction', {\n      action: event.action,\n      columnId: event.column.id\n    });\n  }\n\n  _onWidgetColumnMoved(event) {\n    var index = event.newPos;\n    this.widget.columns.forEach(function(iteratingColumn, i) {\n      // Adjust index if column is only known on the gui\n      if (iteratingColumn.guiOnly) {\n        index--;\n      }\n    });\n    this._sendColumnMoved(event.column, index);\n  }\n\n  _sendColumnMoved(column, index) {\n    var data = {\n      columnId: column.id,\n      index: index\n    };\n    this._send('columnMoved', data);\n  }\n\n  _onWidgetPrepareCellEdit(event) {\n    event.preventDefault();\n    this._sendPrepareCellEdit(event.row, event.column);\n  }\n\n  _sendPrepareCellEdit(row, column) {\n    var data = {\n      rowId: row.id,\n      columnId: column.id\n    };\n    this._send('prepareCellEdit', data);\n  }\n\n  _onWidgetCompleteCellEdit(event) {\n    event.preventDefault();\n    this._sendCompleteCellEdit(event.field);\n  }\n\n  _sendCompleteCellEdit(field) {\n    var data = {\n      fieldId: field.id\n    };\n    this._send('completeCellEdit', data);\n  }\n\n  _onWidgetCancelCellEdit(event) {\n    event.preventDefault();\n    this._sendCancelCellEdit(event.field);\n  }\n\n  _sendCancelCellEdit(field) {\n    var data = {\n      fieldId: field.id\n    };\n    this._send('cancelCellEdit', data);\n  }\n\n  _onWidgetRowsChecked(event) {\n    this._sendRowsChecked(event.rows);\n  }\n\n  _sendRowsChecked(rows) {\n    var data = {\n      rows: []\n    };\n\n    for (var i = 0; i < rows.length; i++) {\n      data.rows.push({\n        rowId: rows[i].id,\n        checked: rows[i].checked\n      });\n    }\n\n    this._send('rowsChecked', data);\n  }\n\n  _onWidgetRowsExpanded(event) {\n    this._sendRowsExpanded(event.rows);\n  }\n\n  _sendRowsExpanded(rows) {\n    var data = {\n      rows: rows.map(function(row) {\n        return {\n          rowId: row.id,\n          expanded: row.expanded\n        };\n      })\n    };\n    this._send('rowsExpanded', data);\n  }\n\n  _onWidgetFilter(event) {\n    var rowIds = this.widget._rowsToIds(this.widget.filteredRows());\n    this._sendFilter(rowIds);\n  }\n\n  _sendFilter(rowIds) {\n    var eventData = {};\n    if (rowIds.length === this.widget.rows.length) {\n      eventData.remove = true;\n    } else {\n      eventData.rowIds = rowIds;\n    }\n\n    // send with timeout, mainly for incremental load of a large table\n    // coalesce: only send last event (don't coalesce remove and 'add' events, the UI server needs both)\n    this._send('filter', eventData, {\n      delay: 250,\n      coalesce: function(previous) {\n        return this.target === previous.target && this.type === previous.type && this.remove === previous.remove;\n      },\n      showBusyIndicator: false\n    });\n  }\n\n  _onWidgetSort(event) {\n    this._send('sort', {\n      columnId: event.column.id,\n      sortAscending: event.sortAscending,\n      sortingRemoved: event.sortingRemoved,\n      multiSort: event.multiSort,\n      sortingRequested: event.sortingRequested\n    });\n  }\n\n  _onWidgetGroup(event) {\n    this._send('group', {\n      columnId: event.column.id,\n      groupAscending: event.groupAscending,\n      groupingRemoved: event.groupingRemoved,\n      multiGroup: event.multiGroup,\n      groupingRequested: event.groupingRequested\n    });\n  }\n\n  _onWidgetRowAction(event) {\n    this._sendRowAction(event.row, event.column);\n  }\n\n  _sendRowAction(row, column) {\n    this._send('rowAction', {\n      rowId: row.id,\n      columnId: column.id\n    });\n  }\n\n  _onWidgetAppLinkAction(event) {\n    this._sendAppLinkAction(event.column, event.ref);\n  }\n\n  _sendAppLinkAction(column, ref) {\n    this._send('appLinkAction', {\n      columnId: column.id,\n      ref: ref\n    });\n  }\n\n  _sendContextColumn(contextColumn) {\n    if (contextColumn.guiOnly) {\n      contextColumn = null;\n      this.widget.contextColumn = null;\n    }\n    var columnId = null;\n    if (contextColumn) {\n      columnId = contextColumn.id;\n    }\n    this._send('property', {\n      contextColumn: columnId\n    });\n  }\n\n  _onWidgetReload(event) {\n    var data = {\n      reloadReason: event.reloadReason\n    };\n    this._send('reload', data);\n  }\n\n  _onWidgetExportToClipboard(event) {\n    this._send('clipboardExport');\n    event.preventDefault();\n  }\n\n  _onWidgetEvent(event) {\n    if (event.type === 'rowsSelected') {\n      this._onWidgetRowsSelected(event);\n    } else if (event.type === 'rowsChecked') {\n      this._onWidgetRowsChecked(event);\n    } else if (event.type === 'rowsExpanded') {\n      this._onWidgetRowsExpanded(event);\n    } else if (event.type === 'filter') {\n      this._onWidgetFilter(event);\n    } else if (event.type === 'sort') {\n      this._onWidgetSort(event);\n    } else if (event.type === 'group') {\n      this._onWidgetGroup(event);\n    } else if (event.type === 'rowClick') {\n      this._onWidgetRowClick(event);\n    } else if (event.type === 'rowAction') {\n      this._onWidgetRowAction(event);\n    } else if (event.type === 'prepareCellEdit') {\n      this._onWidgetPrepareCellEdit(event);\n    } else if (event.type === 'completeCellEdit') {\n      this._onWidgetCompleteCellEdit(event);\n    } else if (event.type === 'cancelCellEdit') {\n      this._onWidgetCancelCellEdit(event);\n    } else if (event.type === 'appLinkAction') {\n      this._onWidgetAppLinkAction(event);\n    } else if (event.type === 'clipboardExport') {\n      this._onWidgetExportToClipboard(event);\n    } else if (event.type === 'reload') {\n      this._onWidgetReload(event);\n    } else if (event.type === 'filterAdded') {\n      this._onWidgetFilterAdded(event);\n    } else if (event.type === 'filterRemoved') {\n      this._onWidgetFilterRemoved(event);\n    } else if (event.type === 'columnResized') {\n      this._onWidgetColumnResized(event);\n    } else if (event.type === 'columnMoved') {\n      this._onWidgetColumnMoved(event);\n    } else if (event.type === 'columnBackgroundEffectChanged') {\n      this._onWidgetColumnBackgroundEffectChanged(event);\n    } else if (event.type === 'columnOrganizeAction') {\n      this._onWidgetColumnOrganizeAction(event);\n    } else if (event.type === 'aggregationFunctionChanged') {\n      this._onWidgetAggregationFunctionChanged(event);\n    } else {\n      super._onWidgetEvent(event);\n    }\n  }\n\n  _onRowsInserted(rows) {\n    this.widget.insertRows(rows);\n    this._rebuildingTable = false;\n  }\n\n  _onRowsDeleted(rowIds) {\n    var rows = this.widget._rowsByIds(rowIds);\n    this.addFilterForWidgetEventType('rowsSelected');\n    this.widget.deleteRows(rows);\n  }\n\n  _onAllRowsDeleted() {\n    this.addFilterForWidgetEventType('rowsSelected');\n    this.widget.deleteAllRows();\n  }\n\n  _onRowsUpdated(rows) {\n    this.widget.updateRows(rows);\n  }\n\n  _onRowsSelected(rowIds) {\n    var rows = this.widget._rowsByIds(rowIds);\n    this.addFilterForWidgetEventType('rowsSelected');\n    this.widget.selectRows(rows);\n    // TODO [7.0] cgu what is this for? seems wrong here\n    this.widget.selectionHandler.clearLastSelectedRowMarker();\n  }\n\n  _onRowsChecked(rows) {\n    var checkedRows = [],\n      uncheckedRows = [];\n\n    rows.forEach(function(rowData) {\n      var row = this.widget._rowById(rowData.id);\n      if (rowData.checked) {\n        checkedRows.push(row);\n      } else {\n        uncheckedRows.push(row);\n      }\n    }, this);\n\n    this.addFilterForWidgetEventType('rowsChecked');\n    this.widget.checkRows(checkedRows, {\n      checked: true,\n      checkOnlyEnabled: false\n    });\n    this.widget.uncheckRows(uncheckedRows, {\n      checkOnlyEnabled: false\n    });\n  }\n\n  _onRowsExpanded(rows) {\n    var expandedRows = [],\n      collapsedRows = [];\n    rows.forEach(function(rowData) {\n      var row = this.widget._rowById(rowData.id);\n      if (rowData.expanded) {\n        expandedRows.push(row);\n      } else {\n        collapsedRows.push(row);\n      }\n    }, this);\n    this.addFilterForWidgetEventType('rowsExpanded');\n\n    this.widget.expandRows(expandedRows);\n    this.widget.collapseRows(collapsedRows);\n  }\n\n  _onRowOrderChanged(rowIds) {\n    var rows = this.widget._rowsByIds(rowIds);\n    this.widget.updateRowOrder(rows);\n  }\n\n  _onColumnStructureChanged(columns) {\n    this._rebuildingTable = true;\n    this.widget.updateColumnStructure(columns);\n  }\n\n  _onColumnOrderChanged(columnIds) {\n    var columns = this.widget.columnsByIds(columnIds);\n    this.widget.updateColumnOrder(columns);\n  }\n\n  _onColumnHeadersUpdated(columns) {\n    columns.forEach(function(column) {\n      defaultValues.applyTo(column);\n    });\n    this.widget.updateColumnHeaders(columns);\n\n    if (this.widget.tileMode && this.widget.tableTileGridMediator) {\n      // grouping might have changed, trigger reinit of the groups on the tileGrid in tileMode\n      this.widget.tableTileGridMediator._onTableGroup();\n      // removing of a group column doesn't cause a rowOrderChange, nonetheless aggregation columns might need to be removed.\n      this.widget.updateRowOrder(this.widget.rows);\n    }\n  }\n\n  _onStartCellEdit(columnId, rowId, fieldId) {\n    var column = this.widget.columnById(columnId),\n      row = this.widget._rowById(rowId),\n      field = this.session.getOrCreateWidget(fieldId, this.widget);\n\n    this.widget.startCellEdit(column, row, field);\n  }\n\n  _onEndCellEdit(fieldId) {\n    var field = this.session.getModelAdapter(fieldId);\n    this.widget.endCellEdit(field.widget);\n  }\n\n  _onRequestFocus() {\n    this.widget.focus();\n  }\n\n  _onScrollToSelection() {\n    this.widget.revealSelection();\n  }\n\n  _onColumnBackgroundEffectChanged(event) {\n    event.eventParts.forEach(function(eventPart) {\n      var column = this.widget.columnById(eventPart.columnId),\n        backgroundEffect = eventPart.backgroundEffect;\n\n      this.addFilterForWidgetEvent(function(widgetEvent) {\n        return (widgetEvent.type === 'columnBackgroundEffectChanged' &&\n          widgetEvent.column.id === column.id &&\n          widgetEvent.column.backgroundEffect === backgroundEffect);\n      });\n\n      column.setBackgroundEffect(backgroundEffect);\n    }, this);\n  }\n\n  _onRequestFocusInCell(event) {\n    var row = this.widget._rowById(event.rowId),\n      column = this.widget.columnById(event.columnId);\n\n    this.widget.focusCell(column, row);\n  }\n\n  _onAggregationFunctionChanged(event) {\n    var columns = [],\n      functions = [];\n\n    event.eventParts.forEach(function(eventPart) {\n      var func = eventPart.aggregationFunction,\n        column = this.widget.columnById(eventPart.columnId);\n\n      this.addFilterForWidgetEvent(function(widgetEvent) {\n        return (widgetEvent.type === 'aggregationFunctionChanged' &&\n          widgetEvent.column.id === column.id &&\n          widgetEvent.column.aggregationFunction === func);\n      });\n\n      columns.push(column);\n      functions.push(func);\n    }, this);\n\n    this.widget.changeAggregations(columns, functions);\n  }\n\n  _onFiltersChanged(filters) {\n    this.addFilterForWidgetEventType('filterAdded');\n    this.addFilterForWidgetEventType('filterRemoved');\n\n    this.widget.setFilters(filters);\n    // do not refilter while the table is being rebuilt (because column.index in filter and row.cells may be inconsistent)\n    if (!this._rebuildingTable) {\n      this.widget.filter();\n    }\n  }\n\n  onModelAction(event) {\n    if (event.type === 'rowsInserted') {\n      this._onRowsInserted(event.rows);\n    } else if (event.type === 'rowsDeleted') {\n      this._onRowsDeleted(event.rowIds);\n    } else if (event.type === 'allRowsDeleted') {\n      this._onAllRowsDeleted();\n    } else if (event.type === 'rowsSelected') {\n      this._onRowsSelected(event.rowIds);\n    } else if (event.type === 'rowOrderChanged') {\n      this._onRowOrderChanged(event.rowIds);\n    } else if (event.type === 'rowsUpdated') {\n      this._onRowsUpdated(event.rows);\n    } else if (event.type === 'filtersChanged') {\n      this._onFiltersChanged(event.filters);\n    } else if (event.type === 'rowsChecked') {\n      this._onRowsChecked(event.rows);\n    } else if (event.type === 'rowsExpanded') {\n      this._onRowsExpanded(event.rows);\n    } else if (event.type === 'columnStructureChanged') {\n      this._onColumnStructureChanged(event.columns);\n    } else if (event.type === 'columnOrderChanged') {\n      this._onColumnOrderChanged(event.columnIds);\n    } else if (event.type === 'columnHeadersUpdated') {\n      this._onColumnHeadersUpdated(event.columns);\n    } else if (event.type === 'startCellEdit') {\n      this._onStartCellEdit(event.columnId, event.rowId, event.fieldId);\n    } else if (event.type === 'endCellEdit') {\n      this._onEndCellEdit(event.fieldId);\n    } else if (event.type === 'requestFocus') {\n      this._onRequestFocus();\n    } else if (event.type === 'scrollToSelection') {\n      this._onScrollToSelection();\n    } else if (event.type === 'aggregationFunctionChanged') {\n      this._onAggregationFunctionChanged(event);\n    } else if (event.type === 'columnBackgroundEffectChanged') {\n      this._onColumnBackgroundEffectChanged(event);\n    } else if (event.type === 'requestFocusInCell') {\n      this._onRequestFocusInCell(event);\n    } else {\n      super.onModelAction(event);\n    }\n  }\n\n  /**\n   * @override ModelAdapter.js\n   */\n  exportAdapterData(adapterData) {\n    adapterData = super.exportAdapterData(adapterData);\n    delete adapterData.selectedRows;\n    adapterData.rows = [];\n    adapterData.columns.forEach(function(column) {\n      delete column.classId;\n      delete column.modelClass;\n    });\n    return adapterData;\n  }\n\n  /**\n   * Static method to modify the prototype of Table.\n   */\n  static modifyTablePrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // _sortAfterInsert\n    objects.replacePrototypeFunction(Table, '_sortAfterInsert', function(wasEmpty) {\n      if (this.modelAdapter) {\n        // There will only be a row order changed event if table was not empty.\n        // If it was empty, there will be NO row order changed event (tableEventBuffer) -> inserted rows are already in correct order -> no sort necessary but group is\n        if (wasEmpty) {\n          this._group();\n        }\n      } else {\n        this._sortAfterInsertOrig(wasEmpty);\n      }\n    }, true);\n\n    // _sortAfterUpdate\n    objects.replacePrototypeFunction(Table, '_sortAfterUpdate', function() {\n      if (this.modelAdapter) {\n        this._group();\n      } else {\n        this._sortAfterUpdateOrig();\n      }\n    }, true);\n\n    // uiSortPossible\n    objects.replacePrototypeFunction(Table, '_isSortingPossible', function(sortColumns) {\n      if (this.modelAdapter) {\n        // In a JS only app the flag 'uiSortPossible' is never set and thus defaults to true. Additionally we check if each column can install\n        // its comparator used to sort. If installation failed for some reason, sorting is not possible. In a remote app the server sets the\n        // 'uiSortPossible' flag, which decides if the column must be sorted by the server or can be sorted by the client.\n        var uiSortPossible = scout.nvl(this.uiSortPossible, true);\n        return uiSortPossible && this._isSortingPossibleOrig(sortColumns);\n      }\n      return this._isSortingPossibleOrig(sortColumns);\n    }, true);\n\n    // sort\n    objects.replacePrototypeFunction(Table, 'sort', function(column, direction, multiSort, remove) {\n      if (this.modelAdapter && column.guiOnly) {\n        return;\n      }\n      this.sortOrig(column, direction, multiSort, remove);\n    }, true);\n\n    // no js default tileTableHeader in classic mode\n    objects.replacePrototypeFunction(Table, '_createTileTableHeader', function() {\n      if (this.modelAdapter) {\n        // nop in classic mode\n        return;\n      }\n      return this._createTileTableHeaderOrig();\n    }, true);\n\n    // not used in classic mode since tiles are created by the server\n    objects.replacePrototypeFunction(Table, 'createTiles', function(rows) {\n      if (this.modelAdapter) {\n        // nop in classic mode\n        return;\n      }\n      return this.createTilesOrig(rows);\n    }, true);\n  }\n\n  static modifyColumnPrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // init\n    objects.replacePrototypeFunction(Column, 'init', function(model) {\n      if (model.table && model.table.modelAdapter) {\n        // Fill in the missing default values only in remote case, don't do it JS case to not accidentally set undefined properties (e.g. uiSortEnabled)\n        model = $.extend({}, model);\n        defaultValues.applyTo(model);\n      }\n      this.initOrig(model);\n    }, true);\n\n    // _ensureCell\n    objects.replacePrototypeFunction(Column, '_ensureCell', function(vararg) {\n      if (this.table.modelAdapter) {\n        // Note: we do almost the same thing as in _ensureCellOrig, the difference is that\n        // we treat a plain object always as cell-model and we always must apply defaultValues\n        // to this cell model. In the JS only case a plain-object has no special meaning and\n        // can be used as cell-value in the same way as a scalar value. Also we must not apply\n        // defaultValues in JS only case, because it would destroy the 'undefined' state of the\n        // cell properties, which is required because the Column checks, whether it should apply\n        // defaults from the Column instance to a cell, or use the values from the cell.\n        var model;\n        if (objects.isPlainObject(vararg)) {\n          model = vararg;\n          model.value = this._parseValue(model.value);\n          // Parse the value if a text but no value is provided. The server does only set the text if value and text are equal.\n          // It is also necessary for custom columns which don't have a UI representation and never send the value.\n          // Do not parse the value if there is an error status.\n          // If editing fails, the display text will be the user input, the value unchanged, and the server will set the error status.\n          if (model.text && model.value === undefined && !model.errorStatus) {\n            model.value = this._parseValue(model.text);\n          }\n          // use null instead of undefined\n          if (model.value === undefined) {\n            model.value = null;\n          }\n        } else {\n          model = {\n            value: this._parseValue(vararg)\n          };\n        }\n        defaultValues.applyTo(model, 'Cell');\n        return scout.create('Cell', model);\n      }\n      return this._ensureCellOrig(vararg);\n    }, true);\n\n    // uiSortPossible\n    objects.replacePrototypeFunction(Column, 'isSortingPossible', function() {\n      if (this.table.modelAdapter) {\n        // Returns whether or not this column can be used to sort on the client side. In a JS only app the flag 'uiSortPossible'\n        // is never set and defaults to true. As a side effect of this function a comparator is installed.\n        // The comparator returns false if it could not be installed which means sorting should be delegated to server (e.g. collator is not available).\n        // In a remote app the server sets the 'uiSortPossible' flag, which decides if the column must be sorted by the\n        // server or can be sorted by the client.\n        var uiSortPossible = scout.nvl(this.uiSortPossible, true);\n        return uiSortPossible && this.installComparator();\n      }\n      return this.isSortingPossibleOrig();\n    }, true);\n  }\n\n  static modifyBooleanColumnPrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // _toggleCellValue\n    objects.replacePrototypeFunction(BooleanColumn, '_toggleCellValue', function(row, cell) {\n      if (this.table.modelAdapter) {\n        // NOP - do nothing, since server will handle the click, see Java AbstractTable#interceptRowClickSingleObserver\n      } else {\n        this._toggleCellValueOrig(row, cell);\n      }\n    }, true);\n  }\n}\n\nApp.addListener('bootstrap', TableAdapter.modifyTablePrototype);\nApp.addListener('bootstrap', TableAdapter.modifyColumnPrototype);\nApp.addListener('bootstrap', TableAdapter.modifyBooleanColumnPrototype);\n"]},"metadata":{},"sourceType":"module"}