{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { EventSupport, MessageBox, MessageBoxes, objects, scout, Status } from '../index';\nimport $ from 'jquery';\n/**\n * Abstract base class for validation lifecycles as used for forms.\n * A subclass must set the properties, in order to display messages:\n * - emptyMandatoryElementsTextKey\n * - invalidElementsTextKey\n * - saveChangesQuestionTextKey\n *\n * @class\n * @constructor\n * @abstract\n */\n\nvar Lifecycle = /*#__PURE__*/function () {\n  function Lifecycle() {\n    _classCallCheck(this, Lifecycle);\n\n    this.widget = null;\n    this.emptyMandatoryElementsTextKey = null;\n    this.emptyMandatoryElementsText = null;\n    this.invalidElementsTextKey = null;\n    this.invalidElementsText = null;\n    this.saveChangesQuestionTextKey = null;\n    this.askIfNeedSave = true;\n    this.askIfNeedSaveText = null; // Java: cancelVerificationText\n\n    this.events = new EventSupport();\n    this.handlers = {\n      'load': this._defaultLoad.bind(this),\n      'save': this._defaultSave.bind(this)\n    };\n  } // Info: doExportXml, doImportXml, doSaveWithoutMarkerChange is not supported in Html UI\n\n\n  _createClass(Lifecycle, [{\n    key: \"init\",\n    value: function init(model) {\n      scout.assertParameter('widget', model.widget);\n      $.extend(this, model);\n\n      if (objects.isNullOrUndefined(this.emptyMandatoryElementsText)) {\n        this.emptyMandatoryElementsText = this.session().text(this.emptyMandatoryElementsTextKey);\n      }\n\n      if (objects.isNullOrUndefined(this.invalidElementsText)) {\n        this.invalidElementsText = this.session().text(this.invalidElementsTextKey);\n      }\n\n      if (objects.isNullOrUndefined(this.askIfNeedSaveText)) {\n        this.askIfNeedSaveText = this.session().text(this.saveChangesQuestionTextKey);\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      return this._load().then(function () {\n        this.markAsSaved();\n        this.events.trigger('postLoad');\n      }.bind(this));\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_load\",\n    value: function _load() {\n      return this.handlers.load().then(function (status) {\n        this.events.trigger('load');\n      }.bind(this));\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_defaultLoad\",\n    value: function _defaultLoad() {\n      return $.resolvedPromise();\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"ok\",\n    value: function ok() {\n      // 1.) validate form\n      return this._whenInvalid(this._validate).then(function (invalid) {\n        if (invalid) {\n          return;\n        } // 2.) check if save is required\n\n\n        if (!this.requiresSave()) {\n          return this.close();\n        } // 3.) perform save operation\n\n\n        return this._whenInvalid(this._save).then(function (invalid) {\n          if (invalid) {\n            return;\n          }\n\n          this.markAsSaved();\n          return this.close();\n        }.bind(this));\n      }.bind(this));\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var showMessageBox = this.requiresSave() && this.askIfNeedSave;\n\n      if (showMessageBox) {\n        return this._showYesNoCancelMessageBox(this.askIfNeedSaveText, this.ok.bind(this), this.close.bind(this));\n      }\n\n      return this.close();\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._reset(); // reload the state\n\n\n      return this.load().then(function () {\n        this.events.trigger('reset');\n      }.bind(this));\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this._close();\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_close\",\n    value: function _close() {\n      this.events.trigger('close');\n      return $.resolvedPromise();\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"save\",\n    value: function save() {\n      // 1.) validate form\n      return this._whenInvalid(this._validate).then(function (invalid) {\n        // 2.) invalid or form has not been changed\n        if (invalid || !this.requiresSave()) {\n          return;\n        } // 3.) perform save operation\n\n\n        return this._whenInvalid(this._save).then(function (invalid) {\n          if (invalid) {\n            return;\n          }\n\n          this.markAsSaved();\n        }.bind(this));\n      }.bind(this));\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_save\",\n    value: function _save() {\n      return this.handlers.save().then(function (status) {\n        this.events.trigger('save');\n        return status;\n      }.bind(this));\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_defaultSave\",\n    value: function _defaultSave() {\n      return $.resolvedPromise();\n    }\n  }, {\n    key: \"markAsSaved\",\n    value: function markAsSaved() {// NOP\n    }\n    /**\n     * Override this function to check if any data has changed and saving is required.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"requiresSave\",\n    value: function requiresSave() {\n      return false;\n    }\n  }, {\n    key: \"setAskIfNeedSave\",\n    value: function setAskIfNeedSave(askIfNeedSave) {\n      this.askIfNeedSave = askIfNeedSave;\n    }\n    /**\n     * Helper function to deal with functions that return a Status object.\n     * Makes it easier to return early when that function returns an invalid status (= less code to write).\n     *\n     * @returns {Promise} If the resulting promise is resolved with \"true\", the life cycle is considered invalid.\n     *                    Otherwise, the life cycle is considered valid and the store/save operation continues.\n     *                    If the status returned by 'func' is absent or Status.Severity.OK, a promise resolved with\n     *                    \"false\" is returned. Otherwise, the promise returned by _showStatusMessageBox() is returned.\n     */\n\n  }, {\n    key: \"_whenInvalid\",\n    value: function _whenInvalid(func) {\n      return func.call(this).then(function (status) {\n        if (!status || status.severity === Status.Severity.OK) {\n          return $.resolvedPromise(false); // invalid=false\n        }\n\n        return this._showStatusMessageBox(status);\n      }.bind(this)).catch(function (error) {\n        return this._showStatusMessageBox(errorToStatus(error));\n      }.bind(this)); // See ValueField#_createInvalidValueStatus, has similar code to transform error to status\n\n      function errorToStatus(error) {\n        if (error instanceof Status) {\n          return error;\n        }\n\n        if (typeof error === 'string') {\n          return Status.error({\n            message: error\n          });\n        }\n\n        return Status.error({\n          message: error.message\n        });\n      }\n    }\n  }, {\n    key: \"_showYesNoCancelMessageBox\",\n    value: function _showYesNoCancelMessageBox(message, yesAction, noAction) {\n      return MessageBoxes.create(this.widget).withSeverity(Status.Severity.WARNING).withHeader(message).withYes().withNo().withCancel().buildAndOpen().then(function (option) {\n        if (option === MessageBox.Buttons.YES) {\n          return yesAction();\n        } else if (option === MessageBox.Buttons.NO) {\n          return noAction();\n        }\n\n        return $.resolvedPromise();\n      });\n    }\n    /**\n     * @param status\n     * @returns {Promise} If the resulting promise is resolved with \"true\", the life cycle is considered invalid.\n     *                    Otherwise, the life cycle is considered valid and the store/save operation continues.\n     *                    By default, a promise that is resolved with \"true\" is returned.\n     */\n\n  }, {\n    key: \"_showStatusMessageBox\",\n    value: function _showStatusMessageBox(status) {\n      return MessageBoxes.createOk(this.widget).withSeverity(status.severity).withBody(status.message, true).buildAndOpen().then(function () {\n        var invalid = status.severity === Status.Severity.ERROR;\n        return $.resolvedPromise(invalid);\n      });\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_validate\",\n    value: function _validate() {\n      var status = this._validateElements();\n\n      if (status.isValid()) {\n        status = this._validateWidget();\n      }\n\n      return $.resolvedPromise(status);\n    }\n    /**\n     * Validates all elements (i.e form-fields) covered by the lifecycle and checks for missing or invalid elements.\n     *\n     * @return Status\n     */\n\n  }, {\n    key: \"_validateElements\",\n    value: function _validateElements() {\n      var elements = this._invalidElements();\n\n      var status = new Status();\n\n      if (elements.missingElements.length === 0 && elements.invalidElements.length === 0) {\n        status.severity = Status.Severity.OK;\n      } else {\n        status.severity = Status.Severity.ERROR;\n        status.message = this._createInvalidElementsMessageHtml(elements.missingElements, elements.invalidElements);\n      }\n\n      return status;\n    }\n    /**\n     * Validates the widget (i.e. form) associated with this lifecycle. This function is only called when there are\n     * no missing or invalid elements. It is used to implement an overall-validate logic which has nothing to do\n     * with a specific element or field. For instance you could validate if an internal member variable of a Lifecycle\n     * or Form is set.\n     *\n     * @return Status\n     */\n\n  }, {\n    key: \"_validateWidget\",\n    value: function _validateWidget() {\n      return Status.ok();\n    }\n    /**\n     * Override this function to check for invalid elements on the parent which prevent\n     * saving of the parent.(eg. check if all mandatory elements contain a value)\n     *\n     * @returns Object with\n     * valid: (true or false)\n     * missingElements: Elements which should have a value\n     * invalidElements: Elements which have an invalid value\n     */\n\n  }, {\n    key: \"_invalidElements\",\n    value: function _invalidElements() {\n      return {\n        missingElements: [],\n        invalidElements: []\n      };\n    }\n    /**\n     * Creates a HTML message used to display missing and invalid fields in a message box.\n     */\n\n  }, {\n    key: \"_createInvalidElementsMessageHtml\",\n    value: function _createInvalidElementsMessageHtml(missing, invalid) {\n      var $div = $('<div>'),\n          hasMissing = missing.length > 0,\n          hasInvalid = invalid.length > 0;\n\n      if (hasMissing) {\n        appendTitleAndList.call(this, $div, this.emptyMandatoryElementsText, missing, this._missingElementText);\n      }\n\n      if (hasMissing && hasInvalid) {\n        $div.appendElement('<br>');\n      }\n\n      if (hasInvalid) {\n        appendTitleAndList.call(this, $div, this.invalidElementsText, invalid, this._invalidElementText);\n      }\n\n      return $div.html(); // ----- Helper function -----\n\n      function appendTitleAndList($div, title, elements, elementTextFunc) {\n        $div.appendElement('<strong>').text(title);\n        var $ul = $div.appendElement('<ul>');\n        elements.forEach(function (element) {\n          $ul.appendElement('<li>').text(elementTextFunc.call(this, element));\n        }, this);\n      }\n    }\n    /**\n     * Override this function to retrieve the text of an invalid element\n     * @param element\n     * @returns {String}\n     */\n\n  }, {\n    key: \"_invalidElementText\",\n    value: function _invalidElementText(element) {\n      return '';\n    }\n    /**\n     * Override this function to retrieve the text of an missing mandatory element\n     * @param element\n     * @returns {String}\n     */\n\n  }, {\n    key: \"_missingElementText\",\n    value: function _missingElementText(element) {\n      return '';\n    }\n  }, {\n    key: \"session\",\n    value: function session() {\n      return this.widget.session;\n    }\n    /**\n     * Register a handler function for save actions.\n     * All handler functions must return a Status. In case of an error a Status object with severity error must be returned.\n     * Note: in contrast to events, handlers can control the flow of the lifecycle. They also have a return value where events have none.\n     *   Only one handler can be registered for each type.\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle(type, func) {\n      var supportedTypes = ['load', 'save'];\n\n      if (supportedTypes.indexOf(type) === -1) {\n        throw new Error('Cannot register handler for unsupported type \\'' + type + '\\'');\n      }\n\n      this.handlers[type] = func;\n    }\n    /**\n     * Register an event handler for the given type.\n     * Event handlers don't have a return value. They do not have any influence on the lifecycle flow. There can be multiple event\n     * handler for each type.\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(type, func) {\n      return this.events.on(type, func);\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, func) {\n      return this.events.off(type, func);\n    }\n  }]);\n\n  return Lifecycle;\n}();\n\nexport { Lifecycle as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/lifecycle/Lifecycle.js"],"names":["EventSupport","MessageBox","MessageBoxes","objects","scout","Status","$","Lifecycle","widget","emptyMandatoryElementsTextKey","emptyMandatoryElementsText","invalidElementsTextKey","invalidElementsText","saveChangesQuestionTextKey","askIfNeedSave","askIfNeedSaveText","events","handlers","_defaultLoad","bind","_defaultSave","model","assertParameter","extend","isNullOrUndefined","session","text","_load","then","markAsSaved","trigger","load","status","resolvedPromise","_whenInvalid","_validate","invalid","requiresSave","close","_save","showMessageBox","_showYesNoCancelMessageBox","ok","_reset","_close","save","func","call","severity","Severity","OK","_showStatusMessageBox","catch","error","errorToStatus","message","yesAction","noAction","create","withSeverity","WARNING","withHeader","withYes","withNo","withCancel","buildAndOpen","option","Buttons","YES","NO","createOk","withBody","ERROR","_validateElements","isValid","_validateWidget","elements","_invalidElements","missingElements","length","invalidElements","_createInvalidElementsMessageHtml","missing","$div","hasMissing","hasInvalid","appendTitleAndList","_missingElementText","appendElement","_invalidElementText","html","title","elementTextFunc","$ul","forEach","element","type","supportedTypes","indexOf","Error","on","off"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {EventSupport, MessageBox, MessageBoxes, objects, scout, Status} from '../index';\nimport $ from 'jquery';\n\n/**\n * Abstract base class for validation lifecycles as used for forms.\n * A subclass must set the properties, in order to display messages:\n * - emptyMandatoryElementsTextKey\n * - invalidElementsTextKey\n * - saveChangesQuestionTextKey\n *\n * @class\n * @constructor\n * @abstract\n */\nexport default class Lifecycle {\n\n  constructor() {\n    this.widget = null;\n    this.emptyMandatoryElementsTextKey = null;\n    this.emptyMandatoryElementsText = null;\n\n    this.invalidElementsTextKey = null;\n    this.invalidElementsText = null;\n\n    this.saveChangesQuestionTextKey = null;\n    this.askIfNeedSave = true;\n    this.askIfNeedSaveText = null; // Java: cancelVerificationText\n\n    this.events = new EventSupport();\n    this.handlers = {\n      'load': this._defaultLoad.bind(this),\n      'save': this._defaultSave.bind(this)\n    };\n  }\n\n  // Info: doExportXml, doImportXml, doSaveWithoutMarkerChange is not supported in Html UI\n\n  init(model) {\n    scout.assertParameter('widget', model.widget);\n    $.extend(this, model);\n    if (objects.isNullOrUndefined(this.emptyMandatoryElementsText)) {\n      this.emptyMandatoryElementsText = this.session().text(this.emptyMandatoryElementsTextKey);\n    }\n    if (objects.isNullOrUndefined(this.invalidElementsText)) {\n      this.invalidElementsText = this.session().text(this.invalidElementsTextKey);\n    }\n    if (objects.isNullOrUndefined(this.askIfNeedSaveText)) {\n      this.askIfNeedSaveText = this.session().text(this.saveChangesQuestionTextKey);\n    }\n  }\n\n  load() {\n    return this._load().then(function() {\n      this.markAsSaved();\n      this.events.trigger('postLoad');\n    }.bind(this));\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _load() {\n    return this.handlers.load()\n      .then(function(status) {\n        this.events.trigger('load');\n      }.bind(this));\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _defaultLoad() {\n    return $.resolvedPromise();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  ok() {\n    // 1.) validate form\n    return this._whenInvalid(this._validate)\n      .then(function(invalid) {\n        if (invalid) {\n          return;\n        }\n\n        // 2.) check if save is required\n        if (!this.requiresSave()) {\n          return this.close();\n        }\n\n        // 3.) perform save operation\n        return this._whenInvalid(this._save)\n          .then(function(invalid) {\n            if (invalid) {\n              return;\n            }\n\n            this.markAsSaved();\n            return this.close();\n          }.bind(this));\n      }.bind(this));\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  cancel() {\n    var showMessageBox = this.requiresSave() && this.askIfNeedSave;\n    if (showMessageBox) {\n      return this._showYesNoCancelMessageBox(\n        this.askIfNeedSaveText,\n        this.ok.bind(this),\n        this.close.bind(this));\n    }\n    return this.close();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  reset() {\n    this._reset();\n\n    // reload the state\n    return this.load().then(function() {\n      this.events.trigger('reset');\n    }.bind(this));\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  close() {\n    return this._close();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _close() {\n    this.events.trigger('close');\n    return $.resolvedPromise();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  save() {\n    // 1.) validate form\n    return this._whenInvalid(this._validate)\n      .then(function(invalid) {\n\n        // 2.) invalid or form has not been changed\n        if (invalid || !this.requiresSave()) {\n          return;\n        }\n\n        // 3.) perform save operation\n        return this._whenInvalid(this._save)\n          .then(function(invalid) {\n            if (invalid) {\n              return;\n            }\n\n            this.markAsSaved();\n          }.bind(this));\n      }.bind(this));\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _save() {\n    return this.handlers.save()\n      .then(function(status) {\n        this.events.trigger('save');\n        return status;\n      }.bind(this));\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _defaultSave() {\n    return $.resolvedPromise();\n  }\n\n  markAsSaved() {\n    // NOP\n  }\n\n  /**\n   * Override this function to check if any data has changed and saving is required.\n   * @returns {boolean}\n   */\n  requiresSave() {\n    return false;\n  }\n\n  setAskIfNeedSave(askIfNeedSave) {\n    this.askIfNeedSave = askIfNeedSave;\n  }\n\n  /**\n   * Helper function to deal with functions that return a Status object.\n   * Makes it easier to return early when that function returns an invalid status (= less code to write).\n   *\n   * @returns {Promise} If the resulting promise is resolved with \"true\", the life cycle is considered invalid.\n   *                    Otherwise, the life cycle is considered valid and the store/save operation continues.\n   *                    If the status returned by 'func' is absent or Status.Severity.OK, a promise resolved with\n   *                    \"false\" is returned. Otherwise, the promise returned by _showStatusMessageBox() is returned.\n   */\n  _whenInvalid(func) {\n    return func.call(this)\n      .then(function(status) {\n        if (!status || status.severity === Status.Severity.OK) {\n          return $.resolvedPromise(false); // invalid=false\n        }\n        return this._showStatusMessageBox(status);\n      }.bind(this))\n      .catch(function(error) {\n        return this._showStatusMessageBox(errorToStatus(error));\n      }.bind(this));\n\n    // See ValueField#_createInvalidValueStatus, has similar code to transform error to status\n    function errorToStatus(error) {\n      if (error instanceof Status) {\n        return error;\n      }\n      if (typeof error === 'string') {\n        return Status.error({\n          message: error\n        });\n      }\n      return Status.error({\n        message: error.message\n      });\n    }\n  }\n\n  _showYesNoCancelMessageBox(message, yesAction, noAction) {\n    return MessageBoxes.create(this.widget)\n      .withSeverity(Status.Severity.WARNING)\n      .withHeader(message)\n      .withYes()\n      .withNo()\n      .withCancel()\n      .buildAndOpen()\n      .then(function(option) {\n        if (option === MessageBox.Buttons.YES) {\n          return yesAction();\n        } else if (option === MessageBox.Buttons.NO) {\n          return noAction();\n        }\n        return $.resolvedPromise();\n      });\n  }\n\n  /**\n   * @param status\n   * @returns {Promise} If the resulting promise is resolved with \"true\", the life cycle is considered invalid.\n   *                    Otherwise, the life cycle is considered valid and the store/save operation continues.\n   *                    By default, a promise that is resolved with \"true\" is returned.\n   */\n  _showStatusMessageBox(status) {\n    return MessageBoxes.createOk(this.widget)\n      .withSeverity(status.severity)\n      .withBody(status.message, true)\n      .buildAndOpen()\n      .then(function() {\n        var invalid = (status.severity === Status.Severity.ERROR);\n        return $.resolvedPromise(invalid);\n      });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _validate() {\n    var status = this._validateElements();\n    if (status.isValid()) {\n      status = this._validateWidget();\n    }\n    return $.resolvedPromise(status);\n  }\n\n  /**\n   * Validates all elements (i.e form-fields) covered by the lifecycle and checks for missing or invalid elements.\n   *\n   * @return Status\n   */\n  _validateElements() {\n    var elements = this._invalidElements();\n    var status = new Status();\n    if (elements.missingElements.length === 0 && elements.invalidElements.length === 0) {\n      status.severity = Status.Severity.OK;\n    } else {\n      status.severity = Status.Severity.ERROR;\n      status.message = this._createInvalidElementsMessageHtml(elements.missingElements, elements.invalidElements);\n    }\n    return status;\n  }\n\n  /**\n   * Validates the widget (i.e. form) associated with this lifecycle. This function is only called when there are\n   * no missing or invalid elements. It is used to implement an overall-validate logic which has nothing to do\n   * with a specific element or field. For instance you could validate if an internal member variable of a Lifecycle\n   * or Form is set.\n   *\n   * @return Status\n   */\n  _validateWidget() {\n    return Status.ok();\n  }\n\n  /**\n   * Override this function to check for invalid elements on the parent which prevent\n   * saving of the parent.(eg. check if all mandatory elements contain a value)\n   *\n   * @returns Object with\n   * valid: (true or false)\n   * missingElements: Elements which should have a value\n   * invalidElements: Elements which have an invalid value\n   */\n  _invalidElements() {\n    return {\n      missingElements: [],\n      invalidElements: []\n    };\n  }\n\n  /**\n   * Creates a HTML message used to display missing and invalid fields in a message box.\n   */\n  _createInvalidElementsMessageHtml(missing, invalid) {\n    var $div = $('<div>'),\n      hasMissing = missing.length > 0,\n      hasInvalid = invalid.length > 0;\n    if (hasMissing) {\n      appendTitleAndList.call(this, $div, this.emptyMandatoryElementsText, missing, this._missingElementText);\n    }\n    if (hasMissing && hasInvalid) {\n      $div.appendElement('<br>');\n    }\n    if (hasInvalid) {\n      appendTitleAndList.call(this, $div, this.invalidElementsText, invalid, this._invalidElementText);\n    }\n    return $div.html();\n\n    // ----- Helper function -----\n\n    function appendTitleAndList($div, title, elements, elementTextFunc) {\n      $div.appendElement('<strong>').text(title);\n      var $ul = $div.appendElement('<ul>');\n      elements.forEach(function(element) {\n        $ul.appendElement('<li>').text(elementTextFunc.call(this, element));\n      }, this);\n    }\n  }\n\n  /**\n   * Override this function to retrieve the text of an invalid element\n   * @param element\n   * @returns {String}\n   */\n  _invalidElementText(element) {\n    return '';\n  }\n\n  /**\n   * Override this function to retrieve the text of an missing mandatory element\n   * @param element\n   * @returns {String}\n   */\n  _missingElementText(element) {\n    return '';\n  }\n\n  session() {\n    return this.widget.session;\n  }\n\n  /**\n   * Register a handler function for save actions.\n   * All handler functions must return a Status. In case of an error a Status object with severity error must be returned.\n   * Note: in contrast to events, handlers can control the flow of the lifecycle. They also have a return value where events have none.\n   *   Only one handler can be registered for each type.\n   */\n  handle(type, func) {\n    var supportedTypes = ['load', 'save'];\n    if (supportedTypes.indexOf(type) === -1) {\n      throw new Error('Cannot register handler for unsupported type \\'' + type + '\\'');\n    }\n    this.handlers[type] = func;\n  }\n\n  /**\n   * Register an event handler for the given type.\n   * Event handlers don't have a return value. They do not have any influence on the lifecycle flow. There can be multiple event\n   * handler for each type.\n   */\n  on(type, func) {\n    return this.events.on(type, func);\n  }\n\n  off(type, func) {\n    return this.events.off(type, func);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}