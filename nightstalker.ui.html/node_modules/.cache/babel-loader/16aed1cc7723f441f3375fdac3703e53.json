{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { CollapseHandle, Desktop, DesktopNavigationLayout, HtmlComponent, scout, SingleLayout, styles, Tree, Widget } from '../../index';\n\nvar DesktopNavigation = /*#__PURE__*/function (_Widget) {\n  _inherits(DesktopNavigation, _Widget);\n\n  var _super = _createSuper(DesktopNavigation);\n\n  function DesktopNavigation() {\n    var _this;\n\n    _classCallCheck(this, DesktopNavigation);\n\n    _this = _super.call(this);\n    _this.$body = null;\n    _this.layoutData = {};\n    _this.toolBoxVisible = false;\n    _this.viewButtonBox = null;\n    _this._outlinePropertyChangeHandler = _this._onOutlinePropertyChange.bind(_assertThisInitialized(_this));\n    _this._desktopPropertyChangeHandler = _this._onDesktopPropertyChange.bind(_assertThisInitialized(_this));\n    _this._viewButtonBoxPropertyChangeHandler = _this._onViewButtonBoxPropertyChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DesktopNavigation, [{\n    key: \"_init\",\n    // Configured in sizes.css\n    value: function _init(model) {\n      _get(_getPrototypeOf(DesktopNavigation.prototype), \"_init\", this).call(this, model);\n\n      DesktopNavigation.MIN_WIDTH = styles.getSize('desktop-navigation', 'min-width', 'minWidth', 49);\n      DesktopNavigation.DEFAULT_STYLE_WIDTH = styles.getSize('desktop-navigation', 'width', 'width', 290);\n      DesktopNavigation.BREADCRUMB_STYLE_WIDTH = styles.getSize('desktop-navigation-breadcrumb', 'width', 'width', 240);\n      this.desktop = this.parent;\n      this.updateHandleVisibility();\n\n      this._setOutline(model.outline);\n\n      this.viewButtonBox = scout.create('ViewButtonBox', {\n        parent: this,\n        viewButtons: this.desktop.viewButtons,\n        singleViewButton: this.singleViewButton\n      });\n      this.viewButtonBox.on('propertyChange', this._viewButtonBoxPropertyChangeHandler);\n\n      this._updateSingleViewButton();\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.$container = this.$parent.appendDiv('desktop-navigation');\n      this.htmlComp = HtmlComponent.install(this.$container, this.session);\n      this.htmlComp.setLayout(new DesktopNavigationLayout(this));\n      this.htmlComp.layoutData = this.layoutData;\n      this.$body = this.$container.appendDiv('navigation-body').on('mousedown', this._onNavigationBodyMouseDown.bind(this));\n      this.htmlCompBody = HtmlComponent.install(this.$body, this.session);\n      this.htmlCompBody.setLayout(new SingleLayout(null, {\n        exact: true\n      }));\n      this.desktop.on('propertyChange', this._desktopPropertyChangeHandler);\n    }\n  }, {\n    key: \"_remove\",\n    value: function _remove() {\n      this.desktop.off('propertyChange', this._desktopPropertyChangeHandler);\n\n      _get(_getPrototypeOf(DesktopNavigation.prototype), \"_remove\", this).call(this);\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(DesktopNavigation.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderViewButtonBox();\n\n      this._renderToolBoxVisible();\n\n      this._renderOutline();\n\n      this._renderHandleVisible();\n\n      this._renderSingleViewButton();\n    }\n  }, {\n    key: \"_renderViewButtonBox\",\n    value: function _renderViewButtonBox() {\n      this.viewButtonBox.render();\n    }\n  }, {\n    key: \"_removeOutline\",\n    value: function _removeOutline() {\n      if (!this.outline) {\n        return;\n      }\n\n      this.outline.remove();\n    }\n  }, {\n    key: \"_renderOutline\",\n    value: function _renderOutline() {\n      if (!this.outline) {\n        return;\n      }\n\n      this.outline.render(this.$body);\n      this.outline.invalidateLayoutTree(); // Layout immediate to prevent flickering when breadcrumb mode is enabled\n      // but not initially while desktop gets rendered because it will be done at the end anyway\n\n      if (this.rendered) {\n        this.outline.validateLayoutTree();\n        this.outline.validateFocus();\n      }\n    }\n  }, {\n    key: \"setOutline\",\n    value: function setOutline(outline) {\n      this.setProperty('outline', outline);\n    }\n  }, {\n    key: \"_setOutline\",\n    value: function _setOutline(newOutline) {\n      var oldOutline = this.outline;\n\n      if (this.outline) {\n        this.outline.off('propertyChange', this._outlinePropertyChangeHandler);\n      }\n\n      if (this.rendered) {\n        this._removeOutline();\n      }\n\n      this.outline = newOutline;\n\n      if (this.outline) {\n        this.outline.setIconVisible(this.singleViewButton);\n        this.outline.setParent(this);\n        this.outline.setBreadcrumbTogglingThreshold(DesktopNavigation.BREADCRUMB_STYLE_WIDTH); // if both have breadcrumb-toggling enabled: make sure new outline uses same display style as old\n\n        if (this.outline.toggleBreadcrumbStyleEnabled && oldOutline && oldOutline.toggleBreadcrumbStyleEnabled && oldOutline.displayStyle) {\n          this.outline.setDisplayStyle(oldOutline.displayStyle);\n        }\n\n        this.outline.inBackground = this.desktop.inBackground;\n        this.outline.on('propertyChange', this._outlinePropertyChangeHandler);\n\n        this._updateHandle();\n      }\n    }\n  }, {\n    key: \"_updateSingleViewButton\",\n    value: function _updateSingleViewButton() {\n      if (this.desktop.displayStyle === Desktop.DisplayStyle.COMPACT) {\n        // There is not enough space to move the title up due to the toolbar -> Never switch to that mode in compact mode\n        this.setSingleViewButton(false);\n        return;\n      }\n\n      var menuCount = this.viewButtonBox.menuButtons.length,\n          tabCount = this.viewButtonBox.tabButtons.length;\n\n      if (menuCount + tabCount > 1) {\n        if (menuCount > 0) {\n          tabCount++;\n        }\n\n        this.setSingleViewButton(tabCount < 2);\n      } else {\n        this.setSingleViewButton(false);\n      }\n    }\n  }, {\n    key: \"setSingleViewButton\",\n    value: function setSingleViewButton(singleViewButton) {\n      this.setProperty('singleViewButton', singleViewButton);\n\n      if (this.outline) {\n        this.outline.setIconVisible(this.singleViewButton);\n      }\n\n      this.viewButtonBox.setMenuTabVisible(!singleViewButton);\n    }\n  }, {\n    key: \"_renderSingleViewButton\",\n    value: function _renderSingleViewButton() {\n      this.$container.toggleClass('single-view-button', this.singleViewButton);\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"sendToBack\",\n    value: function sendToBack() {\n      if (this.viewButtonBox) {\n        this.viewButtonBox.sendToBack();\n      }\n\n      if (this.outline) {\n        this.outline.sendToBack();\n      }\n    }\n  }, {\n    key: \"bringToFront\",\n    value: function bringToFront() {\n      if (this.viewButtonBox) {\n        this.viewButtonBox.bringToFront();\n      }\n\n      if (this.outline) {\n        this.outline.bringToFront();\n      }\n    }\n  }, {\n    key: \"setToolBoxVisible\",\n    value: function setToolBoxVisible(toolBoxVisible) {\n      this.setProperty('toolBoxVisible', toolBoxVisible);\n    }\n  }, {\n    key: \"setHandleVisible\",\n    value: function setHandleVisible(visible) {\n      this.setProperty('handleVisible', visible);\n    }\n  }, {\n    key: \"_updateHandle\",\n    value: function _updateHandle() {\n      if (this.handle) {\n        this.handle.setRightVisible(this.outline && this.outline.toggleBreadcrumbStyleEnabled && this.desktop.outlineDisplayStyle() === Tree.DisplayStyle.BREADCRUMB);\n      }\n    }\n  }, {\n    key: \"updateHandleVisibility\",\n    value: function updateHandleVisibility() {\n      // Don't show handle if desktop says handle must not be visible\n      this.setHandleVisible(this.desktop.navigationHandleVisible);\n    }\n  }, {\n    key: \"_renderToolBoxVisible\",\n    value: function _renderToolBoxVisible() {\n      if (this.toolBoxVisible) {\n        this._renderToolBox();\n      } else {\n        this._removeToolBox();\n      }\n    }\n  }, {\n    key: \"_renderToolBox\",\n    value: function _renderToolBox() {\n      if (this.toolBox) {\n        return;\n      }\n\n      this.toolBox = scout.create('DesktopToolBox', {\n        parent: this,\n        menus: this.desktop.menus\n      });\n      this.toolBox.render();\n    }\n  }, {\n    key: \"_removeToolBox\",\n    value: function _removeToolBox() {\n      if (!this.toolBox) {\n        return;\n      }\n\n      this.toolBox.destroy();\n      this.toolBox = null;\n    }\n  }, {\n    key: \"_renderHandleVisible\",\n    value: function _renderHandleVisible() {\n      if (this.handleVisible) {\n        this._renderHandle();\n      } else {\n        this._removeHandle();\n      }\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return scout.create('DesktopNavigationHandle', {\n        parent: this,\n        rightVisible: false,\n        horizontalAlignment: CollapseHandle.HorizontalAlignment.RIGHT\n      });\n    }\n  }, {\n    key: \"_renderHandle\",\n    value: function _renderHandle() {\n      if (this.handle) {\n        return;\n      }\n\n      this.handle = this._createHandle();\n      this.handle.render();\n      this.handle.addCssClass('navigation-open');\n      this.handle.on('action', this._onHandleAction.bind(this));\n\n      this._updateHandle();\n    }\n  }, {\n    key: \"_removeHandle\",\n    value: function _removeHandle() {\n      if (!this.handle) {\n        return;\n      }\n\n      this.handle.destroy();\n      this.handle = null;\n    }\n  }, {\n    key: \"_onNavigationBodyMouseDown\",\n    value: function _onNavigationBodyMouseDown(event) {\n      this.desktop.bringOutlineToFront();\n    }\n  }, {\n    key: \"_onViewButtonBoxPropertyChange\",\n    value: function _onViewButtonBoxPropertyChange(event) {\n      if (event.propertyName === 'menuButtons' || event.propertyName === 'tabButtons') {\n        this._updateSingleViewButton();\n      }\n    }\n  }, {\n    key: \"_onOutlinePropertyChange\",\n    value: function _onOutlinePropertyChange(event) {\n      if (event.propertyName === 'displayStyle') {\n        this._updateHandle();\n      }\n    }\n  }, {\n    key: \"_onDesktopPropertyChange\",\n    value: function _onDesktopPropertyChange(event) {\n      if (event.propertyName === 'navigationHandleVisible') {\n        this.updateHandleVisibility();\n      }\n    }\n  }, {\n    key: \"_onHandleAction\",\n    value: function _onHandleAction(event) {\n      if (event.left) {\n        this.desktop.shrinkNavigation();\n      } else {\n        this.desktop.enlargeNavigation();\n      }\n    }\n  }]);\n\n  return DesktopNavigation;\n}(Widget);\n\n_defineProperty(DesktopNavigation, \"DEFAULT_STYLE_WIDTH\", null);\n\n_defineProperty(DesktopNavigation, \"BREADCRUMB_STYLE_WIDTH\", null);\n\n_defineProperty(DesktopNavigation, \"MIN_WIDTH\", null);\n\nexport { DesktopNavigation as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/navigation/DesktopNavigation.js"],"names":["CollapseHandle","Desktop","DesktopNavigationLayout","HtmlComponent","scout","SingleLayout","styles","Tree","Widget","DesktopNavigation","$body","layoutData","toolBoxVisible","viewButtonBox","_outlinePropertyChangeHandler","_onOutlinePropertyChange","bind","_desktopPropertyChangeHandler","_onDesktopPropertyChange","_viewButtonBoxPropertyChangeHandler","_onViewButtonBoxPropertyChange","model","MIN_WIDTH","getSize","DEFAULT_STYLE_WIDTH","BREADCRUMB_STYLE_WIDTH","desktop","parent","updateHandleVisibility","_setOutline","outline","create","viewButtons","singleViewButton","on","_updateSingleViewButton","$container","$parent","appendDiv","htmlComp","install","session","setLayout","_onNavigationBodyMouseDown","htmlCompBody","exact","off","_renderViewButtonBox","_renderToolBoxVisible","_renderOutline","_renderHandleVisible","_renderSingleViewButton","render","remove","invalidateLayoutTree","rendered","validateLayoutTree","validateFocus","setProperty","newOutline","oldOutline","_removeOutline","setIconVisible","setParent","setBreadcrumbTogglingThreshold","toggleBreadcrumbStyleEnabled","displayStyle","setDisplayStyle","inBackground","_updateHandle","DisplayStyle","COMPACT","setSingleViewButton","menuCount","menuButtons","length","tabCount","tabButtons","setMenuTabVisible","toggleClass","sendToBack","bringToFront","visible","handle","setRightVisible","outlineDisplayStyle","BREADCRUMB","setHandleVisible","navigationHandleVisible","_renderToolBox","_removeToolBox","toolBox","menus","destroy","handleVisible","_renderHandle","_removeHandle","rightVisible","horizontalAlignment","HorizontalAlignment","RIGHT","_createHandle","addCssClass","_onHandleAction","event","bringOutlineToFront","propertyName","left","shrinkNavigation","enlargeNavigation"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {CollapseHandle, Desktop, DesktopNavigationLayout, HtmlComponent, scout, SingleLayout, styles, Tree, Widget} from '../../index';\n\nexport default class DesktopNavigation extends Widget {\n\n  constructor() {\n    super();\n    this.$body = null;\n    this.layoutData = {};\n    this.toolBoxVisible = false;\n    this.viewButtonBox = null;\n    this._outlinePropertyChangeHandler = this._onOutlinePropertyChange.bind(this);\n    this._desktopPropertyChangeHandler = this._onDesktopPropertyChange.bind(this);\n    this._viewButtonBoxPropertyChangeHandler = this._onViewButtonBoxPropertyChange.bind(this);\n  }\n\n  static DEFAULT_STYLE_WIDTH = null; // Configured in sizes.css\n  static BREADCRUMB_STYLE_WIDTH = null; // Configured in sizes.css\n  static MIN_WIDTH = null; // Configured in sizes.css\n\n  _init(model) {\n    super._init(model);\n    DesktopNavigation.MIN_WIDTH = styles.getSize('desktop-navigation', 'min-width', 'minWidth', 49);\n    DesktopNavigation.DEFAULT_STYLE_WIDTH = styles.getSize('desktop-navigation', 'width', 'width', 290);\n    DesktopNavigation.BREADCRUMB_STYLE_WIDTH = styles.getSize('desktop-navigation-breadcrumb', 'width', 'width', 240);\n    this.desktop = this.parent;\n    this.updateHandleVisibility();\n    this._setOutline(model.outline);\n    this.viewButtonBox = scout.create('ViewButtonBox', {\n      parent: this,\n      viewButtons: this.desktop.viewButtons,\n      singleViewButton: this.singleViewButton\n    });\n    this.viewButtonBox.on('propertyChange', this._viewButtonBoxPropertyChangeHandler);\n    this._updateSingleViewButton();\n  }\n\n  _render() {\n    this.$container = this.$parent.appendDiv('desktop-navigation');\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(new DesktopNavigationLayout(this));\n    this.htmlComp.layoutData = this.layoutData;\n\n    this.$body = this.$container.appendDiv('navigation-body')\n      .on('mousedown', this._onNavigationBodyMouseDown.bind(this));\n    this.htmlCompBody = HtmlComponent.install(this.$body, this.session);\n    this.htmlCompBody.setLayout(new SingleLayout(null, {exact: true}));\n\n    this.desktop.on('propertyChange', this._desktopPropertyChangeHandler);\n  }\n\n  _remove() {\n    this.desktop.off('propertyChange', this._desktopPropertyChangeHandler);\n    super._remove();\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderViewButtonBox();\n    this._renderToolBoxVisible();\n    this._renderOutline();\n    this._renderHandleVisible();\n    this._renderSingleViewButton();\n  }\n\n  _renderViewButtonBox() {\n    this.viewButtonBox.render();\n  }\n\n  _removeOutline() {\n    if (!this.outline) {\n      return;\n    }\n    this.outline.remove();\n  }\n\n  _renderOutline() {\n    if (!this.outline) {\n      return;\n    }\n    this.outline.render(this.$body);\n    this.outline.invalidateLayoutTree();\n    // Layout immediate to prevent flickering when breadcrumb mode is enabled\n    // but not initially while desktop gets rendered because it will be done at the end anyway\n    if (this.rendered) {\n      this.outline.validateLayoutTree();\n      this.outline.validateFocus();\n    }\n  }\n\n  setOutline(outline) {\n    this.setProperty('outline', outline);\n  }\n\n  _setOutline(newOutline) {\n    var oldOutline = this.outline;\n    if (this.outline) {\n      this.outline.off('propertyChange', this._outlinePropertyChangeHandler);\n    }\n    if (this.rendered) {\n      this._removeOutline();\n    }\n    this.outline = newOutline;\n    if (this.outline) {\n      this.outline.setIconVisible(this.singleViewButton);\n      this.outline.setParent(this);\n      this.outline.setBreadcrumbTogglingThreshold(DesktopNavigation.BREADCRUMB_STYLE_WIDTH);\n      // if both have breadcrumb-toggling enabled: make sure new outline uses same display style as old\n      if (this.outline.toggleBreadcrumbStyleEnabled && oldOutline && oldOutline.toggleBreadcrumbStyleEnabled &&\n        oldOutline.displayStyle) {\n        this.outline.setDisplayStyle(oldOutline.displayStyle);\n      }\n      this.outline.inBackground = this.desktop.inBackground;\n      this.outline.on('propertyChange', this._outlinePropertyChangeHandler);\n      this._updateHandle();\n    }\n  }\n\n  _updateSingleViewButton() {\n    if (this.desktop.displayStyle === Desktop.DisplayStyle.COMPACT) {\n      // There is not enough space to move the title up due to the toolbar -> Never switch to that mode in compact mode\n      this.setSingleViewButton(false);\n      return;\n    }\n\n    var menuCount = this.viewButtonBox.menuButtons.length,\n      tabCount = this.viewButtonBox.tabButtons.length;\n    if ((menuCount + tabCount) > 1) {\n      if (menuCount > 0) {\n        tabCount++;\n      }\n      this.setSingleViewButton(tabCount < 2);\n    } else {\n      this.setSingleViewButton(false);\n    }\n  }\n\n  setSingleViewButton(singleViewButton) {\n    this.setProperty('singleViewButton', singleViewButton);\n    if (this.outline) {\n      this.outline.setIconVisible(this.singleViewButton);\n    }\n    this.viewButtonBox.setMenuTabVisible(!singleViewButton);\n  }\n\n  _renderSingleViewButton() {\n    this.$container.toggleClass('single-view-button', this.singleViewButton);\n    this.invalidateLayoutTree();\n  }\n\n  sendToBack() {\n    if (this.viewButtonBox) {\n      this.viewButtonBox.sendToBack();\n    }\n    if (this.outline) {\n      this.outline.sendToBack();\n    }\n  }\n\n  bringToFront() {\n    if (this.viewButtonBox) {\n      this.viewButtonBox.bringToFront();\n    }\n    if (this.outline) {\n      this.outline.bringToFront();\n    }\n  }\n\n  setToolBoxVisible(toolBoxVisible) {\n    this.setProperty('toolBoxVisible', toolBoxVisible);\n  }\n\n  setHandleVisible(visible) {\n    this.setProperty('handleVisible', visible);\n  }\n\n  _updateHandle() {\n    if (this.handle) {\n      this.handle.setRightVisible(this.outline && this.outline.toggleBreadcrumbStyleEnabled &&\n        this.desktop.outlineDisplayStyle() === Tree.DisplayStyle.BREADCRUMB);\n    }\n  }\n\n  updateHandleVisibility() {\n    // Don't show handle if desktop says handle must not be visible\n    this.setHandleVisible(this.desktop.navigationHandleVisible);\n  }\n\n  _renderToolBoxVisible() {\n    if (this.toolBoxVisible) {\n      this._renderToolBox();\n    } else {\n      this._removeToolBox();\n    }\n  }\n\n  _renderToolBox() {\n    if (this.toolBox) {\n      return;\n    }\n    this.toolBox = scout.create('DesktopToolBox', {\n      parent: this,\n      menus: this.desktop.menus\n    });\n    this.toolBox.render();\n  }\n\n  _removeToolBox() {\n    if (!this.toolBox) {\n      return;\n    }\n    this.toolBox.destroy();\n    this.toolBox = null;\n  }\n\n  _renderHandleVisible() {\n    if (this.handleVisible) {\n      this._renderHandle();\n    } else {\n      this._removeHandle();\n    }\n  }\n\n  _createHandle() {\n    return scout.create('DesktopNavigationHandle', {\n      parent: this,\n      rightVisible: false,\n      horizontalAlignment: CollapseHandle.HorizontalAlignment.RIGHT\n    });\n  }\n\n  _renderHandle() {\n    if (this.handle) {\n      return;\n    }\n    this.handle = this._createHandle();\n    this.handle.render();\n    this.handle.addCssClass('navigation-open');\n    this.handle.on('action', this._onHandleAction.bind(this));\n    this._updateHandle();\n  }\n\n  _removeHandle() {\n    if (!this.handle) {\n      return;\n    }\n    this.handle.destroy();\n    this.handle = null;\n  }\n\n  _onNavigationBodyMouseDown(event) {\n    this.desktop.bringOutlineToFront();\n  }\n\n  _onViewButtonBoxPropertyChange(event) {\n    if (event.propertyName === 'menuButtons' || event.propertyName === 'tabButtons') {\n      this._updateSingleViewButton();\n    }\n  }\n\n  _onOutlinePropertyChange(event) {\n    if (event.propertyName === 'displayStyle') {\n      this._updateHandle();\n    }\n  }\n\n  _onDesktopPropertyChange(event) {\n    if (event.propertyName === 'navigationHandleVisible') {\n      this.updateHandleVisibility();\n    }\n  }\n\n  _onHandleAction(event) {\n    if (event.left) {\n      this.desktop.shrinkNavigation();\n    } else {\n      this.desktop.enlargeNavigation();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}