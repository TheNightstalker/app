{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\n/**\n * This class is used to reset and restore styles in the DOM, so we can measure the preferred size of the tree.\n */\nvar TreeLayoutResetter = /*#__PURE__*/function () {\n  function TreeLayoutResetter(tree) {\n    _classCallCheck(this, TreeLayoutResetter);\n\n    this._tree = tree;\n    this.cssSelector = '.tree';\n  }\n\n  _createClass(TreeLayoutResetter, [{\n    key: \"modifyDom\",\n    value: function modifyDom() {\n      this._ensureFirstLast();\n\n      this._tree.$container.css('display', 'inline-block').css('width', 'auto').css('height', 'auto');\n\n      this._tree.$data.css('display', 'inline-block');\n    }\n  }, {\n    key: \"restoreDom\",\n    value: function restoreDom() {\n      this._tree.$container.css('display', 'block').css('width', '100%').css('height', '100%');\n\n      this._tree.$data.css('display', 'block');\n    }\n  }, {\n    key: \"_ensureFirstLast\",\n    value: function _ensureFirstLast() {\n      var $nodes = this._tree.$data.children('.tree-node').removeClass('first last');\n\n      $nodes.first().addClass('first');\n      $nodes.last().addClass('last');\n    }\n  }]);\n\n  return TreeLayoutResetter;\n}();\n\nexport { TreeLayoutResetter as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/smartfield/TreeLayoutResetter.js"],"names":["TreeLayoutResetter","tree","_tree","cssSelector","_ensureFirstLast","$container","css","$data","$nodes","children","removeClass","first","addClass","last"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;IACqBA,kB;AAEnB,8BAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKC,KAAL,GAAaD,IAAb;AACA,SAAKE,WAAL,GAAmB,OAAnB;AACD;;;;gCAEW;AACV,WAAKC,gBAAL;;AACA,WAAKF,KAAL,CAAWG,UAAX,CACGC,GADH,CACO,SADP,EACkB,cADlB,EAEGA,GAFH,CAEO,OAFP,EAEgB,MAFhB,EAGGA,GAHH,CAGO,QAHP,EAGiB,MAHjB;;AAIA,WAAKJ,KAAL,CAAWK,KAAX,CACGD,GADH,CACO,SADP,EACkB,cADlB;AAED;;;iCAEY;AACX,WAAKJ,KAAL,CAAWG,UAAX,CACGC,GADH,CACO,SADP,EACkB,OADlB,EAEGA,GAFH,CAEO,OAFP,EAEgB,MAFhB,EAGGA,GAHH,CAGO,QAHP,EAGiB,MAHjB;;AAIA,WAAKJ,KAAL,CAAWK,KAAX,CACGD,GADH,CACO,SADP,EACkB,OADlB;AAED;;;uCAEkB;AACjB,UAAIE,MAAM,GAAG,KAAKN,KAAL,CAAWK,KAAX,CACVE,QADU,CACD,YADC,EAEVC,WAFU,CAEE,YAFF,CAAb;;AAGAF,MAAAA,MAAM,CAACG,KAAP,GACGC,QADH,CACY,OADZ;AAEAJ,MAAAA,MAAM,CAACK,IAAP,GACGD,QADH,CACY,MADZ;AAED;;;;;;SAlCkBZ,kB","sourcesContent":["/*\n * Copyright (c) 2014-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\n/**\n * This class is used to reset and restore styles in the DOM, so we can measure the preferred size of the tree.\n */\nexport default class TreeLayoutResetter {\n\n  constructor(tree) {\n    this._tree = tree;\n    this.cssSelector = '.tree';\n  }\n\n  modifyDom() {\n    this._ensureFirstLast();\n    this._tree.$container\n      .css('display', 'inline-block')\n      .css('width', 'auto')\n      .css('height', 'auto');\n    this._tree.$data\n      .css('display', 'inline-block');\n  }\n\n  restoreDom() {\n    this._tree.$container\n      .css('display', 'block')\n      .css('width', '100%')\n      .css('height', '100%');\n    this._tree.$data\n      .css('display', 'block');\n  }\n\n  _ensureFirstLast() {\n    var $nodes = this._tree.$data\n      .children('.tree-node')\n      .removeClass('first last');\n    $nodes.first()\n      .addClass('first');\n    $nodes.last()\n      .addClass('last');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}