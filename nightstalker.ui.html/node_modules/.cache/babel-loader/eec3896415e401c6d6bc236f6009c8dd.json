{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AggregateTableControl, arrays, objects, scout, Widget } from '../index';\nimport $ from 'jquery';\n/**\n * Delegates events between the Table and it's internal TileGrid.\n *\n */\n\nvar TableTileGridMediator = /*#__PURE__*/function (_Widget) {\n  _inherits(TableTileGridMediator, _Widget);\n\n  var _super = _createSuper(TableTileGridMediator);\n\n  function TableTileGridMediator() {\n    var _this;\n\n    _classCallCheck(this, TableTileGridMediator);\n\n    _this = _super.call(this);\n    _this.table = null;\n    _this.tileAccordion = null;\n    _this._tileGridListener = null;\n    _this._tableListener = null;\n    _this._destroyHandler = null;\n    _this.tiles = [];\n    _this.tileMappings = []; // used only in scout classic\n\n    _this.tilesMap = {}; // tiles by rowId\n\n    _this.tileFilterMap = {};\n    _this.groups = {};\n    _this.groupForTileMap = {}; // groupId by tile\n\n    _this.tableState = {}; // always stores the last table state before tileMode activation\n\n    _this._tileAccordionPropertyChangeHandler = _this._onTileAccordionPropertyChange.bind(_assertThisInitialized(_this));\n    _this._tileAccordionActionHandler = _this._onTileAccordionAction.bind(_assertThisInitialized(_this));\n    _this._tileAccordionClickHandler = _this._onTileAccordionClick.bind(_assertThisInitialized(_this));\n    _this._tableFilterAddedHandler = _this._onTableFilterAdded.bind(_assertThisInitialized(_this));\n    _this._tableFilterRemovedHandler = _this._onTableFilterRemoved.bind(_assertThisInitialized(_this));\n    _this._tableFilterHandler = _this._onTableFilter.bind(_assertThisInitialized(_this));\n    _this._tableGroupHandler = _this._onTableGroup.bind(_assertThisInitialized(_this));\n    _this._tableRowsSelectedHandler = _this._onTableRowsSelected.bind(_assertThisInitialized(_this));\n    _this._tableRowsInsertedHandler = _this._onTableRowsInserted.bind(_assertThisInitialized(_this));\n    _this._tableRowsDeletedHandler = _this._onTableRowsDeleted.bind(_assertThisInitialized(_this));\n    _this._tableAllRowsDeletedHandler = _this._onTableAllRowsDeleted.bind(_assertThisInitialized(_this));\n    _this._tableRowOrderChangedHandler = _this._onTableRowOrderChangedHandler.bind(_assertThisInitialized(_this));\n    _this._destroyHandler = _this._uninstallListeners.bind(_assertThisInitialized(_this)); // properties for internal tileAccordion\n\n    _this.exclusiveExpand = false;\n    _this.gridColumnCount = null;\n    _this.tileGridLayoutConfig = null;\n    _this.withPlaceholders = null;\n\n    _this._addWidgetProperties(['tileAccordion', 'tiles', 'tileMappings']);\n\n    return _this;\n  }\n\n  _createClass(TableTileGridMediator, [{\n    key: \"init\",\n    value: function init(model) {\n      _get(_getPrototypeOf(TableTileGridMediator.prototype), \"_init\", this).call(this, model);\n\n      this.table = this.parent;\n\n      if (!this.tileAccordion) {\n        this.tileAccordion = this._createTileAccordion();\n\n        this._installListeners();\n      }\n\n      this.tableState.headerVisible = this.table.headerVisible;\n\n      this._setTiles(this.tiles);\n\n      this._setTileMappings(this.tileMappings);\n    }\n  }, {\n    key: \"_installListeners\",\n    value: function _installListeners() {\n      this.tileAccordion.on('propertyChange', this._tileAccordionPropertyChangeHandler);\n      this.tileAccordion.on('tileAction', this._tileAccordionActionHandler);\n      this.tileAccordion.on('tileClick', this._tileAccordionClickHandler);\n      this.table.on('filterAdded', this._tableFilterAddedHandler);\n      this.table.on('filterRemoved', this._tableFilterRemovedHandler);\n      this.table.on('filter', this._tableFilterHandler);\n      this.table.on('group', this._tableGroupHandler);\n      this.table.on('rowsSelected', this._tableRowsSelectedHandler);\n      this.table.on('rowsInserted', this._tableRowsInsertedHandler);\n      this.table.on('rowsDeleted', this._tableRowsDeletedHandler);\n      this.table.on('allRowsDeleted', this._tableAllRowsDeletedHandler);\n      this.table.on('rowOrderChanged', this._tableRowOrderChangedHandler);\n      this.tileAccordion.on('destroy', this._destroyHandler);\n      this.table.on('destroy', this._destroyHandler);\n    }\n  }, {\n    key: \"_uninstallListeners\",\n    value: function _uninstallListeners() {\n      this.tileAccordion.off('propertyChange', this._tileAccordionPropertyChangeHandler);\n      this.tileAccordion.off('tileAction', this._tileAccordionActionHandler);\n      this.tileAccordion.off('tileClick', this._tileAccordionClickHandler);\n      this.table.off('filterAdded', this._tableFilterAddedHandler);\n      this.table.off('filterRemoved', this._tableFilterRemovedHandler);\n      this.table.off('filter', this._tableFilterHandler);\n      this.table.off('group', this._tableGroupHandler);\n      this.table.off('rowsSelected', this._tableRowsSelectedHandler);\n      this.table.off('rowsInserted', this._tableRowsInsertedHandler);\n      this.table.off('rowsDeleted', this._tableRowsDeletedHandler);\n      this.table.off('allRowsDeleted', this._tableAllRowsDeletedHandler);\n      this.table.off('rowOrderChanged', this._tableRowOrderChangedHandler);\n      this.tileAccordion.off('destroy', this._destroyHandler);\n      this.table.off('destroy', this._destroyHandler);\n    }\n  }, {\n    key: \"setGridColumnCount\",\n    value: function setGridColumnCount(gridColumnCount) {\n      this.setProperty('gridColumnCount', gridColumnCount);\n\n      if (this.tileAccordion) {\n        this.tileAccordion.setGridColumnCount(gridColumnCount);\n      }\n    }\n  }, {\n    key: \"setTileGridLayoutConfig\",\n    value: function setTileGridLayoutConfig(tileGridLayoutConfig) {\n      this.setProperty('tileGridLayoutConfig', tileGridLayoutConfig);\n\n      if (this.tileAccordion) {\n        this.tileAccordion.setTileGridLayoutConfig(tileGridLayoutConfig);\n      }\n    }\n  }, {\n    key: \"setWithPlaceholders\",\n    value: function setWithPlaceholders(withPlaceholders) {\n      this.setProperty('withPlaceholders', withPlaceholders);\n\n      if (this.tileAccordion) {\n        this.tileAccordion.setWithPlaceholders(withPlaceholders);\n      }\n    }\n  }, {\n    key: \"_setTileMappings\",\n    value: function _setTileMappings(tableRowTileMappings) {\n      this._setProperty('tileMappings', tableRowTileMappings);\n\n      if (!tableRowTileMappings) {\n        return;\n      }\n\n      var tiles = tableRowTileMappings.map(this.resolveMapping, this);\n\n      this._setTiles(tiles);\n    }\n  }, {\n    key: \"setTiles\",\n    value: function setTiles(tiles) {\n      this.setProperty('tiles', tiles);\n    }\n  }, {\n    key: \"_setTiles\",\n    value: function _setTiles(tiles) {\n      this._isUpdatingTiles = true; // remove all new tiles from this.tiles to prevent reused tiles from being destroyed in reset()\n\n      arrays.removeAll(this.tiles, tiles);\n      this.reset();\n\n      this._setTilesInternal(tiles);\n\n      this._isUpdatingTiles = false;\n    }\n  }, {\n    key: \"_setTilesInternal\",\n    value: function _setTilesInternal(tiles) {\n      // check if all tiles are already available in the table\n      var tableRowMissing = tiles.some(function (tile) {\n        return this.table.rowsMap[tile.rowId] === undefined;\n      }, this);\n\n      if (tableRowMissing) {\n        if (this.table.initialized) {\n          // wait for next insertRows event on the table to execute this function again\n          this.table.one('rowsInserted', this._setTilesInternal.bind(this, tiles));\n        } else {\n          // if table is not initialized already wait for the init event\n          this.table.one('init', this._setTilesInternal.bind(this, tiles));\n        }\n\n        return;\n      }\n\n      this._refreshTilesMap(tiles); // create simplified grouping for tile accordion, grouping on the table can be left as is.\n\n\n      this._initGroups(tiles);\n\n      this._setProperty('tiles', tiles);\n\n      this.tileAccordion.setTiles(this.tiles);\n\n      this._updateGroupVisibility();\n\n      this._syncSelectionFromTableToTile();\n    } // only used in ScoutJS, see TableAdapter.modifyTablePrototype()\n\n  }, {\n    key: \"loadTiles\",\n    value: function loadTiles() {\n      // hierarchy is not supported in tile mode. There is no way to visualize a parent-child hierarchy in the tileGrid. Therefore only top level rows are displayed.\n      var rows = this.table.rows.filter(function (row) {\n        return !row.parentRow;\n      });\n      var tiles = this.table.createTiles(rows);\n\n      if (tiles) {\n        this.setTiles(tiles);\n      }\n    }\n  }, {\n    key: \"resolveMapping\",\n    value: function resolveMapping(tableRowTileMapping) {\n      var tile = tableRowTileMapping.tile;\n      tile.rowId = tableRowTileMapping.tableRow;\n      tile.setParent(this);\n      tile.setOwner(this);\n      return tile;\n    } // update tilesMap with the given tiles or recreate tilesMap completely in case of null given\n\n  }, {\n    key: \"_refreshTilesMap\",\n    value: function _refreshTilesMap(tiles) {\n      if (!tiles) {\n        tiles = this.tiles;\n        this.tilesMap = {};\n      }\n\n      tiles.forEach(function (tile) {\n        this.tilesMap[tile.rowId] = tile;\n      }, this);\n    }\n  }, {\n    key: \"getTilesForRows\",\n    value: function getTilesForRows(rows) {\n      return rows.map(function (row) {\n        return this.tilesMap[row.id];\n      }, this).filter(function (t) {\n        return !!t;\n      });\n    }\n  }, {\n    key: \"_initGroups\",\n    value: function _initGroups(tiles) {\n      var primaryGroupingColumn = arrays.find(this.table.columns, function (column) {\n        return column.grouped && column.sortIndex === 0;\n      });\n      tiles.forEach(function (tile) {\n        var row = this.table.rowsMap[tile.rowId];\n        var groupId = primaryGroupingColumn ? primaryGroupingColumn.cellTextForGrouping(row) : 'default';\n        groupId = scout.nvl(groupId, ''); // use empty group to avoid NPE\n\n        this.groupForTileMap[row.id] = groupId; // check if group already exists, otherwise create it\n\n        var group = this.tileAccordion.getGroupById(groupId);\n\n        if (!group) {\n          group = this._createTileGroup(groupId, primaryGroupingColumn, row);\n\n          this._adaptTileGrid(group.body);\n\n          this.tileAccordion.insertGroup(group);\n        }\n\n        tile.parent = group;\n      }, this);\n    }\n  }, {\n    key: \"_adaptTileGrid\",\n    value: function _adaptTileGrid(tileGrid) {\n      // The table contains the menu items -> pass them to the showContextMenu function of the tileGrid.\n      objects.mandatoryFunction(tileGrid, '_showContextMenu');\n      var origShowContextMenu = tileGrid._showContextMenu;\n\n      tileGrid._showContextMenu = function (options) {\n        objects.mandatoryFunction(this.table, '_filterMenusForContextMenu');\n        options.menuItems = this.table._filterMenusForContextMenu();\n        scout.assertProperty(this.table, '_filterMenusHandler');\n        options.menuFilter = this.table._filterMenusHandler;\n        origShowContextMenu.call(tileGrid, options);\n      }.bind(this); // use the table's keyStrokeContext bindTarget for each tileGrid as well to ensure that the tileGrid's keyStrokes are active when the table is active\n\n\n      tileGrid.keyStrokeContext.$bindTarget = this.table.keyStrokeContext.$bindTarget;\n    }\n  }, {\n    key: \"_createTileAccordion\",\n    value: function _createTileAccordion() {\n      return scout.create('TileAccordion', {\n        parent: this.table,\n        virtual: true,\n        selectable: true,\n        multiselect: this.table.multiSelect,\n        exclusiveExpand: this.exclusiveExpand,\n        gridColumnCount: this.gridColumnCount,\n        tileGridLayoutConfig: this.tileGridLayoutConfig,\n        withPlaceholders: this.withPlaceholders\n      });\n    }\n  }, {\n    key: \"_createTileGroup\",\n    value: function _createTileGroup(groupId, primaryGroupingColumn, row) {\n      var htmlEnabled, title, iconId;\n\n      if (primaryGroupingColumn) {\n        htmlEnabled = primaryGroupingColumn.htmlEnabled;\n        var cell = primaryGroupingColumn.createAggrGroupCell(row);\n        title = cell.text;\n        iconId = cell.iconId;\n      }\n\n      return scout.create('Group', {\n        parent: this.tileAccordion,\n        id: groupId,\n        headerVisible: groupId !== 'default',\n        title: title,\n        titleHtmlEnabled: htmlEnabled,\n        iconId: iconId,\n        body: {\n          objectType: 'TileGrid',\n          scrollable: false\n        }\n      });\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      this.tableState.headerVisible = this.table.headerVisible;\n      this.table.setHeaderVisible(false);\n\n      if (this.table.tileTableHeader) {\n        this.table.tileTableHeader.setVisible(true);\n      } // hide aggregation table control\n\n\n      this.table.tableControls.forEach(function (control) {\n        if (control instanceof AggregateTableControl) {\n          this.tableState.aggregateTableControlSelected = control.selected;\n          control.setSelected(false, {\n            closeWhenUnselected: true,\n            animate: false\n          });\n          control.setVisible(false);\n        }\n      }, this);\n      this.tableState.loadingSupportContainer = this.table.loadingSupport.options$Container;\n\n      this.table.loadingSupport.options$Container = function () {\n        return this.tileAccordion.$container;\n      }.bind(this); // check if there exists a hierarchy within the tableRows\n\n\n      var hasHierarchy = arrays.find(this.table.rows, function (row) {\n        return row.parentRow;\n      }) !== null;\n\n      if (hasHierarchy) {\n        // add the hierarchyFilter since the tileMode doesn't support hierarchy\n        this.table.addFilter(scout.create('TileTableHierarchyFilter', {\n          table: this.table\n        }));\n        this.table.filter();\n      } // doesn't depend upon any tile data, therefore execute on activation\n\n\n      this._syncFiltersFromTableToTile();\n\n      this._syncScrollTopFromTableToTile();\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      // show aggregation table control\n      this.table.tableControls.forEach(function (control) {\n        if (control instanceof AggregateTableControl) {\n          control.setVisible(true);\n        }\n      }, this); // use _setProperty to avoid instant rendering, render manually later on (this is necessary since TableHeader depends upon table.$data)\n\n      this.table._setProperty('headerVisible', this.tableState.headerVisible);\n\n      if (this.table.tileTableHeader) {\n        this.table.tileTableHeader.setVisible(false);\n      }\n\n      if (this.tableState.loadingSupportContainer) {\n        this.table.loadingSupport.options$Container = this.tableState.loadingSupportContainer;\n      }\n\n      this.table.removeFilter(scout.create('TileTableHierarchyFilter'));\n      this.table.filter();\n\n      this._syncScrollTopFromTileGridToTable(); // complete reset\n\n\n      this.reset();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.tilesMap = {};\n      this.groups = {};\n      this.groupForTileMap = {};\n      this.tileAccordion.deleteAllTiles();\n      this.tileAccordion.deleteAllGroups(); // destroy tiles manually since owner is the mediator thus the tileGrid can't destroy them\n\n      this.tiles.forEach(function (tile) {\n        tile.destroy();\n      });\n    }\n  }, {\n    key: \"renderTileMode\",\n    value: function renderTileMode() {\n      if (this.table.tileMode) {\n        // if the table was previously in tileMode this is not necessary...\n        if (this.table.$data) {\n          this.table._removeData();\n        }\n\n        this._renderTileTableHeader();\n\n        this._renderTileAccordion();\n      } else {\n        this._removeTileTableHeader();\n\n        this._removeTileAccordion();\n\n        this.table._renderData();\n\n        this.table._renderTableHeader(); // restore selected state of the aggregationTableControl here since it depends on table.$data\n\n\n        if (this.tableState.aggregateTableControlSelected) {\n          arrays.find(this.table.tableControls, function (control) {\n            return control instanceof AggregateTableControl;\n          }).setSelected(true);\n        }\n      }\n\n      this.table._refreshMenuBarPosition();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      // destroy tiles manually since owner is the mediator thus the tileGrid can't destroy them\n      this.tiles.forEach(function (tile) {\n        tile.destroy();\n      });\n      this.tileAccordion.destroy();\n      this.tileAccordion = null;\n    }\n  }, {\n    key: \"insertTiles\",\n    value: function insertTiles(tiles) {\n      tiles = arrays.ensure(tiles);\n\n      if (tiles.length === 0) {\n        return;\n      }\n\n      this.setTiles(this.tiles.concat(tiles));\n    }\n  }, {\n    key: \"deleteTiles\",\n    value: function deleteTiles(tiles) {\n      if (!tiles) {\n        tiles = this.tiles.slice();\n      }\n\n      arrays.removeAll(this.tiles, tiles);\n      tiles.forEach(function (tile) {\n        delete this.tilesMap[tile.rowId];\n        delete this.groupForTileMap[tile.rowId];\n        var group = this.tileAccordion.getGroupByTile(tile);\n\n        if (group) {\n          // if there's only one left remove the group (tile is removed later)\n          if (group.body.tiles.length === 1) {\n            this.tileAccordion.deleteGroup(group);\n          }\n        }\n\n        tile.destroy();\n      }, this);\n      this.tileAccordion.deleteTiles(tiles);\n    }\n  }, {\n    key: \"_onTileAccordionPropertyChange\",\n    value: function _onTileAccordionPropertyChange(event) {\n      if (!this.table.tileMode) {\n        return;\n      }\n\n      if (event.propertyName === 'selectedTiles') {\n        this._syncSelectionFromTileGridToTable(event.source.getSelectedTiles());\n\n        if (this.tileAccordion.rendered) {\n          // Depending on the tiles content, selecting tiles with shift can lead to a mix of selecting the tiles content\n          // and the tiles itself, which doesn't look nice. Remove the text selection when selection tiles to avoid this.\n          this.tileAccordion.$container.document(true).getSelection().removeAllRanges();\n        }\n      }\n\n      if (event.propertyName === 'filteredTiles') {\n        this._updateGroupVisibility();\n      }\n    }\n  }, {\n    key: \"_onTileAccordionAction\",\n    value: function _onTileAccordionAction(event) {\n      if (!this.table.tileMode) {\n        return;\n      }\n\n      this.table.doRowAction(this.table.rowsMap[event.tile.rowId]);\n    }\n  }, {\n    key: \"_onTileAccordionClick\",\n    value: function _onTileAccordionClick(event) {\n      if (!this.table.tileMode) {\n        return;\n      }\n\n      this.table._triggerRowClick(this.table.rowsMap[event.tile.rowId], event.mouseButton);\n    }\n  }, {\n    key: \"_onTableRowsSelected\",\n    value: function _onTableRowsSelected(event) {\n      if (!this.table.tileMode) {\n        return;\n      }\n\n      this._syncSelectionFromTableToTile();\n    }\n  }, {\n    key: \"_onTableRowsInserted\",\n    value: function _onTableRowsInserted(event) {\n      if (!this.table.tileMode) {\n        return;\n      }\n\n      this.insertTiles(this.table.createTiles(event.rows));\n    }\n  }, {\n    key: \"_onTableRowsDeleted\",\n    value: function _onTableRowsDeleted(event) {\n      if (!this.table.tileMode) {\n        return;\n      }\n\n      this.deleteTiles(this.getTilesForRows(event.rows));\n    }\n  }, {\n    key: \"_onTableAllRowsDeleted\",\n    value: function _onTableAllRowsDeleted(event) {\n      if (!this.table.tileMode) {\n        return;\n      }\n\n      this.deleteTiles();\n    }\n  }, {\n    key: \"_onTableRowOrderChangedHandler\",\n    value: function _onTableRowOrderChangedHandler(event) {\n      // ignore event when not in tileMode or when this.tilesMap is not (yet) initialized correctly\n      if (!this.table.tileMode || $.isEmptyObject(this.tilesMap)) {\n        return;\n      }\n\n      this.tiles = this.table.rows.map(function (row) {\n        return this.tilesMap[row.id];\n      }, this);\n      this.tileAccordion.setTiles(this.tiles);\n    }\n  }, {\n    key: \"_onTableGroup\",\n    value: function _onTableGroup(event) {\n      if (!this.table.tileMode) {\n        return;\n      }\n\n      this.tileAccordion.deleteAllGroups();\n\n      this._initGroups(this.tiles);\n\n      this.tileAccordion.setTiles(this.tiles);\n    }\n  }, {\n    key: \"_onTableFilterAdded\",\n    value: function _onTableFilterAdded(event) {\n      if (!this.table.tileMode) {\n        return;\n      }\n\n      this._addFilter(event.filter);\n    }\n  }, {\n    key: \"_onTableFilterRemoved\",\n    value: function _onTableFilterRemoved(event) {\n      if (!this.table.tileMode) {\n        return;\n      }\n\n      this.tileAccordion.removeTileFilter(this.tileFilterMap[event.filter.createKey()]);\n      this.tileAccordion.filterTiles();\n    }\n  }, {\n    key: \"_addFilter\",\n    value: function _addFilter(tableFilter) {\n      var tileFilter = {\n        table: this.table,\n        accept: function accept(tile) {\n          var rowForTile = this.table.rowsMap[tile.rowId];\n\n          if (rowForTile) {\n            return tableFilter.accept(rowForTile);\n          }\n\n          return false;\n        }\n      };\n      var key = tableFilter.createKey();\n\n      if (this.tileFilterMap[key]) {\n        this.tileAccordion.removeTileFilter(this.tileFilterMap[key]);\n      }\n\n      this.tileFilterMap[key] = tileFilter;\n      this.tileAccordion.addTileFilter(tileFilter);\n    }\n  }, {\n    key: \"_onTableFilter\",\n    value: function _onTableFilter(event) {\n      if (!this.table.tileMode) {\n        return;\n      }\n\n      this.tileAccordion.filterTiles();\n    }\n  }, {\n    key: \"_syncSelectionFromTableToTile\",\n    value: function _syncSelectionFromTableToTile() {\n      if (this.tileAccordion) {\n        this.tileAccordion.selectTiles(this.getTilesForRows(this.table.selectedRows));\n      }\n    }\n  }, {\n    key: \"_syncSelectionFromTileGridToTable\",\n    value: function _syncSelectionFromTileGridToTable(selectedTiles) {\n      if (!this._isUpdatingTiles) {\n        var selectedRows = selectedTiles.map(function (tile) {\n          return this.table.rowsMap[tile.rowId];\n        }, this).filter(function (t) {\n          return Boolean(t);\n        });\n        this.table.selectRows(selectedRows);\n      }\n    }\n  }, {\n    key: \"_updateGroupVisibility\",\n    value: function _updateGroupVisibility() {\n      this.tileAccordion.groups.forEach(function (group) {\n        // Make groups invisible if a tile filter is active and no tiles match (= no tiles are visible)\n        var groupEmpty = group.body.filters.length > 0 && group.body.filteredTiles.length === 0;\n        group.setVisible(!groupEmpty);\n        group.setTitleSuffix('(' + group.body.filteredTiles.length + ')');\n      });\n    }\n  }, {\n    key: \"_syncScrollTopFromTableToTile\",\n    value: function _syncScrollTopFromTableToTile() {\n      var rowIndex = this.table._rowIndexAtScrollTop(this.table.scrollTop);\n\n      if (rowIndex <= 0) {\n        return;\n      }\n\n      var tile = this.tilesMap[this.table.rows[rowIndex].id];\n\n      if (!tile) {\n        return;\n      } // reset scrollTop on tileAccordion, otherwise it would overwrite the synced scrollTop\n\n\n      this.tileAccordion.scrollTop = null;\n      var options = {\n        align: 'top'\n      };\n\n      if (!tile.rendered) {\n        // Execute delayed because table may be not layouted yet\n        this.table.session.layoutValidator.schedulePostValidateFunction(tile.reveal.bind(tile, options));\n        return;\n      }\n\n      tile.reveal(options);\n    }\n  }, {\n    key: \"_syncScrollTopFromTileGridToTable\",\n    value: function _syncScrollTopFromTileGridToTable() {\n      var tile = this.tileAccordion._tileAtScrollTop(this.tileAccordion.scrollTop);\n\n      if (tile) {\n        var options = {\n          align: 'top'\n        };\n\n        if (!this.table._isDataRendered()) {\n          this.table.session.layoutValidator.schedulePostValidateFunction(this.table.scrollTo.bind(this.table, this.table.rowsMap[tile.rowId], options));\n        } else {\n          this.table.scrollTo(this.table.rowsMap[tile.rowId], options);\n        }\n      }\n    }\n  }, {\n    key: \"_syncFiltersFromTableToTile\",\n    value: function _syncFiltersFromTableToTile() {\n      if (this.tileAccordion) {\n        this.tileAccordion.setTileFilters([]);\n        Object.keys(this.table._filterMap).map(function (key) {\n          return this.table._filterMap[key];\n        }, this).forEach(function (tableFilter) {\n          this._addFilter(tableFilter);\n        }, this);\n        this.tileAccordion.filterTiles();\n      }\n    }\n  }, {\n    key: \"_renderTileTableHeader\",\n    value: function _renderTileTableHeader() {\n      if (this.table.tileTableHeader) {\n        this.table.tileTableHeader.render();\n      }\n    }\n  }, {\n    key: \"_removeTileTableHeader\",\n    value: function _removeTileTableHeader() {\n      if (this.table.tileTableHeader) {\n        this.table.tileTableHeader.remove();\n      }\n    }\n  }, {\n    key: \"_renderTileAccordion\",\n    value: function _renderTileAccordion() {\n      if (!this.tileAccordion.rendered) {\n        this.tileAccordion.render();\n      }\n    }\n  }, {\n    key: \"_removeTileAccordion\",\n    value: function _removeTileAccordion() {\n      if (this.tileAccordion.rendered) {\n        this.tileAccordion.remove();\n      }\n    }\n  }]);\n\n  return TableTileGridMediator;\n}(Widget);\n\nexport { TableTileGridMediator as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/table/TableTileGridMediator.js"],"names":["AggregateTableControl","arrays","objects","scout","Widget","$","TableTileGridMediator","table","tileAccordion","_tileGridListener","_tableListener","_destroyHandler","tiles","tileMappings","tilesMap","tileFilterMap","groups","groupForTileMap","tableState","_tileAccordionPropertyChangeHandler","_onTileAccordionPropertyChange","bind","_tileAccordionActionHandler","_onTileAccordionAction","_tileAccordionClickHandler","_onTileAccordionClick","_tableFilterAddedHandler","_onTableFilterAdded","_tableFilterRemovedHandler","_onTableFilterRemoved","_tableFilterHandler","_onTableFilter","_tableGroupHandler","_onTableGroup","_tableRowsSelectedHandler","_onTableRowsSelected","_tableRowsInsertedHandler","_onTableRowsInserted","_tableRowsDeletedHandler","_onTableRowsDeleted","_tableAllRowsDeletedHandler","_onTableAllRowsDeleted","_tableRowOrderChangedHandler","_onTableRowOrderChangedHandler","_uninstallListeners","exclusiveExpand","gridColumnCount","tileGridLayoutConfig","withPlaceholders","_addWidgetProperties","model","parent","_createTileAccordion","_installListeners","headerVisible","_setTiles","_setTileMappings","on","off","setProperty","setGridColumnCount","setTileGridLayoutConfig","setWithPlaceholders","tableRowTileMappings","_setProperty","map","resolveMapping","_isUpdatingTiles","removeAll","reset","_setTilesInternal","tableRowMissing","some","tile","rowsMap","rowId","undefined","initialized","one","_refreshTilesMap","_initGroups","setTiles","_updateGroupVisibility","_syncSelectionFromTableToTile","rows","filter","row","parentRow","createTiles","tableRowTileMapping","tableRow","setParent","setOwner","forEach","id","t","primaryGroupingColumn","find","columns","column","grouped","sortIndex","groupId","cellTextForGrouping","nvl","group","getGroupById","_createTileGroup","_adaptTileGrid","body","insertGroup","tileGrid","mandatoryFunction","origShowContextMenu","_showContextMenu","options","menuItems","_filterMenusForContextMenu","assertProperty","menuFilter","_filterMenusHandler","call","keyStrokeContext","$bindTarget","create","virtual","selectable","multiselect","multiSelect","htmlEnabled","title","iconId","cell","createAggrGroupCell","text","titleHtmlEnabled","objectType","scrollable","setHeaderVisible","tileTableHeader","setVisible","tableControls","control","aggregateTableControlSelected","selected","setSelected","closeWhenUnselected","animate","loadingSupportContainer","loadingSupport","options$Container","$container","hasHierarchy","addFilter","_syncFiltersFromTableToTile","_syncScrollTopFromTableToTile","removeFilter","_syncScrollTopFromTileGridToTable","deleteAllTiles","deleteAllGroups","destroy","tileMode","$data","_removeData","_renderTileTableHeader","_renderTileAccordion","_removeTileTableHeader","_removeTileAccordion","_renderData","_renderTableHeader","_refreshMenuBarPosition","ensure","length","concat","slice","getGroupByTile","deleteGroup","deleteTiles","event","propertyName","_syncSelectionFromTileGridToTable","source","getSelectedTiles","rendered","document","getSelection","removeAllRanges","doRowAction","_triggerRowClick","mouseButton","insertTiles","getTilesForRows","isEmptyObject","_addFilter","removeTileFilter","createKey","filterTiles","tableFilter","tileFilter","accept","rowForTile","key","addTileFilter","selectTiles","selectedRows","selectedTiles","Boolean","selectRows","groupEmpty","filters","filteredTiles","setTitleSuffix","rowIndex","_rowIndexAtScrollTop","scrollTop","align","session","layoutValidator","schedulePostValidateFunction","reveal","_tileAtScrollTop","_isDataRendered","scrollTo","setTileFilters","Object","keys","_filterMap","render","remove"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AggregateTableControl, arrays, objects, scout, Widget} from '../index';\nimport $ from 'jquery';\n\n/**\n * Delegates events between the Table and it's internal TileGrid.\n *\n */\nexport default class TableTileGridMediator extends Widget {\n\n  constructor() {\n    super();\n\n    this.table = null;\n    this.tileAccordion = null;\n\n    this._tileGridListener = null;\n    this._tableListener = null;\n    this._destroyHandler = null;\n\n    this.tiles = [];\n    this.tileMappings = []; // used only in scout classic\n    this.tilesMap = {}; // tiles by rowId\n    this.tileFilterMap = {};\n    this.groups = {};\n    this.groupForTileMap = {}; // groupId by tile\n    this.tableState = {}; // always stores the last table state before tileMode activation\n\n    this._tileAccordionPropertyChangeHandler = this._onTileAccordionPropertyChange.bind(this);\n    this._tileAccordionActionHandler = this._onTileAccordionAction.bind(this);\n    this._tileAccordionClickHandler = this._onTileAccordionClick.bind(this);\n    this._tableFilterAddedHandler = this._onTableFilterAdded.bind(this);\n    this._tableFilterRemovedHandler = this._onTableFilterRemoved.bind(this);\n    this._tableFilterHandler = this._onTableFilter.bind(this);\n    this._tableGroupHandler = this._onTableGroup.bind(this);\n    this._tableRowsSelectedHandler = this._onTableRowsSelected.bind(this);\n    this._tableRowsInsertedHandler = this._onTableRowsInserted.bind(this);\n    this._tableRowsDeletedHandler = this._onTableRowsDeleted.bind(this);\n    this._tableAllRowsDeletedHandler = this._onTableAllRowsDeleted.bind(this);\n    this._tableRowOrderChangedHandler = this._onTableRowOrderChangedHandler.bind(this);\n\n    this._destroyHandler = this._uninstallListeners.bind(this);\n\n    // properties for internal tileAccordion\n    this.exclusiveExpand = false;\n    this.gridColumnCount = null;\n    this.tileGridLayoutConfig = null;\n    this.withPlaceholders = null;\n\n    this._addWidgetProperties(['tileAccordion', 'tiles', 'tileMappings']);\n  }\n\n  init(model) {\n    super._init(model);\n\n    this.table = this.parent;\n\n    if (!this.tileAccordion) {\n      this.tileAccordion = this._createTileAccordion();\n      this._installListeners();\n    }\n    this.tableState.headerVisible = this.table.headerVisible;\n\n    this._setTiles(this.tiles);\n    this._setTileMappings(this.tileMappings);\n  }\n\n  _installListeners() {\n    this.tileAccordion.on('propertyChange', this._tileAccordionPropertyChangeHandler);\n    this.tileAccordion.on('tileAction', this._tileAccordionActionHandler);\n    this.tileAccordion.on('tileClick', this._tileAccordionClickHandler);\n    this.table.on('filterAdded', this._tableFilterAddedHandler);\n    this.table.on('filterRemoved', this._tableFilterRemovedHandler);\n    this.table.on('filter', this._tableFilterHandler);\n    this.table.on('group', this._tableGroupHandler);\n    this.table.on('rowsSelected', this._tableRowsSelectedHandler);\n    this.table.on('rowsInserted', this._tableRowsInsertedHandler);\n    this.table.on('rowsDeleted', this._tableRowsDeletedHandler);\n    this.table.on('allRowsDeleted', this._tableAllRowsDeletedHandler);\n    this.table.on('rowOrderChanged', this._tableRowOrderChangedHandler);\n\n    this.tileAccordion.on('destroy', this._destroyHandler);\n    this.table.on('destroy', this._destroyHandler);\n  }\n\n  _uninstallListeners() {\n    this.tileAccordion.off('propertyChange', this._tileAccordionPropertyChangeHandler);\n    this.tileAccordion.off('tileAction', this._tileAccordionActionHandler);\n    this.tileAccordion.off('tileClick', this._tileAccordionClickHandler);\n    this.table.off('filterAdded', this._tableFilterAddedHandler);\n    this.table.off('filterRemoved', this._tableFilterRemovedHandler);\n    this.table.off('filter', this._tableFilterHandler);\n    this.table.off('group', this._tableGroupHandler);\n    this.table.off('rowsSelected', this._tableRowsSelectedHandler);\n    this.table.off('rowsInserted', this._tableRowsInsertedHandler);\n    this.table.off('rowsDeleted', this._tableRowsDeletedHandler);\n    this.table.off('allRowsDeleted', this._tableAllRowsDeletedHandler);\n    this.table.off('rowOrderChanged', this._tableRowOrderChangedHandler);\n\n    this.tileAccordion.off('destroy', this._destroyHandler);\n    this.table.off('destroy', this._destroyHandler);\n  }\n\n  setGridColumnCount(gridColumnCount) {\n    this.setProperty('gridColumnCount', gridColumnCount);\n    if (this.tileAccordion) {\n      this.tileAccordion.setGridColumnCount(gridColumnCount);\n    }\n  }\n\n  setTileGridLayoutConfig(tileGridLayoutConfig) {\n    this.setProperty('tileGridLayoutConfig', tileGridLayoutConfig);\n    if (this.tileAccordion) {\n      this.tileAccordion.setTileGridLayoutConfig(tileGridLayoutConfig);\n    }\n  }\n\n  setWithPlaceholders(withPlaceholders) {\n    this.setProperty('withPlaceholders', withPlaceholders);\n    if (this.tileAccordion) {\n      this.tileAccordion.setWithPlaceholders(withPlaceholders);\n    }\n  }\n\n  _setTileMappings(tableRowTileMappings) {\n    this._setProperty('tileMappings', tableRowTileMappings);\n    if (!tableRowTileMappings) {\n      return;\n    }\n    var tiles = tableRowTileMappings.map(this.resolveMapping, this);\n    this._setTiles(tiles);\n  }\n\n  setTiles(tiles) {\n    this.setProperty('tiles', tiles);\n  }\n\n  _setTiles(tiles) {\n    this._isUpdatingTiles = true;\n    // remove all new tiles from this.tiles to prevent reused tiles from being destroyed in reset()\n    arrays.removeAll(this.tiles, tiles);\n    this.reset();\n    this._setTilesInternal(tiles);\n    this._isUpdatingTiles = false;\n  }\n\n  _setTilesInternal(tiles) {\n    // check if all tiles are already available in the table\n    var tableRowMissing = tiles.some(function(tile) {\n      return this.table.rowsMap[tile.rowId] === undefined;\n    }, this);\n\n    if (tableRowMissing) {\n      if (this.table.initialized) {\n        // wait for next insertRows event on the table to execute this function again\n        this.table.one('rowsInserted', this._setTilesInternal.bind(this, tiles));\n      } else {\n        // if table is not initialized already wait for the init event\n        this.table.one('init', this._setTilesInternal.bind(this, tiles));\n      }\n      return;\n    }\n\n    this._refreshTilesMap(tiles);\n\n    // create simplified grouping for tile accordion, grouping on the table can be left as is.\n    this._initGroups(tiles);\n\n    this._setProperty('tiles', tiles);\n\n    this.tileAccordion.setTiles(this.tiles);\n    this._updateGroupVisibility();\n\n    this._syncSelectionFromTableToTile();\n  }\n\n  // only used in ScoutJS, see TableAdapter.modifyTablePrototype()\n  loadTiles() {\n    // hierarchy is not supported in tile mode. There is no way to visualize a parent-child hierarchy in the tileGrid. Therefore only top level rows are displayed.\n    var rows = this.table.rows.filter(function(row) {\n      return !row.parentRow;\n    });\n    var tiles = this.table.createTiles(rows);\n    if (tiles) {\n      this.setTiles(tiles);\n    }\n  }\n\n  resolveMapping(tableRowTileMapping) {\n    var tile = tableRowTileMapping.tile;\n    tile.rowId = tableRowTileMapping.tableRow;\n    tile.setParent(this);\n    tile.setOwner(this);\n    return tile;\n  }\n\n  // update tilesMap with the given tiles or recreate tilesMap completely in case of null given\n  _refreshTilesMap(tiles) {\n    if (!tiles) {\n      tiles = this.tiles;\n      this.tilesMap = {};\n    }\n    tiles.forEach(function(tile) {\n      this.tilesMap[tile.rowId] = tile;\n    }, this);\n  }\n\n  getTilesForRows(rows) {\n    return rows.map(function(row) {\n      return this.tilesMap[row.id];\n    }, this).filter(function(t) {\n      return !!t;\n    });\n  }\n\n  _initGroups(tiles) {\n    var primaryGroupingColumn = arrays.find(this.table.columns, function(column) {\n      return column.grouped && column.sortIndex === 0;\n    });\n\n    tiles.forEach(function(tile) {\n      var row = this.table.rowsMap[tile.rowId];\n      var groupId = primaryGroupingColumn ? primaryGroupingColumn.cellTextForGrouping(row) : 'default';\n      groupId = scout.nvl(groupId, ''); // use empty group to avoid NPE\n      this.groupForTileMap[row.id] = groupId;\n      // check if group already exists, otherwise create it\n      var group = this.tileAccordion.getGroupById(groupId);\n      if (!group) {\n        group = this._createTileGroup(groupId, primaryGroupingColumn, row);\n        this._adaptTileGrid(group.body);\n        this.tileAccordion.insertGroup(group);\n      }\n      tile.parent = group;\n    }, this);\n  }\n\n  _adaptTileGrid(tileGrid) {\n    // The table contains the menu items -> pass them to the showContextMenu function of the tileGrid.\n    objects.mandatoryFunction(tileGrid, '_showContextMenu');\n    var origShowContextMenu = tileGrid._showContextMenu;\n    tileGrid._showContextMenu = function(options) {\n      objects.mandatoryFunction(this.table, '_filterMenusForContextMenu');\n      options.menuItems = this.table._filterMenusForContextMenu();\n      scout.assertProperty(this.table, '_filterMenusHandler');\n      options.menuFilter = this.table._filterMenusHandler;\n      origShowContextMenu.call(tileGrid, options);\n    }.bind(this);\n    // use the table's keyStrokeContext bindTarget for each tileGrid as well to ensure that the tileGrid's keyStrokes are active when the table is active\n    tileGrid.keyStrokeContext.$bindTarget = this.table.keyStrokeContext.$bindTarget;\n  }\n\n  _createTileAccordion() {\n    return scout.create('TileAccordion', {\n      parent: this.table,\n      virtual: true,\n      selectable: true,\n      multiselect: this.table.multiSelect,\n      exclusiveExpand: this.exclusiveExpand,\n      gridColumnCount: this.gridColumnCount,\n      tileGridLayoutConfig: this.tileGridLayoutConfig,\n      withPlaceholders: this.withPlaceholders\n    });\n  }\n\n  _createTileGroup(groupId, primaryGroupingColumn, row) {\n    var htmlEnabled, title, iconId;\n    if (primaryGroupingColumn) {\n      htmlEnabled = primaryGroupingColumn.htmlEnabled;\n      var cell = primaryGroupingColumn.createAggrGroupCell(row);\n      title = cell.text;\n      iconId = cell.iconId;\n    }\n    return scout.create('Group', {\n      parent: this.tileAccordion,\n      id: groupId,\n      headerVisible: groupId !== 'default',\n      title: title,\n      titleHtmlEnabled: htmlEnabled,\n      iconId: iconId,\n      body: {\n        objectType: 'TileGrid',\n        scrollable: false\n      }\n    });\n  }\n\n  activate() {\n    this.tableState.headerVisible = this.table.headerVisible;\n    this.table.setHeaderVisible(false);\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.setVisible(true);\n    }\n\n    // hide aggregation table control\n    this.table.tableControls.forEach(function(control) {\n      if (control instanceof AggregateTableControl) {\n        this.tableState.aggregateTableControlSelected = control.selected;\n        control.setSelected(false, {\n          closeWhenUnselected: true,\n          animate: false\n        });\n        control.setVisible(false);\n      }\n    }, this);\n\n    this.tableState.loadingSupportContainer = this.table.loadingSupport.options$Container;\n    this.table.loadingSupport.options$Container = function() {\n      return this.tileAccordion.$container;\n    }.bind(this);\n\n    // check if there exists a hierarchy within the tableRows\n    var hasHierarchy = arrays.find(this.table.rows, function(row) {\n      return row.parentRow;\n    }) !== null;\n\n    if (hasHierarchy) {\n      // add the hierarchyFilter since the tileMode doesn't support hierarchy\n      this.table.addFilter(scout.create('TileTableHierarchyFilter', {\n        table: this.table\n      }));\n      this.table.filter();\n    }\n\n    // doesn't depend upon any tile data, therefore execute on activation\n    this._syncFiltersFromTableToTile();\n\n    this._syncScrollTopFromTableToTile();\n  }\n\n  deactivate() {\n    // show aggregation table control\n    this.table.tableControls.forEach(function(control) {\n      if (control instanceof AggregateTableControl) {\n        control.setVisible(true);\n      }\n    }, this);\n\n    // use _setProperty to avoid instant rendering, render manually later on (this is necessary since TableHeader depends upon table.$data)\n    this.table._setProperty('headerVisible', this.tableState.headerVisible);\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.setVisible(false);\n    }\n\n    if (this.tableState.loadingSupportContainer) {\n      this.table.loadingSupport.options$Container = this.tableState.loadingSupportContainer;\n    }\n\n    this.table.removeFilter(scout.create('TileTableHierarchyFilter'));\n    this.table.filter();\n\n    this._syncScrollTopFromTileGridToTable();\n\n    // complete reset\n    this.reset();\n  }\n\n  reset() {\n    this.tilesMap = {};\n    this.groups = {};\n    this.groupForTileMap = {};\n    this.tileAccordion.deleteAllTiles();\n    this.tileAccordion.deleteAllGroups();\n\n    // destroy tiles manually since owner is the mediator thus the tileGrid can't destroy them\n    this.tiles.forEach(function(tile) {\n      tile.destroy();\n    });\n  }\n\n  renderTileMode() {\n    if (this.table.tileMode) {\n      // if the table was previously in tileMode this is not necessary...\n      if (this.table.$data) {\n        this.table._removeData();\n      }\n      this._renderTileTableHeader();\n      this._renderTileAccordion();\n    } else {\n      this._removeTileTableHeader();\n      this._removeTileAccordion();\n      this.table._renderData();\n      this.table._renderTableHeader();\n\n      // restore selected state of the aggregationTableControl here since it depends on table.$data\n      if (this.tableState.aggregateTableControlSelected) {\n        arrays.find(this.table.tableControls,\n          control => control instanceof AggregateTableControl)\n          .setSelected(true);\n      }\n\n    }\n    this.table._refreshMenuBarPosition();\n  }\n\n  destroy() {\n    // destroy tiles manually since owner is the mediator thus the tileGrid can't destroy them\n    this.tiles.forEach(function(tile) {\n      tile.destroy();\n    });\n\n    this.tileAccordion.destroy();\n    this.tileAccordion = null;\n  }\n\n  insertTiles(tiles) {\n    tiles = arrays.ensure(tiles);\n    if (tiles.length === 0) {\n      return;\n    }\n    this.setTiles(this.tiles.concat(tiles));\n  }\n\n  deleteTiles(tiles) {\n    if (!tiles) {\n      tiles = this.tiles.slice();\n    }\n    arrays.removeAll(this.tiles, tiles);\n    tiles.forEach(function(tile) {\n      delete this.tilesMap[tile.rowId];\n      delete this.groupForTileMap[tile.rowId];\n      var group = this.tileAccordion.getGroupByTile(tile);\n      if (group) {\n        // if there's only one left remove the group (tile is removed later)\n        if (group.body.tiles.length === 1) {\n          this.tileAccordion.deleteGroup(group);\n        }\n      }\n      tile.destroy();\n    }, this);\n    this.tileAccordion.deleteTiles(tiles);\n  }\n\n  _onTileAccordionPropertyChange(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    if (event.propertyName === 'selectedTiles') {\n      this._syncSelectionFromTileGridToTable(event.source.getSelectedTiles());\n      if (this.tileAccordion.rendered) {\n        // Depending on the tiles content, selecting tiles with shift can lead to a mix of selecting the tiles content\n        // and the tiles itself, which doesn't look nice. Remove the text selection when selection tiles to avoid this.\n        this.tileAccordion.$container.document(true).getSelection().removeAllRanges();\n      }\n    }\n    if (event.propertyName === 'filteredTiles') {\n      this._updateGroupVisibility();\n    }\n  }\n\n  _onTileAccordionAction(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.table.doRowAction(this.table.rowsMap[event.tile.rowId]);\n  }\n\n  _onTileAccordionClick(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.table._triggerRowClick(this.table.rowsMap[event.tile.rowId], event.mouseButton);\n  }\n\n  _onTableRowsSelected(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this._syncSelectionFromTableToTile();\n  }\n\n  _onTableRowsInserted(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.insertTiles(this.table.createTiles(event.rows));\n  }\n\n  _onTableRowsDeleted(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.deleteTiles(this.getTilesForRows(event.rows));\n  }\n\n  _onTableAllRowsDeleted(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.deleteTiles();\n  }\n\n  _onTableRowOrderChangedHandler(event) {\n    // ignore event when not in tileMode or when this.tilesMap is not (yet) initialized correctly\n    if (!this.table.tileMode || $.isEmptyObject(this.tilesMap)) {\n      return;\n    }\n    this.tiles = this.table.rows.map(function(row) {\n      return this.tilesMap[row.id];\n    }, this);\n    this.tileAccordion.setTiles(this.tiles);\n  }\n\n  _onTableGroup(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.tileAccordion.deleteAllGroups();\n    this._initGroups(this.tiles);\n    this.tileAccordion.setTiles(this.tiles);\n  }\n\n  _onTableFilterAdded(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this._addFilter(event.filter);\n  }\n\n  _onTableFilterRemoved(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n\n    this.tileAccordion.removeTileFilter(this.tileFilterMap[event.filter.createKey()]);\n    this.tileAccordion.filterTiles();\n  }\n\n  _addFilter(tableFilter) {\n    var tileFilter = {\n      table: this.table,\n      accept: function(tile) {\n        var rowForTile = this.table.rowsMap[tile.rowId];\n        if (rowForTile) {\n          return tableFilter.accept(rowForTile);\n        }\n        return false;\n      }\n    };\n    var key = tableFilter.createKey();\n    if (this.tileFilterMap[key]) {\n      this.tileAccordion.removeTileFilter(this.tileFilterMap[key]);\n    }\n    this.tileFilterMap[key] = tileFilter;\n    this.tileAccordion.addTileFilter(tileFilter);\n  }\n\n  _onTableFilter(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.tileAccordion.filterTiles();\n  }\n\n  _syncSelectionFromTableToTile() {\n    if (this.tileAccordion) {\n      this.tileAccordion.selectTiles(this.getTilesForRows(this.table.selectedRows));\n    }\n  }\n\n  _syncSelectionFromTileGridToTable(selectedTiles) {\n    if (!this._isUpdatingTiles) {\n      var selectedRows = selectedTiles.map(function(tile) {\n        return this.table.rowsMap[tile.rowId];\n      }, this).filter(function(t) {\n        return Boolean(t);\n      });\n      this.table.selectRows(selectedRows);\n    }\n  }\n\n  _updateGroupVisibility() {\n    this.tileAccordion.groups.forEach(function(group) {\n      // Make groups invisible if a tile filter is active and no tiles match (= no tiles are visible)\n      var groupEmpty = group.body.filters.length > 0 && group.body.filteredTiles.length === 0;\n      group.setVisible(!groupEmpty);\n      group.setTitleSuffix('(' + group.body.filteredTiles.length + ')');\n    });\n  }\n\n  _syncScrollTopFromTableToTile() {\n    var rowIndex = this.table._rowIndexAtScrollTop(this.table.scrollTop);\n    if (rowIndex <= 0) {\n      return;\n    }\n    var tile = this.tilesMap[this.table.rows[rowIndex].id];\n    if (!tile) {\n      return;\n    }\n\n    // reset scrollTop on tileAccordion, otherwise it would overwrite the synced scrollTop\n    this.tileAccordion.scrollTop = null;\n\n    var options = {\n      align: 'top'\n    };\n\n    if (!tile.rendered) {\n      // Execute delayed because table may be not layouted yet\n      this.table.session.layoutValidator.schedulePostValidateFunction(tile.reveal.bind(tile, options));\n      return;\n    }\n    tile.reveal(options);\n  }\n\n  _syncScrollTopFromTileGridToTable() {\n    var tile = this.tileAccordion._tileAtScrollTop(this.tileAccordion.scrollTop);\n    if (tile) {\n      var options = {\n        align: 'top'\n      };\n      if (!this.table._isDataRendered()) {\n        this.table.session.layoutValidator.schedulePostValidateFunction(this.table.scrollTo.bind(this.table, this.table.rowsMap[tile.rowId], options));\n      } else {\n        this.table.scrollTo(this.table.rowsMap[tile.rowId], options);\n      }\n    }\n  }\n\n  _syncFiltersFromTableToTile() {\n    if (this.tileAccordion) {\n      this.tileAccordion.setTileFilters([]);\n      Object.keys(this.table._filterMap)\n        .map(function(key) {\n          return this.table._filterMap[key];\n        }, this)\n        .forEach(function(tableFilter) {\n          this._addFilter(tableFilter);\n        }, this);\n      this.tileAccordion.filterTiles();\n    }\n  }\n\n  _renderTileTableHeader() {\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.render();\n    }\n  }\n\n  _removeTileTableHeader() {\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.remove();\n    }\n  }\n\n  _renderTileAccordion() {\n    if (!this.tileAccordion.rendered) {\n      this.tileAccordion.render();\n    }\n  }\n\n  _removeTileAccordion() {\n    if (this.tileAccordion.rendered) {\n      this.tileAccordion.remove();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}