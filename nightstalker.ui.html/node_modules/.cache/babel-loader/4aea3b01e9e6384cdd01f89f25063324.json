{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Form, FormField, GroupBox, icons, inspector, scout, scrollbars, strings, tooltips, WizardProgressFieldLayout } from '../../../index';\nimport $ from 'jquery';\n\nvar WizardProgressField = /*#__PURE__*/function (_FormField) {\n  _inherits(WizardProgressField, _FormField);\n\n  var _super = _createSuper(WizardProgressField);\n\n  function WizardProgressField() {\n    var _this;\n\n    _classCallCheck(this, WizardProgressField);\n\n    _this = _super.call(this);\n    _this.steps = []; // Used to determine direction of transition (\"going backward\" or \"going forward\")\n\n    _this.previousActiveStepIndex; // Helper map to find a step by step index. The step index does not necessarily correspond to the\n    // array index, because invisible model steps can produce \"holes\" in the sequence of indices.\n\n    _this.stepsMap = {};\n    return _this;\n  }\n\n  _createClass(WizardProgressField, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(WizardProgressField.prototype), \"_init\", this).call(this, model);\n\n      this._updateStepsMap();\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.addContainer(this.$parent, 'wizard-progress-field', new WizardProgressFieldLayout(this));\n      this.addField(this.$parent.makeDiv('wizard-steps'));\n      this.addStatus();\n      this.addLabel();\n      this.$wizardStepsBody = this.$field.appendDiv('wizard-steps-body');\n\n      this._installScrollbars({\n        axis: 'x'\n      }); // If this field is the first field in a form's main box, mark the form as \"wizard-container-form\"\n\n\n      if (this.parent instanceof GroupBox && this.parent.controls[0] === this && this.parent.parent instanceof Form) {\n        var form = this.parent.parent;\n        form.$container.addClass('wizard-container-form');\n      }\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(WizardProgressField.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderSteps();\n\n      this._renderActiveStepIndex();\n    }\n  }, {\n    key: \"_setSteps\",\n    value: function _setSteps(steps) {\n      this._setProperty('steps', steps);\n\n      this._updateStepsMap();\n    }\n  }, {\n    key: \"_renderSteps\",\n    value: function _renderSteps() {\n      this.$wizardStepsBody.children('.wizard-step').each(function () {\n        // Tooltips are only uninstalled if user clicked outside container. However, the steps\n        // may be updated by clicking inside the container. Therefore, manually make sure all\n        // tooltips are uninstalled before destroying the DOM elements.\n        tooltips.uninstall($(this).children('.wizard-step-content'));\n      });\n      this.$wizardStepsBody.empty();\n      this.steps.forEach(function (step, index) {\n        // Step\n        var $step = this.$wizardStepsBody.appendDiv('wizard-step').addClass(step.cssClass).data('wizard-step', step);\n        step.$step = $step;\n\n        this._updateStepClasses(step); // Inspector info\n\n\n        if (this.session.inspector) {\n          inspector.applyInfo(step, $step);\n          $step.attr('data-step-index', step.index);\n        } // Content\n\n\n        var $content = $step.appendDiv('wizard-step-content');\n\n        if (strings.hasText(step.tooltipText)) {\n          tooltips.install($content, {\n            parent: this,\n            text: step.tooltipText,\n            tooltipPosition: 'bottom'\n          });\n        } // Icon\n\n\n        var $icon = $content.appendDiv('wizard-step-content-icon-container').appendDiv('wizard-step-content-icon');\n\n        if (step.iconId) {\n          $icon.icon(step.iconId);\n        } else if (step.finished) {\n          $icon.icon(icons.CHECKED_BOLD);\n        } else {\n          $icon.text(index + 1);\n        } // Text\n\n\n        var $text = $content.appendDiv('wizard-step-content-text');\n        $text.appendDiv('wizard-step-title').textOrNbsp(step.title);\n\n        if (step.subTitle) {\n          $text.appendDiv('wizard-step-sub-title').textOrNbsp(step.subTitle);\n        } // Separator\n\n\n        if (index < this.steps.length - 1) {\n          this.$wizardStepsBody.appendDiv('wizard-step-separator').icon(icons.ANGLE_RIGHT);\n        }\n      }.bind(this));\n      this.invalidateLayoutTree(false);\n    }\n  }, {\n    key: \"_setActiveStepIndex\",\n    value: function _setActiveStepIndex(activeStepIndex) {\n      this.previousActiveStepIndex = this.activeStepIndex; // Ensure this.activeStepIndex always has a value. If the server has no active step set (may\n      // happen during transition between steps), we use -1 as dummy value\n\n      this._setProperty('activeStepIndex', scout.nvl(activeStepIndex, -1));\n    }\n  }, {\n    key: \"_renderActiveStepIndex\",\n    value: function _renderActiveStepIndex() {\n      this.steps.forEach(this._updateStepClasses.bind(this));\n      this.invalidateLayoutTree(false);\n    }\n  }, {\n    key: \"_updateStepClasses\",\n    value: function _updateStepClasses(step) {\n      var $step = step.$step;\n      $step.removeClass('active-step before-active-step after-active-step first last action-enabled disabled');\n      $step.off('click.active-step'); // Important: those indices correspond to the UI's data structures (this.steps) and are not necessarily\n      // consistent with the server indices (because the server does not send invisible steps).\n\n      var stepIndex = this.steps.indexOf(step);\n      var activeStepIndex = this.steps.indexOf(this.stepsMap[this.activeStepIndex]);\n\n      if (this.enabledComputed && step.enabled && step.actionEnabled && stepIndex !== this.activeStepIndex) {\n        $step.addClass('action-enabled');\n        $step.on('click.active-step', this._onStepClick.bind(this));\n      } else if (!this.enabledComputed || !step.enabled) {\n        $step.addClass('disabled');\n      }\n\n      if (stepIndex >= 0 && activeStepIndex >= 0) {\n        // Active\n        if (stepIndex < activeStepIndex) {\n          $step.addClass('before-active-step');\n        } else if (stepIndex > activeStepIndex) {\n          $step.addClass('after-active-step');\n        } else {\n          $step.addClass('active-step');\n        } // First / last\n\n\n        if (stepIndex === 0) {\n          $step.addClass('first');\n        }\n\n        if (stepIndex === this.steps.length - 1) {\n          $step.addClass('last');\n        }\n      } // update background color for this.$wizardStepsBody, use same as for last step (otherwise there might be white space after last step)\n\n\n      if (stepIndex === this.steps.length - 1) {\n        this.$wizardStepsBody.css('background-color', $step.css('background-color'));\n      }\n    }\n  }, {\n    key: \"_stepIndex\",\n    value: function _stepIndex($step) {\n      if ($step) {\n        var step = $step.data('wizard-step');\n\n        if (step) {\n          return step.index;\n        }\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"_updateStepsMap\",\n    value: function _updateStepsMap() {\n      this.stepsMap = {};\n      this.steps.forEach(function (step) {\n        this.stepsMap[step.index] = step;\n      }.bind(this));\n    }\n  }, {\n    key: \"_resolveStep\",\n    value: function _resolveStep(stepIndex) {\n      // Because \"step index\" does not necessarily correspond to the array indices\n      // (invisible model steps produce \"holes\"), we have to loop over the array.\n      for (var i = 0; i < this.steps.length; i++) {\n        var step = this.steps[i];\n\n        if (step.index === stepIndex) {\n          return step;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_onStepClick\",\n    value: function _onStepClick(event) {\n      var $step = $(event.currentTarget); // currentTarget instead of target to support event bubbling from inner divs\n\n      var targetStepIndex = this._stepIndex($step);\n\n      if (targetStepIndex >= 0 && targetStepIndex !== this.activeStepIndex) {\n        this.trigger('stepAction', {\n          stepIndex: targetStepIndex\n        });\n      }\n    }\n  }, {\n    key: \"scrollToActiveStep\",\n    value: function scrollToActiveStep() {\n      var currentStep = this.stepsMap[this.activeStepIndex];\n\n      if (currentStep) {\n        var $currentStep = currentStep.$step;\n        var scrollLeft = this.$field.scrollLeft();\n        var currentStepLeft = $currentStep.position().left;\n        var currentStepWidth = $currentStep.width();\n        var fieldWidth = this.$field.width(); // If going forward, try to scroll the steps such that the center of active step is not after 75% of the available space.\n        // If going backward, try to scroll the steps such that the center of the active step is not before 25% of the available space.\n\n        var goingBack = this.previousActiveStepIndex > this.activeStepIndex;\n        var p1 = scrollLeft + Math.floor(fieldWidth * (goingBack ? 0.25 : 0.75));\n        var p2 = currentStepLeft + Math.floor(currentStepWidth / 2);\n\n        if (goingBack && p2 < p1 || !goingBack && p2 > p1) {\n          scrollbars.scrollLeft(this.$field, scrollLeft + (p2 - p1));\n        }\n      }\n    }\n  }]);\n\n  return WizardProgressField;\n}(FormField);\n\nexport { WizardProgressField as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/wizard/WizardProgressField.js"],"names":["Form","FormField","GroupBox","icons","inspector","scout","scrollbars","strings","tooltips","WizardProgressFieldLayout","$","WizardProgressField","steps","previousActiveStepIndex","stepsMap","model","_updateStepsMap","addContainer","$parent","addField","makeDiv","addStatus","addLabel","$wizardStepsBody","$field","appendDiv","_installScrollbars","axis","parent","controls","form","$container","addClass","_renderSteps","_renderActiveStepIndex","_setProperty","children","each","uninstall","empty","forEach","step","index","$step","cssClass","data","_updateStepClasses","session","applyInfo","attr","$content","hasText","tooltipText","install","text","tooltipPosition","$icon","iconId","icon","finished","CHECKED_BOLD","$text","textOrNbsp","title","subTitle","length","ANGLE_RIGHT","bind","invalidateLayoutTree","activeStepIndex","nvl","removeClass","off","stepIndex","indexOf","enabledComputed","enabled","actionEnabled","on","_onStepClick","css","i","event","currentTarget","targetStepIndex","_stepIndex","trigger","currentStep","$currentStep","scrollLeft","currentStepLeft","position","left","currentStepWidth","width","fieldWidth","goingBack","p1","Math","floor","p2"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Form, FormField, GroupBox, icons, inspector, scout, scrollbars, strings, tooltips, WizardProgressFieldLayout} from '../../../index';\nimport $ from 'jquery';\n\nexport default class WizardProgressField extends FormField {\n\n  constructor() {\n    super();\n\n    this.steps = [];\n\n    // Used to determine direction of transition (\"going backward\" or \"going forward\")\n    this.previousActiveStepIndex;\n\n    // Helper map to find a step by step index. The step index does not necessarily correspond to the\n    // array index, because invisible model steps can produce \"holes\" in the sequence of indices.\n    this.stepsMap = {};\n  }\n\n  _init(model) {\n    super._init(model);\n    this._updateStepsMap();\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'wizard-progress-field', new WizardProgressFieldLayout(this));\n    this.addField(this.$parent.makeDiv('wizard-steps'));\n    this.addStatus();\n    this.addLabel();\n\n    this.$wizardStepsBody = this.$field.appendDiv('wizard-steps-body');\n\n    this._installScrollbars({\n      axis: 'x'\n    });\n\n    // If this field is the first field in a form's main box, mark the form as \"wizard-container-form\"\n    if (this.parent instanceof GroupBox && this.parent.controls[0] === this && this.parent.parent instanceof Form) {\n      var form = this.parent.parent;\n      form.$container.addClass('wizard-container-form');\n    }\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderSteps();\n    this._renderActiveStepIndex();\n  }\n\n  _setSteps(steps) {\n    this._setProperty('steps', steps);\n    this._updateStepsMap();\n  }\n\n  _renderSteps() {\n    this.$wizardStepsBody.children('.wizard-step').each(function() {\n      // Tooltips are only uninstalled if user clicked outside container. However, the steps\n      // may be updated by clicking inside the container. Therefore, manually make sure all\n      // tooltips are uninstalled before destroying the DOM elements.\n      tooltips.uninstall($(this).children('.wizard-step-content'));\n    });\n    this.$wizardStepsBody.empty();\n\n    this.steps.forEach(function(step, index) {\n      // Step\n      var $step = this.$wizardStepsBody\n        .appendDiv('wizard-step')\n        .addClass(step.cssClass)\n        .data('wizard-step', step);\n      step.$step = $step;\n      this._updateStepClasses(step);\n\n      // Inspector info\n      if (this.session.inspector) {\n        inspector.applyInfo(step, $step);\n        $step.attr('data-step-index', step.index);\n      }\n\n      // Content\n      var $content = $step.appendDiv('wizard-step-content');\n      if (strings.hasText(step.tooltipText)) {\n        tooltips.install($content, {\n          parent: this,\n          text: step.tooltipText,\n          tooltipPosition: 'bottom'\n        });\n      }\n\n      // Icon\n      var $icon = $content.appendDiv('wizard-step-content-icon-container').appendDiv('wizard-step-content-icon');\n      if (step.iconId) {\n        $icon.icon(step.iconId);\n      } else if (step.finished) {\n        $icon.icon(icons.CHECKED_BOLD);\n      } else {\n        $icon.text(index + 1);\n      }\n      // Text\n      var $text = $content.appendDiv('wizard-step-content-text');\n      $text.appendDiv('wizard-step-title').textOrNbsp(step.title);\n      if (step.subTitle) {\n        $text.appendDiv('wizard-step-sub-title').textOrNbsp(step.subTitle);\n      }\n\n      // Separator\n      if (index < this.steps.length - 1) {\n        this.$wizardStepsBody\n          .appendDiv('wizard-step-separator')\n          .icon(icons.ANGLE_RIGHT);\n      }\n    }.bind(this));\n\n    this.invalidateLayoutTree(false);\n  }\n\n  _setActiveStepIndex(activeStepIndex) {\n    this.previousActiveStepIndex = this.activeStepIndex;\n    // Ensure this.activeStepIndex always has a value. If the server has no active step set (may\n    // happen during transition between steps), we use -1 as dummy value\n    this._setProperty('activeStepIndex', scout.nvl(activeStepIndex, -1));\n  }\n\n  _renderActiveStepIndex() {\n    this.steps.forEach(this._updateStepClasses.bind(this));\n    this.invalidateLayoutTree(false);\n  }\n\n  _updateStepClasses(step) {\n    var $step = step.$step;\n    $step.removeClass('active-step before-active-step after-active-step first last action-enabled disabled');\n    $step.off('click.active-step');\n\n    // Important: those indices correspond to the UI's data structures (this.steps) and are not necessarily\n    // consistent with the server indices (because the server does not send invisible steps).\n    var stepIndex = this.steps.indexOf(step);\n    var activeStepIndex = this.steps.indexOf(this.stepsMap[this.activeStepIndex]);\n\n    if (this.enabledComputed && step.enabled && step.actionEnabled && stepIndex !== this.activeStepIndex) {\n      $step.addClass('action-enabled');\n      $step.on('click.active-step', this._onStepClick.bind(this));\n    } else if (!this.enabledComputed || !step.enabled) {\n      $step.addClass('disabled');\n    }\n\n    if (stepIndex >= 0 && activeStepIndex >= 0) {\n      // Active\n      if (stepIndex < activeStepIndex) {\n        $step.addClass('before-active-step');\n      } else if (stepIndex > activeStepIndex) {\n        $step.addClass('after-active-step');\n      } else {\n        $step.addClass('active-step');\n      }\n      // First / last\n      if (stepIndex === 0) {\n        $step.addClass('first');\n      }\n      if (stepIndex === this.steps.length - 1) {\n        $step.addClass('last');\n      }\n    }\n\n    // update background color for this.$wizardStepsBody, use same as for last step (otherwise there might be white space after last step)\n    if (stepIndex === this.steps.length - 1) {\n      this.$wizardStepsBody.css('background-color', $step.css('background-color'));\n    }\n  }\n\n  _stepIndex($step) {\n    if ($step) {\n      var step = $step.data('wizard-step');\n      if (step) {\n        return step.index;\n      }\n    }\n    return -1;\n  }\n\n  _updateStepsMap() {\n    this.stepsMap = {};\n    this.steps.forEach(function(step) {\n      this.stepsMap[step.index] = step;\n    }.bind(this));\n  }\n\n  _resolveStep(stepIndex) {\n    // Because \"step index\" does not necessarily correspond to the array indices\n    // (invisible model steps produce \"holes\"), we have to loop over the array.\n    for (var i = 0; i < this.steps.length; i++) {\n      var step = this.steps[i];\n      if (step.index === stepIndex) {\n        return step;\n      }\n    }\n    return null;\n  }\n\n  _onStepClick(event) {\n    var $step = $(event.currentTarget); // currentTarget instead of target to support event bubbling from inner divs\n    var targetStepIndex = this._stepIndex($step);\n    if (targetStepIndex >= 0 && targetStepIndex !== this.activeStepIndex) {\n      this.trigger('stepAction', {\n        stepIndex: targetStepIndex\n      });\n    }\n  }\n\n  scrollToActiveStep() {\n    var currentStep = this.stepsMap[this.activeStepIndex];\n    if (currentStep) {\n      var $currentStep = currentStep.$step;\n      var scrollLeft = this.$field.scrollLeft();\n      var currentStepLeft = $currentStep.position().left;\n      var currentStepWidth = $currentStep.width();\n      var fieldWidth = this.$field.width();\n\n      // If going forward, try to scroll the steps such that the center of active step is not after 75% of the available space.\n      // If going backward, try to scroll the steps such that the center of the active step is not before 25% of the available space.\n      var goingBack = (this.previousActiveStepIndex > this.activeStepIndex);\n      var p1 = scrollLeft + Math.floor(fieldWidth * (goingBack ? 0.25 : 0.75));\n      var p2 = currentStepLeft + Math.floor(currentStepWidth / 2);\n      if ((goingBack && p2 < p1) || (!goingBack && p2 > p1)) {\n        scrollbars.scrollLeft(this.$field, scrollLeft + (p2 - p1));\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}