{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { ModelAdapter, objects, scout } from '../index';\n\nvar TileGridAdapter = /*#__PURE__*/function (_ModelAdapter) {\n  _inherits(TileGridAdapter, _ModelAdapter);\n\n  var _super = _createSuper(TileGridAdapter);\n\n  function TileGridAdapter() {\n    var _this;\n\n    _classCallCheck(this, TileGridAdapter);\n\n    _this = _super.call(this);\n\n    _this._addRemoteProperties(['selectedTiles']);\n\n    _this._tileFilter = null;\n    return _this;\n  }\n\n  _createClass(TileGridAdapter, [{\n    key: \"_syncSelectedTiles\",\n    value: function _syncSelectedTiles(tiles) {\n      // TileGrid.js won't modify the selectedTiles array while processing the response -> ignore every selectedTiles property change\n      this.addFilterForPropertyName('selectedTiles');\n      this.widget.selectTiles(tiles);\n    }\n  }, {\n    key: \"_syncTiles\",\n    value: function _syncTiles(tiles) {\n      this.addFilterForPropertyName('selectedTiles');\n      this.widget.setTiles(tiles);\n    }\n  }, {\n    key: \"_initProperties\",\n    value: function _initProperties(model) {\n      _get(_getPrototypeOf(TileGridAdapter.prototype), \"_initProperties\", this).call(this, model);\n\n      if (!objects.isNullOrUndefined(model.filteredTiles)) {\n        // If filteredTiles is set a server side filter is active -> add a tile filter on JS side as well\n        this.tileFilter = scout.create('RemoteTileFilter', {\n          tileIds: model.filteredTiles\n        });\n        model.filters = [this.tileFilter];\n      } // filtered tiles are set by TileGrid.js as soon a applyFilters is called -> don't override with the values sent by the server\n\n\n      delete model.filteredTiles;\n    }\n  }, {\n    key: \"_syncFilteredTiles\",\n    value: function _syncFilteredTiles(tileIds) {\n      // If filteredTiles property changes on the fly, create or remove the filter accordingly\n      // -> If filteredTiles is null, no server side filter is active\n      // -> If filteredTiles is an empty array, the server side filter rejects every tile\n      if (!objects.isNullOrUndefined(tileIds)) {\n        if (!this.tileFilter) {\n          this.tileFilter = scout.create('RemoteTileFilter');\n          this.widget.addFilter(this.tileFilter);\n        }\n\n        this.tileFilter.setTileIds(tileIds);\n      } else {\n        this.widget.removeFilter(this.tileFilter);\n        this.tileFilter = null;\n      }\n\n      this.widget.filter();\n    }\n  }, {\n    key: \"_onWidgetTileClick\",\n    value: function _onWidgetTileClick(event) {\n      var data = {\n        tile: event.tile.id,\n        mouseButton: event.mouseButton\n      };\n\n      this._send('tileClick', data);\n    }\n  }, {\n    key: \"_onWidgetTileAction\",\n    value: function _onWidgetTileAction(event) {\n      var data = {\n        tile: event.tile.id\n      };\n\n      this._send('tileAction', data);\n    }\n  }, {\n    key: \"_onWidgetEvent\",\n    value: function _onWidgetEvent(event) {\n      if (event.type === 'tileClick') {\n        this._onWidgetTileClick(event);\n      } else if (event.type === 'tileAction') {\n        this._onWidgetTileAction(event);\n      } else {\n        _get(_getPrototypeOf(TileGridAdapter.prototype), \"_onWidgetEvent\", this).call(this, event);\n      }\n    }\n  }]);\n\n  return TileGridAdapter;\n}(ModelAdapter);\n\nexport { TileGridAdapter as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/tile/TileGridAdapter.js"],"names":["ModelAdapter","objects","scout","TileGridAdapter","_addRemoteProperties","_tileFilter","tiles","addFilterForPropertyName","widget","selectTiles","setTiles","model","isNullOrUndefined","filteredTiles","tileFilter","create","tileIds","filters","addFilter","setTileIds","removeFilter","filter","event","data","tile","id","mouseButton","_send","type","_onWidgetTileClick","_onWidgetTileAction"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAR,EAAsBC,OAAtB,EAA+BC,KAA/B,QAA2C,UAA3C;;IAEqBC,e;;;;;AAEnB,6BAAc;AAAA;;AAAA;;AACZ;;AACA,UAAKC,oBAAL,CAA0B,CAAC,eAAD,CAA1B;;AACA,UAAKC,WAAL,GAAmB,IAAnB;AAHY;AAIb;;;;uCAEkBC,K,EAAO;AACxB;AACA,WAAKC,wBAAL,CAA8B,eAA9B;AACA,WAAKC,MAAL,CAAYC,WAAZ,CAAwBH,KAAxB;AACD;;;+BAEUA,K,EAAO;AAChB,WAAKC,wBAAL,CAA8B,eAA9B;AACA,WAAKC,MAAL,CAAYE,QAAZ,CAAqBJ,KAArB;AACD;;;oCAEeK,K,EAAO;AACrB,2FAAsBA,KAAtB;;AACA,UAAI,CAACV,OAAO,CAACW,iBAAR,CAA0BD,KAAK,CAACE,aAAhC,CAAL,EAAqD;AACnD;AACA,aAAKC,UAAL,GAAkBZ,KAAK,CAACa,MAAN,CAAa,kBAAb,EAAiC;AACjDC,UAAAA,OAAO,EAAEL,KAAK,CAACE;AADkC,SAAjC,CAAlB;AAGAF,QAAAA,KAAK,CAACM,OAAN,GAAgB,CAAC,KAAKH,UAAN,CAAhB;AACD,OARoB,CASrB;;;AACA,aAAOH,KAAK,CAACE,aAAb;AACD;;;uCAEkBG,O,EAAS;AAC1B;AACA;AACA;AACA,UAAI,CAACf,OAAO,CAACW,iBAAR,CAA0BI,OAA1B,CAAL,EAAyC;AACvC,YAAI,CAAC,KAAKF,UAAV,EAAsB;AACpB,eAAKA,UAAL,GAAkBZ,KAAK,CAACa,MAAN,CAAa,kBAAb,CAAlB;AACA,eAAKP,MAAL,CAAYU,SAAZ,CAAsB,KAAKJ,UAA3B;AACD;;AACD,aAAKA,UAAL,CAAgBK,UAAhB,CAA2BH,OAA3B;AACD,OAND,MAMO;AACL,aAAKR,MAAL,CAAYY,YAAZ,CAAyB,KAAKN,UAA9B;AACA,aAAKA,UAAL,GAAkB,IAAlB;AACD;;AACD,WAAKN,MAAL,CAAYa,MAAZ;AACD;;;uCAEkBC,K,EAAO;AACxB,UAAIC,IAAI,GAAG;AACTC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAAN,CAAWC,EADR;AAETC,QAAAA,WAAW,EAAEJ,KAAK,CAACI;AAFV,OAAX;;AAIA,WAAKC,KAAL,CAAW,WAAX,EAAwBJ,IAAxB;AACD;;;wCAEmBD,K,EAAO;AACzB,UAAIC,IAAI,GAAG;AACTC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAAN,CAAWC;AADR,OAAX;;AAGA,WAAKE,KAAL,CAAW,YAAX,EAAyBJ,IAAzB;AACD;;;mCAEcD,K,EAAO;AACpB,UAAIA,KAAK,CAACM,IAAN,KAAe,WAAnB,EAAgC;AAC9B,aAAKC,kBAAL,CAAwBP,KAAxB;AACD,OAFD,MAEO,IAAIA,KAAK,CAACM,IAAN,KAAe,YAAnB,EAAiC;AACtC,aAAKE,mBAAL,CAAyBR,KAAzB;AACD,OAFM,MAEA;AACL,4FAAqBA,KAArB;AACD;AACF;;;;EAxE0CtB,Y;;SAAxBG,e","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {ModelAdapter, objects, scout} from '../index';\n\nexport default class TileGridAdapter extends ModelAdapter {\n\n  constructor() {\n    super();\n    this._addRemoteProperties(['selectedTiles']);\n    this._tileFilter = null;\n  }\n\n  _syncSelectedTiles(tiles) {\n    // TileGrid.js won't modify the selectedTiles array while processing the response -> ignore every selectedTiles property change\n    this.addFilterForPropertyName('selectedTiles');\n    this.widget.selectTiles(tiles);\n  }\n\n  _syncTiles(tiles) {\n    this.addFilterForPropertyName('selectedTiles');\n    this.widget.setTiles(tiles);\n  }\n\n  _initProperties(model) {\n    super._initProperties(model);\n    if (!objects.isNullOrUndefined(model.filteredTiles)) {\n      // If filteredTiles is set a server side filter is active -> add a tile filter on JS side as well\n      this.tileFilter = scout.create('RemoteTileFilter', {\n        tileIds: model.filteredTiles\n      });\n      model.filters = [this.tileFilter];\n    }\n    // filtered tiles are set by TileGrid.js as soon a applyFilters is called -> don't override with the values sent by the server\n    delete model.filteredTiles;\n  }\n\n  _syncFilteredTiles(tileIds) {\n    // If filteredTiles property changes on the fly, create or remove the filter accordingly\n    // -> If filteredTiles is null, no server side filter is active\n    // -> If filteredTiles is an empty array, the server side filter rejects every tile\n    if (!objects.isNullOrUndefined(tileIds)) {\n      if (!this.tileFilter) {\n        this.tileFilter = scout.create('RemoteTileFilter');\n        this.widget.addFilter(this.tileFilter);\n      }\n      this.tileFilter.setTileIds(tileIds);\n    } else {\n      this.widget.removeFilter(this.tileFilter);\n      this.tileFilter = null;\n    }\n    this.widget.filter();\n  }\n\n  _onWidgetTileClick(event) {\n    var data = {\n      tile: event.tile.id,\n      mouseButton: event.mouseButton\n    };\n    this._send('tileClick', data);\n  }\n\n  _onWidgetTileAction(event) {\n    var data = {\n      tile: event.tile.id\n    };\n    this._send('tileAction', data);\n  }\n\n  _onWidgetEvent(event) {\n    if (event.type === 'tileClick') {\n      this._onWidgetTileClick(event);\n    } else if (event.type === 'tileAction') {\n      this._onWidgetTileAction(event);\n    } else {\n      super._onWidgetEvent(event);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}