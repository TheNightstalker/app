{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { MessageBox, scout, Status, strings } from '../index';\nimport $ from 'jquery';\n/**\n * This class is a convenient builder for creating message boxes. Use the static functions to\n * create and open simple and often used message boxes.\n */\n\nvar MessageBoxes = /*#__PURE__*/function () {\n  function MessageBoxes() {\n    _classCallCheck(this, MessageBoxes);\n\n    this.parent = null;\n    this.yesText = null;\n    this.noText = null;\n    this.cancelText = null;\n    this.bodyText = null;\n    this.severity = Status.Severity.INFO;\n    this.headerText = null;\n    this.closeOnClick = true;\n    this.html = false;\n  }\n\n  _createClass(MessageBoxes, [{\n    key: \"init\",\n    value: function init(options) {\n      scout.assertParameter('parent', options.parent);\n      $.extend(this, options);\n    }\n  }, {\n    key: \"withHeader\",\n    value: function withHeader(headerText) {\n      this.headerText = headerText;\n      return this;\n    }\n    /**\n     * @param bodyText\n     * @param {boolean} [html] Set to true if body must contain HTML, default is false\n     * @returns {MessageBoxes}\n     */\n\n  }, {\n    key: \"withBody\",\n    value: function withBody(bodyText, html) {\n      this.bodyText = bodyText;\n      this.html = scout.nvl(html, false);\n      return this;\n    }\n  }, {\n    key: \"withSeverity\",\n    value: function withSeverity(severity) {\n      this.severity = scout.nvl(severity, Status.Severity.INFO);\n      return this;\n    }\n  }, {\n    key: \"withYes\",\n    value: function withYes(yesText) {\n      this.yesText = scout.nvl(yesText, this.parent.session.text('Yes'));\n      return this;\n    }\n  }, {\n    key: \"withNo\",\n    value: function withNo(noText) {\n      this.noText = scout.nvl(noText, this.parent.session.text('No'));\n      return this;\n    }\n  }, {\n    key: \"withCancel\",\n    value: function withCancel(cancelText) {\n      this.cancelText = scout.nvl(cancelText, this.parent.session.text('Cancel'));\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var options = {\n        parent: this.parent,\n        header: this.headerText,\n        body: this.bodyText,\n        severity: this.severity\n      };\n\n      if (strings.hasText(this.yesText)) {\n        options.yesButtonText = this.yesText;\n      }\n\n      if (strings.hasText(this.noText)) {\n        options.noButtonText = this.noText;\n      }\n\n      if (strings.hasText(this.cancelText)) {\n        options.cancelButtonText = this.cancelText;\n      } // When this class is refactored we should check with the author, why it needs two properties html and body.\n\n\n      if (this.html) {\n        options.html = options.body;\n        delete options.body;\n      }\n\n      return scout.create('MessageBox', options);\n    }\n    /**\n     * @returns {Promise} resolved to selected button / option\n     * @see MessageBox.Buttons\n     */\n\n  }, {\n    key: \"buildAndOpen\",\n    value: function buildAndOpen() {\n      var def = $.Deferred();\n      var messageBox = this.build();\n      messageBox.on('action', function (event) {\n        if (this.closeOnClick) {\n          messageBox.close();\n        }\n\n        def.resolve(event.option);\n      }.bind(this));\n      messageBox.open();\n      return def.promise();\n    }\n    /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  }], [{\n    key: \"create\",\n    value: function create(parent) {\n      return scout.create('MessageBoxes', {\n        parent: parent\n      });\n    }\n  }, {\n    key: \"createOk\",\n    value: function createOk(parent) {\n      return this.create(parent).withYes(parent.session.text('Ok'));\n    }\n  }, {\n    key: \"createYesNo\",\n    value: function createYesNo(parent) {\n      return this.create(parent).withYes().withNo();\n    }\n  }, {\n    key: \"createYesNoCancel\",\n    value: function createYesNoCancel(parent) {\n      return this.create(parent).withYes().withNo().withCancel();\n    }\n    /**\n     * Opens a message box with an Ok button.\n     *\n     * @returns {Promise} resolved to clicked button\n     * @param {Object} parent\n     * @param {string} bodyText\n     * @param {number} [severity] default is <code>Status.Severity.INFO</code>\n     * @static\n     */\n\n  }, {\n    key: \"openOk\",\n    value: function openOk(parent, bodyText, severity) {\n      return this.createOk(parent).withBody(bodyText).withSeverity(severity).buildAndOpen();\n    }\n    /**\n     * Opens a message box with a yes and a no button.\n     *\n     * @returns {Promise} resolved to clicked button\n     * @param {Object} parent\n     * @param {string} bodyText\n     * @param {number} [severity] default is <code>Status.Severity.INFO</code>\n     * @static\n     */\n\n  }, {\n    key: \"openYesNo\",\n    value: function openYesNo(parent, bodyText, severity) {\n      return this.createYesNo(parent).withBody(bodyText).withSeverity(severity).buildAndOpen();\n    }\n  }]);\n\n  return MessageBoxes;\n}();\n\nexport { MessageBoxes as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/messagebox/MessageBoxes.js"],"names":["MessageBox","scout","Status","strings","$","MessageBoxes","parent","yesText","noText","cancelText","bodyText","severity","Severity","INFO","headerText","closeOnClick","html","options","assertParameter","extend","nvl","session","text","header","body","hasText","yesButtonText","noButtonText","cancelButtonText","create","def","Deferred","messageBox","build","on","event","close","resolve","option","bind","open","promise","withYes","withNo","withCancel","createOk","withBody","withSeverity","buildAndOpen","createYesNo"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {MessageBox, scout, Status, strings} from '../index';\nimport $ from 'jquery';\n\n/**\n * This class is a convenient builder for creating message boxes. Use the static functions to\n * create and open simple and often used message boxes.\n */\nexport default class MessageBoxes {\n\n  constructor() {\n    this.parent = null;\n\n    this.yesText = null;\n    this.noText = null;\n    this.cancelText = null;\n    this.bodyText = null;\n    this.severity = Status.Severity.INFO;\n    this.headerText = null;\n    this.closeOnClick = true;\n    this.html = false;\n  }\n\n  init(options) {\n    scout.assertParameter('parent', options.parent);\n    $.extend(this, options);\n  }\n\n  withHeader(headerText) {\n    this.headerText = headerText;\n    return this;\n  }\n\n  /**\n   * @param bodyText\n   * @param {boolean} [html] Set to true if body must contain HTML, default is false\n   * @returns {MessageBoxes}\n   */\n  withBody(bodyText, html) {\n    this.bodyText = bodyText;\n    this.html = scout.nvl(html, false);\n    return this;\n  }\n\n  withSeverity(severity) {\n    this.severity = scout.nvl(severity, Status.Severity.INFO);\n    return this;\n  }\n\n  withYes(yesText) {\n    this.yesText = scout.nvl(yesText, this.parent.session.text('Yes'));\n    return this;\n  }\n\n  withNo(noText) {\n    this.noText = scout.nvl(noText, this.parent.session.text('No'));\n    return this;\n  }\n\n  withCancel(cancelText) {\n    this.cancelText = scout.nvl(cancelText, this.parent.session.text('Cancel'));\n    return this;\n  }\n\n  build() {\n    var options = {\n      parent: this.parent,\n      header: this.headerText,\n      body: this.bodyText,\n      severity: this.severity\n    };\n    if (strings.hasText(this.yesText)) {\n      options.yesButtonText = this.yesText;\n    }\n    if (strings.hasText(this.noText)) {\n      options.noButtonText = this.noText;\n    }\n    if (strings.hasText(this.cancelText)) {\n      options.cancelButtonText = this.cancelText;\n    }\n    // When this class is refactored we should check with the author, why it needs two properties html and body.\n    if (this.html) {\n      options.html = options.body;\n      delete options.body;\n    }\n    return scout.create('MessageBox', options);\n  }\n\n  /**\n   * @returns {Promise} resolved to selected button / option\n   * @see MessageBox.Buttons\n   */\n  buildAndOpen() {\n    var def = $.Deferred();\n    var messageBox = this.build();\n    messageBox.on('action', function(event) {\n      if (this.closeOnClick) {\n        messageBox.close();\n      }\n      def.resolve(event.option);\n    }.bind(this));\n    messageBox.open();\n    return def.promise();\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  static create(parent) {\n    return scout.create('MessageBoxes', {\n      parent: parent\n    });\n  }\n\n  static createOk(parent) {\n    return this.create(parent).withYes(parent.session.text('Ok'));\n  }\n\n  static createYesNo(parent) {\n    return this.create(parent).withYes().withNo();\n  }\n\n  static createYesNoCancel(parent) {\n    return this.create(parent).withYes().withNo().withCancel();\n  }\n\n  /**\n   * Opens a message box with an Ok button.\n   *\n   * @returns {Promise} resolved to clicked button\n   * @param {Object} parent\n   * @param {string} bodyText\n   * @param {number} [severity] default is <code>Status.Severity.INFO</code>\n   * @static\n   */\n  static openOk(parent, bodyText, severity) {\n    return this.createOk(parent)\n      .withBody(bodyText)\n      .withSeverity(severity)\n      .buildAndOpen();\n  }\n\n  /**\n   * Opens a message box with a yes and a no button.\n   *\n   * @returns {Promise} resolved to clicked button\n   * @param {Object} parent\n   * @param {string} bodyText\n   * @param {number} [severity] default is <code>Status.Severity.INFO</code>\n   * @static\n   */\n  static openYesNo(parent, bodyText, severity) {\n    return this.createYesNo(parent)\n      .withBody(bodyText)\n      .withSeverity(severity)\n      .buildAndOpen();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}