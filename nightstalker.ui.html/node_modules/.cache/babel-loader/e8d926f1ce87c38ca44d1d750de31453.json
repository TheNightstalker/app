{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport $ from 'jquery';\n/**\n * This class is used to reset and restore styles in the DOM, so we can measure the preferred size of the table.\n */\n\nvar TableLayoutResetter = /*#__PURE__*/function () {\n  function TableLayoutResetter(table) {\n    _classCallCheck(this, TableLayoutResetter);\n\n    this._table = table;\n    this._fillerWidth = null;\n    this.cssSelector = '.table';\n  }\n  /**\n   * Modifies the table in a way that the preferred width may be read.\n   * Removes explicit widths on rows, cells, fillers and sets display to inline-block.\n   */\n\n\n  _createClass(TableLayoutResetter, [{\n    key: \"modifyDom\",\n    value: function modifyDom() {\n      this._table.$container.css('display', 'inline-block').css('width', 'auto').css('height', 'auto');\n\n      this._table.$data.css('display', 'inline-block');\n\n      this._modifyFiller(this._table.$fillBefore);\n\n      this._modifyFiller(this._table.$fillAfter);\n\n      this._modifyTableData(this._cssBackup);\n    }\n  }, {\n    key: \"restoreDom\",\n    value: function restoreDom() {\n      this._table.$container.css('display', 'block').css('width', '100%').css('height', '100%');\n\n      this._table.$data.css('display', 'block');\n\n      this._restoreFiller(this._table.$fillBefore);\n\n      this._restoreFiller(this._table.$fillAfter);\n\n      this._modifyTableData(this._cssRestore);\n    }\n    /**\n     * Clears the given CSS property and stores the old value as data with prefix 'backup'\n     * which is used to restore the CSS property later.\n     */\n\n  }, {\n    key: \"_cssBackup\",\n    value: function _cssBackup($element, property) {\n      var oldValue = $element.css(property);\n      $element.css(property, '').data('backup' + property, oldValue);\n    }\n  }, {\n    key: \"_cssRestore\",\n    value: function _cssRestore($element, property) {\n      var dataProperty = 'backup' + property,\n          oldValue = $element.data(dataProperty);\n      $element.css(property, oldValue).removeData(dataProperty);\n    }\n    /**\n     * Go through all rows and cells and call the given modifyFunc (backup/restore) on each element.\n     */\n\n  }, {\n    key: \"_modifyTableData\",\n    value: function _modifyTableData(modifyFunc) {\n      var that = this;\n\n      this._table.$rows().each(function () {\n        var $row = $(this);\n        modifyFunc($row, 'width');\n\n        that._table.$cellsForRow($row).each(function () {\n          var $cell = $(this);\n          modifyFunc($cell, 'min-width');\n          modifyFunc($cell, 'max-width');\n        });\n      });\n    }\n  }, {\n    key: \"_modifyFiller\",\n    value: function _modifyFiller($filler) {\n      if ($filler) {\n        this._fillerWidth = $filler.css('width');\n        $filler.css('width', '');\n      }\n    }\n  }, {\n    key: \"_restoreFiller\",\n    value: function _restoreFiller($filler) {\n      if ($filler) {\n        $filler.css('width', this._fillerWidth);\n      }\n    }\n  }]);\n\n  return TableLayoutResetter;\n}();\n\nexport { TableLayoutResetter as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/smartfield/TableLayoutResetter.js"],"names":["$","TableLayoutResetter","table","_table","_fillerWidth","cssSelector","$container","css","$data","_modifyFiller","$fillBefore","$fillAfter","_modifyTableData","_cssBackup","_restoreFiller","_cssRestore","$element","property","oldValue","data","dataProperty","removeData","modifyFunc","that","$rows","each","$row","$cellsForRow","$cell","$filler"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport $ from 'jquery';\n\n/**\n * This class is used to reset and restore styles in the DOM, so we can measure the preferred size of the table.\n */\nexport default class TableLayoutResetter {\n\n  constructor(table) {\n    this._table = table;\n    this._fillerWidth = null;\n    this.cssSelector = '.table';\n  }\n\n  /**\n   * Modifies the table in a way that the preferred width may be read.\n   * Removes explicit widths on rows, cells, fillers and sets display to inline-block.\n   */\n  modifyDom() {\n    this._table.$container\n      .css('display', 'inline-block')\n      .css('width', 'auto')\n      .css('height', 'auto');\n    this._table.$data\n      .css('display', 'inline-block');\n\n    this._modifyFiller(this._table.$fillBefore);\n    this._modifyFiller(this._table.$fillAfter);\n    this._modifyTableData(this._cssBackup);\n  }\n\n  restoreDom() {\n    this._table.$container\n      .css('display', 'block')\n      .css('width', '100%')\n      .css('height', '100%');\n    this._table.$data\n      .css('display', 'block');\n\n    this._restoreFiller(this._table.$fillBefore);\n    this._restoreFiller(this._table.$fillAfter);\n    this._modifyTableData(this._cssRestore);\n  }\n\n  /**\n   * Clears the given CSS property and stores the old value as data with prefix 'backup'\n   * which is used to restore the CSS property later.\n   */\n  _cssBackup($element, property) {\n    var oldValue = $element.css(property);\n    $element\n      .css(property, '')\n      .data('backup' + property, oldValue);\n  }\n\n  _cssRestore($element, property) {\n    var dataProperty = 'backup' + property,\n      oldValue = $element.data(dataProperty);\n    $element\n      .css(property, oldValue)\n      .removeData(dataProperty);\n  }\n\n  /**\n   * Go through all rows and cells and call the given modifyFunc (backup/restore) on each element.\n   */\n  _modifyTableData(modifyFunc) {\n    var that = this;\n    this._table.$rows().each(function() {\n      var $row = $(this);\n      modifyFunc($row, 'width');\n      that._table.$cellsForRow($row).each(function() {\n        var $cell = $(this);\n        modifyFunc($cell, 'min-width');\n        modifyFunc($cell, 'max-width');\n      });\n    });\n  }\n\n  _modifyFiller($filler) {\n    if ($filler) {\n      this._fillerWidth = $filler.css('width');\n      $filler.css('width', '');\n    }\n  }\n\n  _restoreFiller($filler) {\n    if ($filler) {\n      $filler.css('width', this._fillerWidth);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}