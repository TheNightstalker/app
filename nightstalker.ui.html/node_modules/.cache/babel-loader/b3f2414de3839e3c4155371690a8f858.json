{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { HtmlComponent, OutlineViewButton, scout, ViewButtonBoxLayout, Widget } from '../../index';\n\nvar ViewButtonBox = /*#__PURE__*/function (_Widget) {\n  _inherits(ViewButtonBox, _Widget);\n\n  var _super = _createSuper(ViewButtonBox);\n\n  function ViewButtonBox() {\n    var _this;\n\n    _classCallCheck(this, ViewButtonBox);\n\n    _this = _super.call(this);\n    _this.viewMenuTab = null;\n    _this.viewButtons = [];\n    _this.menuButtons = [];\n    _this.tabButtons = [];\n    _this._desktopOutlineChangeHandler = _this._onDesktopOutlineChange.bind(_assertThisInitialized(_this));\n    _this._viewButtonPropertyChangeHandler = _this._onViewButtonPropertyChange.bind(_assertThisInitialized(_this));\n\n    _this._addWidgetProperties(['tabButtons']);\n\n    return _this;\n  }\n\n  _createClass(ViewButtonBox, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(ViewButtonBox.prototype), \"_init\", this).call(this, model);\n\n      this.desktop = this.session.desktop;\n      this.viewMenuTab = scout.create('ViewMenuTab', {\n        parent: this\n      });\n\n      this._setViewButtons(this.viewButtons);\n\n      this.desktop.on('outlineChange', this._desktopOutlineChangeHandler);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.$container = this.$parent.appendDiv('view-button-box');\n      this.htmlComp = HtmlComponent.install(this.$container, this.session);\n      this.htmlComp.setLayout(new ViewButtonBoxLayout(this));\n      this.viewMenuTab.render();\n\n      this._onDesktopOutlineChange();\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(ViewButtonBox.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderTabButtons();\n    }\n  }, {\n    key: \"_remove\",\n    value: function _remove() {\n      this.desktop.off('outlineChange', this._desktopOutlineChangeHandler);\n      this.viewButtons.forEach(function (viewButton) {\n        viewButton.off('selected', this._viewButtonPropertyChangeHandler);\n      }, this);\n\n      _get(_getPrototypeOf(ViewButtonBox.prototype), \"_remove\", this).call(this);\n    }\n  }, {\n    key: \"setMenuTabVisible\",\n    value: function setMenuTabVisible(menuTabVisible) {\n      this.viewMenuTab.setViewTabVisible(menuTabVisible);\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"setViewButtons\",\n    value: function setViewButtons(viewButtons) {\n      this.setProperty('viewButtons', viewButtons);\n    }\n  }, {\n    key: \"_setViewButtons\",\n    value: function _setViewButtons(viewButtons) {\n      if (this.viewButtons) {\n        this.viewButtons.forEach(function (viewButton) {\n          viewButton.off('propertyChange', this._viewButtonPropertyChangeHandler);\n        }, this);\n      }\n\n      this._setProperty('viewButtons', viewButtons);\n\n      this.viewButtons.forEach(function (viewButton) {\n        viewButton.on('propertyChange', this._viewButtonPropertyChangeHandler);\n      }, this);\n\n      this._updateViewButtons();\n    }\n  }, {\n    key: \"setTabButtons\",\n    value: function setTabButtons(tabButtons) {\n      this.setProperty('tabButtons', tabButtons);\n    }\n  }, {\n    key: \"_renderTabButtons\",\n    value: function _renderTabButtons() {\n      this.tabButtons.forEach(function (viewTab, i) {\n        viewTab.renderAsTab();\n        viewTab.tab();\n\n        if (i === this.tabButtons.length - 1) {\n          viewTab.last();\n        }\n      }, this);\n    }\n  }, {\n    key: \"_updateViewButtons\",\n    value: function _updateViewButtons() {\n      var viewButtons = this.viewButtons.filter(function (b) {\n        return b.visible;\n      }),\n          menuButtons = viewButtons.filter(function (b) {\n        return b.displayStyle === 'MENU';\n      }),\n          tabButtons = null; // render as tab if length is < 1\n\n      if (menuButtons.length > 1) {\n        tabButtons = viewButtons.filter(function (b) {\n          return b.displayStyle === 'TAB';\n        });\n      } else {\n        // all visible view buttons are rendered as tab\n        tabButtons = viewButtons;\n        menuButtons = [];\n      }\n\n      this._setMenuButtons(menuButtons);\n\n      this.setTabButtons(tabButtons);\n\n      this._updateVisibility();\n    }\n  }, {\n    key: \"_updateVisibility\",\n    value: function _updateVisibility(menuButtons) {\n      this.setVisible(this.tabButtons.length + this.menuButtons.length > 1);\n    }\n  }, {\n    key: \"setMenuButtons\",\n    value: function setMenuButtons(menuButtons) {\n      this.setProperty('menuButtons', menuButtons);\n\n      this._updateVisibility();\n    }\n  }, {\n    key: \"_setMenuButtons\",\n    value: function _setMenuButtons(menuButtons) {\n      this._setProperty('menuButtons', menuButtons);\n\n      this.viewMenuTab.setViewButtons(this.menuButtons);\n    }\n  }, {\n    key: \"sendToBack\",\n    value: function sendToBack() {\n      this.viewMenuTab.sendToBack();\n    }\n  }, {\n    key: \"bringToFront\",\n    value: function bringToFront() {\n      this.viewMenuTab.bringToFront();\n    }\n    /**\n     * This method updates the state of the view-menu-tab and the selected state of outline-view-button-box.\n     * This method must also work in offline mode.\n     */\n\n  }, {\n    key: \"_onDesktopOutlineChange\",\n    value: function _onDesktopOutlineChange(event) {\n      var outline = this.desktop.outline;\n      this.viewButtons.forEach(function (viewTab) {\n        if (viewTab instanceof OutlineViewButton) {\n          viewTab.onOutlineChange(outline);\n        }\n      });\n    }\n  }, {\n    key: \"_onViewButtonSelected\",\n    value: function _onViewButtonSelected(event) {\n      // Deselect other togglable view buttons\n      this.viewButtons.forEach(function (viewButton) {\n        if (viewButton !== event.source && viewButton.isToggleAction()) {\n          viewButton.setSelected(false);\n        }\n      }, this); // Inform viewMenu tab about new selection\n\n      this.viewMenuTab.onViewButtonSelected();\n    }\n  }, {\n    key: \"_onViewButtonPropertyChange\",\n    value: function _onViewButtonPropertyChange(event) {\n      if (event.propertyName === 'selected') {\n        this._onViewButtonSelected(event);\n      } else if (event.propertyName === 'visible' || event.propertyName === 'displayStyle') {\n        this._updateViewButtons();\n      }\n    }\n  }]);\n\n  return ViewButtonBox;\n}(Widget);\n\nexport { ViewButtonBox as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/viewbutton/ViewButtonBox.js"],"names":["HtmlComponent","OutlineViewButton","scout","ViewButtonBoxLayout","Widget","ViewButtonBox","viewMenuTab","viewButtons","menuButtons","tabButtons","_desktopOutlineChangeHandler","_onDesktopOutlineChange","bind","_viewButtonPropertyChangeHandler","_onViewButtonPropertyChange","_addWidgetProperties","model","desktop","session","create","parent","_setViewButtons","on","$container","$parent","appendDiv","htmlComp","install","setLayout","render","_renderTabButtons","off","forEach","viewButton","menuTabVisible","setViewTabVisible","invalidateLayoutTree","setProperty","_setProperty","_updateViewButtons","viewTab","i","renderAsTab","tab","length","last","filter","b","visible","displayStyle","_setMenuButtons","setTabButtons","_updateVisibility","setVisible","setViewButtons","sendToBack","bringToFront","event","outline","onOutlineChange","source","isToggleAction","setSelected","onViewButtonSelected","propertyName","_onViewButtonSelected"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {HtmlComponent, OutlineViewButton, scout, ViewButtonBoxLayout, Widget} from '../../index';\n\nexport default class ViewButtonBox extends Widget {\n\n  constructor() {\n    super();\n    this.viewMenuTab = null;\n    this.viewButtons = [];\n    this.menuButtons = [];\n    this.tabButtons = [];\n    this._desktopOutlineChangeHandler = this._onDesktopOutlineChange.bind(this);\n    this._viewButtonPropertyChangeHandler = this._onViewButtonPropertyChange.bind(this);\n    this._addWidgetProperties(['tabButtons']);\n  }\n\n  _init(model) {\n    super._init(model);\n    this.desktop = this.session.desktop;\n    this.viewMenuTab = scout.create('ViewMenuTab', {\n      parent: this\n    });\n    this._setViewButtons(this.viewButtons);\n    this.desktop.on('outlineChange', this._desktopOutlineChangeHandler);\n  }\n\n  _render() {\n    this.$container = this.$parent.appendDiv('view-button-box');\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(new ViewButtonBoxLayout(this));\n\n    this.viewMenuTab.render();\n    this._onDesktopOutlineChange();\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderTabButtons();\n  }\n\n  _remove() {\n    this.desktop.off('outlineChange', this._desktopOutlineChangeHandler);\n    this.viewButtons.forEach(function(viewButton) {\n      viewButton.off('selected', this._viewButtonPropertyChangeHandler);\n    }, this);\n\n    super._remove();\n  }\n\n  setMenuTabVisible(menuTabVisible) {\n    this.viewMenuTab.setViewTabVisible(menuTabVisible);\n    this.invalidateLayoutTree();\n  }\n\n  setViewButtons(viewButtons) {\n    this.setProperty('viewButtons', viewButtons);\n  }\n\n  _setViewButtons(viewButtons) {\n    if (this.viewButtons) {\n      this.viewButtons.forEach(function(viewButton) {\n        viewButton.off('propertyChange', this._viewButtonPropertyChangeHandler);\n      }, this);\n    }\n    this._setProperty('viewButtons', viewButtons);\n    this.viewButtons.forEach(function(viewButton) {\n      viewButton.on('propertyChange', this._viewButtonPropertyChangeHandler);\n    }, this);\n    this._updateViewButtons();\n  }\n\n  setTabButtons(tabButtons) {\n    this.setProperty('tabButtons', tabButtons);\n  }\n\n  _renderTabButtons() {\n    this.tabButtons.forEach(function(viewTab, i) {\n      viewTab.renderAsTab();\n      viewTab.tab();\n      if (i === this.tabButtons.length - 1) {\n        viewTab.last();\n      }\n    }, this);\n  }\n\n  _updateViewButtons() {\n    var viewButtons = this.viewButtons.filter(function(b) {\n        return b.visible;\n      }),\n      menuButtons = viewButtons.filter(function(b) {\n        return b.displayStyle === 'MENU';\n      }),\n      tabButtons = null;\n    // render as tab if length is < 1\n    if (menuButtons.length > 1) {\n      tabButtons = viewButtons.filter(function(b) {\n        return b.displayStyle === 'TAB';\n      });\n    } else {\n      // all visible view buttons are rendered as tab\n      tabButtons = viewButtons;\n      menuButtons = [];\n    }\n\n    this._setMenuButtons(menuButtons);\n\n    this.setTabButtons(tabButtons);\n    this._updateVisibility();\n  }\n\n  _updateVisibility(menuButtons) {\n    this.setVisible((this.tabButtons.length + this.menuButtons.length) > 1);\n  }\n\n  setMenuButtons(menuButtons) {\n    this.setProperty('menuButtons', menuButtons);\n    this._updateVisibility();\n  }\n\n  _setMenuButtons(menuButtons) {\n    this._setProperty('menuButtons', menuButtons);\n    this.viewMenuTab.setViewButtons(this.menuButtons);\n  }\n\n  sendToBack() {\n    this.viewMenuTab.sendToBack();\n  }\n\n  bringToFront() {\n    this.viewMenuTab.bringToFront();\n  }\n\n  /**\n   * This method updates the state of the view-menu-tab and the selected state of outline-view-button-box.\n   * This method must also work in offline mode.\n   */\n  _onDesktopOutlineChange(event) {\n    var outline = this.desktop.outline;\n    this.viewButtons.forEach(function(viewTab) {\n      if (viewTab instanceof OutlineViewButton) {\n        viewTab.onOutlineChange(outline);\n      }\n    });\n  }\n\n  _onViewButtonSelected(event) {\n    // Deselect other togglable view buttons\n    this.viewButtons.forEach(function(viewButton) {\n      if (viewButton !== event.source && viewButton.isToggleAction()) {\n        viewButton.setSelected(false);\n      }\n    }, this);\n\n    // Inform viewMenu tab about new selection\n    this.viewMenuTab.onViewButtonSelected();\n  }\n\n  _onViewButtonPropertyChange(event) {\n    if (event.propertyName === 'selected') {\n      this._onViewButtonSelected(event);\n    } else if (event.propertyName === 'visible' ||\n      event.propertyName === 'displayStyle') {\n      this._updateViewButtons();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}