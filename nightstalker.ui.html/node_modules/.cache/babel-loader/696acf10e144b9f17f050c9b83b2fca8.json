{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, DateField, dates, Status, ValueFieldAdapter } from '../../../index';\n\nvar DateFieldAdapter = /*#__PURE__*/function (_ValueFieldAdapter) {\n  _inherits(DateFieldAdapter, _ValueFieldAdapter);\n\n  var _super = _createSuper(DateFieldAdapter);\n\n  function DateFieldAdapter() {\n    var _this;\n\n    _classCallCheck(this, DateFieldAdapter);\n\n    _this = _super.call(this);\n    _this._errorStatus = null;\n    _this._errorStatusDisplayText = null;\n    return _this;\n  }\n\n  _createClass(DateFieldAdapter, [{\n    key: \"_initProperties\",\n\n    /**\n     * @override\n     */\n    value: function _initProperties(model) {\n      _get(_getPrototypeOf(DateFieldAdapter.prototype), \"_initProperties\", this).call(this, model);\n\n      this._updateErrorStatus(model.errorStatus, model.displayText);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_attachWidget\",\n    value: function _attachWidget() {\n      _get(_getPrototypeOf(DateFieldAdapter.prototype), \"_attachWidget\", this).call(this);\n\n      this.widget.setValidator(function (value, defaultValidator) {\n        // If the server reported an error for current display text,\n        // make sure it will be shown in the UI if the user enters that display text again or selects the same date using the picker\n        var displayText = this.formatValue(value);\n\n        if (this.modelAdapter._errorStatus && displayText === this.modelAdapter._errorStatusDisplayText) {\n          throw this.modelAdapter._errorStatus;\n        }\n\n        return defaultValidator(value);\n      }.bind(this.widget), false);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_onWidgetAcceptInput\",\n    value: function _onWidgetAcceptInput(event) {\n      var data = {\n        displayText: this.widget.displayText,\n        errorStatus: this.widget.errorStatus\n      }; // In case of an error, the value is still the old, valid value -> don't send it\n\n      if (!this.widget.errorStatus) {\n        data.value = dates.toJsonDate(this.widget.value);\n      }\n\n      this._send('acceptInput', data, {\n        showBusyIndicator: !event.whileTyping,\n        coalesce: function coalesce(previous) {\n          return this.target === previous.target && this.type === previous.type;\n        }\n      });\n\n      this._errorStatus = null;\n      this._errorStatusDisplayText = null;\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_syncDisplayText\",\n    value: function _syncDisplayText(displayText) {\n      // No need to call parseAndSetValue, the value will come separately\n      this.widget.setDisplayText(displayText);\n\n      this._updateErrorStatus(this._errorStatus, displayText);\n    }\n    /**\n     * Make sure hasDate and hasTime are always set before displayText, otherwise toggling hasDate and hasTime dynamically\n     * won't work because renderDisplayText would try to write the time into the date field\n     *\n     * @override\n     */\n\n  }, {\n    key: \"_orderPropertyNamesOnSync\",\n    value: function _orderPropertyNamesOnSync(newProperties) {\n      return Object.keys(newProperties).sort(this._createPropertySortFunc(DateFieldAdapter.PROPERTIES_ORDER));\n    }\n  }, {\n    key: \"_syncErrorStatus\",\n    value: function _syncErrorStatus(errorStatus) {\n      if (errorStatus) {\n        if (this.widget.errorStatus) {\n          // Don't loose information which part was invalid\n          errorStatus.invalidDate = this.widget.errorStatus.invalidDate;\n          errorStatus.invalidTime = this.widget.errorStatus.invalidTime;\n        } else {\n          // If the error happened only on server side, we do not know which part was invalid.\n          // Set both to true so that DateField._isDateValid / isTimeValid does not return true\n          errorStatus.invalidDate = true;\n          errorStatus.invalidTime = true;\n        }\n      }\n\n      this._updateErrorStatus(errorStatus, this.widget.displayText);\n\n      this.widget.setErrorStatus(errorStatus);\n    }\n  }, {\n    key: \"_updateErrorStatus\",\n    value: function _updateErrorStatus(errorStatus, displayText) {\n      // Find the first model error status. If server sends a UI error status (=PARSE_ERROR) then don't remember it\n      errorStatus = Status.ensure(errorStatus);\n      var modelErrorStatus = null;\n\n      if (errorStatus) {\n        modelErrorStatus = arrays.find(errorStatus.asFlatList(), function (status) {\n          return status.code !== DateField.ErrorCode.PARSE_ERROR;\n        });\n      } // Remember errorStatus from model\n\n\n      if (modelErrorStatus) {\n        this._errorStatus = modelErrorStatus;\n        this._errorStatusDisplayText = displayText;\n      } else {\n        this._errorStatus = null;\n        this._errorStatusDisplayText = null;\n      }\n    }\n  }]);\n\n  return DateFieldAdapter;\n}(ValueFieldAdapter);\n\n_defineProperty(DateFieldAdapter, \"PROPERTIES_ORDER\", ['hasTime', 'hasDate']);\n\nexport { DateFieldAdapter as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/datefield/DateFieldAdapter.js"],"names":["arrays","DateField","dates","Status","ValueFieldAdapter","DateFieldAdapter","_errorStatus","_errorStatusDisplayText","model","_updateErrorStatus","errorStatus","displayText","widget","setValidator","value","defaultValidator","formatValue","modelAdapter","bind","event","data","toJsonDate","_send","showBusyIndicator","whileTyping","coalesce","previous","target","type","setDisplayText","newProperties","Object","keys","sort","_createPropertySortFunc","PROPERTIES_ORDER","invalidDate","invalidTime","setErrorStatus","ensure","modelErrorStatus","find","asFlatList","status","code","ErrorCode","PARSE_ERROR"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, DateField, dates, Status, ValueFieldAdapter} from '../../../index';\n\nexport default class DateFieldAdapter extends ValueFieldAdapter {\n\n  constructor() {\n    super();\n    this._errorStatus = null;\n    this._errorStatusDisplayText = null;\n  }\n\n  static PROPERTIES_ORDER = ['hasTime', 'hasDate'];\n\n  /**\n   * @override\n   */\n  _initProperties(model) {\n    super._initProperties(model);\n    this._updateErrorStatus(model.errorStatus, model.displayText);\n  }\n\n  /**\n   * @override\n   */\n  _attachWidget() {\n    super._attachWidget();\n    this.widget.setValidator(function(value, defaultValidator) {\n      // If the server reported an error for current display text,\n      // make sure it will be shown in the UI if the user enters that display text again or selects the same date using the picker\n      var displayText = this.formatValue(value);\n      if (this.modelAdapter._errorStatus && displayText === this.modelAdapter._errorStatusDisplayText) {\n        throw this.modelAdapter._errorStatus;\n      }\n      return defaultValidator(value);\n    }.bind(this.widget), false);\n  }\n\n  /**\n   * @override\n   */\n  _onWidgetAcceptInput(event) {\n    var data = {\n      displayText: this.widget.displayText,\n      errorStatus: this.widget.errorStatus\n    };\n    // In case of an error, the value is still the old, valid value -> don't send it\n    if (!this.widget.errorStatus) {\n      data.value = dates.toJsonDate(this.widget.value);\n    }\n    this._send('acceptInput', data, {\n      showBusyIndicator: !event.whileTyping,\n      coalesce: function(previous) {\n        return this.target === previous.target && this.type === previous.type;\n      }\n    });\n    this._errorStatus = null;\n    this._errorStatusDisplayText = null;\n  }\n\n  /**\n   * @override\n   */\n  _syncDisplayText(displayText) {\n    // No need to call parseAndSetValue, the value will come separately\n    this.widget.setDisplayText(displayText);\n    this._updateErrorStatus(this._errorStatus, displayText);\n  }\n\n  /**\n   * Make sure hasDate and hasTime are always set before displayText, otherwise toggling hasDate and hasTime dynamically\n   * won't work because renderDisplayText would try to write the time into the date field\n   *\n   * @override\n   */\n  _orderPropertyNamesOnSync(newProperties) {\n    return Object.keys(newProperties).sort(this._createPropertySortFunc(DateFieldAdapter.PROPERTIES_ORDER));\n  }\n\n  _syncErrorStatus(errorStatus) {\n    if (errorStatus) {\n      if (this.widget.errorStatus) {\n        // Don't loose information which part was invalid\n        errorStatus.invalidDate = this.widget.errorStatus.invalidDate;\n        errorStatus.invalidTime = this.widget.errorStatus.invalidTime;\n      } else {\n        // If the error happened only on server side, we do not know which part was invalid.\n        // Set both to true so that DateField._isDateValid / isTimeValid does not return true\n        errorStatus.invalidDate = true;\n        errorStatus.invalidTime = true;\n      }\n    }\n\n    this._updateErrorStatus(errorStatus, this.widget.displayText);\n    this.widget.setErrorStatus(errorStatus);\n  }\n\n  _updateErrorStatus(errorStatus, displayText) {\n    // Find the first model error status. If server sends a UI error status (=PARSE_ERROR) then don't remember it\n    errorStatus = Status.ensure(errorStatus);\n    var modelErrorStatus = null;\n    if (errorStatus) {\n      modelErrorStatus = arrays.find(errorStatus.asFlatList(), function(status) {\n        return status.code !== DateField.ErrorCode.PARSE_ERROR;\n      });\n    }\n    // Remember errorStatus from model\n    if (modelErrorStatus) {\n      this._errorStatus = modelErrorStatus;\n      this._errorStatusDisplayText = displayText;\n    } else {\n      this._errorStatus = null;\n      this._errorStatusDisplayText = null;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}