{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects, scout, TypeDescriptor } from './index';\nimport $ from 'jquery';\n/**\n * @singleton\n */\n\nvar ObjectFactory = /*#__PURE__*/function () {\n  function ObjectFactory() {\n    _classCallCheck(this, ObjectFactory);\n\n    // use createUniqueId() to generate a new ID\n    this.uniqueIdSeqNo = 0;\n    this._registry = {};\n  }\n\n  _createClass(ObjectFactory, [{\n    key: \"_createObjectByType\",\n\n    /**\n     * Creates an object from the given objectType. Only the constructor is called.\n     *\n     * OBJECT TYPE:\n     *\n     * An object type may consist of three parts: [name.space.]Class[:Variant]\n     * 1. Name spaces (optional)\n     *    All name space parts have to end with a dot ('.') character. If this part is omitted, the default\n     *    name space \"scout.\" is assumed.\n     *    Examples: \"scout.\", \"my.custom.namespace.\"\n     * 2. Scout class name (mandatory)\n     *    Examples: \"Desktop\", \"Session\", \"StringField\"\n     * 3. Model variant (optional)\n     *    Custom variants of a class can be created by adding the custom class prefix after\n     *    the Scout class name and a colon character (':'). This prefix is then combined with\n     *    the class name.\n     *    Examples: \":Offline\", \":Horizontal\"\n     *\n     * Full examples:\n     *   Object type: Outline                                      -> Constructor: Outline\n     *   Object type: myNamespace.Outline                          -> Constructor: myNamespace.Outline\n     *   Object type: Outline:MyVariant                            -> Constructor: scout.MyVariantOutline\n     *   Object type: myNamespace.Outline:MyVariant                -> Constructor: myNamespace.MyVariantOutline\n     *   Object type: Outline:myNamespace.MyVariant                -> Constructor: myNamespace.MyVariantOutline\n     *   Object type: myNamespace.Outline:yourNamespace.MyVariant  -> Constructor: yourNamespace.MyVariantOutline\n     *\n     * RESOLVING THE CONSTRUCTOR:\n     *\n     * When scout.objectFactories contains a create function for the given objectType, this function is called.\n     *\n     * Otherwise it tries to find the constructor function by the following logic:\n     * If the objectType provides a name space, it is used. Otherwise it takes the default \"scout\" name space.\n     * If the object type provides a variant (\"Type:Variant\"), the final object type is built by prepending\n     * the variant to the type (\"VariantType\"). If no such type can be found and the option \"variantLenient\"\n     * is set to true, a second attempt is made without the variant.\n     *\n     * @param objectType (mandatory) String describing the type of the object to be created.\n     * @param options    (optional)  Options object, currently supporting the following two options:\n     *                               - model = Model object to be passed to the constructor or create function\n     *                               - variantLenient = Flag to allow a second attempt to resolve the class\n     *                                 without variant (see description above).\n     */\n    value: function _createObjectByType(objectType, options) {\n      if (typeof objectType !== 'string') {\n        throw new Error('missing or invalid object type');\n      }\n\n      options = options || {};\n      var createFunc = this._registry[objectType];\n\n      if (createFunc) {\n        // 1. - Use factory function registered for the given objectType\n        var scoutObject = createFunc(options.model);\n\n        if (!scoutObject) {\n          throw new Error('Failed to create object for objectType \"' + objectType + '\": Factory function did not return a valid object');\n        }\n\n        return scoutObject;\n      } // 2. - Resolve class by name\n\n\n      return TypeDescriptor.newInstance(objectType, options);\n    }\n    /**\n     * Creates and initializes a new Scout object. When the created object has an init function, the\n     * model object is passed to that function. Otherwise the init call is omitted.\n     *\n     * @param objectType A string with the requested objectType. This argument is optional, but if it\n     *                   is omitted, the argument \"model\" becomes mandatory and MUST contain a\n     *                   property named \"objectType\". If both, objectType and model, are set, the\n     *                   objectType parameter always wins before the model.objectType property.\n     * @param model      The model object passed to the constructor function and to the init() method.\n     *                   This argument is mandatory if it is the first argument, otherwise it is\n     *                   optional (see above). This function may set/overwrite the properties 'id' and\n     *                   'objectType' on the model object.\n     * @param options    Options object, see table below. This argument is optional.\n     *\n     * An error is thrown if the argument list does not match this definition.\n     *\n     * List of options:\n     *\n     * OPTION                   DEFAULT VALUE   DESCRIPTION\n     * ------------------------------------------------------------------------------------------------------\n     * variantLenient           false           Controls if the object factory may try to resolve the\n     *                                          scoutClass without the model variant part if the initial\n     *                                          objectType could not be resolved.\n     *\n     * ensureUniqueId           true            Controls if the resulting object should be assigned the\n     *                                          attribute \"id\" if it is not defined. If the created object has an\n     *                                          init() function, we also set the property 'id' on the model object\n     *                                          to allow the init() function to copy the attribute from the model\n     *                                          to the scoutObject.\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(objectType, model, options) {\n      // Normalize arguments\n      if (typeof objectType === 'string') {\n        options = options || {};\n      } else if (objects.isPlainObject(objectType)) {\n        options = model || {};\n        model = objectType;\n\n        if (!model.objectType) {\n          throw new Error('Missing mandatory property \"objectType\" on model');\n        }\n\n        objectType = model.objectType;\n      } else {\n        throw new Error('Invalid arguments');\n      }\n\n      options.model = model; // Create object\n\n      var scoutObject = this._createObjectByType(objectType, options);\n\n      if (objects.isFunction(scoutObject.init)) {\n        if (model) {\n          if (model.id === undefined && scout.nvl(options.ensureUniqueId, true)) {\n            model.id = this.createUniqueId();\n          }\n\n          model.objectType = objectType;\n        } // Initialize object\n\n\n        scoutObject.init(model);\n      }\n\n      if (scoutObject.id === undefined && scout.nvl(options.ensureUniqueId, true)) {\n        scoutObject.id = this.createUniqueId();\n      }\n\n      if (scoutObject.objectType === undefined) {\n        scoutObject.objectType = objectType;\n      }\n\n      return scoutObject;\n    }\n    /**\n     * Returns a new unique ID to be used for Widgets/Adapters created by the UI\n     * without a model delivered by the server-side client.\n     * @return string ID with prefix 'ui'\n     */\n\n  }, {\n    key: \"createUniqueId\",\n    value: function createUniqueId() {\n      return 'ui' + (++this.uniqueIdSeqNo).toString();\n    }\n  }, {\n    key: \"register\",\n    value: function register(objectType, createFunc) {\n      $.log.isDebugEnabled() && $.log.debug('(ObjectFactory) registered create-function for objectType ' + objectType);\n      this._registry[objectType] = createFunc;\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(objectType) {\n      $.log.isDebugEnabled() && $.log.debug('(ObjectFactory) unregistered objectType ' + objectType);\n      delete this._registry[objectType];\n    }\n  }, {\n    key: \"get\",\n    value: function get(objectType) {\n      return this._registry[objectType];\n    }\n    /**\n     * Cannot init ObjectFactory until Log4Javascript is initialized.\n     * That's why we call this method in the scout._init method.\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {\n      for (var objectType in scout.objectFactories) {\n        if (scout.objectFactories.hasOwnProperty(objectType)) {\n          this.register(objectType, scout.objectFactories[objectType]);\n        }\n      }\n    }\n  }], [{\n    key: \"get\",\n    value: function get() {\n      return objectFactory;\n    }\n  }, {\n    key: \"_set\",\n    value: function _set(newFactory) {\n      objectFactory = newFactory;\n    }\n  }]);\n\n  return ObjectFactory;\n}();\n\n_defineProperty(ObjectFactory, \"NAMESPACE_SEPARATOR\", '.');\n\n_defineProperty(ObjectFactory, \"MODEL_VARIANT_SEPARATOR\", ':');\n\nexport { ObjectFactory as default };\nvar objectFactory = new ObjectFactory();","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/ObjectFactory.js"],"names":["objects","scout","TypeDescriptor","$","ObjectFactory","uniqueIdSeqNo","_registry","objectType","options","Error","createFunc","scoutObject","model","newInstance","isPlainObject","_createObjectByType","isFunction","init","id","undefined","nvl","ensureUniqueId","createUniqueId","toString","log","isDebugEnabled","debug","objectFactories","hasOwnProperty","register","objectFactory","newFactory"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,OAAR,EAAiBC,KAAjB,EAAwBC,cAAxB,QAA6C,SAA7C;AAEA,OAAOC,CAAP,MAAc,QAAd;AAEA;AACA;AACA;;IACqBC,a;AAEnB,2BAAc;AAAA;;AACZ;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACD;;;;;AAKD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;wCACsBC,U,EAAYC,O,EAAS;AACvC,UAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,cAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACDD,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,UAAIE,UAAU,GAAG,KAAKJ,SAAL,CAAeC,UAAf,CAAjB;;AACA,UAAIG,UAAJ,EAAgB;AACd;AACA,YAAIC,WAAW,GAAGD,UAAU,CAACF,OAAO,CAACI,KAAT,CAA5B;;AACA,YAAI,CAACD,WAAL,EAAkB;AAChB,gBAAM,IAAIF,KAAJ,CAAU,6CAA6CF,UAA7C,GAA0D,mDAApE,CAAN;AACD;;AACD,eAAOI,WAAP;AACD,OAdsC,CAevC;;;AACA,aAAOT,cAAc,CAACW,WAAf,CAA2BN,UAA3B,EAAuCC,OAAvC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;2BACSD,U,EAAYK,K,EAAOJ,O,EAAS;AACjC;AACA,UAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClCC,QAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACD,OAFD,MAEO,IAAIR,OAAO,CAACc,aAAR,CAAsBP,UAAtB,CAAJ,EAAuC;AAC5CC,QAAAA,OAAO,GAAGI,KAAK,IAAI,EAAnB;AACAA,QAAAA,KAAK,GAAGL,UAAR;;AACA,YAAI,CAACK,KAAK,CAACL,UAAX,EAAuB;AACrB,gBAAM,IAAIE,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACDF,QAAAA,UAAU,GAAGK,KAAK,CAACL,UAAnB;AACD,OAPM,MAOA;AACL,cAAM,IAAIE,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACDD,MAAAA,OAAO,CAACI,KAAR,GAAgBA,KAAhB,CAdiC,CAgBjC;;AACA,UAAID,WAAW,GAAG,KAAKI,mBAAL,CAAyBR,UAAzB,EAAqCC,OAArC,CAAlB;;AACA,UAAIR,OAAO,CAACgB,UAAR,CAAmBL,WAAW,CAACM,IAA/B,CAAJ,EAA0C;AACxC,YAAIL,KAAJ,EAAW;AACT,cAAIA,KAAK,CAACM,EAAN,KAAaC,SAAb,IAA0BlB,KAAK,CAACmB,GAAN,CAAUZ,OAAO,CAACa,cAAlB,EAAkC,IAAlC,CAA9B,EAAuE;AACrET,YAAAA,KAAK,CAACM,EAAN,GAAW,KAAKI,cAAL,EAAX;AACD;;AACDV,UAAAA,KAAK,CAACL,UAAN,GAAmBA,UAAnB;AACD,SANuC,CAOxC;;;AACAI,QAAAA,WAAW,CAACM,IAAZ,CAAiBL,KAAjB;AACD;;AAED,UAAID,WAAW,CAACO,EAAZ,KAAmBC,SAAnB,IAAgClB,KAAK,CAACmB,GAAN,CAAUZ,OAAO,CAACa,cAAlB,EAAkC,IAAlC,CAApC,EAA6E;AAC3EV,QAAAA,WAAW,CAACO,EAAZ,GAAiB,KAAKI,cAAL,EAAjB;AACD;;AACD,UAAIX,WAAW,CAACJ,UAAZ,KAA2BY,SAA/B,EAA0C;AACxCR,QAAAA,WAAW,CAACJ,UAAZ,GAAyBA,UAAzB;AACD;;AAED,aAAOI,WAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;qCACmB;AACf,aAAO,OAAO,CAAC,EAAE,KAAKN,aAAR,EAAuBkB,QAAvB,EAAd;AACD;;;6BAEQhB,U,EAAYG,U,EAAY;AAC/BP,MAAAA,CAAC,CAACqB,GAAF,CAAMC,cAAN,MAA0BtB,CAAC,CAACqB,GAAF,CAAME,KAAN,CAAY,+DAA+DnB,UAA3E,CAA1B;AACA,WAAKD,SAAL,CAAeC,UAAf,IAA6BG,UAA7B;AACD;;;+BAEUH,U,EAAY;AACrBJ,MAAAA,CAAC,CAACqB,GAAF,CAAMC,cAAN,MAA0BtB,CAAC,CAACqB,GAAF,CAAME,KAAN,CAAY,6CAA6CnB,UAAzD,CAA1B;AACA,aAAO,KAAKD,SAAL,CAAeC,UAAf,CAAP;AACD;;;wBAEGA,U,EAAY;AACd,aAAO,KAAKD,SAAL,CAAeC,UAAf,CAAP;AACD;AAED;AACF;AACA;AACA;;;;2BACS;AACL,WAAK,IAAIA,UAAT,IAAuBN,KAAK,CAAC0B,eAA7B,EAA8C;AAC5C,YAAI1B,KAAK,CAAC0B,eAAN,CAAsBC,cAAtB,CAAqCrB,UAArC,CAAJ,EAAsD;AACpD,eAAKsB,QAAL,CAActB,UAAd,EAA0BN,KAAK,CAAC0B,eAAN,CAAsBpB,UAAtB,CAA1B;AACD;AACF;AACF;;;0BAEY;AACX,aAAOuB,aAAP;AACD;;;yBAEWC,U,EAAY;AACtBD,MAAAA,aAAa,GAAGC,UAAhB;AACD;;;;;;gBAtLkB3B,a,yBAQU,G;;gBARVA,a,6BASc,G;;SATdA,a;AAyLrB,IAAI0B,aAAa,GAAG,IAAI1B,aAAJ,EAApB","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects, scout, TypeDescriptor} from './index';\n\nimport $ from 'jquery';\n\n/**\n * @singleton\n */\nexport default class ObjectFactory {\n\n  constructor() {\n    // use createUniqueId() to generate a new ID\n    this.uniqueIdSeqNo = 0;\n    this._registry = {};\n  }\n\n  static NAMESPACE_SEPARATOR = '.';\n  static MODEL_VARIANT_SEPARATOR = ':';\n\n  /**\n   * Creates an object from the given objectType. Only the constructor is called.\n   *\n   * OBJECT TYPE:\n   *\n   * An object type may consist of three parts: [name.space.]Class[:Variant]\n   * 1. Name spaces (optional)\n   *    All name space parts have to end with a dot ('.') character. If this part is omitted, the default\n   *    name space \"scout.\" is assumed.\n   *    Examples: \"scout.\", \"my.custom.namespace.\"\n   * 2. Scout class name (mandatory)\n   *    Examples: \"Desktop\", \"Session\", \"StringField\"\n   * 3. Model variant (optional)\n   *    Custom variants of a class can be created by adding the custom class prefix after\n   *    the Scout class name and a colon character (':'). This prefix is then combined with\n   *    the class name.\n   *    Examples: \":Offline\", \":Horizontal\"\n   *\n   * Full examples:\n   *   Object type: Outline                                      -> Constructor: Outline\n   *   Object type: myNamespace.Outline                          -> Constructor: myNamespace.Outline\n   *   Object type: Outline:MyVariant                            -> Constructor: scout.MyVariantOutline\n   *   Object type: myNamespace.Outline:MyVariant                -> Constructor: myNamespace.MyVariantOutline\n   *   Object type: Outline:myNamespace.MyVariant                -> Constructor: myNamespace.MyVariantOutline\n   *   Object type: myNamespace.Outline:yourNamespace.MyVariant  -> Constructor: yourNamespace.MyVariantOutline\n   *\n   * RESOLVING THE CONSTRUCTOR:\n   *\n   * When scout.objectFactories contains a create function for the given objectType, this function is called.\n   *\n   * Otherwise it tries to find the constructor function by the following logic:\n   * If the objectType provides a name space, it is used. Otherwise it takes the default \"scout\" name space.\n   * If the object type provides a variant (\"Type:Variant\"), the final object type is built by prepending\n   * the variant to the type (\"VariantType\"). If no such type can be found and the option \"variantLenient\"\n   * is set to true, a second attempt is made without the variant.\n   *\n   * @param objectType (mandatory) String describing the type of the object to be created.\n   * @param options    (optional)  Options object, currently supporting the following two options:\n   *                               - model = Model object to be passed to the constructor or create function\n   *                               - variantLenient = Flag to allow a second attempt to resolve the class\n   *                                 without variant (see description above).\n   */\n  _createObjectByType(objectType, options) {\n    if (typeof objectType !== 'string') {\n      throw new Error('missing or invalid object type');\n    }\n    options = options || {};\n\n    var createFunc = this._registry[objectType];\n    if (createFunc) {\n      // 1. - Use factory function registered for the given objectType\n      var scoutObject = createFunc(options.model);\n      if (!scoutObject) {\n        throw new Error('Failed to create object for objectType \"' + objectType + '\": Factory function did not return a valid object');\n      }\n      return scoutObject;\n    }\n    // 2. - Resolve class by name\n    return TypeDescriptor.newInstance(objectType, options);\n  }\n\n  /**\n   * Creates and initializes a new Scout object. When the created object has an init function, the\n   * model object is passed to that function. Otherwise the init call is omitted.\n   *\n   * @param objectType A string with the requested objectType. This argument is optional, but if it\n   *                   is omitted, the argument \"model\" becomes mandatory and MUST contain a\n   *                   property named \"objectType\". If both, objectType and model, are set, the\n   *                   objectType parameter always wins before the model.objectType property.\n   * @param model      The model object passed to the constructor function and to the init() method.\n   *                   This argument is mandatory if it is the first argument, otherwise it is\n   *                   optional (see above). This function may set/overwrite the properties 'id' and\n   *                   'objectType' on the model object.\n   * @param options    Options object, see table below. This argument is optional.\n   *\n   * An error is thrown if the argument list does not match this definition.\n   *\n   * List of options:\n   *\n   * OPTION                   DEFAULT VALUE   DESCRIPTION\n   * ------------------------------------------------------------------------------------------------------\n   * variantLenient           false           Controls if the object factory may try to resolve the\n   *                                          scoutClass without the model variant part if the initial\n   *                                          objectType could not be resolved.\n   *\n   * ensureUniqueId           true            Controls if the resulting object should be assigned the\n   *                                          attribute \"id\" if it is not defined. If the created object has an\n   *                                          init() function, we also set the property 'id' on the model object\n   *                                          to allow the init() function to copy the attribute from the model\n   *                                          to the scoutObject.\n   */\n  create(objectType, model, options) {\n    // Normalize arguments\n    if (typeof objectType === 'string') {\n      options = options || {};\n    } else if (objects.isPlainObject(objectType)) {\n      options = model || {};\n      model = objectType;\n      if (!model.objectType) {\n        throw new Error('Missing mandatory property \"objectType\" on model');\n      }\n      objectType = model.objectType;\n    } else {\n      throw new Error('Invalid arguments');\n    }\n    options.model = model;\n\n    // Create object\n    var scoutObject = this._createObjectByType(objectType, options);\n    if (objects.isFunction(scoutObject.init)) {\n      if (model) {\n        if (model.id === undefined && scout.nvl(options.ensureUniqueId, true)) {\n          model.id = this.createUniqueId();\n        }\n        model.objectType = objectType;\n      }\n      // Initialize object\n      scoutObject.init(model);\n    }\n\n    if (scoutObject.id === undefined && scout.nvl(options.ensureUniqueId, true)) {\n      scoutObject.id = this.createUniqueId();\n    }\n    if (scoutObject.objectType === undefined) {\n      scoutObject.objectType = objectType;\n    }\n\n    return scoutObject;\n  }\n\n  /**\n   * Returns a new unique ID to be used for Widgets/Adapters created by the UI\n   * without a model delivered by the server-side client.\n   * @return string ID with prefix 'ui'\n   */\n  createUniqueId() {\n    return 'ui' + (++this.uniqueIdSeqNo).toString();\n  }\n\n  register(objectType, createFunc) {\n    $.log.isDebugEnabled() && $.log.debug('(ObjectFactory) registered create-function for objectType ' + objectType);\n    this._registry[objectType] = createFunc;\n  }\n\n  unregister(objectType) {\n    $.log.isDebugEnabled() && $.log.debug('(ObjectFactory) unregistered objectType ' + objectType);\n    delete this._registry[objectType];\n  }\n\n  get(objectType) {\n    return this._registry[objectType];\n  }\n\n  /**\n   * Cannot init ObjectFactory until Log4Javascript is initialized.\n   * That's why we call this method in the scout._init method.\n   */\n  init() {\n    for (var objectType in scout.objectFactories) {\n      if (scout.objectFactories.hasOwnProperty(objectType)) {\n        this.register(objectType, scout.objectFactories[objectType]);\n      }\n    }\n  }\n\n  static get() {\n    return objectFactory;\n  }\n\n  static _set(newFactory) {\n    objectFactory = newFactory;\n  }\n}\n\nlet objectFactory = new ObjectFactory();\n"]},"metadata":{},"sourceType":"module"}