{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Action, HAlign, Key, keys, scout } from '../index';\nimport $ from 'jquery';\n\nvar KeyStroke = /*#__PURE__*/function () {\n  function KeyStroke() {\n    _classCallCheck(this, KeyStroke);\n\n    this.field = null; // optional model field\n\n    this.which = []; // keys which this keystroke is bound to. Typically, this is a single key, but may be multiple keys if handling the same action (e.g. ENTER and SPACE on a button).\n\n    this.ctrl = false;\n    this.alt = false;\n    this.shift = false;\n    this.preventDefault = true;\n    this.stopPropagation = false;\n    this.stopImmediatePropagation = false;\n    this.keyStrokeMode = KeyStroke.Mode.DOWN;\n    this.repeatable = false; // whether or not the handle method is called multiple times while a key is pressed\n\n    this._handleExecuted = false; // internal flag to remember whether or not the handle method has been executed (reset on keyup)\n\n    this.keyStrokeFirePolicy = Action.KeyStrokeFirePolicy.ACCESSIBLE_ONLY;\n    this.enabledByFilter = true; // Hints to control rendering of the key(s).\n\n    this.renderingHints = {\n      render: function () {\n        if (this.field && this.field.rendered !== undefined) {\n          return this.field.rendered; // only render key if associated field is visible.\n        }\n\n        return true; // by default, keystrokes are rendered\n      }.bind(this),\n      gap: 4,\n      offset: 4,\n      hAlign: HAlign.LEFT,\n      text: null,\n      $drawingArea: function $drawingArea(_$drawingArea, event) {\n        return _$drawingArea;\n      }\n    };\n    /**\n     * Indicates whether to invoke 'acceptInput' on a currently focused value field prior handling the keystroke.\n     */\n\n    this.invokeAcceptInputOnActiveValueField = false;\n    /**\n     * Indicates whether to prevent the invoke of 'acceptInput' on a currently focused value field prior handling the keystroke,\n     * either triggered by previous property or by KeyStrokeContext\n     */\n\n    this.preventInvokeAcceptInputOnActiveValueField = false;\n  }\n  /**\n   * Parses the given keystroke name into the key parts like 'ctrl', 'shift', 'alt' and 'which'.\n   */\n\n\n  _createClass(KeyStroke, [{\n    key: \"parseAndSetKeyStroke\",\n    value: function parseAndSetKeyStroke(keyStrokeName) {\n      this.alt = false;\n      this.ctrl = false;\n      this.shift = false;\n      this.which = [];\n\n      if (keyStrokeName) {\n        $.extend(this, KeyStroke.parseKeyStroke(keyStrokeName));\n      }\n    }\n    /**\n     * Returns true if this event is handled by this keystroke, and if so sets the propagation flags accordingly.\n     */\n\n  }, {\n    key: \"accept\",\n    value: function accept(event) {\n      if (!this._isEnabled()) {\n        return false;\n      } // Check whether this event is accepted for execution.\n\n\n      if (!this._accept(event)) {\n        return false;\n      } // Apply propagation flags to the event.\n\n\n      this._applyPropagationFlags(event); // only accept on correct event type -> keyup or keydown. But propagation flags should be set to prevent execution of upper keyStrokes.\n\n\n      return event.type === this.keyStrokeMode;\n    }\n    /**\n     * Method invoked to handle the given keystroke event, and is only called if the event was accepted by 'KeyStroke.accept(event)'.\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle(event) {\n      throw new Error('keystroke event not handled: ' + event);\n    }\n  }, {\n    key: \"invokeHandle\",\n    value: function invokeHandle(event) {\n      // if key stroke is repeatable, handle is called each time the key event occurs\n      // which means it is executed multiple times while a key is pressed.\n      if (this.repeatable) {\n        this.handle(event);\n        return;\n      } // if key stroke is not repeatable it should only call execute once until\n      // we receive a key up event for that key\n\n\n      if (!this._handleExecuted) {\n        this.handle(event);\n\n        if (event.type === KeyStroke.Mode.DOWN) {\n          this._handleExecuted = true; // Reset handleExecuted on the next key up event\n          // (use capturing phase to execute even if event.stopPropagation has been called)\n\n          var $target = $(event.target);\n          var $window = $target.window();\n          var keyStroke = this;\n          var keyUpHandler = {\n            handleEvent: function handleEvent(event) {\n              keyStroke._handleExecuted = false;\n              $window[0].removeEventListener('keyup', this, true);\n            }\n          };\n          $window[0].addEventListener('keyup', keyUpHandler, true);\n        }\n      }\n    }\n    /**\n     * Method invoked in the context of accepting a keystroke, and returns true if the keystroke is accessible to the user.\n     */\n\n  }, {\n    key: \"_isEnabled\",\n    value: function _isEnabled() {\n      // Hint: do not check for which.length because there are keystrokes without a which, e.g. RangeKeyStroke.js\n      if (this.field) {\n        // Check visibility\n        if (this.field.visible !== undefined && !this.field.visible) {\n          return false;\n        } // Check enabled state\n\n\n        if (this.field.enabled !== undefined && !this.field.enabled) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Method invoked in the context of accepting a keystroke, and returns true if the event matches this keystroke.\n     */\n\n  }, {\n    key: \"_accept\",\n    value: function _accept(event) {\n      return KeyStroke.acceptEvent(this, event);\n    }\n    /**\n     * Method invoked in the context of accepting a keystroke, and sets the propagation flags accordingly.\n     */\n\n  }, {\n    key: \"_applyPropagationFlags\",\n    value: function _applyPropagationFlags(event) {\n      if (this.stopPropagation) {\n        event.stopPropagation();\n      }\n\n      if (this.stopImmediatePropagation) {\n        event.stopImmediatePropagation();\n      }\n\n      if (this.preventDefault) {\n        event.preventDefault();\n      }\n    }\n    /**\n     * Returns the key(s) associated with this keystroke. Typically, this is a single key, but may be multiple if this keystroke is associated with multiple keys, e.g. ENTER and SPACE on a button.\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this.which.map(function (which) {\n        return new Key(this, which);\n      }, this);\n    }\n    /**\n     * Renders the visual representation of this keystroke, with the 'which' as given by the event.\n     *\n     * @return $drawingArea on which the key was finally rendered.\n     */\n\n  }, {\n    key: \"renderKeyBox\",\n    value: function renderKeyBox($drawingArea, event) {\n      $drawingArea = this.renderingHints.$drawingArea($drawingArea, event);\n\n      if (!$drawingArea || !$drawingArea.length) {\n        return null;\n      }\n\n      var $keyBox = this._renderKeyBox($drawingArea, event.which);\n\n      this._postRenderKeyBox($drawingArea, $keyBox);\n\n      return $drawingArea;\n    }\n  }, {\n    key: \"_renderKeyBox\",\n    value: function _renderKeyBox($parent, keyCode) {\n      var $existingKeyBoxes = $('.key-box', $parent);\n      var text = this.renderingHints.text || keys.codesToKeys[keys.fromBrowser(keyCode)];\n      var align = this.renderingHints.hAlign === HAlign.RIGHT ? 'right' : 'left';\n      var offset = this.renderingHints.offset;\n      $existingKeyBoxes = $existingKeyBoxes.filter(function () {\n        if (align === 'right') {\n          return $(this).hasClass('right');\n        }\n\n        return !$(this).hasClass('right');\n      });\n\n      if ($existingKeyBoxes.length > 0) {\n        var $boxLastAdded = $existingKeyBoxes.first();\n\n        if (this.renderingHints.hAlign === HAlign.RIGHT) {\n          offset = $parent.outerWidth() - $boxLastAdded.position().left + this.renderingHints.gap;\n        } else {\n          offset = $boxLastAdded.position().left + this.renderingHints.gap + $boxLastAdded.outerWidth();\n        }\n      }\n\n      if (this.shift) {\n        text = 'Shift ' + text;\n      }\n\n      if (this.alt) {\n        text = 'Alt ' + text;\n      }\n\n      if (this.ctrl) {\n        text = 'Ctrl ' + text;\n      }\n\n      var position = $parent.css('position');\n\n      if (position === 'absolute' || position === 'relative' || position === 'static' && $existingKeyBoxes.length > 0) {\n        return prependKeyBox.call(this, offset);\n      }\n\n      var pos = $parent.position();\n\n      if (pos) {\n        return prependKeyBox.call(this, pos.left + offset);\n      }\n\n      $.log.warn('(keys#drawSingleKeyBoxItem) pos is undefined. $parent=' + $parent);\n\n      function prependKeyBox(alignValue) {\n        return $parent.prependDiv('key-box', text).css(align, alignValue + 'px').toggleClass('disabled', !this.enabledByFilter).addClass(align);\n      }\n    }\n    /**\n     * Method invoked after this keystroke was rendered, and is typically overwritten to reposition the visual representation.\n     */\n\n  }, {\n    key: \"_postRenderKeyBox\",\n    value: function _postRenderKeyBox($drawingArea) {}\n    /**\n     * Removes the visual representation of this keystroke.\n     */\n\n  }, {\n    key: \"removeKeyBox\",\n    value: function removeKeyBox($drawingArea) {\n      if ($drawingArea) {\n        $('.key-box', $drawingArea).remove();\n        $('.key-box-additional', $drawingArea).remove();\n      }\n    }\n  }], [{\n    key: \"parseKeyStroke\",\n    // --- Static helpers --- //\n\n    /**\n     * Parses the given keystroke name into the key parts like 'ctrl', 'shift', 'alt' and 'which'.\n     *\n     * @returns a plain object with properties ctrl, shift, alt and which - may be used as input\n     *     for Key.js and KeyStroke.js\n     * @see \"org.eclipse.scout.rt.client.ui.action.keystroke.KeyStrokeNormalizer\"\n     */\n    value: function parseKeyStroke(keyStrokeName) {\n      if (!keyStrokeName) {\n        return null;\n      }\n\n      var keyStrokeObj = {\n        alt: false,\n        ctrl: false,\n        shift: false,\n        which: []\n      };\n      keyStrokeName.split('-').forEach(function (part) {\n        if (part === 'alternate' || part === 'alt') {\n          keyStrokeObj.alt = true;\n        } else if (part === 'control' || part === 'ctrl') {\n          keyStrokeObj.ctrl = true;\n        } else if (part === 'shift') {\n          keyStrokeObj.shift = true;\n        } else {\n          var key = keys[part.toUpperCase()];\n          keyStrokeObj.which = key && [key];\n        }\n      });\n      return keyStrokeObj;\n    }\n  }, {\n    key: \"acceptEvent\",\n    value: function acceptEvent(keyStroke, event) {\n      if (!keyStroke) {\n        return false;\n      } // event.ctrlKey||event.metaKey  --> some keystrokes with ctrl modifier are captured and suppressed by osx use in this cases command key\n\n\n      return KeyStroke._acceptModifier(keyStroke.ctrl, event.ctrlKey || event.metaKey) && KeyStroke._acceptModifier(keyStroke.alt, event.altKey) && KeyStroke._acceptModifier(keyStroke.shift, event.shiftKey) && scout.isOneOf(event.which, keyStroke.which);\n    }\n  }, {\n    key: \"_acceptModifier\",\n    value: function _acceptModifier(modifier, eventModifier) {\n      return modifier === undefined || modifier === eventModifier;\n    }\n  }]);\n\n  return KeyStroke;\n}();\n\n_defineProperty(KeyStroke, \"Mode\", {\n  UP: 'keyup',\n  DOWN: 'keydown'\n});\n\nexport { KeyStroke as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/keystroke/KeyStroke.js"],"names":["Action","HAlign","Key","keys","scout","$","KeyStroke","field","which","ctrl","alt","shift","preventDefault","stopPropagation","stopImmediatePropagation","keyStrokeMode","Mode","DOWN","repeatable","_handleExecuted","keyStrokeFirePolicy","KeyStrokeFirePolicy","ACCESSIBLE_ONLY","enabledByFilter","renderingHints","render","rendered","undefined","bind","gap","offset","hAlign","LEFT","text","$drawingArea","event","invokeAcceptInputOnActiveValueField","preventInvokeAcceptInputOnActiveValueField","keyStrokeName","extend","parseKeyStroke","_isEnabled","_accept","_applyPropagationFlags","type","Error","handle","$target","target","$window","window","keyStroke","keyUpHandler","handleEvent","removeEventListener","addEventListener","visible","enabled","acceptEvent","map","length","$keyBox","_renderKeyBox","_postRenderKeyBox","$parent","keyCode","$existingKeyBoxes","codesToKeys","fromBrowser","align","RIGHT","filter","hasClass","$boxLastAdded","first","outerWidth","position","left","css","prependKeyBox","call","pos","log","warn","alignValue","prependDiv","toggleClass","addClass","remove","keyStrokeObj","split","forEach","part","key","toUpperCase","_acceptModifier","ctrlKey","metaKey","altKey","shiftKey","isOneOf","modifier","eventModifier","UP"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Action, HAlign, Key, keys, scout} from '../index';\nimport $ from 'jquery';\n\nexport default class KeyStroke {\n\n  constructor() {\n    this.field = null; // optional model field\n\n    this.which = []; // keys which this keystroke is bound to. Typically, this is a single key, but may be multiple keys if handling the same action (e.g. ENTER and SPACE on a button).\n    this.ctrl = false;\n    this.alt = false;\n    this.shift = false;\n    this.preventDefault = true;\n    this.stopPropagation = false;\n    this.stopImmediatePropagation = false;\n    this.keyStrokeMode = KeyStroke.Mode.DOWN;\n    this.repeatable = false; // whether or not the handle method is called multiple times while a key is pressed\n    this._handleExecuted = false; // internal flag to remember whether or not the handle method has been executed (reset on keyup)\n    this.keyStrokeFirePolicy = Action.KeyStrokeFirePolicy.ACCESSIBLE_ONLY;\n    this.enabledByFilter = true;\n\n    // Hints to control rendering of the key(s).\n    this.renderingHints = {\n      render: function() {\n        if (this.field && this.field.rendered !== undefined) {\n          return this.field.rendered; // only render key if associated field is visible.\n        }\n        return true; // by default, keystrokes are rendered\n      }.bind(this),\n      gap: 4,\n      offset: 4,\n      hAlign: HAlign.LEFT,\n      text: null,\n      $drawingArea: function($drawingArea, event) {\n        return $drawingArea;\n      }\n    };\n\n    /**\n     * Indicates whether to invoke 'acceptInput' on a currently focused value field prior handling the keystroke.\n     */\n    this.invokeAcceptInputOnActiveValueField = false;\n\n    /**\n     * Indicates whether to prevent the invoke of 'acceptInput' on a currently focused value field prior handling the keystroke,\n     * either triggered by previous property or by KeyStrokeContext\n     */\n    this.preventInvokeAcceptInputOnActiveValueField = false;\n  }\n\n  /**\n   * Parses the given keystroke name into the key parts like 'ctrl', 'shift', 'alt' and 'which'.\n   */\n  parseAndSetKeyStroke(keyStrokeName) {\n    this.alt = false;\n    this.ctrl = false;\n    this.shift = false;\n    this.which = [];\n    if (keyStrokeName) {\n      $.extend(this, KeyStroke.parseKeyStroke(keyStrokeName));\n    }\n  }\n\n  /**\n   * Returns true if this event is handled by this keystroke, and if so sets the propagation flags accordingly.\n   */\n  accept(event) {\n    if (!this._isEnabled()) {\n      return false;\n    }\n\n    // Check whether this event is accepted for execution.\n    if (!this._accept(event)) {\n      return false;\n    }\n\n    // Apply propagation flags to the event.\n    this._applyPropagationFlags(event);\n    // only accept on correct event type -> keyup or keydown. But propagation flags should be set to prevent execution of upper keyStrokes.\n    return event.type === this.keyStrokeMode;\n  }\n\n  /**\n   * Method invoked to handle the given keystroke event, and is only called if the event was accepted by 'KeyStroke.accept(event)'.\n   */\n  handle(event) {\n    throw new Error('keystroke event not handled: ' + event);\n  }\n\n  invokeHandle(event) {\n    // if key stroke is repeatable, handle is called each time the key event occurs\n    // which means it is executed multiple times while a key is pressed.\n    if (this.repeatable) {\n      this.handle(event);\n      return;\n    }\n\n    // if key stroke is not repeatable it should only call execute once until\n    // we receive a key up event for that key\n    if (!this._handleExecuted) {\n      this.handle(event);\n\n      if (event.type === KeyStroke.Mode.DOWN) {\n        this._handleExecuted = true;\n\n        // Reset handleExecuted on the next key up event\n        // (use capturing phase to execute even if event.stopPropagation has been called)\n        var $target = $(event.target);\n        var $window = $target.window();\n        var keyStroke = this;\n        var keyUpHandler = {\n          handleEvent: function(event) {\n            keyStroke._handleExecuted = false;\n            $window[0].removeEventListener('keyup', this, true);\n          }\n        };\n        $window[0].addEventListener('keyup', keyUpHandler, true);\n      }\n    }\n  }\n\n  /**\n   * Method invoked in the context of accepting a keystroke, and returns true if the keystroke is accessible to the user.\n   */\n  _isEnabled() {\n    // Hint: do not check for which.length because there are keystrokes without a which, e.g. RangeKeyStroke.js\n\n    if (this.field) {\n      // Check visibility\n      if (this.field.visible !== undefined && !this.field.visible) {\n        return false;\n      }\n      // Check enabled state\n      if (this.field.enabled !== undefined && !this.field.enabled) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Method invoked in the context of accepting a keystroke, and returns true if the event matches this keystroke.\n   */\n  _accept(event) {\n    return KeyStroke.acceptEvent(this, event);\n  }\n\n  /**\n   * Method invoked in the context of accepting a keystroke, and sets the propagation flags accordingly.\n   */\n  _applyPropagationFlags(event) {\n    if (this.stopPropagation) {\n      event.stopPropagation();\n    }\n    if (this.stopImmediatePropagation) {\n      event.stopImmediatePropagation();\n    }\n    if (this.preventDefault) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Returns the key(s) associated with this keystroke. Typically, this is a single key, but may be multiple if this keystroke is associated with multiple keys, e.g. ENTER and SPACE on a button.\n   */\n  keys() {\n    return this.which.map(function(which) {\n      return new Key(this, which);\n    }, this);\n  }\n\n  /**\n   * Renders the visual representation of this keystroke, with the 'which' as given by the event.\n   *\n   * @return $drawingArea on which the key was finally rendered.\n   */\n  renderKeyBox($drawingArea, event) {\n    $drawingArea = this.renderingHints.$drawingArea($drawingArea, event);\n    if (!$drawingArea || !$drawingArea.length) {\n      return null;\n    }\n\n    var $keyBox = this._renderKeyBox($drawingArea, event.which);\n    this._postRenderKeyBox($drawingArea, $keyBox);\n    return $drawingArea;\n  }\n\n  _renderKeyBox($parent, keyCode) {\n    var $existingKeyBoxes = $('.key-box', $parent);\n    var text = this.renderingHints.text || keys.codesToKeys[keys.fromBrowser(keyCode)];\n    var align = this.renderingHints.hAlign === HAlign.RIGHT ? 'right' : 'left';\n    var offset = this.renderingHints.offset;\n    $existingKeyBoxes = $existingKeyBoxes.filter(function() {\n      if (align === 'right') {\n        return $(this).hasClass('right');\n      }\n      return !$(this).hasClass('right');\n    });\n    if ($existingKeyBoxes.length > 0) {\n      var $boxLastAdded = $existingKeyBoxes.first();\n      if (this.renderingHints.hAlign === HAlign.RIGHT) {\n        offset = $parent.outerWidth() - $boxLastAdded.position().left + this.renderingHints.gap;\n      } else {\n        offset = $boxLastAdded.position().left + this.renderingHints.gap + $boxLastAdded.outerWidth();\n      }\n    }\n    if (this.shift) {\n      text = 'Shift ' + text;\n    }\n    if (this.alt) {\n      text = 'Alt ' + text;\n    }\n    if (this.ctrl) {\n      text = 'Ctrl ' + text;\n    }\n    var position = $parent.css('position');\n    if (position === 'absolute' || position === 'relative' || (position === 'static' && $existingKeyBoxes.length > 0)) {\n      return prependKeyBox.call(this, offset);\n    }\n    var pos = $parent.position();\n    if (pos) {\n      return prependKeyBox.call(this, pos.left + offset);\n    }\n    $.log.warn('(keys#drawSingleKeyBoxItem) pos is undefined. $parent=' + $parent);\n\n    function prependKeyBox(alignValue) {\n      return $parent.prependDiv('key-box', text)\n        .css(align, alignValue + 'px')\n        .toggleClass('disabled', !this.enabledByFilter)\n        .addClass(align);\n    }\n  }\n\n  /**\n   * Method invoked after this keystroke was rendered, and is typically overwritten to reposition the visual representation.\n   */\n  _postRenderKeyBox($drawingArea) {\n  }\n\n  /**\n   * Removes the visual representation of this keystroke.\n   */\n  removeKeyBox($drawingArea) {\n    if ($drawingArea) {\n      $('.key-box', $drawingArea).remove();\n      $('.key-box-additional', $drawingArea).remove();\n    }\n  }\n\n  static Mode = {\n    UP: 'keyup',\n    DOWN: 'keydown'\n  };\n\n  // --- Static helpers --- //\n\n  /**\n   * Parses the given keystroke name into the key parts like 'ctrl', 'shift', 'alt' and 'which'.\n   *\n   * @returns a plain object with properties ctrl, shift, alt and which - may be used as input\n   *     for Key.js and KeyStroke.js\n   * @see \"org.eclipse.scout.rt.client.ui.action.keystroke.KeyStrokeNormalizer\"\n   */\n  static parseKeyStroke(keyStrokeName) {\n    if (!keyStrokeName) {\n      return null;\n    }\n\n    var keyStrokeObj = {\n      alt: false,\n      ctrl: false,\n      shift: false,\n      which: []\n    };\n\n    keyStrokeName.split('-').forEach(function(part) {\n      if (part === 'alternate' || part === 'alt') {\n        keyStrokeObj.alt = true;\n      } else if (part === 'control' || part === 'ctrl') {\n        keyStrokeObj.ctrl = true;\n      } else if (part === 'shift') {\n        keyStrokeObj.shift = true;\n      } else {\n        var key = keys[part.toUpperCase()];\n        keyStrokeObj.which = key && [key];\n      }\n    });\n\n    return keyStrokeObj;\n  }\n\n  static acceptEvent(keyStroke, event) {\n    if (!keyStroke) {\n      return false;\n    }\n    // event.ctrlKey||event.metaKey  --> some keystrokes with ctrl modifier are captured and suppressed by osx use in this cases command key\n    return KeyStroke._acceptModifier(keyStroke.ctrl, (event.ctrlKey || event.metaKey)) &&\n      KeyStroke._acceptModifier(keyStroke.alt, event.altKey) &&\n      KeyStroke._acceptModifier(keyStroke.shift, event.shiftKey) &&\n      scout.isOneOf(event.which, keyStroke.which);\n  }\n\n  static _acceptModifier(modifier, eventModifier) {\n    return modifier === undefined || modifier === eventModifier;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}