{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2015 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { scout } from '../index';\n/**\n * Simple helper to determine if two consecutive 'mousedown' events should be considered as a double click.\n *\n * How to use:\n * 1. Feed all mousedown events to the mousedown() method.\n * 2. The method doubleClicked() returns true if the two last added events happened so fast after\n *    each other that hey should be considered a 'double click'. If the distance or interval between\n *    the last two events is too large, false is returned.\n *\n * Options:\n * [maxDoubleClickInterval, default=500]\n *   Maximum time in milliseconds between two consecutive mousedown events to consider as a double\n *   click event. If the interval is larger than this value, doubleClicked() will return false.\n * [maxDoubleClickDistance, default=10]\n *   Maximum distance (in both directions) between two consecutive mousedown events to consider as\n *   a double click event. If the distance is larger than this value, doubleClicked() will return false.\n */\n\nvar DoubleClickSupport = /*#__PURE__*/function () {\n  /**\n   * @param {object} [options]\n   * @param options.maxDoubleClickInterval default 500ms\n   * @param options.maxDoubleClickDistance default 10px\n   */\n  function DoubleClickSupport(options) {\n    _classCallCheck(this, DoubleClickSupport);\n\n    options = options || {};\n    this._lastPosX = null;\n    this._lastPosY = null;\n    this._lastTimestamp = null;\n    this._maxDoubleClickInterval = options.maxDoubleClickInterval || 500; // ms\n\n    this._maxDoubleClickDistance = options.maxDoubleClickDistance || 10; // px\n\n    this._doubleClicked = false;\n  }\n\n  _createClass(DoubleClickSupport, [{\n    key: \"mousedown\",\n    value: function mousedown(event) {\n      if (event && event.type === 'mousedown') {\n        var posX = scout.nvl(event.pageX, 0);\n        var posY = scout.nvl(event.pageY, 0);\n        var timestamp = Date.now();\n        var isDoubleClick = false;\n\n        if (this._lastTimestamp !== undefined) {\n          var interval = timestamp - this._lastTimestamp;\n\n          if (interval <= this._maxDoubleClickInterval) {\n            var distance = Math.max(Math.abs(posX - this._lastPosX), Math.abs(posY - this._lastPosY));\n\n            if (distance <= this._maxDoubleClickDistance) {\n              // Double click detected\n              isDoubleClick = true;\n            }\n          }\n        }\n\n        this._lastPosX = posX;\n        this._lastPosY = posY;\n        this._lastTimestamp = timestamp;\n        this._doubleClicked = isDoubleClick;\n      }\n    }\n  }, {\n    key: \"doubleClicked\",\n    value: function doubleClicked() {\n      return this._doubleClicked;\n    }\n  }]);\n\n  return DoubleClickSupport;\n}();\n\nexport { DoubleClickSupport as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/util/DoubleClickSupport.js"],"names":["scout","DoubleClickSupport","options","_lastPosX","_lastPosY","_lastTimestamp","_maxDoubleClickInterval","maxDoubleClickInterval","_maxDoubleClickDistance","maxDoubleClickDistance","_doubleClicked","event","type","posX","nvl","pageX","posY","pageY","timestamp","Date","now","isDoubleClick","undefined","interval","distance","Math","max","abs"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,KAAR,QAAoB,UAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,kB;AAEnB;AACF;AACA;AACA;AACA;AACE,8BAAYC,OAAZ,EAAqB;AAAA;;AACnBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AAEA,SAAKC,uBAAL,GAA+BJ,OAAO,CAACK,sBAAR,IAAkC,GAAjE,CAPmB,CAOmD;;AACtE,SAAKC,uBAAL,GAA+BN,OAAO,CAACO,sBAAR,IAAkC,EAAjE,CARmB,CAQkD;;AACrE,SAAKC,cAAL,GAAsB,KAAtB;AACD;;;;8BAESC,K,EAAO;AACf,UAAIA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAe,WAA5B,EAAyC;AACvC,YAAIC,IAAI,GAAGb,KAAK,CAACc,GAAN,CAAUH,KAAK,CAACI,KAAhB,EAAuB,CAAvB,CAAX;AACA,YAAIC,IAAI,GAAGhB,KAAK,CAACc,GAAN,CAAUH,KAAK,CAACM,KAAhB,EAAuB,CAAvB,CAAX;AACA,YAAIC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAhB;AACA,YAAIC,aAAa,GAAG,KAApB;;AACA,YAAI,KAAKhB,cAAL,KAAwBiB,SAA5B,EAAuC;AACrC,cAAIC,QAAQ,GAAGL,SAAS,GAAG,KAAKb,cAAhC;;AACA,cAAIkB,QAAQ,IAAI,KAAKjB,uBAArB,EAA8C;AAC5C,gBAAIkB,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASd,IAAI,GAAG,KAAKV,SAArB,CAAT,EAA0CsB,IAAI,CAACE,GAAL,CAASX,IAAI,GAAG,KAAKZ,SAArB,CAA1C,CAAf;;AACA,gBAAIoB,QAAQ,IAAI,KAAKhB,uBAArB,EAA8C;AAC5C;AACAa,cAAAA,aAAa,GAAG,IAAhB;AACD;AACF;AACF;;AACD,aAAKlB,SAAL,GAAiBU,IAAjB;AACA,aAAKT,SAAL,GAAiBY,IAAjB;AACA,aAAKX,cAAL,GAAsBa,SAAtB;AACA,aAAKR,cAAL,GAAsBW,aAAtB;AACD;AACF;;;oCAEe;AACd,aAAO,KAAKX,cAAZ;AACD;;;;;;SA5CkBT,kB","sourcesContent":["/*\n * Copyright (c) 2014-2015 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {scout} from '../index';\n\n/**\n * Simple helper to determine if two consecutive 'mousedown' events should be considered as a double click.\n *\n * How to use:\n * 1. Feed all mousedown events to the mousedown() method.\n * 2. The method doubleClicked() returns true if the two last added events happened so fast after\n *    each other that hey should be considered a 'double click'. If the distance or interval between\n *    the last two events is too large, false is returned.\n *\n * Options:\n * [maxDoubleClickInterval, default=500]\n *   Maximum time in milliseconds between two consecutive mousedown events to consider as a double\n *   click event. If the interval is larger than this value, doubleClicked() will return false.\n * [maxDoubleClickDistance, default=10]\n *   Maximum distance (in both directions) between two consecutive mousedown events to consider as\n *   a double click event. If the distance is larger than this value, doubleClicked() will return false.\n */\nexport default class DoubleClickSupport {\n\n  /**\n   * @param {object} [options]\n   * @param options.maxDoubleClickInterval default 500ms\n   * @param options.maxDoubleClickDistance default 10px\n   */\n  constructor(options) {\n    options = options || {};\n\n    this._lastPosX = null;\n    this._lastPosY = null;\n    this._lastTimestamp = null;\n\n    this._maxDoubleClickInterval = options.maxDoubleClickInterval || 500; // ms\n    this._maxDoubleClickDistance = options.maxDoubleClickDistance || 10; // px\n    this._doubleClicked = false;\n  }\n\n  mousedown(event) {\n    if (event && event.type === 'mousedown') {\n      var posX = scout.nvl(event.pageX, 0);\n      var posY = scout.nvl(event.pageY, 0);\n      var timestamp = Date.now();\n      var isDoubleClick = false;\n      if (this._lastTimestamp !== undefined) {\n        var interval = timestamp - this._lastTimestamp;\n        if (interval <= this._maxDoubleClickInterval) {\n          var distance = Math.max(Math.abs(posX - this._lastPosX), Math.abs(posY - this._lastPosY));\n          if (distance <= this._maxDoubleClickDistance) {\n            // Double click detected\n            isDoubleClick = true;\n          }\n        }\n      }\n      this._lastPosX = posX;\n      this._lastPosY = posY;\n      this._lastTimestamp = timestamp;\n      this._doubleClicked = isDoubleClick;\n    }\n  }\n\n  doubleClicked() {\n    return this._doubleClicked;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}