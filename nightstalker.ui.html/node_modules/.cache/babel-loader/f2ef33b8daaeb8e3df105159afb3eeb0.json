{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Dimension, graphics, HtmlComponent } from '../index';\nimport $ from 'jquery';\n/**\n * Abstract layout class with functions used by all layout algorithms.\n * Subclasses of AbstactLayout.js must implement the following functions:\n * - layout\n * - preferredLayoutSize\n */\n\nvar AbstractLayout = /*#__PURE__*/function () {\n  function AbstractLayout() {\n    _classCallCheck(this, AbstractLayout);\n\n    this.animateClasses = [];\n  }\n  /**\n   * Called when layout is invalidated. An implementation should delete cached layout-information\n   * when it is invalidated.\n   *\n   * May be implemented by sub-class.\n   */\n\n\n  _createClass(AbstractLayout, [{\n    key: \"invalidate\",\n    value: function invalidate() {//\n    }\n    /**\n     * Layouts children of the given $container, according to the implemented layout algorithm.\n     * The implementation should call setSize or setBounds on its children.\n     *\n     * Must be implemented by sub-class.\n     */\n\n  }, {\n    key: \"layout\",\n    value: function layout($container) {//\n    }\n    /**\n     * Reverts the adjustments made by {@link HtmlComponent#_adjustSizeHintsForPrefSize} without the margin.\n     * More concrete: it adds border and padding to the hints again.\n     */\n\n  }, {\n    key: \"_revertSizeHintsAdjustments\",\n    value: function _revertSizeHintsAdjustments($container, options) {\n      var htmlContainer = HtmlComponent.get($container);\n\n      if (options.widthHint) {\n        options.widthHint += htmlContainer.insets().horizontal();\n      }\n\n      if (options.heightHint) {\n        options.heightHint += htmlContainer.insets().vertical();\n      }\n    }\n    /**\n     * Returns the preferred size of the given $container.\n     *\n     * @return Dimension preferred size\n     */\n\n  }, {\n    key: \"preferredLayoutSize\",\n    value: function preferredLayoutSize($container, options) {\n      options = $.extend({}, options);\n\n      if (this.animateClasses.length > 0) {\n        options.animateClasses = this.animateClasses;\n      } // Insets have been removed automatically by the html component with the assumption that the layout will pass it to its child elements.\n      // Since this is not the case in this generic layout the insets have to be added again, otherwise the sizes used to measure would be too small.\n\n\n      this._revertSizeHintsAdjustments($container, options);\n\n      return graphics.prefSize($container, options);\n    }\n  }]);\n\n  return AbstractLayout;\n}();\n\nexport { AbstractLayout as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/layout/AbstractLayout.js"],"names":["Dimension","graphics","HtmlComponent","$","AbstractLayout","animateClasses","$container","options","htmlContainer","get","widthHint","insets","horizontal","heightHint","vertical","extend","length","_revertSizeHintsAdjustments","prefSize"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,SAAR,EAAmBC,QAAnB,EAA6BC,aAA7B,QAAiD,UAAjD;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA;AACA;AACA;AACA;AACA;AACA;;IACqBC,c;AAEnB,4BAAc;AAAA;;AACZ,SAAKC,cAAL,GAAsB,EAAtB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;iCACe,CAAE;AACd;AAED;AACF;AACA;AACA;AACA;AACA;;;;2BACSC,U,EAAY,CAAE;AACpB;AAED;AACF;AACA;AACA;;;;gDAC8BA,U,EAAYC,O,EAAS;AAC/C,UAAIC,aAAa,GAAGN,aAAa,CAACO,GAAd,CAAkBH,UAAlB,CAApB;;AACA,UAAIC,OAAO,CAACG,SAAZ,EAAuB;AACrBH,QAAAA,OAAO,CAACG,SAAR,IAAqBF,aAAa,CAACG,MAAd,GAAuBC,UAAvB,EAArB;AACD;;AACD,UAAIL,OAAO,CAACM,UAAZ,EAAwB;AACtBN,QAAAA,OAAO,CAACM,UAAR,IAAsBL,aAAa,CAACG,MAAd,GAAuBG,QAAvB,EAAtB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;;wCACsBR,U,EAAYC,O,EAAS;AACvCA,MAAAA,OAAO,GAAGJ,CAAC,CAACY,MAAF,CAAS,EAAT,EAAaR,OAAb,CAAV;;AACA,UAAI,KAAKF,cAAL,CAAoBW,MAApB,GAA6B,CAAjC,EAAoC;AAClCT,QAAAA,OAAO,CAACF,cAAR,GAAyB,KAAKA,cAA9B;AACD,OAJsC,CAKvC;AACA;;;AACA,WAAKY,2BAAL,CAAiCX,UAAjC,EAA6CC,OAA7C;;AACA,aAAON,QAAQ,CAACiB,QAAT,CAAkBZ,UAAlB,EAA8BC,OAA9B,CAAP;AACD;;;;;;SApDkBH,c","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Dimension, graphics, HtmlComponent} from '../index';\nimport $ from 'jquery';\n\n/**\n * Abstract layout class with functions used by all layout algorithms.\n * Subclasses of AbstactLayout.js must implement the following functions:\n * - layout\n * - preferredLayoutSize\n */\nexport default class AbstractLayout {\n\n  constructor() {\n    this.animateClasses = [];\n  }\n\n  /**\n   * Called when layout is invalidated. An implementation should delete cached layout-information\n   * when it is invalidated.\n   *\n   * May be implemented by sub-class.\n   */\n  invalidate() { //\n  }\n\n  /**\n   * Layouts children of the given $container, according to the implemented layout algorithm.\n   * The implementation should call setSize or setBounds on its children.\n   *\n   * Must be implemented by sub-class.\n   */\n  layout($container) { //\n  }\n\n  /**\n   * Reverts the adjustments made by {@link HtmlComponent#_adjustSizeHintsForPrefSize} without the margin.\n   * More concrete: it adds border and padding to the hints again.\n   */\n  _revertSizeHintsAdjustments($container, options) {\n    var htmlContainer = HtmlComponent.get($container);\n    if (options.widthHint) {\n      options.widthHint += htmlContainer.insets().horizontal();\n    }\n    if (options.heightHint) {\n      options.heightHint += htmlContainer.insets().vertical();\n    }\n  }\n\n  /**\n   * Returns the preferred size of the given $container.\n   *\n   * @return Dimension preferred size\n   */\n  preferredLayoutSize($container, options) {\n    options = $.extend({}, options);\n    if (this.animateClasses.length > 0) {\n      options.animateClasses = this.animateClasses;\n    }\n    // Insets have been removed automatically by the html component with the assumption that the layout will pass it to its child elements.\n    // Since this is not the case in this generic layout the insets have to be added again, otherwise the sizes used to measure would be too small.\n    this._revertSizeHintsAdjustments($container, options);\n    return graphics.prefSize($container, options);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}