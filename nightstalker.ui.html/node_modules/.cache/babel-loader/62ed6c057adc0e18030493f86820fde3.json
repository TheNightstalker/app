{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, defaultValues, DetailTableTreeFilter, Device, FileChooserController, Form, GroupBoxMenuItemsOrder, HtmlComponent, inspector, keyStrokeModifier, MenuBar, menus as menus_1, MessageBoxController, NavigateButton, NavigateDownButton, NavigateUpButton, OutlineKeyStrokeContext, OutlineLayout, OutlineNavigateToTopKeyStroke, Page, PageLayout, scout, TableControlAdapterMenu, TableRow, TableRowDetail, Tree, TreeCollapseOrDrillUpKeyStroke, TreeExpandOrDrillDownKeyStroke, TreeNavigationDownKeyStroke, TreeNavigationEndKeyStroke, TreeNavigationUpKeyStroke } from '../../index';\nimport $ from 'jquery';\n/**\n * @extends {Tree}\n * @class\n * @constructor\n */\n\nvar Outline = /*#__PURE__*/function (_Tree) {\n  _inherits(Outline, _Tree);\n\n  var _super = _createSuper(Outline);\n\n  function Outline() {\n    var _this;\n\n    _classCallCheck(this, Outline);\n\n    _this = _super.call(this);\n    _this.compact = false;\n    _this.defaultDetailForm = null;\n    _this.embedDetailContent = false;\n    _this.inBackground = false;\n    _this.mediator = null;\n    _this.navigateButtonsVisible = true;\n    _this.navigateUpInProgress = false; // see NavigateUpButton.js\n\n    _this.outlineOverview = null;\n    _this.outlineOverviewVisible = true;\n    _this.toggleBreadcrumbStyleEnabled = true;\n    _this.titleVisible = true;\n    _this.menus = [];\n    _this.titleMenuBar = null;\n    _this.nodeMenuBar = null;\n    _this.nodeMenuBarVisible = false;\n    _this.detailMenuBar = null;\n    _this.detailMenuBarVisible = false;\n    _this.dialogs = [];\n    _this.views = [];\n    _this.messageBoxes = [];\n    _this.fileChoosers = [];\n    _this.formController = null;\n    _this.messageBoxController = null;\n    _this.fileChooserController = null;\n    _this._detailContentDestroyHandler = _this._onDetailContentDestroy.bind(_assertThisInitialized(_this));\n    _this._detailMenusNodesSelectedHandler = null;\n    _this._additionalContainerClasses += ' outline';\n    _this.nodePaddingLevelCheckable = 20;\n    /* outline is not checkable. set to same value as not-checkable */\n\n    _this.nodePaddingLevelNotCheckable = 20;\n    /* outline uses different level-paddings that normal trees */\n\n    _this._scrolldirections = 'y';\n\n    _this._addWidgetProperties(['defaultDetailForm', 'views', 'selectedViewTabs', 'dialogs', 'messageBoxes', 'fileChoosers']);\n\n    return _this;\n  }\n\n  _createClass(Outline, [{\n    key: \"_init\",\n    value: function _init(model) {\n      // add filter before first traversal of tree -> tree is only traversed once.\n      this.addFilter(new DetailTableTreeFilter(), true);\n\n      _get(_getPrototypeOf(Outline.prototype), \"_init\", this).call(this, model);\n\n      this.mediator = this._createMediator();\n      this.formController = scout.create('FormController', {\n        displayParent: this,\n        session: this.session\n      });\n      this.messageBoxController = new MessageBoxController(this, this.session);\n      this.fileChooserController = new FileChooserController(this, this.session);\n      this.resolveTextKeys(['title']); // menu bars\n\n      this.titleMenuBar = scout.create('MenuBar', {\n        parent: this,\n        menuOrder: new GroupBoxMenuItemsOrder()\n      });\n      this.nodeMenuBar = scout.create('MenuBar', {\n        parent: this,\n        position: MenuBar.Position.BOTTOM,\n        menuOrder: new GroupBoxMenuItemsOrder()\n      });\n      this.detailMenuBar = scout.create('MenuBar', {\n        parent: this,\n        position: MenuBar.Position.BOTTOM,\n        menuOrder: new GroupBoxMenuItemsOrder()\n      });\n\n      this._setDefaultDetailForm(this.defaultDetailForm);\n\n      this._setOutlineOverviewVisible(this.outlineOverviewVisible);\n\n      this._setOutlineOverview(this.outlineOverview);\n\n      this._updateOutlineOverview();\n\n      this._setViews(this.views);\n\n      this._setMenus(this.menus);\n\n      this.updateDetailContent();\n    }\n    /**\n     * This function returns the outline mediator instance. When we're in an online Scout application we must\n     * return a null instance here, because mediation is done server-side.\n     */\n\n  }, {\n    key: \"_createMediator\",\n    value: function _createMediator() {\n      return scout.create('OutlineMediator');\n    }\n    /**\n     * @override Tree.js\n     */\n\n  }, {\n    key: \"_createTreeNode\",\n    value: function _createTreeNode(nodeModel) {\n      var model = $.extend({\n        objectType: 'Page'\n      }, nodeModel);\n      return this._createChild(model);\n    }\n  }, {\n    key: \"_applyNodeDefaultValues\",\n    value: function _applyNodeDefaultValues(node) {\n      defaultValues.applyTo(node, 'Page');\n    }\n  }, {\n    key: \"_createKeyStrokeContext\",\n    value: function _createKeyStrokeContext() {\n      return new OutlineKeyStrokeContext(this);\n    }\n  }, {\n    key: \"_filterMenus\",\n    value: function _filterMenus(menus, destination, onlyVisible, enableDisableKeyStroke) {\n      // show no contextmenues\n      return [];\n    }\n    /**\n     * @override Tree.js\n     */\n\n  }, {\n    key: \"_initTreeKeyStrokeContext\",\n    value: function _initTreeKeyStrokeContext() {\n      var modifierBitMask = keyStrokeModifier.CTRL | keyStrokeModifier.SHIFT; // NOSONAR\n\n      this.keyStrokeContext.registerKeyStroke([new TreeNavigationUpKeyStroke(this, modifierBitMask), new TreeNavigationDownKeyStroke(this, modifierBitMask), new OutlineNavigateToTopKeyStroke(this, modifierBitMask), new TreeNavigationEndKeyStroke(this, modifierBitMask), new TreeCollapseOrDrillUpKeyStroke(this, modifierBitMask), new TreeExpandOrDrillDownKeyStroke(this, modifierBitMask)]);\n\n      this.keyStrokeContext.$bindTarget = function () {\n        return this.session.$entryPoint;\n      }.bind(this);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(Outline.prototype), \"_render\", this).call(this); // Override layout\n\n\n      this.htmlComp.setLayout(new OutlineLayout(this));\n\n      this._renderCompact();\n\n      this._renderEmbedDetailContent();\n\n      this._renderDetailContent();\n\n      this._renderDetailMenuBarVisible();\n\n      this._renderNodeMenuBarVisible();\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(Outline.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderTitle();\n\n      this._updateIcon();\n\n      this._renderTitleMenuBar();\n    }\n    /**\n     * @override Tree.js\n     */\n\n  }, {\n    key: \"_computeNodePaddingLeft\",\n    value: function _computeNodePaddingLeft(node) {\n      this._computeNodePaddings();\n\n      if (this.compact) {\n        if (node.row && node.getOutline().selectedNode() !== node) {\n          return node.row._hierarchyLevel * this.nodePaddingLevel;\n        }\n\n        return 0;\n      }\n\n      return _get(_getPrototypeOf(Outline.prototype), \"_computeNodePaddingLeft\", this).call(this, node);\n    }\n    /**\n     * @override Tree.js\n     */\n\n  }, {\n    key: \"_remove\",\n    value: function _remove() {\n      _get(_getPrototypeOf(Outline.prototype), \"_remove\", this).call(this);\n\n      this._removeTitle();\n\n      this._removeIcon();\n    }\n  }, {\n    key: \"_renderTitle\",\n    value: function _renderTitle() {\n      if (this.titleVisible) {\n        if (!this.$title) {\n          this.$title = this.$container.prependDiv('outline-title').on('mousedown', this._onTitleMouseDown.bind(this)).toggleClass('touch', Device.get().supportsOnlyTouch());\n          this.$titleText = this.$title.prependDiv('outline-title-text');\n        }\n\n        this.$titleText.text(this.title);\n      }\n    }\n  }, {\n    key: \"_removeTitle\",\n    value: function _removeTitle() {\n      if (this.titleVisible) {\n        this.$title.remove();\n        this.$title = null;\n      }\n    }\n  }, {\n    key: \"setIconVisible\",\n    value: function setIconVisible(iconVisible) {\n      this.setProperty('iconVisible', iconVisible);\n\n      if (this.rendered) {\n        this._updateIcon();\n      }\n    }\n  }, {\n    key: \"setIconId\",\n    value: function setIconId(iconId) {\n      this.setProperty('iconId', iconId);\n\n      if (this.rendered) {\n        this._updateIcon();\n      }\n    }\n  }, {\n    key: \"_updateIcon\",\n    value: function _updateIcon() {\n      if (this.titleVisible && this.iconVisible && this.iconId) {\n        if (this.icon) {\n          this.icon.setIconDesc(this.iconId);\n          return;\n        }\n\n        this.icon = scout.create('Icon', {\n          parent: this,\n          iconDesc: this.iconId,\n          prepend: true\n        });\n        this.icon.render(this.$title);\n      } else {\n        if (!this.icon) {\n          return;\n        }\n\n        this.icon.remove();\n        this.icon = null;\n      }\n    }\n  }, {\n    key: \"_removeIcon\",\n    value: function _removeIcon() {\n      if (this.icon) {\n        this.icon.remove();\n        this.icon = null;\n      }\n    }\n  }, {\n    key: \"_renderTitleMenuBar\",\n    value: function _renderTitleMenuBar() {\n      if (this.titleVisible) {\n        this.titleMenuBar.render(this.$title);\n        this.titleMenuBar.$container.addClass('prevent-initial-focus');\n      }\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_renderEnabled\",\n    value: function _renderEnabled() {\n      _get(_getPrototypeOf(Outline.prototype), \"_renderEnabled\", this).call(this);\n\n      this.$container.setTabbable(false);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_initTreeNodeInternal\",\n    value: function _initTreeNodeInternal(node, parentNode) {\n      _get(_getPrototypeOf(Outline.prototype), \"_initTreeNodeInternal\", this).call(this, node, parentNode);\n\n      this._initDetailTableAndForm(node);\n\n      this.trigger('pageInit', {\n        page: node\n      });\n    }\n  }, {\n    key: \"_initDetailTableAndForm\",\n    value: function _initDetailTableAndForm(node) {\n      if (node.detailTable) {\n        this._initDetailTable(node);\n      }\n\n      if (node.detailForm) {\n        this._initDetailForm(node);\n      }\n    }\n  }, {\n    key: \"_initDetailTable\",\n    value: function _initDetailTable(node) {\n      if (this.navigateButtonsVisible && node.navigateButtonsVisible) {\n        this._appendNavigateButtonsForDetailTable(node);\n      }\n    }\n  }, {\n    key: \"_initDetailForm\",\n    value: function _initDetailForm(node) {\n      if (this.navigateButtonsVisible && node.navigateButtonsVisible) {\n        this._appendNavigateButtonsForDetailForm(node);\n      } // Mark form as detail form\n\n\n      node.detailForm.detailForm = true;\n      node.detailForm.one('destroy', function () {\n        // Unlink detail form if it was closed. May happen in the following case:\n        // The form gets closed on execPageDeactivated. No pageChanged event will\n        // be fired because the deactivated page is not selected anymore.\n        node.detailForm = null; // Also make sure other objects hold no reference to a destroyed form (e.g. bench)\n\n        this._triggerPageChanged(node);\n      }.bind(this));\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_decorateNode\",\n    value: function _decorateNode(node) {\n      _get(_getPrototypeOf(Outline.prototype), \"_decorateNode\", this).call(this, node);\n\n      if (this.session.inspector) {\n        inspector.applyInfo(node, node.$node);\n      }\n    } // Info: we pass the keyStrokeContext of the parent (table or form) to\n    // the created buttons, we cannot use keyStrokeContext of the outline\n    // because that context is disabled when the outline is collapsed. We\n    // cannot set the property 'keyStrokeContext' because this would interfere\n    // with the default keyStrokeContext which is already created when the CTOR\n    // of Widget runs.\n\n  }, {\n    key: \"_createNavigateButtons\",\n    value: function _createNavigateButtons(node, parent) {\n      var menus = arrays.ensure(parent.staticMenus);\n\n      if (!this._hasMenu(menus, NavigateUpButton)) {\n        var upButton = scout.create('NavigateUpButton', {\n          parent: parent,\n          altKeyStrokeContext: parent.keyStrokeContext,\n          outline: this,\n          node: node\n        });\n        menus.push(upButton);\n      }\n\n      if (!this._hasMenu(menus, NavigateDownButton)) {\n        var downButton = scout.create('NavigateDownButton', {\n          parent: parent,\n          altKeyStrokeContext: parent.keyStrokeContext,\n          outline: this,\n          node: node\n        });\n        menus.push(downButton);\n      }\n\n      return menus;\n    }\n  }, {\n    key: \"_getMenu\",\n    value: function _getMenu(menus, menuClass) {\n      for (var i = 0; i < menus.length; i++) {\n        if (menus[i] instanceof menuClass) {\n          return menus[i];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_hasMenu\",\n    value: function _hasMenu(menus, menuClass) {\n      return this._getMenu(menus, menuClass) !== null;\n    }\n  }, {\n    key: \"_onTitleMouseDown\",\n    value: function _onTitleMouseDown(event) {\n      if (this.titleMenuBar.rendered && this.titleMenuBar.$container.isOrHas(event.target)) {\n        // Ignore clicks on title menubar\n        return;\n      }\n\n      this.navigateToTop();\n    }\n  }, {\n    key: \"navigateToTop\",\n    value: function navigateToTop() {\n      this.deselectAll();\n      this.handleInitialExpanded();\n      this.setScrollTop(0);\n    }\n  }, {\n    key: \"handleInitialExpanded\",\n    value: function handleInitialExpanded() {\n      this.visitNodes(function (node) {\n        this.setNodeExpanded(node, node.initialExpanded, {\n          renderExpansion: true\n        });\n      }.bind(this));\n    }\n  }, {\n    key: \"_onNodeDeleted\",\n    value: function _onNodeDeleted(node) {\n      // Destroy table, which is attached at the root adapter. Form gets destroyed by form close event\n      if (node.detailTable) {\n        node.detailTable.destroy();\n        node.detailTable = null;\n      }\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"selectNodes\",\n    value: function selectNodes(nodes, debounceSend) {\n      nodes = arrays.ensure(nodes);\n\n      if (nodes.length > 0 && this.isNodeSelected(nodes[0])) {\n        // Already selected, do nothing\n        return;\n      }\n\n      if (nodes.length === 0 && this.selectedNodes.length === 0) {\n        // Already unselected, do nothing\n        return;\n      }\n\n      if (this.navigateUpInProgress) {\n        this.navigateUpInProgress = false;\n      } else {\n        if (nodes.length === 1) {\n          // When a node is selected, the detail form should never be hidden\n          this.setDetailFormVisibleByUi(nodes[0], true);\n        }\n      }\n\n      _get(_getPrototypeOf(Outline.prototype), \"selectNodes\", this).call(this, nodes, debounceSend);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_setSelectedNodes\",\n    value: function _setSelectedNodes(nodes, debounceSend) {\n      _get(_getPrototypeOf(Outline.prototype), \"_setSelectedNodes\", this).call(this, nodes, debounceSend); // Needs to be done here so that tree.selectNodes() can restore scroll position correctly after the content has been updated\n\n\n      this.updateDetailContent();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_nodesSelectedInternal\",\n    value: function _nodesSelectedInternal() {\n      var activePage = this.activePage(); // This block here is similar to what's done in Java's DefaultPageChangeStrategy\n\n      if (activePage) {\n        activePage.activate();\n        activePage.ensureLoadChildren().done(this._onLoadChildrenDone.bind(this, activePage));\n      }\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_renderSelection\",\n    value: function _renderSelection() {\n      _get(_getPrototypeOf(Outline.prototype), \"_renderSelection\", this).call(this);\n\n      this.$container.toggleClass('node-selected', this.selectedNodes.length > 0);\n    }\n  }, {\n    key: \"setDefaultDetailForm\",\n    value: function setDefaultDetailForm(defaultDetailForm) {\n      this.setProperty('defaultDetailForm', defaultDetailForm);\n\n      this._updateOutlineOverview();\n    }\n  }, {\n    key: \"_setDefaultDetailForm\",\n    value: function _setDefaultDetailForm(defaultDetailForm) {\n      if (this.defaultDetailForm) {\n        this.defaultDetailForm.detailForm = false;\n      }\n\n      this._setProperty('defaultDetailForm', defaultDetailForm);\n\n      if (this.defaultDetailForm) {\n        this.defaultDetailForm.detailForm = true;\n      }\n    }\n  }, {\n    key: \"setOutlineOverviewVisible\",\n    value: function setOutlineOverviewVisible(outlineOverviewVisible) {\n      this.setProperty('outlineOverviewVisible', outlineOverviewVisible);\n\n      this._updateOutlineOverview();\n    }\n  }, {\n    key: \"_setOutlineOverviewVisible\",\n    value: function _setOutlineOverviewVisible(outlineOverviewVisible) {\n      this._setProperty('outlineOverviewVisible', outlineOverviewVisible);\n    }\n  }, {\n    key: \"setOutlineOverview\",\n    value: function setOutlineOverview(outlineOverview) {\n      this.setProperty('outlineOverview', outlineOverview);\n\n      this._updateOutlineOverview();\n    }\n  }, {\n    key: \"_setOutlineOverview\",\n    value: function _setOutlineOverview(outlineOverview) {\n      // Ensure outlineOverview is of type OutlineOverview.\n      // Widget property cannot be used because nodes are not of type Page yet while _prepareWidgetProperty is running during initialization\n      if (outlineOverview) {\n        outlineOverview = this._createChild(outlineOverview);\n      }\n\n      this._setProperty('outlineOverview', outlineOverview);\n    }\n  }, {\n    key: \"_updateOutlineOverview\",\n    value: function _updateOutlineOverview() {\n      if (this.defaultDetailForm) {\n        if (this.outlineOverview) {\n          this.outlineOverview.destroy();\n\n          this._setOutlineOverview(null);\n        }\n      } else {\n        if (this.outlineOverviewVisible) {\n          if (!this.outlineOverview) {\n            // Create outlineOverview if no defaultDetailForm is available\n            this._setOutlineOverview(this._createOutlineOverview());\n          }\n        } else {\n          if (this.outlineOverview) {\n            this.outlineOverview.destroy();\n\n            this._setOutlineOverview(null);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_createOutlineOverview\",\n    value: function _createOutlineOverview() {\n      return scout.create('TileOutlineOverview', {\n        parent: this,\n        outline: this\n      });\n    }\n  }, {\n    key: \"setNavigateButtonsVisible\",\n    value: function setNavigateButtonsVisible(navigateButtonsVisible) {\n      this.setProperty('navigateButtonsVisible', navigateButtonsVisible);\n    }\n  }, {\n    key: \"_setNavigateButtonsVisible\",\n    value: function _setNavigateButtonsVisible(navigateButtonsVisible) {\n      this._setProperty('navigateButtonsVisible', navigateButtonsVisible);\n\n      this.visitNodes(this._setNavigateButtonsVisibleForNode.bind(this));\n    }\n  }, {\n    key: \"_setNavigateButtonsVisibleForNode\",\n    value: function _setNavigateButtonsVisibleForNode(node, parentNode) {\n      if (this.navigateButtonsVisible) {\n        if (node.detailForm) {\n          this._appendNavigateButtonsForDetailForm(node);\n        }\n\n        if (node.detailTable) {\n          this._appendNavigateButtonsForDetailTable(node);\n        }\n      } else {\n        if (node.detailForm) {\n          this._removeNavigateButtonsForDetailForm(node);\n        }\n\n        if (node.detailTable) {\n          this._removeNavigateButtonsForDetailTable(node);\n        }\n      }\n    }\n  }, {\n    key: \"_appendNavigateButtonsForDetailForm\",\n    value: function _appendNavigateButtonsForDetailForm(node) {\n      var menus = this._createNavigateButtons(node, node.detailForm.rootGroupBox);\n\n      node.detailForm.rootGroupBox.setStaticMenus(menus);\n    }\n  }, {\n    key: \"_appendNavigateButtonsForDetailTable\",\n    value: function _appendNavigateButtonsForDetailTable(node) {\n      var menus = this._createNavigateButtons(node, node.detailTable);\n\n      node.detailTable.setStaticMenus(menus);\n    }\n  }, {\n    key: \"_removeNavigateButtonsForDetailForm\",\n    value: function _removeNavigateButtonsForDetailForm(node) {\n      var staticMenus = node.detailForm.rootGroupBox.staticMenus.filter(function (menu) {\n        return !(menu instanceof NavigateButton);\n      });\n      node.detailForm.rootGroupBox.setStaticMenus(staticMenus);\n    }\n  }, {\n    key: \"_removeNavigateButtonsForDetailTable\",\n    value: function _removeNavigateButtonsForDetailTable(node) {\n      var staticMenus = node.detailTable.staticMenus.filter(function (menu) {\n        return !(menu instanceof NavigateButton);\n      });\n      node.detailTable.setStaticMenus(staticMenus);\n    }\n    /**\n     * @returns {TableRow} the selected row or null when no row is selected. When multiple rows are selected\n     *    the first selected row is returned.\n     */\n\n  }, {\n    key: \"selectedRow\",\n    value: function selectedRow() {\n      var node = this.selectedNode();\n\n      if (!node || !node.detailTable) {\n        return null;\n      }\n\n      return node.detailTable.selectedRow();\n    }\n    /**\n     * Called by updateItemPath.\n     *\n     * @override\n     */\n\n  }, {\n    key: \"_isGroupingEnd\",\n    value: function _isGroupingEnd(node) {\n      return node.nodeType === Page.NodeType.TABLE;\n    }\n    /**\n     * Disabled for outlines because outline may be resized.\n     */\n\n  }, {\n    key: \"_isTruncatedNodeTooltipEnabled\",\n    value: function _isTruncatedNodeTooltipEnabled() {\n      return false;\n    }\n  }, {\n    key: \"setDetailFormVisibleByUi\",\n    value: function setDetailFormVisibleByUi(node, visible) {\n      node.detailFormVisibleByUi = visible;\n\n      this._triggerPageChanged(node);\n    }\n  }, {\n    key: \"validateFocus\",\n    value: function validateFocus() {\n      this.session.focusManager.validateFocus();\n    }\n  }, {\n    key: \"sendToBack\",\n    value: function sendToBack() {\n      this.inBackground = true;\n\n      this._renderInBackground(); // Detach child dialogs, message boxes and file choosers, not views.\n\n\n      this.formController.detachDialogs();\n      this.messageBoxController.detach();\n      this.fileChooserController.detach();\n    }\n  }, {\n    key: \"bringToFront\",\n    value: function bringToFront() {\n      this.inBackground = false;\n\n      this._renderInBackground(); // Attach child dialogs, message boxes and file choosers.\n\n\n      this.formController.attachDialogs();\n      this.messageBoxController.attach();\n      this.fileChooserController.attach();\n    }\n  }, {\n    key: \"_renderInBackground\",\n    value: function _renderInBackground() {\n      this.$container.toggleClass('in-background', this.inBackground);\n    }\n  }, {\n    key: \"_renderCompact\",\n    value: function _renderCompact() {\n      this.$container.toggleClass('compact', this.compact);\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"_renderEmbedDetailContent\",\n    value: function _renderEmbedDetailContent() {\n      this.$data.toggleClass('has-detail-content', this.embedDetailContent);\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"_renderDetailContent\",\n    value: function _renderDetailContent() {\n      if (!this.detailContent || this.detailContent.rendered) {\n        return;\n      }\n\n      var page = this.selectedNode();\n\n      if (!page.rendered) {\n        return;\n      }\n\n      this.detailContent.render(page.$node);\n\n      if (this.detailContent.htmlComp) {\n        this.detailContent.htmlComp.validateRoot = false;\n      }\n\n      this._ensurePageLayout(page);\n\n      this.$data.addClass('detail-content-visible');\n    }\n  }, {\n    key: \"_ensurePageLayout\",\n    value: function _ensurePageLayout(page) {\n      // selected page now has content (menubar and form) -> needs a layout\n      // always create new htmlComp, otherwise we would have to remove them when $node or outline gets remvoed\n      page.htmlComp = HtmlComponent.install(page.$node, this.session);\n      page.htmlComp.setLayout(new PageLayout(this, page));\n    }\n  }, {\n    key: \"_removeDetailContent\",\n    value: function _removeDetailContent() {\n      if (!this.detailContent) {\n        return;\n      }\n\n      this.detailContent.remove();\n      this.$data.removeClass('detail-content-visible');\n    }\n  }, {\n    key: \"_postRenderViewRange\",\n    value: function _postRenderViewRange() {\n      _get(_getPrototypeOf(Outline.prototype), \"_postRenderViewRange\", this).call(this);\n\n      this._renderDetailContent();\n\n      this._renderDetailMenuBarVisible();\n\n      this._renderNodeMenuBarVisible();\n    }\n  }, {\n    key: \"setCompact\",\n    value: function setCompact(compact) {\n      this.setProperty('compact', compact);\n    }\n  }, {\n    key: \"setEmbedDetailContent\",\n    value: function setEmbedDetailContent(embedDetailContent) {\n      this.setProperty('embedDetailContent', embedDetailContent);\n      this.updateDetailContent();\n    }\n  }, {\n    key: \"_onDetailContentDestroy\",\n    value: function _onDetailContentDestroy(event) {\n      this.setDetailContent(null);\n      this.updateDetailMenus();\n    }\n  }, {\n    key: \"setDetailContent\",\n    value: function setDetailContent(content) {\n      if (this.detailContent === content) {\n        return;\n      }\n\n      if (this.rendered) {\n        this._removeDetailContent();\n      }\n\n      if (this.detailContent) {\n        this.detailContent.off('destroy', this._detailContentDestroyHandler);\n      }\n\n      if (this.detailContent instanceof TableRowDetail) {\n        this.detailContent.destroy();\n      }\n\n      this._setProperty('detailContent', content);\n\n      if (content) {\n        content.on('destroy', this._detailContentDestroyHandler);\n      }\n\n      if (this.rendered) {\n        this._renderDetailContent();\n      }\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"updateDetailContent\",\n    value: function updateDetailContent() {\n      if (!this.embedDetailContent) {\n        this.setDetailContent(null);\n        this.setDetailMenus([]);\n        return;\n      }\n\n      this.setDetailMenuBarVisible(false);\n      this.setNodeMenuBarVisible(false);\n      this.setDetailContent(this._computeDetailContent());\n      this.updateDetailMenus();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_updateScrollTopAfterSelection\",\n    value: function _updateScrollTopAfterSelection() {\n      _get(_getPrototypeOf(Outline.prototype), \"_updateScrollTopAfterSelection\", this).call(this);\n\n      if (!this.embedDetailContent) {\n        return;\n      } // Layout immediate to prevent 'laggy' detail form visualization,\n      // but not initially while desktop gets rendered because it will be done at the end anyway\n      // It is important that this is done after _renderSelection, because node could be invisible due to the missing .selected class which means it won't be layouted\n\n\n      this.validateLayoutTree(); // Scroll to the parent node to hide ancestor nodes and give as much room as possible for the content\n\n      if (this.selectedNodes[0] && this.selectedNodes[0].parentNode) {\n        if (this.prevSelectedNode && this.prevSelectedNode.isDescendantOf(this.selectedNodes[0])) {\n          // But don't do it on upwards navigation, in that case the tree will scroll to the optimal position by itself, see _updateScrollTopAfterSelection\n          return;\n        }\n\n        this.scrollTo(this.selectedNodes[0].parentNode, {\n          align: 'top',\n          animate: true\n        });\n      }\n    }\n  }, {\n    key: \"_computeDetailContent\",\n    value: function _computeDetailContent() {\n      var selectedPage = this.selectedNode();\n\n      if (!selectedPage) {\n        // Detail content is shown for the selected node only\n        return null;\n      } // if there is a detail form, use this\n\n\n      if (selectedPage.detailForm && selectedPage.detailFormVisible && selectedPage.detailFormVisibleByUi) {\n        return selectedPage.detailForm; // otherwise show the content of the table row\n        // but never if parent is a node page -> the table contains only one column with no essential information\n      } else if (selectedPage.row && selectedPage.parentNode.nodeType === Page.NodeType.TABLE) {\n        return scout.create('TableRowDetail', {\n          parent: this,\n          table: selectedPage.parentNode.detailTable,\n          page: selectedPage\n        });\n      }\n\n      return null;\n    }\n    /**\n     * Updates node and detail menubar.\n     * Node menubar: Contains the table controls and right aligned menus.\n     * Detail menubar: Contains the other menus.\n     *\n     * The menu items are gathered from various sources:\n     * If the selected page has a detailForm, the menus are taken from there. Otherwise the detail table and the parent detail table provide the menus.\n     * The detail table contributes the empty space menus and the parent detail the the single selection menus.\n     *\n     * The menus of the outline itself are not displayed. In fact the server won't deliver any.\n     * One reason is that no menus are displayed in regular mode, so when switching to compact mode no menus would be available.\n     * Another reason is that it would flicker because the menus are sent anew from the server every time a node gets selected because the menus are added to the outline and not to the node and are therefore not cached.\n     */\n\n  }, {\n    key: \"updateDetailMenus\",\n    value: function updateDetailMenus() {\n      if (!this.embedDetailContent) {\n        return;\n      }\n\n      var selectedPages = this.selectedNodes,\n          selectedPage = selectedPages[0],\n          menuItems = [],\n          tableControls = [],\n          nodeMenus = [],\n          detailTable,\n          detailMenus = [];\n\n      if (this.detailContent && this.detailContent instanceof Form) {\n        // get menus from detail form\n        var rootGroupBox = this.detailContent.rootGroupBox;\n        menuItems = rootGroupBox.processMenus.concat(rootGroupBox.menus);\n        rootGroupBox.setMenuBarVisible(false);\n\n        this._attachDetailMenusListener(rootGroupBox);\n      } else if (selectedPage) {\n        // get empty space menus and table controls from detail table\n        if (selectedPage.detailTable) {\n          detailTable = selectedPage.detailTable;\n          menuItems = menus_1.filter(detailTable.menus, ['Table.EmptySpace'], false, true);\n          tableControls = detailTable.tableControls;\n          detailTable.setMenuBarVisible(false);\n\n          this._attachDetailMenusListener(detailTable);\n        } // get single selection menus from parent detail table\n\n\n        var parentPage = selectedPage.parentNode;\n\n        if (parentPage && parentPage.detailTable) {\n          detailTable = parentPage.detailTable;\n          menuItems = menuItems.concat(menus_1.filter(detailTable.menus, ['Table.SingleSelection'], false, true));\n          detailTable.setMenuBarVisible(false);\n\n          this._attachDetailMenusListener(detailTable);\n        }\n      } // Add table controls to nodeMenus\n\n\n      tableControls.forEach(function (tableControl) {\n        var menu = scout.create('TableControlAdapterMenu', TableControlAdapterMenu.adaptTableControlProperties(tableControl, {\n          parent: this,\n          tableControl: tableControl,\n          horizontalAlignment: 1\n        }));\n        nodeMenus.push(menu);\n      }, this); // Add right aligned menus to node menus, other to detail menus\n\n      menuItems.forEach(function (menuItem) {\n        if (menuItem.horizontalAlignment === 1) {\n          nodeMenus.push(menuItem);\n        } else {\n          detailMenus.push(menuItem);\n        }\n      }, this);\n      this.setNodeMenus(nodeMenus);\n      this.setDetailMenus(detailMenus);\n    }\n    /**\n     * Attaches a listener to the given menu container (which is the detail table or the detail table of the parent node)\n     * in order to get dynamic menu changes and update the detailMenus on such a change event.\n     * The impl. is lazy because it is only used in mobile mode.\n     */\n\n  }, {\n    key: \"_attachDetailMenusListener\",\n    value: function _attachDetailMenusListener(menuContainer) {\n      if (!this._detailMenusChangeHandler) {\n        this._detailMenusChangeHandler = function (event) {\n          if (event.propertyName === 'menus' || event.propertyName === 'tableControls') {\n            this.updateDetailMenus();\n          }\n        }.bind(this);\n      }\n\n      if (!this._detailMenusDestroyHandler) {\n        this._detailMenusDestroyHandler = function () {\n          menuContainer.off('propertyChange', this._detailMenusChangeHandler);\n        }.bind(this);\n      }\n\n      menuContainer.off('propertyChange', this._detailMenusChangeHandler);\n      menuContainer.on('propertyChange', this._detailMenusChangeHandler);\n      menuContainer.off('destroy', this._detailMenusDestroyHandler);\n      menuContainer.one('destroy', this._detailMenusDestroyHandler);\n\n      if (!this._detailMenusNodesSelectedHandler) {\n        // This nodes selection listener removes the property change listeners from the old menu containers (detail content) whenever a node gets selected\n        // updateDetailMenus() is called afterwards and attaches the property change listeners to the new detail content\n        // This guarantees that no events are fired for non selected nodes\n        this._detailMenusNodesSelectedHandler = {\n          outline: this,\n          menuContainers: [],\n          addMenuContainer: function addMenuContainer(container) {\n            if (this.menuContainers.indexOf(container) > -1) {\n              return;\n            }\n\n            this.menuContainers.push(container);\n          },\n          func: function func(event) {\n            if (event.type !== 'nodesSelected') {\n              return;\n            }\n\n            this.menuContainers.forEach(function (container) {\n              container.off('propertyChange', this.outline._detailMenusChangeHandler);\n              container.off('destroy', this.outline._detailMenusDestroyHandler);\n            }, this);\n            this.menuContainers = [];\n          }\n        };\n        this.addListener(this._detailMenusNodesSelectedHandler);\n      }\n\n      this._detailMenusNodesSelectedHandler.addMenuContainer(menuContainer);\n    }\n  }, {\n    key: \"setDetailMenus\",\n    value: function setDetailMenus(detailMenus) {\n      // Make sure detailMenus are rendered again even if they are the same as before\n      // Reason: the menus could have been removed from the DOM in the meantime.\n      // This happens if table#setMenus() is called while table is not rendered, which is always the case in compact mode.\n      // In that case the parent is temporarily set to the table which will remove the menu.\n      this.detailMenuBar.setMenuItems([]);\n      this.detailMenuBar.setMenuItems(detailMenus);\n      this.setDetailMenuBarVisible(this.detailMenuBar.menuItems.length > 0);\n    }\n  }, {\n    key: \"_renderDetailMenuBarVisible\",\n    value: function _renderDetailMenuBarVisible() {\n      if (this.detailMenuBarVisible) {\n        this._renderDetailMenuBar();\n      } else {\n        this._removeDetailMenuBar();\n      }\n    }\n  }, {\n    key: \"_renderDetailMenuBar\",\n    value: function _renderDetailMenuBar() {\n      if (this.detailMenuBar.rendered) {\n        return;\n      }\n\n      var node = this.selectedNode();\n\n      if (!node || !node.rendered) {\n        return;\n      }\n\n      this.detailMenuBar.render(node.$node);\n      this.detailMenuBar.$container.addClass('detail-menubar');\n\n      if (this.detailContent && this.detailContent.rendered) {\n        // move before content (e.g. form)\n        this.detailMenuBar.$container.insertBefore(this.detailContent.$container);\n      }\n\n      this._ensurePageLayout(node);\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"_removeDetailMenuBar\",\n    value: function _removeDetailMenuBar() {\n      if (!this.detailMenuBar.rendered) {\n        return;\n      }\n\n      this.detailMenuBar.remove();\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"setDetailMenuBarVisible\",\n    value: function setDetailMenuBarVisible(visible) {\n      this.setProperty('detailMenuBarVisible', visible);\n    }\n  }, {\n    key: \"setNodeMenus\",\n    value: function setNodeMenus(nodeMenus) {\n      // See setDetailMenus for the reason of the following code\n      this.nodeMenuBar.setMenuItems([]);\n      this.nodeMenuBar.setMenuItems(nodeMenus);\n      this.setNodeMenuBarVisible(this.nodeMenuBar.menuItems.length > 0);\n    }\n  }, {\n    key: \"_renderNodeMenuBarVisible\",\n    value: function _renderNodeMenuBarVisible() {\n      if (this.nodeMenuBarVisible) {\n        this._renderNodeMenuBar();\n      } else {\n        this._removeNodeMenuBar();\n      }\n    }\n  }, {\n    key: \"_renderNodeMenuBar\",\n    value: function _renderNodeMenuBar() {\n      if (this.nodeMenuBar.rendered) {\n        return;\n      }\n\n      var node = this.selectedNode();\n\n      if (!node || !node.rendered) {\n        return;\n      }\n\n      var $text = node.$text;\n      this.nodeMenuBar.render(node.$node);\n      this.nodeMenuBar.$container.addClass('node-menubar');\n      this.nodeMenuBar.$container.insertAfter($text);\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"_removeNodeMenuBar\",\n    value: function _removeNodeMenuBar() {\n      if (!this.nodeMenuBar.rendered) {\n        return;\n      }\n\n      this.nodeMenuBar.remove();\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"setNodeMenuBarVisible\",\n    value: function setNodeMenuBarVisible(visible) {\n      this.setProperty('nodeMenuBarVisible', visible);\n    }\n  }, {\n    key: \"glassPaneTargets\",\n    value: function glassPaneTargets() {\n      // MessageBoxes are often created with Outlines as displayParent. The default implementation of this function\n      // would not render any glass panes when the outline is collapsed, thus we need to override this behavior.\n      return this._glassPaneTargets();\n    }\n  }, {\n    key: \"_glassPaneTargets\",\n    value: function _glassPaneTargets(element) {\n      var desktop = this.session.desktop;\n      var $elements = [];\n\n      if (desktop.navigation) {\n        $elements.push(desktop.navigation.$body);\n      }\n\n      if (desktop.bench && element instanceof Form && element.displayHint === Form.DisplayHint.VIEW) {\n        arrays.pushAll($elements, this._getBenchGlassPaneTargetsForView(element));\n      }\n\n      if (desktop.bench && desktop.bench.outlineContent) {\n        arrays.pushAll($elements, desktop.bench.outlineContent.glassPaneTargets(element));\n      }\n\n      return $elements;\n    }\n  }, {\n    key: \"_getBenchGlassPaneTargetsForView\",\n    value: function _getBenchGlassPaneTargetsForView(view) {\n      var $glassPanes = [];\n      $glassPanes = $glassPanes.concat(this._getTabGlassPaneTargetsForView(view, this.session.desktop.header));\n      this.session.desktop.bench.visibleTabBoxes().forEach(function (tabBox) {\n        if (tabBox.hasView(view)) {\n          arrays.pushAll($glassPanes, this._getTabGlassPaneTargetsForView(view, tabBox));\n        } else if (tabBox.$container) {\n          $glassPanes.push(tabBox.$container);\n        }\n      }, this);\n      return $glassPanes;\n    }\n  }, {\n    key: \"_getTabGlassPaneTargetsForView\",\n    value: function _getTabGlassPaneTargetsForView(view, tabBox) {\n      var $glassPanes = [];\n      tabBox.tabArea.tabs.forEach(function (tab) {\n        if (tab.view !== view && tab.view.displayParent === this) {\n          $glassPanes.push(tab.$container); // Workaround for javascript not being able to prevent hover event propagation:\n          // In case of tabs, the hover selector is defined on the element that is the direct parent\n          // of the glass pane. Under these circumstances, the hover style isn't be prevented by the glass pane.\n\n          tab.$container.addClass('no-hover');\n        }\n      }.bind(this));\n      return $glassPanes;\n    }\n  }, {\n    key: \"_onGlassPaneMouseDown\",\n    value: function _onGlassPaneMouseDown(glassPaneOwner, $glassPane) {\n      var desktop = this.session.desktop;\n\n      if (desktop.navigation) {\n        if ($glassPane.parent()[0] === desktop.navigation.$body[0]) {\n          desktop.bringOutlineToFront();\n        }\n      }\n    }\n    /**\n     * === Method required for objects that act as 'displayParent' ===\n     *\n     * Returns true if this outline is active and not in background.\n     */\n\n  }, {\n    key: \"inFront\",\n    value: function inFront() {\n      return this.session.desktop.outline === this && !this.inBackground;\n    }\n    /**\n     * Called if outline acts as display parent.<p>\n     * Returns true if outline is active, even if it is not rendered (e.g. when navigation is invisible)\n     */\n\n  }, {\n    key: \"acceptDialog\",\n    value: function acceptDialog(dialog) {\n      return this.session.desktop.outline === this;\n    }\n    /**\n     * Called if outline acts as display parent.<p>\n     * Returns true if outline is active, even if it is not rendered (e.g. when navigation is invisible)\n     */\n\n  }, {\n    key: \"acceptView\",\n    value: function acceptView(view) {\n      return this.session.desktop.outline === this;\n    } // see Java: AbstractOutline#makeActivePageToContextPage\n\n  }, {\n    key: \"activateCurrentPage\",\n    value: function activateCurrentPage() {\n      var activePage = this.activePage();\n\n      if (activePage) {\n        activePage.activate();\n      }\n    }\n  }, {\n    key: \"activePage\",\n    value: function activePage() {\n      return this.selectedNode();\n    }\n  }, {\n    key: \"_setViews\",\n    value: function _setViews(views) {\n      if (views) {\n        views.forEach(function (view) {\n          view.setDisplayParent(this);\n        }.bind(this));\n      }\n\n      this._setProperty('views', views);\n    }\n    /**\n     * @override Tree.js (don't call parent)\n     */\n\n  }, {\n    key: \"_setMenus\",\n    value: function _setMenus(menus) {\n      var oldMenus = this.menus;\n      this.updateKeyStrokes(menus, oldMenus);\n\n      this._setProperty('menus', menus);\n\n      if (this.titleMenuBar) {\n        // _setMenus is called by parent class Tree.js, at this time titleMenuBar is not yet initialized\n        var menuItems = menus_1.filter(this.menus, ['Tree.Header']);\n        this.titleMenuBar.setMenuItems(menuItems);\n      }\n    }\n  }, {\n    key: \"_triggerPageChanged\",\n    value: function _triggerPageChanged(page) {\n      this.trigger('pageChanged', {\n        page: page\n      });\n    }\n  }, {\n    key: \"_onLoadChildrenDone\",\n    value: function _onLoadChildrenDone(activePage) {\n      if (activePage) {\n        this._initDetailTableAndForm(activePage);\n      }\n    }\n  }, {\n    key: \"pageChanged\",\n    value: function pageChanged(page) {\n      if (page) {\n        this._initDetailTableAndForm(page);\n      }\n\n      var selectedPage = this.selectedNode();\n\n      if (!page && !selectedPage || page === selectedPage) {\n        this.updateDetailContent();\n      }\n\n      this._triggerPageChanged(page);\n    }\n  }]);\n\n  return Outline;\n}(Tree);\n\nexport { Outline as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/outline/Outline.js"],"names":["arrays","defaultValues","DetailTableTreeFilter","Device","FileChooserController","Form","GroupBoxMenuItemsOrder","HtmlComponent","inspector","keyStrokeModifier","MenuBar","menus","menus_1","MessageBoxController","NavigateButton","NavigateDownButton","NavigateUpButton","OutlineKeyStrokeContext","OutlineLayout","OutlineNavigateToTopKeyStroke","Page","PageLayout","scout","TableControlAdapterMenu","TableRow","TableRowDetail","Tree","TreeCollapseOrDrillUpKeyStroke","TreeExpandOrDrillDownKeyStroke","TreeNavigationDownKeyStroke","TreeNavigationEndKeyStroke","TreeNavigationUpKeyStroke","$","Outline","compact","defaultDetailForm","embedDetailContent","inBackground","mediator","navigateButtonsVisible","navigateUpInProgress","outlineOverview","outlineOverviewVisible","toggleBreadcrumbStyleEnabled","titleVisible","titleMenuBar","nodeMenuBar","nodeMenuBarVisible","detailMenuBar","detailMenuBarVisible","dialogs","views","messageBoxes","fileChoosers","formController","messageBoxController","fileChooserController","_detailContentDestroyHandler","_onDetailContentDestroy","bind","_detailMenusNodesSelectedHandler","_additionalContainerClasses","nodePaddingLevelCheckable","nodePaddingLevelNotCheckable","_scrolldirections","_addWidgetProperties","model","addFilter","_createMediator","create","displayParent","session","resolveTextKeys","parent","menuOrder","position","Position","BOTTOM","_setDefaultDetailForm","_setOutlineOverviewVisible","_setOutlineOverview","_updateOutlineOverview","_setViews","_setMenus","updateDetailContent","nodeModel","extend","objectType","_createChild","node","applyTo","destination","onlyVisible","enableDisableKeyStroke","modifierBitMask","CTRL","SHIFT","keyStrokeContext","registerKeyStroke","$bindTarget","$entryPoint","htmlComp","setLayout","_renderCompact","_renderEmbedDetailContent","_renderDetailContent","_renderDetailMenuBarVisible","_renderNodeMenuBarVisible","_renderTitle","_updateIcon","_renderTitleMenuBar","_computeNodePaddings","row","getOutline","selectedNode","_hierarchyLevel","nodePaddingLevel","_removeTitle","_removeIcon","$title","$container","prependDiv","on","_onTitleMouseDown","toggleClass","get","supportsOnlyTouch","$titleText","text","title","remove","iconVisible","setProperty","rendered","iconId","icon","setIconDesc","iconDesc","prepend","render","addClass","setTabbable","parentNode","_initDetailTableAndForm","trigger","page","detailTable","_initDetailTable","detailForm","_initDetailForm","_appendNavigateButtonsForDetailTable","_appendNavigateButtonsForDetailForm","one","_triggerPageChanged","applyInfo","$node","ensure","staticMenus","_hasMenu","upButton","altKeyStrokeContext","outline","push","downButton","menuClass","i","length","_getMenu","event","isOrHas","target","navigateToTop","deselectAll","handleInitialExpanded","setScrollTop","visitNodes","setNodeExpanded","initialExpanded","renderExpansion","destroy","nodes","debounceSend","isNodeSelected","selectedNodes","setDetailFormVisibleByUi","activePage","activate","ensureLoadChildren","done","_onLoadChildrenDone","_setProperty","_createOutlineOverview","_setNavigateButtonsVisibleForNode","_removeNavigateButtonsForDetailForm","_removeNavigateButtonsForDetailTable","_createNavigateButtons","rootGroupBox","setStaticMenus","filter","menu","selectedRow","nodeType","NodeType","TABLE","visible","detailFormVisibleByUi","focusManager","validateFocus","_renderInBackground","detachDialogs","detach","attachDialogs","attach","invalidateLayoutTree","$data","detailContent","validateRoot","_ensurePageLayout","install","removeClass","setDetailContent","updateDetailMenus","content","_removeDetailContent","off","setDetailMenus","setDetailMenuBarVisible","setNodeMenuBarVisible","_computeDetailContent","validateLayoutTree","prevSelectedNode","isDescendantOf","scrollTo","align","animate","selectedPage","detailFormVisible","table","selectedPages","menuItems","tableControls","nodeMenus","detailMenus","processMenus","concat","setMenuBarVisible","_attachDetailMenusListener","parentPage","forEach","tableControl","adaptTableControlProperties","horizontalAlignment","menuItem","setNodeMenus","menuContainer","_detailMenusChangeHandler","propertyName","_detailMenusDestroyHandler","menuContainers","addMenuContainer","container","indexOf","func","type","addListener","setMenuItems","_renderDetailMenuBar","_removeDetailMenuBar","insertBefore","_renderNodeMenuBar","_removeNodeMenuBar","$text","insertAfter","_glassPaneTargets","element","desktop","$elements","navigation","$body","bench","displayHint","DisplayHint","VIEW","pushAll","_getBenchGlassPaneTargetsForView","outlineContent","glassPaneTargets","view","$glassPanes","_getTabGlassPaneTargetsForView","header","visibleTabBoxes","tabBox","hasView","tabArea","tabs","tab","glassPaneOwner","$glassPane","bringOutlineToFront","dialog","setDisplayParent","oldMenus","updateKeyStrokes"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {\n  arrays,\n  defaultValues,\n  DetailTableTreeFilter,\n  Device,\n  FileChooserController,\n  Form,\n  GroupBoxMenuItemsOrder,\n  HtmlComponent,\n  inspector,\n  keyStrokeModifier,\n  MenuBar,\n  menus as menus_1,\n  MessageBoxController,\n  NavigateButton,\n  NavigateDownButton,\n  NavigateUpButton,\n  OutlineKeyStrokeContext,\n  OutlineLayout,\n  OutlineNavigateToTopKeyStroke,\n  Page,\n  PageLayout,\n  scout,\n  TableControlAdapterMenu,\n  TableRow,\n  TableRowDetail,\n  Tree,\n  TreeCollapseOrDrillUpKeyStroke,\n  TreeExpandOrDrillDownKeyStroke,\n  TreeNavigationDownKeyStroke,\n  TreeNavigationEndKeyStroke,\n  TreeNavigationUpKeyStroke\n} from '../../index';\nimport $ from 'jquery';\n\n/**\n * @extends {Tree}\n * @class\n * @constructor\n */\nexport default class Outline extends Tree {\n\n  constructor() {\n    super();\n\n    this.compact = false;\n    this.defaultDetailForm = null;\n    this.embedDetailContent = false;\n    this.inBackground = false;\n    this.mediator = null;\n    this.navigateButtonsVisible = true;\n    this.navigateUpInProgress = false; // see NavigateUpButton.js\n    this.outlineOverview = null;\n    this.outlineOverviewVisible = true;\n    this.toggleBreadcrumbStyleEnabled = true;\n    this.titleVisible = true;\n\n    this.menus = [];\n    this.titleMenuBar = null;\n    this.nodeMenuBar = null;\n    this.nodeMenuBarVisible = false;\n    this.detailMenuBar = null;\n    this.detailMenuBarVisible = false;\n\n    this.dialogs = [];\n    this.views = [];\n    this.messageBoxes = [];\n    this.fileChoosers = [];\n    this.formController = null;\n    this.messageBoxController = null;\n    this.fileChooserController = null;\n\n    this._detailContentDestroyHandler = this._onDetailContentDestroy.bind(this);\n    this._detailMenusNodesSelectedHandler = null;\n    this._additionalContainerClasses += ' outline';\n    this.nodePaddingLevelCheckable = 20; /* outline is not checkable. set to same value as not-checkable */\n    this.nodePaddingLevelNotCheckable = 20; /* outline uses different level-paddings that normal trees */\n    this._scrolldirections = 'y';\n    this._addWidgetProperties(['defaultDetailForm', 'views', 'selectedViewTabs', 'dialogs', 'messageBoxes', 'fileChoosers']);\n  }\n\n  _init(model) {\n    // add filter before first traversal of tree -> tree is only traversed once.\n    this.addFilter(new DetailTableTreeFilter(), true);\n    super._init(model);\n\n    this.mediator = this._createMediator();\n    this.formController = scout.create('FormController', {\n      displayParent: this,\n      session: this.session\n    });\n    this.messageBoxController = new MessageBoxController(this, this.session);\n    this.fileChooserController = new FileChooserController(this, this.session);\n    this.resolveTextKeys(['title']);\n\n    // menu bars\n    this.titleMenuBar = scout.create('MenuBar', {\n      parent: this,\n      menuOrder: new GroupBoxMenuItemsOrder()\n    });\n    this.nodeMenuBar = scout.create('MenuBar', {\n      parent: this,\n      position: MenuBar.Position.BOTTOM,\n      menuOrder: new GroupBoxMenuItemsOrder()\n    });\n    this.detailMenuBar = scout.create('MenuBar', {\n      parent: this,\n      position: MenuBar.Position.BOTTOM,\n      menuOrder: new GroupBoxMenuItemsOrder()\n    });\n\n    this._setDefaultDetailForm(this.defaultDetailForm);\n    this._setOutlineOverviewVisible(this.outlineOverviewVisible);\n    this._setOutlineOverview(this.outlineOverview);\n    this._updateOutlineOverview();\n\n    this._setViews(this.views);\n    this._setMenus(this.menus);\n    this.updateDetailContent();\n  }\n\n  /**\n   * This function returns the outline mediator instance. When we're in an online Scout application we must\n   * return a null instance here, because mediation is done server-side.\n   */\n  _createMediator() {\n    return scout.create('OutlineMediator');\n  }\n\n  /**\n   * @override Tree.js\n   */\n  _createTreeNode(nodeModel) {\n    var model = $.extend({\n      objectType: 'Page'\n    }, nodeModel);\n    return this._createChild(model);\n  }\n\n  _applyNodeDefaultValues(node) {\n    defaultValues.applyTo(node, 'Page');\n  }\n\n  _createKeyStrokeContext() {\n    return new OutlineKeyStrokeContext(this);\n  }\n\n  _filterMenus(menus, destination, onlyVisible, enableDisableKeyStroke) {\n    // show no contextmenues\n    return [];\n  }\n\n  /**\n   * @override Tree.js\n   */\n  _initTreeKeyStrokeContext() {\n    var modifierBitMask = keyStrokeModifier.CTRL | keyStrokeModifier.SHIFT; // NOSONAR\n\n    this.keyStrokeContext.registerKeyStroke([\n      new TreeNavigationUpKeyStroke(this, modifierBitMask),\n      new TreeNavigationDownKeyStroke(this, modifierBitMask),\n      new OutlineNavigateToTopKeyStroke(this, modifierBitMask),\n      new TreeNavigationEndKeyStroke(this, modifierBitMask),\n      new TreeCollapseOrDrillUpKeyStroke(this, modifierBitMask),\n      new TreeExpandOrDrillDownKeyStroke(this, modifierBitMask)\n    ]);\n\n    this.keyStrokeContext.$bindTarget = function() {\n      return this.session.$entryPoint;\n    }.bind(this);\n  }\n\n  /**\n   * @override\n   */\n  _render() {\n    super._render();\n\n    // Override layout\n    this.htmlComp.setLayout(new OutlineLayout(this));\n    this._renderCompact();\n    this._renderEmbedDetailContent();\n    this._renderDetailContent();\n    this._renderDetailMenuBarVisible();\n    this._renderNodeMenuBarVisible();\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderTitle();\n    this._updateIcon();\n    this._renderTitleMenuBar();\n  }\n\n  /**\n   * @override Tree.js\n   */\n  _computeNodePaddingLeft(node) {\n    this._computeNodePaddings();\n\n    if (this.compact) {\n      if (node.row && node.getOutline().selectedNode() !== node) {\n        return node.row._hierarchyLevel * this.nodePaddingLevel;\n      }\n      return 0;\n    }\n    return super._computeNodePaddingLeft(node);\n  }\n\n  /**\n   * @override Tree.js\n   */\n  _remove() {\n    super._remove();\n    this._removeTitle();\n    this._removeIcon();\n  }\n\n  _renderTitle() {\n    if (this.titleVisible) {\n      if (!this.$title) {\n        this.$title = this.$container.prependDiv('outline-title')\n          .on('mousedown', this._onTitleMouseDown.bind(this))\n          .toggleClass('touch', Device.get().supportsOnlyTouch());\n        this.$titleText = this.$title.prependDiv('outline-title-text');\n      }\n      this.$titleText.text(this.title);\n    }\n  }\n\n  _removeTitle() {\n    if (this.titleVisible) {\n      this.$title.remove();\n      this.$title = null;\n    }\n  }\n\n  setIconVisible(iconVisible) {\n    this.setProperty('iconVisible', iconVisible);\n    if (this.rendered) {\n      this._updateIcon();\n    }\n  }\n\n  setIconId(iconId) {\n    this.setProperty('iconId', iconId);\n    if (this.rendered) {\n      this._updateIcon();\n    }\n  }\n\n  _updateIcon() {\n    if (this.titleVisible && this.iconVisible && this.iconId) {\n      if (this.icon) {\n        this.icon.setIconDesc(this.iconId);\n        return;\n      }\n      this.icon = scout.create('Icon', {\n        parent: this,\n        iconDesc: this.iconId,\n        prepend: true\n      });\n      this.icon.render(this.$title);\n    } else {\n      if (!this.icon) {\n        return;\n      }\n      this.icon.remove();\n      this.icon = null;\n    }\n  }\n\n  _removeIcon() {\n    if (this.icon) {\n      this.icon.remove();\n      this.icon = null;\n    }\n  }\n\n  _renderTitleMenuBar() {\n    if (this.titleVisible) {\n      this.titleMenuBar.render(this.$title);\n      this.titleMenuBar.$container.addClass('prevent-initial-focus');\n    }\n  }\n\n  /**\n   * @override\n   */\n  _renderEnabled() {\n    super._renderEnabled();\n    this.$container.setTabbable(false);\n  }\n\n  /**\n   * @override\n   */\n  _initTreeNodeInternal(node, parentNode) {\n    super._initTreeNodeInternal(node, parentNode);\n    this._initDetailTableAndForm(node);\n    this.trigger('pageInit', {\n      page: node\n    });\n  }\n\n  _initDetailTableAndForm(node) {\n    if (node.detailTable) {\n      this._initDetailTable(node);\n    }\n    if (node.detailForm) {\n      this._initDetailForm(node);\n    }\n  }\n\n  _initDetailTable(node) {\n    if (this.navigateButtonsVisible && node.navigateButtonsVisible) {\n      this._appendNavigateButtonsForDetailTable(node);\n    }\n  }\n\n  _initDetailForm(node) {\n    if (this.navigateButtonsVisible && node.navigateButtonsVisible) {\n      this._appendNavigateButtonsForDetailForm(node);\n    }\n\n    // Mark form as detail form\n    node.detailForm.detailForm = true;\n    node.detailForm.one('destroy', function() {\n      // Unlink detail form if it was closed. May happen in the following case:\n      // The form gets closed on execPageDeactivated. No pageChanged event will\n      // be fired because the deactivated page is not selected anymore.\n      node.detailForm = null;\n      // Also make sure other objects hold no reference to a destroyed form (e.g. bench)\n      this._triggerPageChanged(node);\n    }.bind(this));\n  }\n\n  /**\n   * @override\n   */\n  _decorateNode(node) {\n    super._decorateNode(node);\n    if (this.session.inspector) {\n      inspector.applyInfo(node, node.$node);\n    }\n  }\n\n  // Info: we pass the keyStrokeContext of the parent (table or form) to\n  // the created buttons, we cannot use keyStrokeContext of the outline\n  // because that context is disabled when the outline is collapsed. We\n  // cannot set the property 'keyStrokeContext' because this would interfere\n  // with the default keyStrokeContext which is already created when the CTOR\n  // of Widget runs.\n  _createNavigateButtons(node, parent) {\n    var menus = arrays.ensure(parent.staticMenus);\n    if (!this._hasMenu(menus, NavigateUpButton)) {\n      var upButton = scout.create('NavigateUpButton', {\n        parent: parent,\n        altKeyStrokeContext: parent.keyStrokeContext,\n        outline: this,\n        node: node\n      });\n      menus.push(upButton);\n    }\n    if (!this._hasMenu(menus, NavigateDownButton)) {\n      var downButton = scout.create('NavigateDownButton', {\n        parent: parent,\n        altKeyStrokeContext: parent.keyStrokeContext,\n        outline: this,\n        node: node\n      });\n      menus.push(downButton);\n    }\n    return menus;\n  }\n\n  _getMenu(menus, menuClass) {\n    for (var i = 0; i < menus.length; i++) {\n      if (menus[i] instanceof menuClass) {\n        return menus[i];\n      }\n    }\n    return null;\n  }\n\n  _hasMenu(menus, menuClass) {\n    return this._getMenu(menus, menuClass) !== null;\n  }\n\n  _onTitleMouseDown(event) {\n    if (this.titleMenuBar.rendered && this.titleMenuBar.$container.isOrHas(event.target)) {\n      // Ignore clicks on title menubar\n      return;\n    }\n    this.navigateToTop();\n  }\n\n  navigateToTop() {\n    this.deselectAll();\n    this.handleInitialExpanded();\n    this.setScrollTop(0);\n  }\n\n  handleInitialExpanded() {\n    this.visitNodes(function(node) {\n      this.setNodeExpanded(node, node.initialExpanded, {\n        renderExpansion: true\n      });\n    }.bind(this));\n  }\n\n  _onNodeDeleted(node) {\n    // Destroy table, which is attached at the root adapter. Form gets destroyed by form close event\n    if (node.detailTable) {\n      node.detailTable.destroy();\n      node.detailTable = null;\n    }\n  }\n\n  /**\n   * @override\n   */\n  selectNodes(nodes, debounceSend) {\n    nodes = arrays.ensure(nodes);\n    if (nodes.length > 0 && this.isNodeSelected(nodes[0])) {\n      // Already selected, do nothing\n      return;\n    }\n    if (nodes.length === 0 && this.selectedNodes.length === 0) {\n      // Already unselected, do nothing\n      return;\n    }\n    if (this.navigateUpInProgress) {\n      this.navigateUpInProgress = false;\n    } else {\n      if (nodes.length === 1) {\n        // When a node is selected, the detail form should never be hidden\n        this.setDetailFormVisibleByUi(nodes[0], true);\n      }\n    }\n    super.selectNodes(nodes, debounceSend);\n  }\n\n  /**\n   * @override\n   */\n  _setSelectedNodes(nodes, debounceSend) {\n    super._setSelectedNodes(nodes, debounceSend);\n    // Needs to be done here so that tree.selectNodes() can restore scroll position correctly after the content has been updated\n    this.updateDetailContent();\n  }\n\n  /**\n   * @override\n   */\n  _nodesSelectedInternal() {\n    var activePage = this.activePage();\n    // This block here is similar to what's done in Java's DefaultPageChangeStrategy\n    if (activePage) {\n      activePage.activate();\n      activePage.ensureLoadChildren().done(\n        this._onLoadChildrenDone.bind(this, activePage));\n    }\n  }\n\n  /**\n   * @override\n   */\n  _renderSelection() {\n    super._renderSelection();\n    this.$container.toggleClass('node-selected', this.selectedNodes.length > 0);\n  }\n\n  setDefaultDetailForm(defaultDetailForm) {\n    this.setProperty('defaultDetailForm', defaultDetailForm);\n    this._updateOutlineOverview();\n  }\n\n  _setDefaultDetailForm(defaultDetailForm) {\n    if (this.defaultDetailForm) {\n      this.defaultDetailForm.detailForm = false;\n    }\n    this._setProperty('defaultDetailForm', defaultDetailForm);\n    if (this.defaultDetailForm) {\n      this.defaultDetailForm.detailForm = true;\n    }\n  }\n\n  setOutlineOverviewVisible(outlineOverviewVisible) {\n    this.setProperty('outlineOverviewVisible', outlineOverviewVisible);\n    this._updateOutlineOverview();\n  }\n\n  _setOutlineOverviewVisible(outlineOverviewVisible) {\n    this._setProperty('outlineOverviewVisible', outlineOverviewVisible);\n  }\n\n  setOutlineOverview(outlineOverview) {\n    this.setProperty('outlineOverview', outlineOverview);\n    this._updateOutlineOverview();\n  }\n\n  _setOutlineOverview(outlineOverview) {\n    // Ensure outlineOverview is of type OutlineOverview.\n    // Widget property cannot be used because nodes are not of type Page yet while _prepareWidgetProperty is running during initialization\n    if (outlineOverview) {\n      outlineOverview = this._createChild(outlineOverview);\n    }\n    this._setProperty('outlineOverview', outlineOverview);\n  }\n\n  _updateOutlineOverview() {\n    if (this.defaultDetailForm) {\n      if (this.outlineOverview) {\n        this.outlineOverview.destroy();\n        this._setOutlineOverview(null);\n      }\n    } else {\n      if (this.outlineOverviewVisible) {\n        if (!this.outlineOverview) {\n          // Create outlineOverview if no defaultDetailForm is available\n          this._setOutlineOverview(this._createOutlineOverview());\n        }\n      } else {\n        if (this.outlineOverview) {\n          this.outlineOverview.destroy();\n          this._setOutlineOverview(null);\n        }\n      }\n    }\n  }\n\n  _createOutlineOverview() {\n    return scout.create('TileOutlineOverview', {\n      parent: this,\n      outline: this\n    });\n  }\n\n  setNavigateButtonsVisible(navigateButtonsVisible) {\n    this.setProperty('navigateButtonsVisible', navigateButtonsVisible);\n  }\n\n  _setNavigateButtonsVisible(navigateButtonsVisible) {\n    this._setProperty('navigateButtonsVisible', navigateButtonsVisible);\n    this.visitNodes(this._setNavigateButtonsVisibleForNode.bind(this));\n  }\n\n  _setNavigateButtonsVisibleForNode(node, parentNode) {\n    if (this.navigateButtonsVisible) {\n      if (node.detailForm) {\n        this._appendNavigateButtonsForDetailForm(node);\n      }\n      if (node.detailTable) {\n        this._appendNavigateButtonsForDetailTable(node);\n      }\n    } else {\n      if (node.detailForm) {\n        this._removeNavigateButtonsForDetailForm(node);\n      }\n      if (node.detailTable) {\n        this._removeNavigateButtonsForDetailTable(node);\n      }\n    }\n  }\n\n  _appendNavigateButtonsForDetailForm(node) {\n    var menus = this._createNavigateButtons(node, node.detailForm.rootGroupBox);\n    node.detailForm.rootGroupBox.setStaticMenus(menus);\n  }\n\n  _appendNavigateButtonsForDetailTable(node) {\n    var menus = this._createNavigateButtons(node, node.detailTable);\n    node.detailTable.setStaticMenus(menus);\n  }\n\n  _removeNavigateButtonsForDetailForm(node) {\n    var staticMenus = node.detailForm.rootGroupBox.staticMenus.filter(function(menu) {\n      return !(menu instanceof NavigateButton);\n    });\n    node.detailForm.rootGroupBox.setStaticMenus(staticMenus);\n  }\n\n  _removeNavigateButtonsForDetailTable(node) {\n    var staticMenus = node.detailTable.staticMenus.filter(function(menu) {\n      return !(menu instanceof NavigateButton);\n    });\n    node.detailTable.setStaticMenus(staticMenus);\n  }\n\n  /**\n   * @returns {TableRow} the selected row or null when no row is selected. When multiple rows are selected\n   *    the first selected row is returned.\n   */\n  selectedRow() {\n    var node = this.selectedNode();\n    if (!node || !node.detailTable) {\n      return null;\n    }\n    return node.detailTable.selectedRow();\n  }\n\n  /**\n   * Called by updateItemPath.\n   *\n   * @override\n   */\n  _isGroupingEnd(node) {\n    return node.nodeType === Page.NodeType.TABLE;\n  }\n\n  /**\n   * Disabled for outlines because outline may be resized.\n   */\n  _isTruncatedNodeTooltipEnabled() {\n    return false;\n  }\n\n  setDetailFormVisibleByUi(node, visible) {\n    node.detailFormVisibleByUi = visible;\n    this._triggerPageChanged(node);\n  }\n\n  validateFocus() {\n    this.session.focusManager.validateFocus();\n  }\n\n  sendToBack() {\n    this.inBackground = true;\n    this._renderInBackground();\n\n    // Detach child dialogs, message boxes and file choosers, not views.\n    this.formController.detachDialogs();\n    this.messageBoxController.detach();\n    this.fileChooserController.detach();\n  }\n\n  bringToFront() {\n    this.inBackground = false;\n    this._renderInBackground();\n\n    // Attach child dialogs, message boxes and file choosers.\n    this.formController.attachDialogs();\n    this.messageBoxController.attach();\n    this.fileChooserController.attach();\n  }\n\n  _renderInBackground() {\n    this.$container.toggleClass('in-background', this.inBackground);\n  }\n\n  _renderCompact() {\n    this.$container.toggleClass('compact', this.compact);\n    this.invalidateLayoutTree();\n  }\n\n  _renderEmbedDetailContent() {\n    this.$data.toggleClass('has-detail-content', this.embedDetailContent);\n    this.invalidateLayoutTree();\n  }\n\n  _renderDetailContent() {\n    if (!this.detailContent || this.detailContent.rendered) {\n      return;\n    }\n    var page = this.selectedNode();\n    if (!page.rendered) {\n      return;\n    }\n\n    this.detailContent.render(page.$node);\n    if (this.detailContent.htmlComp) {\n      this.detailContent.htmlComp.validateRoot = false;\n    }\n    this._ensurePageLayout(page);\n    this.$data.addClass('detail-content-visible');\n  }\n\n  _ensurePageLayout(page) {\n    // selected page now has content (menubar and form) -> needs a layout\n    // always create new htmlComp, otherwise we would have to remove them when $node or outline gets remvoed\n    page.htmlComp = HtmlComponent.install(page.$node, this.session);\n    page.htmlComp.setLayout(new PageLayout(this, page));\n  }\n\n  _removeDetailContent() {\n    if (!this.detailContent) {\n      return;\n    }\n    this.detailContent.remove();\n    this.$data.removeClass('detail-content-visible');\n  }\n\n  _postRenderViewRange() {\n    super._postRenderViewRange();\n    this._renderDetailContent();\n    this._renderDetailMenuBarVisible();\n    this._renderNodeMenuBarVisible();\n  }\n\n  setCompact(compact) {\n    this.setProperty('compact', compact);\n  }\n\n  setEmbedDetailContent(embedDetailContent) {\n    this.setProperty('embedDetailContent', embedDetailContent);\n    this.updateDetailContent();\n  }\n\n  _onDetailContentDestroy(event) {\n    this.setDetailContent(null);\n    this.updateDetailMenus();\n  }\n\n  setDetailContent(content) {\n    if (this.detailContent === content) {\n      return;\n    }\n    if (this.rendered) {\n      this._removeDetailContent();\n    }\n    if (this.detailContent) {\n      this.detailContent.off('destroy', this._detailContentDestroyHandler);\n    }\n    if (this.detailContent instanceof TableRowDetail) {\n      this.detailContent.destroy();\n    }\n    this._setProperty('detailContent', content);\n    if (content) {\n      content.on('destroy', this._detailContentDestroyHandler);\n    }\n    if (this.rendered) {\n      this._renderDetailContent();\n    }\n    this.invalidateLayoutTree();\n  }\n\n  updateDetailContent() {\n    if (!this.embedDetailContent) {\n      this.setDetailContent(null);\n      this.setDetailMenus([]);\n      return;\n    }\n\n    this.setDetailMenuBarVisible(false);\n    this.setNodeMenuBarVisible(false);\n    this.setDetailContent(this._computeDetailContent());\n    this.updateDetailMenus();\n  }\n\n  /**\n   * @override\n   */\n  _updateScrollTopAfterSelection() {\n    super._updateScrollTopAfterSelection();\n    if (!this.embedDetailContent) {\n      return;\n    }\n    // Layout immediate to prevent 'laggy' detail form visualization,\n    // but not initially while desktop gets rendered because it will be done at the end anyway\n    // It is important that this is done after _renderSelection, because node could be invisible due to the missing .selected class which means it won't be layouted\n    this.validateLayoutTree();\n\n    // Scroll to the parent node to hide ancestor nodes and give as much room as possible for the content\n    if (this.selectedNodes[0] && this.selectedNodes[0].parentNode) {\n      if (this.prevSelectedNode && this.prevSelectedNode.isDescendantOf(this.selectedNodes[0])) {\n        // But don't do it on upwards navigation, in that case the tree will scroll to the optimal position by itself, see _updateScrollTopAfterSelection\n        return;\n      }\n      this.scrollTo(this.selectedNodes[0].parentNode, {\n        align: 'top',\n        animate: true\n      });\n    }\n  }\n\n  _computeDetailContent() {\n    var selectedPage = this.selectedNode();\n    if (!selectedPage) {\n      // Detail content is shown for the selected node only\n      return null;\n    }\n\n    // if there is a detail form, use this\n    if (selectedPage.detailForm && selectedPage.detailFormVisible && selectedPage.detailFormVisibleByUi) {\n      return selectedPage.detailForm;\n      // otherwise show the content of the table row\n      // but never if parent is a node page -> the table contains only one column with no essential information\n    } else if (selectedPage.row && selectedPage.parentNode.nodeType === Page.NodeType.TABLE) {\n      return scout.create('TableRowDetail', {\n        parent: this,\n        table: selectedPage.parentNode.detailTable,\n        page: selectedPage\n      });\n    }\n    return null;\n  }\n\n  /**\n   * Updates node and detail menubar.\n   * Node menubar: Contains the table controls and right aligned menus.\n   * Detail menubar: Contains the other menus.\n   *\n   * The menu items are gathered from various sources:\n   * If the selected page has a detailForm, the menus are taken from there. Otherwise the detail table and the parent detail table provide the menus.\n   * The detail table contributes the empty space menus and the parent detail the the single selection menus.\n   *\n   * The menus of the outline itself are not displayed. In fact the server won't deliver any.\n   * One reason is that no menus are displayed in regular mode, so when switching to compact mode no menus would be available.\n   * Another reason is that it would flicker because the menus are sent anew from the server every time a node gets selected because the menus are added to the outline and not to the node and are therefore not cached.\n   */\n  updateDetailMenus() {\n    if (!this.embedDetailContent) {\n      return;\n    }\n    var selectedPages = this.selectedNodes,\n      selectedPage = selectedPages[0],\n      menuItems = [],\n      tableControls = [],\n      nodeMenus = [],\n      detailTable,\n      detailMenus = [];\n\n    if (this.detailContent && this.detailContent instanceof Form) {\n      // get menus from detail form\n      var rootGroupBox = this.detailContent.rootGroupBox;\n      menuItems = rootGroupBox.processMenus.concat(rootGroupBox.menus);\n      rootGroupBox.setMenuBarVisible(false);\n      this._attachDetailMenusListener(rootGroupBox);\n    } else if (selectedPage) {\n      // get empty space menus and table controls from detail table\n      if (selectedPage.detailTable) {\n        detailTable = selectedPage.detailTable;\n        menuItems = menus_1.filter(detailTable.menus, ['Table.EmptySpace'], false, true);\n        tableControls = detailTable.tableControls;\n        detailTable.setMenuBarVisible(false);\n        this._attachDetailMenusListener(detailTable);\n      }\n      // get single selection menus from parent detail table\n      var parentPage = selectedPage.parentNode;\n      if (parentPage && parentPage.detailTable) {\n        detailTable = parentPage.detailTable;\n        menuItems = menuItems.concat(menus_1.filter(detailTable.menus, ['Table.SingleSelection'], false, true));\n        detailTable.setMenuBarVisible(false);\n        this._attachDetailMenusListener(detailTable);\n      }\n    }\n\n    // Add table controls to nodeMenus\n    tableControls.forEach(function(tableControl) {\n      var menu = scout.create('TableControlAdapterMenu',\n        TableControlAdapterMenu.adaptTableControlProperties(tableControl, {\n          parent: this,\n          tableControl: tableControl,\n          horizontalAlignment: 1\n        }));\n      nodeMenus.push(menu);\n    }, this);\n\n    // Add right aligned menus to node menus, other to detail menus\n    menuItems.forEach(function(menuItem) {\n      if (menuItem.horizontalAlignment === 1) {\n        nodeMenus.push(menuItem);\n      } else {\n        detailMenus.push(menuItem);\n      }\n    }, this);\n\n    this.setNodeMenus(nodeMenus);\n    this.setDetailMenus(detailMenus);\n  }\n\n  /**\n   * Attaches a listener to the given menu container (which is the detail table or the detail table of the parent node)\n   * in order to get dynamic menu changes and update the detailMenus on such a change event.\n   * The impl. is lazy because it is only used in mobile mode.\n   */\n  _attachDetailMenusListener(menuContainer) {\n    if (!this._detailMenusChangeHandler) {\n      this._detailMenusChangeHandler = function(event) {\n        if (event.propertyName === 'menus' || event.propertyName === 'tableControls') {\n          this.updateDetailMenus();\n        }\n      }.bind(this);\n    }\n    if (!this._detailMenusDestroyHandler) {\n      this._detailMenusDestroyHandler = function() {\n        menuContainer.off('propertyChange', this._detailMenusChangeHandler);\n      }.bind(this);\n    }\n\n    menuContainer.off('propertyChange', this._detailMenusChangeHandler);\n    menuContainer.on('propertyChange', this._detailMenusChangeHandler);\n    menuContainer.off('destroy', this._detailMenusDestroyHandler);\n    menuContainer.one('destroy', this._detailMenusDestroyHandler);\n\n    if (!this._detailMenusNodesSelectedHandler) {\n      // This nodes selection listener removes the property change listeners from the old menu containers (detail content) whenever a node gets selected\n      // updateDetailMenus() is called afterwards and attaches the property change listeners to the new detail content\n      // This guarantees that no events are fired for non selected nodes\n      this._detailMenusNodesSelectedHandler = {\n        outline: this,\n        menuContainers: [],\n        addMenuContainer: function(container) {\n          if (this.menuContainers.indexOf(container) > -1) {\n            return;\n          }\n          this.menuContainers.push(container);\n        },\n        func: function(event) {\n          if (event.type !== 'nodesSelected') {\n            return;\n          }\n          this.menuContainers.forEach(function(container) {\n            container.off('propertyChange', this.outline._detailMenusChangeHandler);\n            container.off('destroy', this.outline._detailMenusDestroyHandler);\n          }, this);\n          this.menuContainers = [];\n        }\n      };\n      this.addListener(this._detailMenusNodesSelectedHandler);\n    }\n    this._detailMenusNodesSelectedHandler.addMenuContainer(menuContainer);\n  }\n\n  setDetailMenus(detailMenus) {\n    // Make sure detailMenus are rendered again even if they are the same as before\n    // Reason: the menus could have been removed from the DOM in the meantime.\n    // This happens if table#setMenus() is called while table is not rendered, which is always the case in compact mode.\n    // In that case the parent is temporarily set to the table which will remove the menu.\n    this.detailMenuBar.setMenuItems([]);\n    this.detailMenuBar.setMenuItems(detailMenus);\n    this.setDetailMenuBarVisible(this.detailMenuBar.menuItems.length > 0);\n  }\n\n  _renderDetailMenuBarVisible() {\n    if (this.detailMenuBarVisible) {\n      this._renderDetailMenuBar();\n    } else {\n      this._removeDetailMenuBar();\n    }\n  }\n\n  _renderDetailMenuBar() {\n    if (this.detailMenuBar.rendered) {\n      return;\n    }\n    var node = this.selectedNode();\n    if (!node || !node.rendered) {\n      return;\n    }\n\n    this.detailMenuBar.render(node.$node);\n    this.detailMenuBar.$container.addClass('detail-menubar');\n    if (this.detailContent && this.detailContent.rendered) {\n      // move before content (e.g. form)\n      this.detailMenuBar.$container.insertBefore(this.detailContent.$container);\n    }\n    this._ensurePageLayout(node);\n    this.invalidateLayoutTree();\n  }\n\n  _removeDetailMenuBar() {\n    if (!this.detailMenuBar.rendered) {\n      return;\n    }\n    this.detailMenuBar.remove();\n    this.invalidateLayoutTree();\n  }\n\n  setDetailMenuBarVisible(visible) {\n    this.setProperty('detailMenuBarVisible', visible);\n  }\n\n  setNodeMenus(nodeMenus) {\n    // See setDetailMenus for the reason of the following code\n    this.nodeMenuBar.setMenuItems([]);\n    this.nodeMenuBar.setMenuItems(nodeMenus);\n    this.setNodeMenuBarVisible(this.nodeMenuBar.menuItems.length > 0);\n  }\n\n  _renderNodeMenuBarVisible() {\n    if (this.nodeMenuBarVisible) {\n      this._renderNodeMenuBar();\n    } else {\n      this._removeNodeMenuBar();\n    }\n  }\n\n  _renderNodeMenuBar() {\n    if (this.nodeMenuBar.rendered) {\n      return;\n    }\n    var node = this.selectedNode();\n    if (!node || !node.rendered) {\n      return;\n    }\n\n    var $text = node.$text;\n    this.nodeMenuBar.render(node.$node);\n    this.nodeMenuBar.$container.addClass('node-menubar');\n    this.nodeMenuBar.$container.insertAfter($text);\n    this.invalidateLayoutTree();\n  }\n\n  _removeNodeMenuBar() {\n    if (!this.nodeMenuBar.rendered) {\n      return;\n    }\n    this.nodeMenuBar.remove();\n    this.invalidateLayoutTree();\n  }\n\n  setNodeMenuBarVisible(visible) {\n    this.setProperty('nodeMenuBarVisible', visible);\n  }\n\n  glassPaneTargets() {\n    // MessageBoxes are often created with Outlines as displayParent. The default implementation of this function\n    // would not render any glass panes when the outline is collapsed, thus we need to override this behavior.\n    return this._glassPaneTargets();\n  }\n\n  _glassPaneTargets(element) {\n    var desktop = this.session.desktop;\n    var $elements = [];\n    if (desktop.navigation) {\n      $elements.push(desktop.navigation.$body);\n    }\n    if (desktop.bench && element instanceof Form && element.displayHint === Form.DisplayHint.VIEW) {\n      arrays.pushAll($elements, this._getBenchGlassPaneTargetsForView(element));\n    }\n    if (desktop.bench && desktop.bench.outlineContent) {\n      arrays.pushAll($elements, desktop.bench.outlineContent.glassPaneTargets(element));\n    }\n    return $elements;\n  }\n\n  _getBenchGlassPaneTargetsForView(view) {\n    var $glassPanes = [];\n    $glassPanes = $glassPanes.concat(this._getTabGlassPaneTargetsForView(view, this.session.desktop.header));\n    this.session.desktop.bench.visibleTabBoxes().forEach(function(tabBox) {\n      if (tabBox.hasView(view)) {\n        arrays.pushAll($glassPanes, this._getTabGlassPaneTargetsForView(view, tabBox));\n      } else if (tabBox.$container) {\n        $glassPanes.push(tabBox.$container);\n      }\n    }, this);\n    return $glassPanes;\n  }\n\n  _getTabGlassPaneTargetsForView(view, tabBox) {\n    var $glassPanes = [];\n    tabBox.tabArea.tabs.forEach(function(tab) {\n      if (tab.view !== view && tab.view.displayParent === this) {\n        $glassPanes.push(tab.$container);\n        // Workaround for javascript not being able to prevent hover event propagation:\n        // In case of tabs, the hover selector is defined on the element that is the direct parent\n        // of the glass pane. Under these circumstances, the hover style isn't be prevented by the glass pane.\n        tab.$container.addClass('no-hover');\n      }\n    }.bind(this));\n    return $glassPanes;\n  }\n\n  _onGlassPaneMouseDown(glassPaneOwner, $glassPane) {\n    var desktop = this.session.desktop;\n    if (desktop.navigation) {\n      if ($glassPane.parent()[0] === desktop.navigation.$body[0]) {\n        desktop.bringOutlineToFront();\n      }\n    }\n  }\n\n  /**\n   * === Method required for objects that act as 'displayParent' ===\n   *\n   * Returns true if this outline is active and not in background.\n   */\n  inFront() {\n    return this.session.desktop.outline === this && !this.inBackground;\n  }\n\n  /**\n   * Called if outline acts as display parent.<p>\n   * Returns true if outline is active, even if it is not rendered (e.g. when navigation is invisible)\n   */\n  acceptDialog(dialog) {\n    return this.session.desktop.outline === this;\n  }\n\n  /**\n   * Called if outline acts as display parent.<p>\n   * Returns true if outline is active, even if it is not rendered (e.g. when navigation is invisible)\n   */\n  acceptView(view) {\n    return this.session.desktop.outline === this;\n  }\n\n  // see Java: AbstractOutline#makeActivePageToContextPage\n  activateCurrentPage() {\n    var activePage = this.activePage();\n    if (activePage) {\n      activePage.activate();\n    }\n  }\n\n  activePage() {\n    return this.selectedNode();\n  }\n\n  _setViews(views) {\n    if (views) {\n      views.forEach(function(view) {\n        view.setDisplayParent(this);\n      }.bind(this));\n    }\n    this._setProperty('views', views);\n  }\n\n  /**\n   * @override Tree.js (don't call parent)\n   */\n  _setMenus(menus) {\n    var oldMenus = this.menus;\n    this.updateKeyStrokes(menus, oldMenus);\n    this._setProperty('menus', menus);\n    if (this.titleMenuBar) { // _setMenus is called by parent class Tree.js, at this time titleMenuBar is not yet initialized\n      var menuItems = menus_1.filter(this.menus, ['Tree.Header']);\n      this.titleMenuBar.setMenuItems(menuItems);\n    }\n  }\n\n  _triggerPageChanged(page) {\n    this.trigger('pageChanged', {\n      page: page\n    });\n  }\n\n  _onLoadChildrenDone(activePage) {\n    if (activePage) {\n      this._initDetailTableAndForm(activePage);\n    }\n  }\n\n  pageChanged(page) {\n    if (page) {\n      this._initDetailTableAndForm(page);\n    }\n\n    var selectedPage = this.selectedNode();\n    if (!page && !selectedPage || page === selectedPage) {\n      this.updateDetailContent();\n    }\n\n    this._triggerPageChanged(page);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}