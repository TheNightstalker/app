{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { ValueField } from '../../../index';\n\nvar ModeSelectorField = /*#__PURE__*/function (_ValueField) {\n  _inherits(ModeSelectorField, _ValueField);\n\n  var _super = _createSuper(ModeSelectorField);\n\n  function ModeSelectorField() {\n    var _this;\n\n    _classCallCheck(this, ModeSelectorField);\n\n    _this = _super.call(this); // modes will be moved to the ModeSelector after the adapters are created (only required in scout classic)\n    // see ModeSelectorFieldAdapter.js\n\n    _this._addWidgetProperties(['modeSelector', 'modes']);\n\n    _this._modeSelectorPropertyChangeHandler = _this._onModeSelectorPropertyChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ModeSelectorField, [{\n    key: \"_render\",\n    value: function _render() {\n      this.addContainer(this.$parent, 'mode-selector-field');\n      this.addLabel();\n      this.addStatus();\n\n      if (this.modeSelector) {\n        this._renderModeSelector();\n\n        this.modeSelector.on('propertyChange', this._modeSelectorPropertyChangeHandler);\n      }\n    } // Will also be called by model adapter on property change event\n\n  }, {\n    key: \"_renderModeSelector\",\n    value: function _renderModeSelector() {\n      this.modeSelector.render();\n      this.addField(this.modeSelector.$container);\n    }\n  }, {\n    key: \"_removeModeSelector\",\n    value: function _removeModeSelector() {\n      this.modeSelector.remove();\n\n      this._removeField();\n    }\n  }, {\n    key: \"_onModeSelectorPropertyChange\",\n    value: function _onModeSelectorPropertyChange(event) {\n      if (event.propertyName === 'selectedMode') {\n        if (event.newValue) {\n          this.setValue(event.newValue.ref);\n        } else if (this.modeSelector.selectedMode && this.modeSelector.selectedMode.id) {\n          this.setValue(this.modeSelector.selectedMode.id);\n        } else {\n          this.setValue(null);\n        }\n      }\n    }\n  }]);\n\n  return ModeSelectorField;\n}(ValueField);\n\nexport { ModeSelectorField as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/modeselectorfield/ModeSelectorField.js"],"names":["ValueField","ModeSelectorField","_addWidgetProperties","_modeSelectorPropertyChangeHandler","_onModeSelectorPropertyChange","bind","addContainer","$parent","addLabel","addStatus","modeSelector","_renderModeSelector","on","render","addField","$container","remove","_removeField","event","propertyName","newValue","setValue","ref","selectedMode","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,UAAR,QAAyB,gBAAzB;;IAEqBC,iB;;;;;AAEnB,+BAAc;AAAA;;AAAA;;AACZ,8BADY,CAEZ;AACA;;AACA,UAAKC,oBAAL,CAA0B,CAAC,cAAD,EAAiB,OAAjB,CAA1B;;AACA,UAAKC,kCAAL,GAA0C,MAAKC,6BAAL,CAAmCC,IAAnC,+BAA1C;AALY;AAMb;;;;8BAES;AACR,WAAKC,YAAL,CAAkB,KAAKC,OAAvB,EAAgC,qBAAhC;AACA,WAAKC,QAAL;AACA,WAAKC,SAAL;;AACA,UAAI,KAAKC,YAAT,EAAuB;AACrB,aAAKC,mBAAL;;AACA,aAAKD,YAAL,CAAkBE,EAAlB,CAAqB,gBAArB,EAAuC,KAAKT,kCAA5C;AACD;AACF,K,CAED;;;;0CACsB;AACpB,WAAKO,YAAL,CAAkBG,MAAlB;AACA,WAAKC,QAAL,CAAc,KAAKJ,YAAL,CAAkBK,UAAhC;AACD;;;0CAEqB;AACpB,WAAKL,YAAL,CAAkBM,MAAlB;;AACA,WAAKC,YAAL;AACD;;;kDAE6BC,K,EAAO;AACnC,UAAIA,KAAK,CAACC,YAAN,KAAuB,cAA3B,EAA2C;AACzC,YAAID,KAAK,CAACE,QAAV,EAAoB;AAClB,eAAKC,QAAL,CAAcH,KAAK,CAACE,QAAN,CAAeE,GAA7B;AACD,SAFD,MAEO,IAAI,KAAKZ,YAAL,CAAkBa,YAAlB,IAAkC,KAAKb,YAAL,CAAkBa,YAAlB,CAA+BC,EAArE,EAAyE;AAC9E,eAAKH,QAAL,CAAc,KAAKX,YAAL,CAAkBa,YAAlB,CAA+BC,EAA7C;AACD,SAFM,MAEA;AACL,eAAKH,QAAL,CAAc,IAAd;AACD;AACF;AACF;;;;EAzC4CrB,U;;SAA1BC,iB","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {ValueField} from '../../../index';\n\nexport default class ModeSelectorField extends ValueField {\n\n  constructor() {\n    super();\n    // modes will be moved to the ModeSelector after the adapters are created (only required in scout classic)\n    // see ModeSelectorFieldAdapter.js\n    this._addWidgetProperties(['modeSelector', 'modes']);\n    this._modeSelectorPropertyChangeHandler = this._onModeSelectorPropertyChange.bind(this);\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'mode-selector-field');\n    this.addLabel();\n    this.addStatus();\n    if (this.modeSelector) {\n      this._renderModeSelector();\n      this.modeSelector.on('propertyChange', this._modeSelectorPropertyChangeHandler);\n    }\n  }\n\n  // Will also be called by model adapter on property change event\n  _renderModeSelector() {\n    this.modeSelector.render();\n    this.addField(this.modeSelector.$container);\n  }\n\n  _removeModeSelector() {\n    this.modeSelector.remove();\n    this._removeField();\n  }\n\n  _onModeSelectorPropertyChange(event) {\n    if (event.propertyName === 'selectedMode') {\n      if (event.newValue) {\n        this.setValue(event.newValue.ref);\n      } else if (this.modeSelector.selectedMode && this.modeSelector.selectedMode.id) {\n        this.setValue(this.modeSelector.selectedMode.id);\n      } else {\n        this.setValue(null);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}