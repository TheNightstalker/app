{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension, HtmlComponent } from '../../../index';\n\nvar TagFieldContainerLayout = /*#__PURE__*/function (_AbstractLayout) {\n  _inherits(TagFieldContainerLayout, _AbstractLayout);\n\n  var _super = _createSuper(TagFieldContainerLayout);\n\n  function TagFieldContainerLayout(tagField) {\n    var _this;\n\n    _classCallCheck(this, TagFieldContainerLayout);\n\n    _this = _super.call(this);\n    _this.tagField = tagField;\n    return _this;\n  }\n  /**\n   * When there is not a lot of space in a single line field, the input field should at least\n   * have 33% of the available width, which means 66% is used to display tags.\n   */\n\n\n  _createClass(TagFieldContainerLayout, [{\n    key: \"layout\",\n    value: function layout($container) {\n      var htmlContainer = HtmlComponent.get($container);\n      var hasTags = this.tagField.value && this.tagField.value.length > 0;\n      var $input = this.tagField.$field;\n      var htmlTagBar = this.tagField.tagBar.htmlComp;\n      this.tagField.tagBar.setVisible(hasTags);\n\n      if (hasTags) {\n        $input.removeClass('fullwidth');\n        var availableSize = htmlContainer.availableSize().subtract(htmlContainer.insets());\n        var maxTagBarWidth = availableSize.width; // when input field is not visible, tags may use the whole width, otherwise only a part of it\n\n        if ($input.isVisible()) {\n          maxTagBarWidth = availableSize.width * (1 - TagFieldContainerLayout.MIN_INPUT_TAG_RATIO);\n        }\n\n        var prefTagBarSize = htmlTagBar.prefSize();\n        var tagBarWidth = Math.min(maxTagBarWidth, prefTagBarSize.width);\n        htmlTagBar.setSize(new Dimension(tagBarWidth, availableSize.height));\n        var inputWidth = availableSize.width - tagBarWidth;\n        $input.cssWidth(inputWidth);\n      } else {\n        // remove style to delete previously set layout attributes\n        $input.addClass('fullwidth').removeAttr('style');\n      }\n    }\n  }]);\n\n  return TagFieldContainerLayout;\n}(AbstractLayout);\n\n_defineProperty(TagFieldContainerLayout, \"MIN_INPUT_TAG_RATIO\", 0.33);\n\nexport { TagFieldContainerLayout as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/tagfield/TagFieldContainerLayout.js"],"names":["AbstractLayout","Dimension","HtmlComponent","TagFieldContainerLayout","tagField","$container","htmlContainer","get","hasTags","value","length","$input","$field","htmlTagBar","tagBar","htmlComp","setVisible","removeClass","availableSize","subtract","insets","maxTagBarWidth","width","isVisible","MIN_INPUT_TAG_RATIO","prefTagBarSize","prefSize","tagBarWidth","Math","min","setSize","height","inputWidth","cssWidth","addClass","removeAttr"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,cAAR,EAAwBC,SAAxB,EAAmCC,aAAnC,QAAuD,gBAAvD;;IAEqBC,uB;;;;;AAEnB,mCAAYC,QAAZ,EAAsB;AAAA;;AAAA;;AACpB;AACA,UAAKA,QAAL,GAAgBA,QAAhB;AAFoB;AAGrB;AAED;AACF;AACA;AACA;;;;;2BAGSC,U,EAAY;AACjB,UAAIC,aAAa,GAAGJ,aAAa,CAACK,GAAd,CAAkBF,UAAlB,CAApB;AACA,UAAIG,OAAO,GAAG,KAAKJ,QAAL,CAAcK,KAAd,IAAuB,KAAKL,QAAL,CAAcK,KAAd,CAAoBC,MAApB,GAA6B,CAAlE;AACA,UAAIC,MAAM,GAAG,KAAKP,QAAL,CAAcQ,MAA3B;AACA,UAAIC,UAAU,GAAG,KAAKT,QAAL,CAAcU,MAAd,CAAqBC,QAAtC;AACA,WAAKX,QAAL,CAAcU,MAAd,CAAqBE,UAArB,CAAgCR,OAAhC;;AAEA,UAAIA,OAAJ,EAAa;AACXG,QAAAA,MAAM,CAACM,WAAP,CAAmB,WAAnB;AACA,YAAIC,aAAa,GAAGZ,aAAa,CAACY,aAAd,GACjBC,QADiB,CACRb,aAAa,CAACc,MAAd,EADQ,CAApB;AAEA,YAAIC,cAAc,GAAGH,aAAa,CAACI,KAAnC,CAJW,CAMX;;AACA,YAAIX,MAAM,CAACY,SAAP,EAAJ,EAAwB;AACtBF,UAAAA,cAAc,GAAGH,aAAa,CAACI,KAAd,IAAuB,IAAInB,uBAAuB,CAACqB,mBAAnD,CAAjB;AACD;;AAED,YAAIC,cAAc,GAAGZ,UAAU,CAACa,QAAX,EAArB;AACA,YAAIC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASR,cAAT,EAAyBI,cAAc,CAACH,KAAxC,CAAlB;AACAT,QAAAA,UAAU,CAACiB,OAAX,CAAmB,IAAI7B,SAAJ,CAAc0B,WAAd,EAA2BT,aAAa,CAACa,MAAzC,CAAnB;AAEA,YAAIC,UAAU,GAAGd,aAAa,CAACI,KAAd,GAAsBK,WAAvC;AACAhB,QAAAA,MAAM,CAACsB,QAAP,CAAgBD,UAAhB;AACD,OAjBD,MAiBO;AACL;AACArB,QAAAA,MAAM,CACHuB,QADH,CACY,WADZ,EAEGC,UAFH,CAEc,OAFd;AAGD;AACF;;;;EA3CkDnC,c;;gBAAhCG,uB,yBAWU,I;;SAXVA,uB","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension, HtmlComponent} from '../../../index';\n\nexport default class TagFieldContainerLayout extends AbstractLayout {\n\n  constructor(tagField) {\n    super();\n    this.tagField = tagField;\n  }\n\n  /**\n   * When there is not a lot of space in a single line field, the input field should at least\n   * have 33% of the available width, which means 66% is used to display tags.\n   */\n  static MIN_INPUT_TAG_RATIO = 0.33;\n\n  layout($container) {\n    var htmlContainer = HtmlComponent.get($container);\n    var hasTags = this.tagField.value && this.tagField.value.length > 0;\n    var $input = this.tagField.$field;\n    var htmlTagBar = this.tagField.tagBar.htmlComp;\n    this.tagField.tagBar.setVisible(hasTags);\n\n    if (hasTags) {\n      $input.removeClass('fullwidth');\n      var availableSize = htmlContainer.availableSize()\n        .subtract(htmlContainer.insets());\n      var maxTagBarWidth = availableSize.width;\n\n      // when input field is not visible, tags may use the whole width, otherwise only a part of it\n      if ($input.isVisible()) {\n        maxTagBarWidth = availableSize.width * (1 - TagFieldContainerLayout.MIN_INPUT_TAG_RATIO);\n      }\n\n      var prefTagBarSize = htmlTagBar.prefSize();\n      var tagBarWidth = Math.min(maxTagBarWidth, prefTagBarSize.width);\n      htmlTagBar.setSize(new Dimension(tagBarWidth, availableSize.height));\n\n      var inputWidth = availableSize.width - tagBarWidth;\n      $input.cssWidth(inputWidth);\n    } else {\n      // remove style to delete previously set layout attributes\n      $input\n        .addClass('fullwidth')\n        .removeAttr('style');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}