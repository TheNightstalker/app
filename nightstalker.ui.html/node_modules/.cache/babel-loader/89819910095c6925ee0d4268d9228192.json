{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { dates } from '../index';\n\nvar DateRange = /*#__PURE__*/function () {\n  function DateRange(from, to) {\n    _classCallCheck(this, DateRange);\n\n    this.from = from;\n    this.to = to;\n  }\n\n  _createClass(DateRange, [{\n    key: \"equals\",\n    value: function equals(other) {\n      if (!other) {\n        return false;\n      }\n\n      return dates.equals(this.from, other.from) && dates.equals(this.to, other.to);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'scout.DateRange[' + 'from=' + (this.from === null ? 'null' : this.from.toUTCString()) + ' to=' + (this.to === null ? 'null' : this.to.toUTCString()) + ']';\n    }\n  }], [{\n    key: \"ensure\",\n    value: function ensure(dateRange) {\n      if (!dateRange) {\n        return dateRange;\n      }\n\n      if (dateRange instanceof DateRange) {\n        return dateRange;\n      }\n\n      return new DateRange(dates.ensure(dateRange.from), dates.ensure(dateRange.to));\n    }\n  }]);\n\n  return DateRange;\n}();\n\nexport { DateRange as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/calendar/DateRange.js"],"names":["dates","DateRange","from","to","other","equals","toUTCString","dateRange","ensure"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,KAAR,QAAoB,UAApB;;IAEqBC,S;AAEnB,qBAAYC,IAAZ,EAAkBC,EAAlB,EAAsB;AAAA;;AACpB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,EAAL,GAAUA,EAAV;AACD;;;;2BAEMC,K,EAAO;AACZ,UAAI,CAACA,KAAL,EAAY;AACV,eAAO,KAAP;AACD;;AACD,aAAOJ,KAAK,CAACK,MAAN,CAAa,KAAKH,IAAlB,EAAwBE,KAAK,CAACF,IAA9B,KACLF,KAAK,CAACK,MAAN,CAAa,KAAKF,EAAlB,EAAsBC,KAAK,CAACD,EAA5B,CADF;AAED;;;+BAEU;AACT,aAAO,qBACL,OADK,IACM,KAAKD,IAAL,KAAc,IAAd,GAAqB,MAArB,GAA8B,KAAKA,IAAL,CAAUI,WAAV,EADpC,IAEL,MAFK,IAEK,KAAKH,EAAL,KAAY,IAAZ,GAAmB,MAAnB,GAA4B,KAAKA,EAAL,CAAQG,WAAR,EAFjC,IAE0D,GAFjE;AAGD;;;2BAEaC,S,EAAW;AACvB,UAAI,CAACA,SAAL,EAAgB;AACd,eAAOA,SAAP;AACD;;AACD,UAAIA,SAAS,YAAYN,SAAzB,EAAoC;AAClC,eAAOM,SAAP;AACD;;AACD,aAAO,IAAIN,SAAJ,CACLD,KAAK,CAACQ,MAAN,CAAaD,SAAS,CAACL,IAAvB,CADK,EAELF,KAAK,CAACQ,MAAN,CAAaD,SAAS,CAACJ,EAAvB,CAFK,CAAP;AAGD;;;;;;SA/BkBF,S","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {dates} from '../index';\n\nexport default class DateRange {\n\n  constructor(from, to) {\n    this.from = from;\n    this.to = to;\n  }\n\n  equals(other) {\n    if (!other) {\n      return false;\n    }\n    return dates.equals(this.from, other.from) &&\n      dates.equals(this.to, other.to);\n  }\n\n  toString() {\n    return 'scout.DateRange[' +\n      'from=' + (this.from === null ? 'null' : this.from.toUTCString()) +\n      ' to=' + (this.to === null ? 'null' : this.to.toUTCString()) + ']';\n  }\n\n  static ensure(dateRange) {\n    if (!dateRange) {\n      return dateRange;\n    }\n    if (dateRange instanceof DateRange) {\n      return dateRange;\n    }\n    return new DateRange(\n      dates.ensure(dateRange.from),\n      dates.ensure(dateRange.to));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}