{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { DateFormat, scout, strings } from '../index';\nexport function shift(date, years, months, days) {\n  var newDate = new Date(date.getTime());\n\n  if (years) {\n    newDate.setFullYear(date.getFullYear() + years);\n\n    if (compareMonths(newDate, date) !== years * 12) {\n      // Set to last day of the previous month\n      // The reason: 2016-02-29 + 1 year -> 2017-03-01 instead of 2017-02-28\n      newDate.setDate(0);\n    }\n  }\n\n  if (months) {\n    newDate.setMonth(date.getMonth() + months);\n\n    if (compareMonths(newDate, date) !== months + years * 12) {\n      // Set to last day of the previous month\n      // The reason: 2010-10-31 + 1 month -> 2010-12-01 instead of 2010-11-30\n      newDate.setDate(0);\n    }\n  }\n\n  if (days) {\n    newDate.setDate(date.getDate() + days);\n  }\n\n  return newDate;\n}\nexport function shiftTime(date, hours, minutes, seconds, milliseconds) {\n  var newDate = new Date(date.getTime());\n\n  if (hours) {\n    newDate.setHours(date.getHours() + hours);\n  }\n\n  if (minutes) {\n    newDate.setMinutes(date.getMinutes() + minutes);\n  }\n\n  if (seconds) {\n    newDate.setSeconds(date.getSeconds() + seconds);\n  }\n\n  if (milliseconds) {\n    newDate.setMilliseconds(date.getMilliseconds() + milliseconds);\n  }\n\n  return newDate;\n}\nexport function shiftToNextDayOfType(date, day) {\n  var diff = day - date.getDay();\n\n  if (diff <= 0) {\n    diff += 7;\n  }\n\n  return shift(date, 0, 0, diff);\n}\n/**\n * Finds the next date (based on the given date) that matches the given day in week and date.\n *\n * @param {Date} date Start date\n * @param {number} dayInWeek 0-6\n * @param {number} dayInMonth 1-31\n * @returns {Date}\n */\n\nexport function shiftToNextDayAndDate(date, dayInWeek, dayInMonth) {\n  var tmpDate = new Date(date.getTime());\n  tmpDate.setDate(dayInMonth);\n\n  while (tmpDate.getDay() !== dayInWeek || tmpDate.getDate() !== dayInMonth) {\n    tmpDate = shift(tmpDate, 0, 1, 0);\n    tmpDate.setDate(dayInMonth);\n  }\n\n  return tmpDate;\n}\nexport function shiftToPreviousDayOfType(date, day) {\n  var diff = day - date.getDay();\n\n  if (diff >= 0) {\n    diff -= 7;\n  }\n\n  return shift(date, 0, 0, diff);\n}\nexport function shiftToNextOrPrevDayOfType(date, day, direction) {\n  if (direction > 0) {\n    return shiftToNextDayOfType(date, day);\n  }\n\n  return shiftToPreviousDayOfType(date, day);\n}\nexport function shiftToNextOrPrevMonday(date, direction) {\n  return shiftToNextOrPrevDayOfType(date, 1, direction);\n}\n/**\n * Ensures that the given date is really a date.\n * <p>\n * If it already is a date, the date will be returned.\n * Otherwise parseJsonDate is used to create a Date.\n *\n * @param date may be of type date or string.\n */\n\nexport function ensure(date) {\n  if (!date) {\n    return date;\n  }\n\n  if (date instanceof Date) {\n    return date;\n  }\n\n  return parseJsonDate(date);\n}\nexport function ensureMonday(date, direction) {\n  if (date.getDay() === 1) {\n    return date;\n  }\n\n  return shiftToNextOrPrevMonday(date, direction);\n}\nexport function isSameTime(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n\n  return date.getHours() === date2.getHours() && date.getMinutes() === date2.getMinutes() && date.getSeconds() === date2.getSeconds();\n}\nexport function isSameDay(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n\n  return date.getFullYear() === date2.getFullYear() && date.getMonth() === date2.getMonth() && date.getDate() === date2.getDate();\n}\nexport function isSameMonth(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n\n  return compareMonths(date, date2) === 0;\n}\n/**\n * Returns the difference of the two dates in number of months.\n * @returns {number}\n */\n\nexport function compareMonths(date1, date2) {\n  var d1Month = date1.getMonth(),\n      d2Month = date2.getMonth(),\n      d1Year = date1.getFullYear(),\n      d2Year = date2.getFullYear(),\n      monthDiff = d1Month - d2Month;\n\n  if (d1Year === d2Year) {\n    return monthDiff;\n  }\n\n  return (d1Year - d2Year) * 12 + monthDiff;\n}\n/**\n * Returns the difference of the two dates in number of days.\n * @returns {number}\n */\n\nexport function compareDays(date1, date2) {\n  return (trunc(date1) - trunc(date2) - (date1.getTimezoneOffset() - date2.getTimezoneOffset()) * 60000) / (3600000 * 24);\n}\n/**\n * Returns the time (with milliseconds) for the given date as a string in the format\n * [year#4][month#2][day#2][hour#2][minute#2][second#2][#millisecond#3]. All characters\n * are guaranteed to be digits. If the date argument is omitted, the current date is\n * used. The returned string in in UTC if the argument 'utc' is true, otherwise the\n * result is in local time (default).\n */\n\nexport function timestamp(date, utc) {\n  // (note: month is 0-indexed)\n  var d = date || new Date();\n\n  if (utc) {\n    return strings.padZeroLeft(d.getUTCFullYear(), 4) + strings.padZeroLeft(d.getUTCMonth() + 1, 2) + strings.padZeroLeft(d.getUTCDate(), 2) + strings.padZeroLeft(d.getUTCHours(), 2) + strings.padZeroLeft(d.getUTCMinutes(), 2) + strings.padZeroLeft(d.getUTCSeconds(), 2) + strings.padZeroLeft(d.getUTCMilliseconds(), 3);\n  }\n\n  return strings.padZeroLeft(d.getFullYear(), 4) + strings.padZeroLeft(d.getMonth() + 1, 2) + strings.padZeroLeft(d.getDate(), 2) + strings.padZeroLeft(d.getHours(), 2) + strings.padZeroLeft(d.getMinutes(), 2) + strings.padZeroLeft(d.getSeconds(), 2) + strings.padZeroLeft(d.getMilliseconds(), 3);\n}\nexport function orderWeekdays(weekdays, firstDayOfWeekArg) {\n  var weekdaysOrdered = [];\n\n  for (var i = 0; i < 7; i++) {\n    weekdaysOrdered[i] = weekdays[(i + firstDayOfWeekArg) % 7];\n  }\n\n  return weekdaysOrdered;\n}\n/**\n * Returns the week number according to ISO 8601 definition:\n * - All years have 52 or 53 weeks.\n * - The first week is the week with January 4th in it.\n * - The first day of a week is Monday, the last day is Sunday\n *\n * This is the default behavior. By setting the optional second argument 'option',\n * the first day in a week can be changed (e.g. 0 = Sunday). The returned numbers weeks are\n * not ISO 8601 compliant anymore, but can be more appropriate for display in a calendar. The\n * argument can be a number, a 'scout.Locale' or a 'scout.DateFormat' object.\n */\n\nexport function weekInYear(date, option) {\n  if (!date) {\n    return undefined;\n  }\n\n  var firstDayOfWeekArg = 1;\n\n  if (_typeof(option) === 'object') {\n    // DateFormat\n    if (option.symbols !== undefined && option.symbols.firstDayOfWeek !== undefined) {\n      firstDayOfWeekArg = option.symbols.firstDayOfWeek;\n    } else if (option.decimalFormatSymbols !== undefined && option.decimalFormatSymbols.firstDayOfWeek !== undefined) {\n      // Locale\n      firstDayOfWeekArg = option.decimalFormatSymbols.firstDayOfWeek;\n    }\n  } else if (typeof option === 'number') {\n    firstDayOfWeekArg = option;\n  } // Thursday of current week decides the year\n\n\n  var thursday = _thursdayOfWeek(date, firstDayOfWeekArg); // In ISO format, the week with January 4th is the first week\n\n\n  var jan4 = new Date(thursday.getFullYear(), 0, 4); // If the date is before the beginning of the year, it belongs to the year before\n\n  var startJan4 = firstDayOfWeek(jan4, firstDayOfWeekArg);\n\n  if (date.getTime() < startJan4.getTime()) {\n    jan4 = new Date(thursday.getFullYear() - 1, 0, 4);\n  } // Get the Thursday of the first week, to be able to compare it to 'thursday'\n\n\n  var thursdayFirstWeek = _thursdayOfWeek(jan4, firstDayOfWeekArg);\n\n  var diffInDays = (thursday.getTime() - thursdayFirstWeek.getTime()) / 86400000;\n  return 1 + Math.round(diffInDays / 7);\n} // private\n\nexport function _thursdayOfWeek(date, firstDayOfWeekArg) {\n  if (!date || typeof firstDayOfWeekArg !== 'number') {\n    return undefined;\n  }\n\n  var thursday = new Date(date.valueOf());\n\n  if (thursday.getDay() !== 4) {\n    // 0 = Sun, 1 = Mon, 2 = Thu, 3 = Wed, 4 = Thu, 5 = Fri, 6 = Sat\n    if (thursday.getDay() < firstDayOfWeekArg) {\n      // go 1 week backward\n      thursday.setDate(thursday.getDate() - 7);\n    }\n\n    thursday.setDate(thursday.getDate() - thursday.getDay() + 4); // go to start of week, then add 4 to go to Thursday\n  }\n\n  return thursday;\n}\nexport function firstDayOfWeek(date, firstDayOfWeekArg) {\n  if (!date || typeof firstDayOfWeekArg !== 'number') {\n    return undefined;\n  }\n\n  var firstDay = new Date(date.valueOf());\n\n  if (firstDay.getDay() !== firstDayOfWeekArg) {\n    firstDay.setDate(firstDay.getDate() - (firstDay.getDay() + 7 - firstDayOfWeekArg) % 7);\n  }\n\n  return firstDay;\n}\n/**\n * Parses a string that corresponds to one of the canonical JSON transfer formats\n * and returns it as a JavaScript 'Date' object.\n *\n * @see JsonDate.java\n */\n\nexport function parseJsonDate(jsonDate) {\n  if (!jsonDate) {\n    return null;\n  }\n\n  var year = '1970',\n      month = '01',\n      day = '01',\n      hours = '00',\n      minutes = '00',\n      seconds = '00',\n      milliseconds = '000',\n      utc = false; // Date + Time\n\n  var matches = /^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{3})(Z?)$/.exec(jsonDate);\n\n  if (matches !== null) {\n    year = matches[1];\n    month = matches[2];\n    day = matches[3];\n    hours = matches[4];\n    minutes = matches[5];\n    seconds = matches[6];\n    milliseconds = matches[7];\n    utc = matches[8] === 'Z';\n  } else {\n    // Date only\n    matches = /^(\\d{4})-(\\d{2})-(\\d{2})(Z?)$/.exec(jsonDate);\n\n    if (matches !== null) {\n      year = matches[1];\n      month = matches[2];\n      day = matches[3];\n      utc = matches[4] === 'Z';\n    } else {\n      // Time only\n      matches = /^(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{3})(Z?)$/.exec(jsonDate);\n\n      if (matches !== null) {\n        hours = matches[1];\n        minutes = matches[2];\n        seconds = matches[3];\n        milliseconds = matches[4];\n        utc = matches[5] === 'Z';\n      } else {\n        throw new Error('Unparsable date: ' + jsonDate);\n      }\n    }\n  }\n\n  var result;\n\n  if (utc) {\n    // UTC date\n    result = new Date(Date.UTC(year, month - 1, day, hours, minutes, seconds, milliseconds));\n\n    if (year < 100) {\n      // fix \"two-digit years between 1900 and 1999\" logic\n      result.setUTCFullYear(year);\n    }\n  } else {\n    // local date\n    result = new Date(year, month - 1, day, hours, minutes, seconds, milliseconds);\n\n    if (year < 100) {\n      // fix \"two-digit years between 1900 and 1999\" logic\n      result.setFullYear(year);\n    }\n  }\n\n  return result;\n}\n/**\n * Converts the given date object to a JSON string. By default, the local time zone\n * is used to built the result, time zone information itself is not part of the\n * result. If the argument 'utc' is set to true, the result is built using the\n * UTC values of the date. Such a result string is marked with a trailing 'Z' character.\n *\n * @see JsonDate.java\n */\n\nexport function toJsonDate(date, utc, includeDate, includeTime) {\n  if (!date) {\n    return null;\n  }\n\n  if (includeDate === undefined) {\n    includeDate = true;\n  }\n\n  if (includeTime === undefined) {\n    includeTime = true;\n  }\n\n  var datePart, timePart, utcPart;\n\n  if (utc) {\n    // (note: month is 0-indexed)\n    datePart = strings.padZeroLeft(date.getUTCFullYear(), 4) + '-' + strings.padZeroLeft(date.getUTCMonth() + 1, 2) + '-' + strings.padZeroLeft(date.getUTCDate(), 2);\n    timePart = strings.padZeroLeft(date.getUTCHours(), 2) + ':' + strings.padZeroLeft(date.getUTCMinutes(), 2) + ':' + strings.padZeroLeft(date.getUTCSeconds(), 2) + '.' + strings.padZeroLeft(date.getUTCMilliseconds(), 3);\n    utcPart = 'Z';\n  } else {\n    // (note: month is 0-indexed)\n    datePart = strings.padZeroLeft(date.getFullYear(), 4) + '-' + strings.padZeroLeft(date.getMonth() + 1, 2) + '-' + strings.padZeroLeft(date.getDate(), 2);\n    timePart = strings.padZeroLeft(date.getHours(), 2) + ':' + strings.padZeroLeft(date.getMinutes(), 2) + ':' + strings.padZeroLeft(date.getSeconds(), 2) + '.' + strings.padZeroLeft(date.getMilliseconds(), 3);\n    utcPart = '';\n  }\n\n  var result = '';\n\n  if (includeDate) {\n    result += datePart;\n\n    if (includeTime) {\n      result += ' ';\n    }\n  }\n\n  if (includeTime) {\n    result += timePart;\n  }\n\n  result += utcPart;\n  return result;\n}\nexport function toJsonDateRange(range) {\n  return {\n    from: toJsonDate(range.from),\n    to: toJsonDate(range.to)\n  };\n}\n/**\n * Creates a new JavaScript Date object by parsing the given string. This method is not intended to be\n * used in application code, but provides a quick way to create dates in unit tests.\n *\n * The format is as follows:\n *\n * [Year#4]-[Month#2]-[Day#2] [Hours#2]:[Minutes#2]:[Seconds#2].[Milliseconds#3][Z]\n *\n * The year component is mandatory, but all others are optional (starting from the beginning).\n * The date is constructed using the local time zone. If the last character is 'Z', then\n * the values are interpreted as UTC date.\n */\n\nexport function create(dateString) {\n  if (dateString) {\n    var matches = /^(\\d{4})(?:-(\\d{2})(?:-(\\d{2})(?: (\\d{2})(?::(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?(Z?))?)?)?)?)?/.exec(dateString);\n\n    if (matches === null) {\n      throw new Error('Unparsable date: ' + dateString);\n    }\n\n    var date;\n\n    if (matches[8] === 'Z') {\n      date = new Date(Date.UTC(matches[1], // fullYear\n      (matches[2] || 1) - 1, // month (0-indexed)\n      matches[3] || 1, // day of month\n      matches[4] || 0, // hours\n      matches[5] || 0, // minutes\n      matches[6] || 0, // seconds\n      matches[7] || 0 // milliseconds\n      ));\n    } else {\n      date = new Date(matches[1], // fullYear\n      (matches[2] || 1) - 1, // month (0-indexed)\n      matches[3] || 1, // day of month\n      matches[4] || 0, // hours\n      matches[5] || 0, // minutes\n      matches[6] || 0, // seconds\n      matches[7] || 0 // milliseconds\n      );\n    }\n\n    return date;\n  }\n\n  return undefined;\n}\n/**\n * Returns a new Date. Use this function in place of <code>new Date();</code> in your productive code\n * when you want to provide a fixed date instead of the system time/date for unit tests. In your unit test\n * you can replace this function with a function that provides a fixed date. Don't forget to restore the\n * original function when you cleanup/tear-down the test.\n *\n * @returns Date\n */\n\nexport function newDate() {\n  return new Date();\n}\nexport function format(date, locale, pattern) {\n  var dateFormat = new DateFormat(locale, pattern);\n  return dateFormat.format(date);\n}\n/**\n * Uses the default date and time format patterns from the locale to format the given date.\n */\n\nexport function formatDateTime(date, locale) {\n  var dateFormat = new DateFormat(locale, locale.dateFormatPatternDefault + ' ' + locale.timeFormatPatternDefault);\n  return dateFormat.format(date);\n}\nexport function compare(a, b) {\n  if (!a && !b) {\n    return 0;\n  }\n\n  if (!a) {\n    return -1;\n  }\n\n  if (!b) {\n    return 1;\n  }\n\n  var diff = a.getTime() - b.getTime();\n\n  if (diff < -1) {\n    return -1;\n  }\n\n  if (diff > 1) {\n    return 1;\n  }\n\n  return diff;\n}\nexport function equals(a, b) {\n  return compare(a, b) === 0;\n}\n/**\n * This combines a date and time, passed as date objects to one object with the date part of param date and the time part of param time.\n * <p>\n * If time is omitted, 00:00:00 is used as time part.<br>\n * If date is omitted, 1970-01-01 is used as date part independent of the time zone, means it is 1970-01-01 in every time zone.\n */\n\nexport function combineDateTime(date, time) {\n  var newDate = new Date();\n  newDate.setHours(0, 0, 0, 0); // set time part to zero in local time!\n\n  newDate.setFullYear(1970, 0, 1); // make sure local time has no effect on date (if date is omitted it has to be 1970-01-01)\n\n  if (date) {\n    newDate.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n\n  if (time) {\n    newDate.setHours(scout.nvl(time.getHours(), 0));\n    newDate.setMinutes(scout.nvl(time.getMinutes(), 0));\n    newDate.setSeconds(scout.nvl(time.getSeconds(), 0));\n    newDate.setMilliseconds(scout.nvl(time.getMilliseconds(), 0));\n  }\n\n  return newDate;\n}\n/**\n * Returns <code>true</code> if the given year is a leap year, i.e if february 29 exists in that year.\n */\n\nexport function isLeapYear(year) {\n  if (year === undefined || year === null) {\n    return false;\n  }\n\n  var date = new Date(year, 1, 29);\n  return date.getDate() === 29;\n}\n/**\n * Returns the given date with time set to midnight (hours, minutes, seconds, milliseconds = 0).\n *\n * @param date (required)\n *          The date to truncate.\n * @param createCopy (optional)\n *          If this flag is true, a copy of the given date is returned (the input date is not\n *          altered). If the flag is false, the given object is changed and then returned.\n *          The default value for this flag is \"true\".\n */\n\nexport function trunc(date, createCopy) {\n  if (date) {\n    if (scout.nvl(createCopy, true)) {\n      date = new Date(date.getTime());\n    }\n\n    date.setHours(0, 0, 0, 0); // clear time\n  }\n\n  return date;\n}\n/**\n * Returns the given date with time set to midnight (hours, minutes, seconds, milliseconds = 0).\n *\n * @param date (required)\n *          The date to truncate.\n * @param minutesResolution (optional) default 30\n *          The amount of minutes added to every full hour XX:00 until > XX+1:00. The given date will ceiled to the next valid time.\n *          e.g. time:15:05, resolution 40  -> 15:40\n *               time: 15:41 resolution 40 -> 16:00\n * @param createCopy (optional)\n *          If this flag is true, a copy of the given date is returned (the input date is not\n *          altered). If the flag is false, the given object is changed and then returned.\n *          The default value for this flag is \"true\".\n */\n\nexport function ceil(date, minutesResolution, createCopy) {\n  var h,\n      m,\n      mResulution = scout.nvl(minutesResolution, 30);\n\n  if (date) {\n    if (scout.nvl(createCopy, true)) {\n      date = new Date(date.getTime());\n    }\n\n    date.setSeconds(0, 0); // clear seconds and millis\n\n    m = parseInt((date.getMinutes() + mResulution) / mResulution) * mResulution;\n    h = date.getHours();\n\n    if (m >= 60) {\n      h++;\n      m = 0;\n    }\n\n    if (h > 23) {\n      h = 0;\n      date.setDate(date.getDate() + 1);\n    }\n\n    date.setHours(h, m);\n  }\n\n  return date;\n}\nexport default {\n  ceil: ceil,\n  combineDateTime: combineDateTime,\n  compare: compare,\n  compareDays: compareDays,\n  compareMonths: compareMonths,\n  create: create,\n  ensure: ensure,\n  ensureMonday: ensureMonday,\n  equals: equals,\n  firstDayOfWeek: firstDayOfWeek,\n  format: format,\n  formatDateTime: formatDateTime,\n  isLeapYear: isLeapYear,\n  isSameDay: isSameDay,\n  isSameMonth: isSameMonth,\n  isSameTime: isSameTime,\n  newDate: newDate,\n  orderWeekdays: orderWeekdays,\n  parseJsonDate: parseJsonDate,\n  shift: shift,\n  shiftTime: shiftTime,\n  shiftToNextDayOfType: shiftToNextDayOfType,\n  shiftToNextDayAndDate: shiftToNextDayAndDate,\n  shiftToNextOrPrevDayOfType: shiftToNextOrPrevDayOfType,\n  shiftToNextOrPrevMonday: shiftToNextOrPrevMonday,\n  shiftToPreviousDayOfType: shiftToPreviousDayOfType,\n  timestamp: timestamp,\n  toJsonDate: toJsonDate,\n  toJsonDateRange: toJsonDateRange,\n  trunc: trunc,\n  weekInYear: weekInYear\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/util/dates.js"],"names":["DateFormat","scout","strings","shift","date","years","months","days","newDate","Date","getTime","setFullYear","getFullYear","compareMonths","setDate","setMonth","getMonth","getDate","shiftTime","hours","minutes","seconds","milliseconds","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","shiftToNextDayOfType","day","diff","getDay","shiftToNextDayAndDate","dayInWeek","dayInMonth","tmpDate","shiftToPreviousDayOfType","shiftToNextOrPrevDayOfType","direction","shiftToNextOrPrevMonday","ensure","parseJsonDate","ensureMonday","isSameTime","date2","isSameDay","isSameMonth","date1","d1Month","d2Month","d1Year","d2Year","monthDiff","compareDays","trunc","getTimezoneOffset","timestamp","utc","d","padZeroLeft","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","orderWeekdays","weekdays","firstDayOfWeekArg","weekdaysOrdered","i","weekInYear","option","undefined","symbols","firstDayOfWeek","decimalFormatSymbols","thursday","_thursdayOfWeek","jan4","startJan4","thursdayFirstWeek","diffInDays","Math","round","valueOf","firstDay","jsonDate","year","month","matches","exec","Error","result","UTC","setUTCFullYear","toJsonDate","includeDate","includeTime","datePart","timePart","utcPart","toJsonDateRange","range","from","to","create","dateString","format","locale","pattern","dateFormat","formatDateTime","dateFormatPatternDefault","timeFormatPatternDefault","compare","a","b","equals","combineDateTime","time","nvl","isLeapYear","createCopy","ceil","minutesResolution","h","m","mResulution","parseInt"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {DateFormat, scout, strings} from '../index';\n\nexport function shift(date, years, months, days) {\n  var newDate = new Date(date.getTime());\n  if (years) {\n    newDate.setFullYear(date.getFullYear() + years);\n    if (compareMonths(newDate, date) !== years * 12) {\n      // Set to last day of the previous month\n      // The reason: 2016-02-29 + 1 year -> 2017-03-01 instead of 2017-02-28\n      newDate.setDate(0);\n    }\n  }\n  if (months) {\n    newDate.setMonth(date.getMonth() + months);\n    if (compareMonths(newDate, date) !== months + years * 12) {\n      // Set to last day of the previous month\n      // The reason: 2010-10-31 + 1 month -> 2010-12-01 instead of 2010-11-30\n      newDate.setDate(0);\n    }\n  }\n  if (days) {\n    newDate.setDate(date.getDate() + days);\n  }\n  return newDate;\n}\n\nexport function shiftTime(date, hours, minutes, seconds, milliseconds) {\n  var newDate = new Date(date.getTime());\n  if (hours) {\n    newDate.setHours(date.getHours() + hours);\n  }\n  if (minutes) {\n    newDate.setMinutes(date.getMinutes() + minutes);\n  }\n  if (seconds) {\n    newDate.setSeconds(date.getSeconds() + seconds);\n  }\n  if (milliseconds) {\n    newDate.setMilliseconds(date.getMilliseconds() + milliseconds);\n  }\n  return newDate;\n}\n\nexport function shiftToNextDayOfType(date, day) {\n  var diff = day - date.getDay();\n\n  if (diff <= 0) {\n    diff += 7;\n  }\n  return shift(date, 0, 0, diff);\n}\n\n/**\n * Finds the next date (based on the given date) that matches the given day in week and date.\n *\n * @param {Date} date Start date\n * @param {number} dayInWeek 0-6\n * @param {number} dayInMonth 1-31\n * @returns {Date}\n */\nexport function shiftToNextDayAndDate(date, dayInWeek, dayInMonth) {\n  var tmpDate = new Date(date.getTime());\n  tmpDate.setDate(dayInMonth);\n  while (tmpDate.getDay() !== dayInWeek || tmpDate.getDate() !== dayInMonth) {\n    tmpDate = shift(tmpDate, 0, 1, 0);\n    tmpDate.setDate(dayInMonth);\n  }\n  return tmpDate;\n}\n\nexport function shiftToPreviousDayOfType(date, day) {\n  var diff = day - date.getDay();\n\n  if (diff >= 0) {\n    diff -= 7;\n  }\n  return shift(date, 0, 0, diff);\n}\n\nexport function shiftToNextOrPrevDayOfType(date, day, direction) {\n  if (direction > 0) {\n    return shiftToNextDayOfType(date, day);\n  }\n  return shiftToPreviousDayOfType(date, day);\n}\n\nexport function shiftToNextOrPrevMonday(date, direction) {\n  return shiftToNextOrPrevDayOfType(date, 1, direction);\n}\n\n/**\n * Ensures that the given date is really a date.\n * <p>\n * If it already is a date, the date will be returned.\n * Otherwise parseJsonDate is used to create a Date.\n *\n * @param date may be of type date or string.\n */\nexport function ensure(date) {\n  if (!date) {\n    return date;\n  }\n  if (date instanceof Date) {\n    return date;\n  }\n  return parseJsonDate(date);\n}\n\nexport function ensureMonday(date, direction) {\n  if (date.getDay() === 1) {\n    return date;\n  }\n  return shiftToNextOrPrevMonday(date, direction);\n}\n\nexport function isSameTime(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n  return date.getHours() === date2.getHours() &&\n    date.getMinutes() === date2.getMinutes() &&\n    date.getSeconds() === date2.getSeconds();\n}\n\nexport function isSameDay(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n  return date.getFullYear() === date2.getFullYear() &&\n    date.getMonth() === date2.getMonth() &&\n    date.getDate() === date2.getDate();\n}\n\nexport function isSameMonth(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n  return compareMonths(date, date2) === 0;\n}\n\n/**\n * Returns the difference of the two dates in number of months.\n * @returns {number}\n */\nexport function compareMonths(date1, date2) {\n  var d1Month = date1.getMonth(),\n    d2Month = date2.getMonth(),\n    d1Year = date1.getFullYear(),\n    d2Year = date2.getFullYear(),\n    monthDiff = d1Month - d2Month;\n  if (d1Year === d2Year) {\n    return monthDiff;\n  }\n  return (d1Year - d2Year) * 12 + monthDiff;\n}\n\n/**\n * Returns the difference of the two dates in number of days.\n * @returns {number}\n */\nexport function compareDays(date1, date2) {\n  return (trunc(date1) - trunc(date2) - (date1.getTimezoneOffset() - date2.getTimezoneOffset()) * 60000) / (3600000 * 24);\n}\n\n/**\n * Returns the time (with milliseconds) for the given date as a string in the format\n * [year#4][month#2][day#2][hour#2][minute#2][second#2][#millisecond#3]. All characters\n * are guaranteed to be digits. If the date argument is omitted, the current date is\n * used. The returned string in in UTC if the argument 'utc' is true, otherwise the\n * result is in local time (default).\n */\nexport function timestamp(date, utc) {\n  // (note: month is 0-indexed)\n  var d = date || new Date();\n  if (utc) {\n    return strings.padZeroLeft(d.getUTCFullYear(), 4) +\n      strings.padZeroLeft(d.getUTCMonth() + 1, 2) +\n      strings.padZeroLeft(d.getUTCDate(), 2) +\n      strings.padZeroLeft(d.getUTCHours(), 2) +\n      strings.padZeroLeft(d.getUTCMinutes(), 2) +\n      strings.padZeroLeft(d.getUTCSeconds(), 2) +\n      strings.padZeroLeft(d.getUTCMilliseconds(), 3);\n  }\n  return strings.padZeroLeft(d.getFullYear(), 4) +\n    strings.padZeroLeft(d.getMonth() + 1, 2) +\n    strings.padZeroLeft(d.getDate(), 2) +\n    strings.padZeroLeft(d.getHours(), 2) +\n    strings.padZeroLeft(d.getMinutes(), 2) +\n    strings.padZeroLeft(d.getSeconds(), 2) +\n    strings.padZeroLeft(d.getMilliseconds(), 3);\n}\n\nexport function orderWeekdays(weekdays, firstDayOfWeekArg) {\n  var weekdaysOrdered = [];\n  for (var i = 0; i < 7; i++) {\n    weekdaysOrdered[i] = weekdays[(i + firstDayOfWeekArg) % 7];\n  }\n  return weekdaysOrdered;\n}\n\n/**\n * Returns the week number according to ISO 8601 definition:\n * - All years have 52 or 53 weeks.\n * - The first week is the week with January 4th in it.\n * - The first day of a week is Monday, the last day is Sunday\n *\n * This is the default behavior. By setting the optional second argument 'option',\n * the first day in a week can be changed (e.g. 0 = Sunday). The returned numbers weeks are\n * not ISO 8601 compliant anymore, but can be more appropriate for display in a calendar. The\n * argument can be a number, a 'scout.Locale' or a 'scout.DateFormat' object.\n */\nexport function weekInYear(date, option) {\n  if (!date) {\n    return undefined;\n  }\n  var firstDayOfWeekArg = 1;\n  if (typeof option === 'object') {\n    // DateFormat\n    if (option.symbols !== undefined && option.symbols.firstDayOfWeek !== undefined) {\n      firstDayOfWeekArg = option.symbols.firstDayOfWeek;\n    } else if (option.decimalFormatSymbols !== undefined && option.decimalFormatSymbols.firstDayOfWeek !== undefined) {\n      // Locale\n      firstDayOfWeekArg = option.decimalFormatSymbols.firstDayOfWeek;\n    }\n  } else if (typeof option === 'number') {\n    firstDayOfWeekArg = option;\n  }\n\n  // Thursday of current week decides the year\n  var thursday = _thursdayOfWeek(date, firstDayOfWeekArg);\n\n  // In ISO format, the week with January 4th is the first week\n  var jan4 = new Date(thursday.getFullYear(), 0, 4);\n\n  // If the date is before the beginning of the year, it belongs to the year before\n  var startJan4 = firstDayOfWeek(jan4, firstDayOfWeekArg);\n  if (date.getTime() < startJan4.getTime()) {\n    jan4 = new Date(thursday.getFullYear() - 1, 0, 4);\n  }\n\n  // Get the Thursday of the first week, to be able to compare it to 'thursday'\n  var thursdayFirstWeek = _thursdayOfWeek(jan4, firstDayOfWeekArg);\n\n  var diffInDays = (thursday.getTime() - thursdayFirstWeek.getTime()) / 86400000;\n\n  return 1 + Math.round(diffInDays / 7);\n}\n\n// private\nexport function _thursdayOfWeek(date, firstDayOfWeekArg) {\n  if (!date || typeof firstDayOfWeekArg !== 'number') {\n    return undefined;\n  }\n\n  var thursday = new Date(date.valueOf());\n  if (thursday.getDay() !== 4) { // 0 = Sun, 1 = Mon, 2 = Thu, 3 = Wed, 4 = Thu, 5 = Fri, 6 = Sat\n    if (thursday.getDay() < firstDayOfWeekArg) {\n      // go 1 week backward\n      thursday.setDate(thursday.getDate() - 7);\n    }\n    thursday.setDate(thursday.getDate() - thursday.getDay() + 4); // go to start of week, then add 4 to go to Thursday\n  }\n  return thursday;\n}\n\nexport function firstDayOfWeek(date, firstDayOfWeekArg) {\n  if (!date || typeof firstDayOfWeekArg !== 'number') {\n    return undefined;\n  }\n  var firstDay = new Date(date.valueOf());\n  if (firstDay.getDay() !== firstDayOfWeekArg) {\n    firstDay.setDate(firstDay.getDate() - (firstDay.getDay() + 7 - firstDayOfWeekArg) % 7);\n  }\n  return firstDay;\n}\n\n/**\n * Parses a string that corresponds to one of the canonical JSON transfer formats\n * and returns it as a JavaScript 'Date' object.\n *\n * @see JsonDate.java\n */\nexport function parseJsonDate(jsonDate) {\n  if (!jsonDate) {\n    return null;\n  }\n\n  var year = '1970',\n    month = '01',\n    day = '01',\n    hours = '00',\n    minutes = '00',\n    seconds = '00',\n    milliseconds = '000',\n    utc = false;\n\n  // Date + Time\n  var matches = /^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{3})(Z?)$/.exec(jsonDate);\n  if (matches !== null) {\n    year = matches[1];\n    month = matches[2];\n    day = matches[3];\n    hours = matches[4];\n    minutes = matches[5];\n    seconds = matches[6];\n    milliseconds = matches[7];\n    utc = matches[8] === 'Z';\n  } else {\n    // Date only\n    matches = /^(\\d{4})-(\\d{2})-(\\d{2})(Z?)$/.exec(jsonDate);\n    if (matches !== null) {\n      year = matches[1];\n      month = matches[2];\n      day = matches[3];\n      utc = matches[4] === 'Z';\n    } else {\n      // Time only\n      matches = /^(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{3})(Z?)$/.exec(jsonDate);\n      if (matches !== null) {\n        hours = matches[1];\n        minutes = matches[2];\n        seconds = matches[3];\n        milliseconds = matches[4];\n        utc = matches[5] === 'Z';\n      } else {\n        throw new Error('Unparsable date: ' + jsonDate);\n      }\n    }\n  }\n\n  var result;\n  if (utc) {\n    // UTC date\n    result = new Date(Date.UTC(year, month - 1, day, hours, minutes, seconds, milliseconds));\n    if (year < 100) { // fix \"two-digit years between 1900 and 1999\" logic\n      result.setUTCFullYear(year);\n    }\n  } else {\n    // local date\n    result = new Date(year, month - 1, day, hours, minutes, seconds, milliseconds);\n    if (year < 100) { // fix \"two-digit years between 1900 and 1999\" logic\n      result.setFullYear(year);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts the given date object to a JSON string. By default, the local time zone\n * is used to built the result, time zone information itself is not part of the\n * result. If the argument 'utc' is set to true, the result is built using the\n * UTC values of the date. Such a result string is marked with a trailing 'Z' character.\n *\n * @see JsonDate.java\n */\nexport function toJsonDate(date, utc, includeDate, includeTime) {\n  if (!date) {\n    return null;\n  }\n  if (includeDate === undefined) {\n    includeDate = true;\n  }\n  if (includeTime === undefined) {\n    includeTime = true;\n  }\n  var datePart, timePart, utcPart;\n  if (utc) {\n    // (note: month is 0-indexed)\n    datePart = strings.padZeroLeft(date.getUTCFullYear(), 4) + '-' +\n      strings.padZeroLeft(date.getUTCMonth() + 1, 2) + '-' +\n      strings.padZeroLeft(date.getUTCDate(), 2);\n    timePart = strings.padZeroLeft(date.getUTCHours(), 2) + ':' +\n      strings.padZeroLeft(date.getUTCMinutes(), 2) + ':' +\n      strings.padZeroLeft(date.getUTCSeconds(), 2) + '.' +\n      strings.padZeroLeft(date.getUTCMilliseconds(), 3);\n    utcPart = 'Z';\n  } else {\n    // (note: month is 0-indexed)\n    datePart = strings.padZeroLeft(date.getFullYear(), 4) + '-' +\n      strings.padZeroLeft(date.getMonth() + 1, 2) + '-' +\n      strings.padZeroLeft(date.getDate(), 2);\n    timePart = strings.padZeroLeft(date.getHours(), 2) + ':' +\n      strings.padZeroLeft(date.getMinutes(), 2) + ':' +\n      strings.padZeroLeft(date.getSeconds(), 2) + '.' +\n      strings.padZeroLeft(date.getMilliseconds(), 3);\n    utcPart = '';\n  }\n  var result = '';\n  if (includeDate) {\n    result += datePart;\n    if (includeTime) {\n      result += ' ';\n    }\n  }\n  if (includeTime) {\n    result += timePart;\n  }\n  result += utcPart;\n  return result;\n}\n\nexport function toJsonDateRange(range) {\n  return {\n    from: toJsonDate(range.from),\n    to: toJsonDate(range.to)\n  };\n}\n\n/**\n * Creates a new JavaScript Date object by parsing the given string. This method is not intended to be\n * used in application code, but provides a quick way to create dates in unit tests.\n *\n * The format is as follows:\n *\n * [Year#4]-[Month#2]-[Day#2] [Hours#2]:[Minutes#2]:[Seconds#2].[Milliseconds#3][Z]\n *\n * The year component is mandatory, but all others are optional (starting from the beginning).\n * The date is constructed using the local time zone. If the last character is 'Z', then\n * the values are interpreted as UTC date.\n */\nexport function create(dateString) {\n  if (dateString) {\n    var matches = /^(\\d{4})(?:-(\\d{2})(?:-(\\d{2})(?: (\\d{2})(?::(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?(Z?))?)?)?)?)?/.exec(dateString);\n    if (matches === null) {\n      throw new Error('Unparsable date: ' + dateString);\n    }\n    var date;\n    if (matches[8] === 'Z') {\n      date = new Date(Date.UTC(\n        matches[1], // fullYear\n        (matches[2] || 1) - 1, // month (0-indexed)\n        matches[3] || 1, // day of month\n        matches[4] || 0, // hours\n        matches[5] || 0, // minutes\n        matches[6] || 0, // seconds\n        matches[7] || 0 // milliseconds\n      ));\n    } else {\n      date = new Date(\n        matches[1], // fullYear\n        (matches[2] || 1) - 1, // month (0-indexed)\n        matches[3] || 1, // day of month\n        matches[4] || 0, // hours\n        matches[5] || 0, // minutes\n        matches[6] || 0, // seconds\n        matches[7] || 0 // milliseconds\n      );\n    }\n    return date;\n  }\n  return undefined;\n}\n\n/**\n * Returns a new Date. Use this function in place of <code>new Date();</code> in your productive code\n * when you want to provide a fixed date instead of the system time/date for unit tests. In your unit test\n * you can replace this function with a function that provides a fixed date. Don't forget to restore the\n * original function when you cleanup/tear-down the test.\n *\n * @returns Date\n */\nexport function newDate() {\n  return new Date();\n}\n\nexport function format(date, locale, pattern) {\n  var dateFormat = new DateFormat(locale, pattern);\n  return dateFormat.format(date);\n}\n\n/**\n * Uses the default date and time format patterns from the locale to format the given date.\n */\nexport function formatDateTime(date, locale) {\n  var dateFormat = new DateFormat(locale, locale.dateFormatPatternDefault + ' ' + locale.timeFormatPatternDefault);\n  return dateFormat.format(date);\n}\n\nexport function compare(a, b) {\n  if (!a && !b) {\n    return 0;\n  }\n  if (!a) {\n    return -1;\n  }\n  if (!b) {\n    return 1;\n  }\n  var diff = a.getTime() - b.getTime();\n  if (diff < -1) {\n    return -1;\n  }\n  if (diff > 1) {\n    return 1;\n  }\n  return diff;\n}\n\nexport function equals(a, b) {\n  return compare(a, b) === 0;\n}\n\n/**\n * This combines a date and time, passed as date objects to one object with the date part of param date and the time part of param time.\n * <p>\n * If time is omitted, 00:00:00 is used as time part.<br>\n * If date is omitted, 1970-01-01 is used as date part independent of the time zone, means it is 1970-01-01 in every time zone.\n */\nexport function combineDateTime(date, time) {\n  var newDate = new Date();\n  newDate.setHours(0, 0, 0, 0); // set time part to zero in local time!\n  newDate.setFullYear(1970, 0, 1); // make sure local time has no effect on date (if date is omitted it has to be 1970-01-01)\n  if (date) {\n    newDate.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n  if (time) {\n    newDate.setHours(scout.nvl(time.getHours(), 0));\n    newDate.setMinutes(scout.nvl(time.getMinutes(), 0));\n    newDate.setSeconds(scout.nvl(time.getSeconds(), 0));\n    newDate.setMilliseconds(scout.nvl(time.getMilliseconds(), 0));\n  }\n  return newDate;\n}\n\n/**\n * Returns <code>true</code> if the given year is a leap year, i.e if february 29 exists in that year.\n */\nexport function isLeapYear(year) {\n  if (year === undefined || year === null) {\n    return false;\n  }\n  var date = new Date(year, 1, 29);\n  return date.getDate() === 29;\n}\n\n/**\n * Returns the given date with time set to midnight (hours, minutes, seconds, milliseconds = 0).\n *\n * @param date (required)\n *          The date to truncate.\n * @param createCopy (optional)\n *          If this flag is true, a copy of the given date is returned (the input date is not\n *          altered). If the flag is false, the given object is changed and then returned.\n *          The default value for this flag is \"true\".\n */\nexport function trunc(date, createCopy) {\n  if (date) {\n    if (scout.nvl(createCopy, true)) {\n      date = new Date(date.getTime());\n    }\n    date.setHours(0, 0, 0, 0); // clear time\n  }\n  return date;\n}\n\n/**\n * Returns the given date with time set to midnight (hours, minutes, seconds, milliseconds = 0).\n *\n * @param date (required)\n *          The date to truncate.\n * @param minutesResolution (optional) default 30\n *          The amount of minutes added to every full hour XX:00 until > XX+1:00. The given date will ceiled to the next valid time.\n *          e.g. time:15:05, resolution 40  -> 15:40\n *               time: 15:41 resolution 40 -> 16:00\n * @param createCopy (optional)\n *          If this flag is true, a copy of the given date is returned (the input date is not\n *          altered). If the flag is false, the given object is changed and then returned.\n *          The default value for this flag is \"true\".\n */\nexport function ceil(date, minutesResolution, createCopy) {\n  var h,\n    m,\n    mResulution = scout.nvl(minutesResolution, 30);\n  if (date) {\n    if (scout.nvl(createCopy, true)) {\n      date = new Date(date.getTime());\n    }\n\n    date.setSeconds(0, 0); // clear seconds and millis\n\n    m = parseInt((date.getMinutes() + mResulution) / mResulution) * mResulution;\n    h = date.getHours();\n    if (m >= 60) {\n      h++;\n      m = 0;\n    }\n    if (h > 23) {\n      h = 0;\n      date.setDate(date.getDate() + 1);\n    }\n    date.setHours(h, m);\n  }\n  return date;\n}\n\nexport default {\n  ceil,\n  combineDateTime,\n  compare,\n  compareDays,\n  compareMonths,\n  create,\n  ensure,\n  ensureMonday,\n  equals,\n  firstDayOfWeek,\n  format,\n  formatDateTime,\n  isLeapYear,\n  isSameDay,\n  isSameMonth,\n  isSameTime,\n  newDate,\n  orderWeekdays,\n  parseJsonDate,\n  shift,\n  shiftTime,\n  shiftToNextDayOfType,\n  shiftToNextDayAndDate,\n  shiftToNextOrPrevDayOfType,\n  shiftToNextOrPrevMonday,\n  shiftToPreviousDayOfType,\n  timestamp,\n  toJsonDate,\n  toJsonDateRange,\n  trunc,\n  weekInYear\n};\n"]},"metadata":{},"sourceType":"module"}