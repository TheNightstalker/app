{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Dimension, EventSupport, HtmlComponent, polyfills, Rectangle, scout, SingleLayout } from '../index';\nimport $ from 'jquery';\n\nvar PopupWindow = /*#__PURE__*/function () {\n  function PopupWindow(myWindow, form) {\n    _classCallCheck(this, PopupWindow);\n\n    // use 'myWindow' in place of 'window' to prevent confusion with global window variable\n    this.myWindow = myWindow;\n    this.form = form;\n    this.session = form.session;\n    this.events = new EventSupport();\n    this.initialized = false;\n    this.$container = null;\n    this.htmlComp = null; // link Form instance with this popupWindow instance\n    // this is required when form (and popup-window) is closed by the model\n\n    form.popupWindow = this; // link Window instance with this popupWindow instance\n    // this is required when we want to check if a certain DOM element belongs\n    // to a popup window\n\n    myWindow.popupWindow = this;\n    myWindow.name = 'Scout popup-window ' + form.modelClass;\n  }\n\n  _createClass(PopupWindow, [{\n    key: \"_onUnload\",\n    value: function _onUnload() {\n      $.log.isDebugEnabled() && $.log.debug('stored form ID ' + this.form.id + ' to session storage');\n\n      if (this.form.destroyed) {\n        $.log.isDebugEnabled() && $.log.debug('form ID ' + this.form.id + ' is already destroyed - don\\'t trigger unload event');\n      } else {\n        this.events.trigger('popupWindowUnload', this);\n      }\n    }\n  }, {\n    key: \"_onReady\",\n    value: function _onReady() {\n      // set container (used as document-root from callers)\n      var myDocument = this.myWindow.document,\n          $myWindow = $(this.myWindow),\n          $myDocument = $(myDocument); // Establish the link again, as Chrome removes this property after a page load.\n      // (page load is made by design in PopupBlockerHandler.openWindow)\n\n      this.myWindow.popupWindow = this; // Install polyfills on new window\n\n      polyfills.install(this.myWindow);\n      scout.prepareDOM(myDocument);\n      this.$container = $('.scout', myDocument);\n      this.htmlComp = HtmlComponent.install(this.$container, this.session);\n      this.htmlComp.setLayout(new SingleLayout());\n      this.$container.height($myWindow.height());\n      this.form.render(this.$container); // resize browser-window before layout?\n\n      if (this.resizeToPrefSize) {\n        var prefSize = this.htmlComp.prefSize(),\n            // we cannot simply set the pref. size of the component as window size,\n        // since the window \"chrome\" (window-border, -title and location bar)\n        // occupies some space. That's why we measure the difference between\n        // the current document size and the window size first.\n        myWindowSize = new Dimension(this.myWindow.outerWidth, this.myWindow.outerHeight),\n            myDocumentSize = new Dimension($myDocument.width(), $myDocument.height()),\n            windowChromeHoriz = myWindowSize.width - myDocumentSize.width,\n            windowChromeVert = myWindowSize.height - myDocumentSize.height;\n        this.myWindow.resizeTo(prefSize.width + windowChromeHoriz, prefSize.height + windowChromeVert);\n        this.resizeToPrefSize = false;\n      }\n\n      this.form.htmlComp.validateLayout(); // Must register some top-level keystroke- and mouse-handlers on popup-window\n      // We do the same thing here, as with the $entryPoint of the main window\n\n      this.session.keyStrokeManager.installTopLevelKeyStrokeHandlers(this.$container);\n      this.session.focusManager.installTopLevelMouseHandlers(this.$container);\n      scout.installGlobalMouseDownInterceptor(myDocument); // Attach event handlers on window\n\n      $(this.myWindow).on('unload', this._onUnload.bind(this)).on('resize', this._onResize.bind(this)); // Delegate uncaught JavaScript errors in the popup-window to the main-window\n\n      if (this.myWindow.opener) {\n        this.myWindow.onerror = this.myWindow.opener.onerror;\n      } // Finally set initialized flag to true, at this point the PopupWindow is fully initialized\n\n\n      this.initialized = true;\n      this.events.trigger('init');\n    } // Note: currently _onResize is only called when the window is resized, but not when the position of the window changes.\n    // if we need to do that in a later release we should take a look on the SO-post below:\n    // http://stackoverflow.com/questions/4319487/detecting-if-the-browser-window-is-moved-with-javascript\n\n  }, {\n    key: \"_onResize\",\n    value: function _onResize() {\n      var $myWindow = $(this.myWindow),\n          width = $myWindow.width(),\n          height = $myWindow.height(),\n          left = this.myWindow.screenX,\n          top = this.myWindow.screenY;\n      $.log.isDebugEnabled() && $.log.debug('popup-window resize: width=' + width + ' height=' + height + ' top=' + top + ' left=' + left);\n      this.form.storeCacheBounds(new Rectangle(left, top, width, height));\n      var windowSize = new Dimension($myWindow.width(), $myWindow.height());\n      this.htmlComp.setSize(windowSize);\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this.myWindow.closed;\n    }\n  }, {\n    key: \"one\",\n    value: function one(type, func) {\n      this.events.one(type, func);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.myWindow.close();\n    }\n  }, {\n    key: \"title\",\n    value: function title(_title) {\n      this.myWindow.document.title = _title;\n    }\n  }]);\n\n  return PopupWindow;\n}();\n\nexport { PopupWindow as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/PopupWindow.js"],"names":["Dimension","EventSupport","HtmlComponent","polyfills","Rectangle","scout","SingleLayout","$","PopupWindow","myWindow","form","session","events","initialized","$container","htmlComp","popupWindow","name","modelClass","log","isDebugEnabled","debug","id","destroyed","trigger","myDocument","document","$myWindow","$myDocument","install","prepareDOM","setLayout","height","render","resizeToPrefSize","prefSize","myWindowSize","outerWidth","outerHeight","myDocumentSize","width","windowChromeHoriz","windowChromeVert","resizeTo","validateLayout","keyStrokeManager","installTopLevelKeyStrokeHandlers","focusManager","installTopLevelMouseHandlers","installGlobalMouseDownInterceptor","on","_onUnload","bind","_onResize","opener","onerror","left","screenX","top","screenY","storeCacheBounds","windowSize","setSize","closed","type","func","one","close","title"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Dimension, EventSupport, HtmlComponent, polyfills, Rectangle, scout, SingleLayout} from '../index';\nimport $ from 'jquery';\n\nexport default class PopupWindow {\n\n  constructor(myWindow, form) { // use 'myWindow' in place of 'window' to prevent confusion with global window variable\n    this.myWindow = myWindow;\n    this.form = form;\n    this.session = form.session;\n    this.events = new EventSupport();\n    this.initialized = false;\n    this.$container = null;\n    this.htmlComp = null;\n\n    // link Form instance with this popupWindow instance\n    // this is required when form (and popup-window) is closed by the model\n    form.popupWindow = this;\n\n    // link Window instance with this popupWindow instance\n    // this is required when we want to check if a certain DOM element belongs\n    // to a popup window\n    myWindow.popupWindow = this;\n    myWindow.name = 'Scout popup-window ' + form.modelClass;\n  }\n\n  _onUnload() {\n    $.log.isDebugEnabled() && $.log.debug('stored form ID ' + this.form.id + ' to session storage');\n    if (this.form.destroyed) {\n      $.log.isDebugEnabled() && $.log.debug('form ID ' + this.form.id + ' is already destroyed - don\\'t trigger unload event');\n    } else {\n      this.events.trigger('popupWindowUnload', this);\n    }\n  }\n\n  _onReady() {\n    // set container (used as document-root from callers)\n    var myDocument = this.myWindow.document,\n      $myWindow = $(this.myWindow),\n      $myDocument = $(myDocument);\n\n    // Establish the link again, as Chrome removes this property after a page load.\n    // (page load is made by design in PopupBlockerHandler.openWindow)\n    this.myWindow.popupWindow = this;\n\n    // Install polyfills on new window\n    polyfills.install(this.myWindow);\n    scout.prepareDOM(myDocument);\n\n    this.$container = $('.scout', myDocument);\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(new SingleLayout());\n    this.$container.height($myWindow.height());\n    this.form.render(this.$container);\n\n    // resize browser-window before layout?\n    if (this.resizeToPrefSize) {\n      var prefSize = this.htmlComp.prefSize(),\n        // we cannot simply set the pref. size of the component as window size,\n        // since the window \"chrome\" (window-border, -title and location bar)\n        // occupies some space. That's why we measure the difference between\n        // the current document size and the window size first.\n        myWindowSize = new Dimension(this.myWindow.outerWidth, this.myWindow.outerHeight),\n        myDocumentSize = new Dimension($myDocument.width(), $myDocument.height()),\n        windowChromeHoriz = myWindowSize.width - myDocumentSize.width,\n        windowChromeVert = myWindowSize.height - myDocumentSize.height;\n\n      this.myWindow.resizeTo(prefSize.width + windowChromeHoriz, prefSize.height + windowChromeVert);\n      this.resizeToPrefSize = false;\n    }\n    this.form.htmlComp.validateLayout();\n\n    // Must register some top-level keystroke- and mouse-handlers on popup-window\n    // We do the same thing here, as with the $entryPoint of the main window\n    this.session.keyStrokeManager.installTopLevelKeyStrokeHandlers(this.$container);\n    this.session.focusManager.installTopLevelMouseHandlers(this.$container);\n    scout.installGlobalMouseDownInterceptor(myDocument);\n\n    // Attach event handlers on window\n    $(this.myWindow)\n      .on('unload', this._onUnload.bind(this))\n      .on('resize', this._onResize.bind(this));\n\n    // Delegate uncaught JavaScript errors in the popup-window to the main-window\n    if (this.myWindow.opener) {\n      this.myWindow.onerror = this.myWindow.opener.onerror;\n    }\n\n    // Finally set initialized flag to true, at this point the PopupWindow is fully initialized\n    this.initialized = true;\n    this.events.trigger('init');\n  }\n\n  // Note: currently _onResize is only called when the window is resized, but not when the position of the window changes.\n  // if we need to do that in a later release we should take a look on the SO-post below:\n  // http://stackoverflow.com/questions/4319487/detecting-if-the-browser-window-is-moved-with-javascript\n  _onResize() {\n    var $myWindow = $(this.myWindow),\n      width = $myWindow.width(),\n      height = $myWindow.height(),\n      left = this.myWindow.screenX,\n      top = this.myWindow.screenY;\n    $.log.isDebugEnabled() && $.log.debug('popup-window resize: width=' + width + ' height=' + height + ' top=' + top + ' left=' + left);\n\n    this.form.storeCacheBounds(new Rectangle(left, top, width, height));\n    var windowSize = new Dimension($myWindow.width(), $myWindow.height());\n    this.htmlComp.setSize(windowSize);\n  }\n\n  isClosed() {\n    return this.myWindow.closed;\n  }\n\n  one(type, func) {\n    this.events.one(type, func);\n  }\n\n  close() {\n    this.myWindow.close();\n  }\n\n  title(title) {\n    this.myWindow.document.title = title;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}