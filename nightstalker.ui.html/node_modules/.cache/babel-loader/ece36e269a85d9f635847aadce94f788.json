{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\n/*\n * A simple calculator similar to eval but safe in use.\n * Supports the following format:\n * group character ( )\n * digits 0-9\n * operators + - * /\n * decimal separator .\n * no grouping character\n * no whitespace\n */\nvar Calculator = /*#__PURE__*/function () {\n  function Calculator() {\n    _classCallCheck(this, Calculator);\n  }\n\n  _createClass(Calculator, [{\n    key: \"isFormula\",\n    value: function isFormula(input) {\n      return input.match(/^[\\d()+\\-*/.]+$/);\n    }\n  }, {\n    key: \"evalFormula\",\n    value: function evalFormula(input) {\n      this._tokens = input.split(/([\\d.]+|\\(|\\)|[+\\-*/])/).filter(function (e) {\n        return e.length !== 0;\n      });\n      return this._expr();\n    }\n  }, {\n    key: \"_next\",\n    value: function _next() {\n      if (this._tokens.length === 0) {\n        return undefined;\n      }\n\n      return this._tokens[0];\n    }\n  }, {\n    key: \"_consumeNext\",\n    value: function _consumeNext() {\n      var cur = this._tokens[0];\n      this._tokens = this._tokens.slice(1, this._tokens.length);\n      return cur;\n    }\n  }, {\n    key: \"_expr\",\n    value: function _expr() {\n      return this._sum();\n    } // a+b+...\n\n  }, {\n    key: \"_sum\",\n    value: function _sum() {\n      var v = this._prod();\n\n      while (this._next() === '+' || this._next() === '-') {\n        switch (this._consumeNext()) {\n          // NOSONAR\n          case '+':\n            v = v + this._prod();\n            break;\n\n          case '-':\n            v = v - this._prod();\n            break;\n        }\n      }\n\n      return v;\n    } // a*b*...\n\n  }, {\n    key: \"_prod\",\n    value: function _prod() {\n      var v = this._unary();\n\n      while (this._next() === '*' || this._next() === '/') {\n        switch (this._consumeNext()) {\n          // NOSONAR\n          case '*':\n            v = v * this._unary();\n            break;\n\n          case '/':\n            v = v / this._unary();\n            break;\n        }\n      }\n\n      return v;\n    } // [+-]123, [+-](a)\n\n  }, {\n    key: \"_unary\",\n    value: function _unary() {\n      var qualifier = 1;\n\n      if (this._next() === '+') {\n        this._consumeNext();\n      } else if (this._next() === '-') {\n        this._consumeNext();\n\n        qualifier = -1;\n      }\n\n      var v;\n\n      if ((v = this._group()) !== undefined) {\n        return qualifier * v;\n      } // must be num\n\n\n      v = this._consumeNext();\n      return qualifier * v;\n    } // (a)\n\n  }, {\n    key: \"_group\",\n    value: function _group() {\n      if (this._next() === '(') {\n        this._consumeNext();\n\n        var v = this._expr();\n\n        if (this._next() !== ')') {\n          throw 'missing closing bracket';\n        }\n\n        this._consumeNext();\n\n        return v;\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return Calculator;\n}();\n\nexport { Calculator as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/numberfield/Calculator.js"],"names":["Calculator","input","match","_tokens","split","filter","e","length","_expr","undefined","cur","slice","_sum","v","_prod","_next","_consumeNext","_unary","qualifier","_group"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n/*\n * A simple calculator similar to eval but safe in use.\n * Supports the following format:\n * group character ( )\n * digits 0-9\n * operators + - * /\n * decimal separator .\n * no grouping character\n * no whitespace\n */\nexport default class Calculator {\n\n  constructor() {\n  }\n\n  isFormula(input) {\n    return input.match(/^[\\d()+\\-*/.]+$/);\n  }\n\n  evalFormula(input) {\n    this._tokens = input\n      .split(/([\\d.]+|\\(|\\)|[+\\-*/])/)\n      .filter(function(e) {\n        return e.length !== 0;\n      });\n    return this._expr();\n  }\n\n  _next() {\n    if (this._tokens.length === 0) {\n      return undefined;\n    }\n    return this._tokens[0];\n  }\n\n  _consumeNext() {\n    var cur = this._tokens[0];\n    this._tokens = this._tokens.slice(1, this._tokens.length);\n    return cur;\n  }\n\n  _expr() {\n    return this._sum();\n  }\n\n  // a+b+...\n  _sum() {\n    var v = this._prod();\n    while (this._next() === '+' || this._next() === '-') {\n      switch (this._consumeNext()) { // NOSONAR\n        case '+':\n          v = v + this._prod();\n          break;\n        case '-':\n          v = v - this._prod();\n          break;\n      }\n    }\n    return v;\n  }\n\n  // a*b*...\n  _prod() {\n    var v = this._unary();\n    while (this._next() === '*' || this._next() === '/') {\n      switch (this._consumeNext()) { // NOSONAR\n        case '*':\n          v = v * this._unary();\n          break;\n        case '/':\n          v = v / this._unary();\n          break;\n      }\n    }\n    return v;\n  }\n\n  // [+-]123, [+-](a)\n  _unary() {\n    var qualifier = 1;\n    if (this._next() === '+') {\n      this._consumeNext();\n    } else if (this._next() === '-') {\n      this._consumeNext();\n      qualifier = -1;\n    }\n    var v;\n    if ((v = this._group()) !== undefined) {\n      return qualifier * v;\n    }\n    // must be num\n    v = this._consumeNext();\n    return qualifier * v;\n  }\n\n  // (a)\n  _group() {\n    if (this._next() === '(') {\n      this._consumeNext();\n      var v = this._expr();\n      if (this._next() !== ')') {\n        throw 'missing closing bracket';\n      }\n      this._consumeNext();\n      return v;\n    }\n    return undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}