{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension, graphics, Insets, Popup, Rectangle, scout } from '../index';\n\nvar PopupLayout = /*#__PURE__*/function (_AbstractLayout) {\n  _inherits(PopupLayout, _AbstractLayout);\n\n  var _super = _createSuper(PopupLayout);\n\n  function PopupLayout(popup) {\n    var _this;\n\n    _classCallCheck(this, PopupLayout);\n\n    _this = _super.call(this);\n    _this.popup = popup;\n    _this.doubleCalcPrefSize = true; // enables popups with a height which depends on the width (= popups with wrapping content)\n\n    _this.autoPosition = true;\n    _this.autoSize = true;\n    return _this;\n  }\n\n  _createClass(PopupLayout, [{\n    key: \"layout\",\n    value: function layout($container) {\n      if (this.popup.isOpeningAnimationRunning()) {\n        this.popup.$container.oneAnimationEnd(this.layout.bind(this, $container));\n        return;\n      }\n\n      if (this.popup.removalPending || this.popup.removing || !this.popup.rendered) {\n        return;\n      }\n\n      if (!this.autoSize) {\n        // Just layout the popup with the current size\n        this._setSize(this.popup.htmlComp.size({\n          exact: true\n        }));\n\n        return;\n      }\n\n      var htmlComp = this.popup.htmlComp; // Read current bounds before calling pref size, because pref size may change position (_calcMaxSize)\n\n      var currentBounds = graphics.bounds(htmlComp.$comp);\n      var prefSize = this.preferredLayoutSize($container, {\n        exact: true,\n        onlyWidth: this.doubleCalcPrefSize\n      });\n      prefSize = this.adjustSize(prefSize);\n\n      if (this.doubleCalcPrefSize) {\n        prefSize = this.preferredLayoutSize($container, {\n          exact: true,\n          widthHint: prefSize.width - htmlComp.insets().horizontal()\n        });\n        prefSize = this.adjustSize(prefSize);\n      }\n\n      this._setSize(prefSize);\n\n      if (htmlComp.layouted && this.popup.animateResize) {\n        this._resizeAnimated(currentBounds, prefSize);\n      }\n    }\n  }, {\n    key: \"_resizeAnimated\",\n    value: function _resizeAnimated(currentBounds, prefSize) {\n      this._position();\n\n      var htmlComp = this.popup.htmlComp;\n      var prefPosition = htmlComp.$comp.position(); // Preferred size are exact, current bounds are rounded -> round preferred size up to make compare work\n\n      var prefBounds = new Rectangle(prefPosition.left, prefPosition.top, Math.ceil(prefSize.width), Math.ceil(prefSize.height));\n\n      if (currentBounds.equals(prefBounds)) {\n        // Bounds did not change -> do nothing\n        return;\n      }\n\n      htmlComp.$comp.stop(true).cssHeight(currentBounds.height).cssWidth(currentBounds.width).cssLeft(currentBounds.x).cssTop(currentBounds.y).animate({\n        height: prefSize.height,\n        width: prefSize.width,\n        left: prefPosition.left,\n        top: prefPosition.top\n      }, {\n        complete: function () {\n          if (!this.popup.rendered) {\n            return;\n          } // Ensure the arrow is at the correct position after the animation\n\n\n          this._position();\n        }.bind(this)\n      });\n    }\n  }, {\n    key: \"_position\",\n    value: function _position(switchIfNecessary) {\n      if (this.autoPosition) {\n        this.popup.position(switchIfNecessary);\n      }\n    }\n  }, {\n    key: \"_setSize\",\n    value: function _setSize(prefSize) {\n      graphics.setSize(this.popup.htmlComp.$comp, prefSize);\n    }\n  }, {\n    key: \"adjustSize\",\n    value: function adjustSize(prefSize) {\n      // Consider CSS min/max rules\n      this.popup.htmlComp._adjustPrefSizeWithMinMaxSize(prefSize); // Consider window boundaries\n\n\n      if (this.popup.boundToAnchor && (this.popup.anchorBounds || this.popup.$anchor)) {\n        return this._adjustSizeWithAnchor(prefSize);\n      }\n\n      return this._adjustSize(prefSize);\n    }\n  }, {\n    key: \"_adjustSize\",\n    value: function _adjustSize(prefSize) {\n      var popupSize = new Dimension(),\n          maxSize = this._calcMaxSize(); // Ensure the popup is not larger than max size\n\n\n      popupSize.width = Math.min(maxSize.width, prefSize.width);\n      popupSize.height = Math.min(maxSize.height, prefSize.height);\n      return popupSize;\n    }\n    /**\n     * Considers window boundaries.\n     *\n     * @returns {Dimension}\n     */\n\n  }, {\n    key: \"_calcMaxSize\",\n    value: function _calcMaxSize() {\n      if (this.popup.repositionEnabled) {\n        // Position the popup at the desired location before doing any calculations to consider the preferred bounds\n        this._position(false);\n      }\n\n      var maxWidth,\n          maxHeight,\n          htmlComp = this.popup.htmlComp,\n          windowPaddingX = this.popup.windowPaddingX,\n          windowPaddingY = this.popup.windowPaddingY,\n          popupMargins = htmlComp.margins(),\n          windowSize = this.popup.getWindowSize();\n      maxWidth = windowSize.width - popupMargins.horizontal() - windowPaddingX;\n      maxHeight = windowSize.height - popupMargins.vertical() - windowPaddingY;\n      return new Dimension(maxWidth, maxHeight);\n    }\n  }, {\n    key: \"_adjustSizeWithAnchor\",\n    value: function _adjustSizeWithAnchor(prefSize) {\n      var popupSize = new Dimension(),\n          maxSize = this._calcMaxSizeAroundAnchor(),\n          windowSize = this._calcMaxSize(),\n          Alignment = Popup.Alignment,\n          horizontalAlignment = this.popup.horizontalAlignment,\n          verticalAlignment = this.popup.verticalAlignment; // Compared to $comp.height() and width(), $comp.offset() may return fractional values. This means the maxSizes may be fractional as well.\n      // The popup sizes must be integers, otherwise reading the height/width later on might result in wrong calculations.\n      // This is especially important for the position calculation.\n      // Popup.position() uses popup.overlap(), if the popup height is lets say 90.5, overlapY would be 0.5 because height returned 91\n      // -> the popup switches its direction unnecessarily\n\n\n      maxSize = maxSize.floor(); // Decide whether the prefSize can be used or the popup needs to be shrinked so that it fits into the viewport\n      // The decision is based on the preferred opening direction\n      // Example: The popup would like to be opened leftedge and bottom\n      // If there is enough space on the right and on the bottom -> pref size is used\n      // If there is not enough space on the right it checks whether there is enough space on the left\n      // If there is enough space on the left -> use preferred width -> The opening direction will be switched using position() at the end\n      // If there is not enough space on the left as well, the greater width is used -> Position() will either switch the direction or not, depending on the size of the popup\n      // The same happens for y direction if there is not enough space on the bottom\n\n      popupSize.width = prefSize.width;\n\n      if (this.popup.trimWidth) {\n        if (this.popup.horizontalSwitch) {\n          if (prefSize.width > maxSize.right && prefSize.width > maxSize.left) {\n            popupSize.width = Math.max(maxSize.right, maxSize.left);\n          }\n        } else {\n          if (horizontalAlignment === Alignment.RIGHT) {\n            popupSize.width = Math.min(popupSize.width, maxSize.right);\n          } else if (horizontalAlignment === Alignment.LEFT) {\n            popupSize.width = Math.min(popupSize.width, maxSize.left);\n          } else {\n            popupSize.width = Math.min(popupSize.width, windowSize.width);\n          }\n        }\n      }\n\n      popupSize.height = prefSize.height;\n\n      if (this.popup.trimHeight) {\n        if (this.popup.verticalSwitch) {\n          if (prefSize.height > maxSize.bottom && prefSize.height > maxSize.top) {\n            popupSize.height = Math.max(maxSize.bottom, maxSize.top);\n          }\n        } else {\n          if (verticalAlignment === Alignment.BOTTOM) {\n            popupSize.height = Math.min(popupSize.height, maxSize.bottom);\n          } else if (verticalAlignment === Alignment.TOP) {\n            popupSize.height = Math.min(popupSize.height, maxSize.top);\n          } else {\n            popupSize.height = Math.min(popupSize.height, windowSize.height);\n          }\n        }\n      } // On CENTER alignment, the anchor must ne be considered. Instead make sure the popup does not exceed window boundaries (same as in adjustSize)\n\n\n      if (verticalAlignment === Alignment.CENTER || horizontalAlignment === Alignment.CENTER) {\n        if (horizontalAlignment === Alignment.CENTER) {\n          popupSize.width = Math.min(windowSize.width, prefSize.width);\n        }\n\n        if (verticalAlignment === Alignment.CENTER) {\n          popupSize.height = Math.min(windowSize.height, prefSize.height);\n        }\n      }\n\n      return popupSize;\n    }\n    /**\n     * Considers window boundaries.\n     *\n     * @returns {Insets}\n     */\n\n  }, {\n    key: \"_calcMaxSizeAroundAnchor\",\n    value: function _calcMaxSizeAroundAnchor() {\n      if (this.popup.repositionEnabled) {\n        // Position the popup at the desired location before doing any calculations because positioning adds CSS classes which might change margins\n        this._position(false);\n      }\n\n      var maxWidthLeft,\n          maxWidthRight,\n          maxHeightDown,\n          maxHeightUp,\n          htmlComp = this.popup.htmlComp,\n          windowPaddingX = this.popup.windowPaddingX,\n          windowPaddingY = this.popup.windowPaddingY,\n          popupMargins = htmlComp.margins(),\n          anchorBounds = this.popup.getAnchorBounds(),\n          windowSize = this.popup.getWindowSize(),\n          horizontalAlignment = this.popup.horizontalAlignment,\n          verticalAlignment = this.popup.verticalAlignment,\n          Alignment = Popup.Alignment;\n\n      if (scout.isOneOf(horizontalAlignment, Alignment.LEFTEDGE, Alignment.RIGHTEDGE)) {\n        maxWidthRight = windowSize.width - anchorBounds.x - popupMargins.horizontal() - windowPaddingX;\n        maxWidthLeft = anchorBounds.right() - popupMargins.horizontal() - windowPaddingX;\n      } else {\n        // LEFT or RIGHT\n        maxWidthRight = windowSize.width - anchorBounds.right() - popupMargins.horizontal() - windowPaddingX;\n        maxWidthLeft = anchorBounds.x - popupMargins.horizontal() - windowPaddingX;\n      }\n\n      if (scout.isOneOf(verticalAlignment, Alignment.BOTTOMEDGE, Alignment.TOPEDGE)) {\n        maxHeightDown = windowSize.height - anchorBounds.y - popupMargins.vertical() - windowPaddingY;\n        maxHeightUp = anchorBounds.bottom() - popupMargins.vertical() - windowPaddingY;\n      } else {\n        // BOTTOM or TOP\n        maxHeightDown = windowSize.height - anchorBounds.bottom() - popupMargins.vertical() - windowPaddingY;\n        maxHeightUp = anchorBounds.y - popupMargins.vertical() - windowPaddingY;\n      }\n\n      return new Insets(maxHeightUp, maxWidthRight, maxHeightDown, maxWidthLeft);\n    }\n  }]);\n\n  return PopupLayout;\n}(AbstractLayout);\n\nexport { PopupLayout as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/popup/PopupLayout.js"],"names":["AbstractLayout","Dimension","graphics","Insets","Popup","Rectangle","scout","PopupLayout","popup","doubleCalcPrefSize","autoPosition","autoSize","$container","isOpeningAnimationRunning","oneAnimationEnd","layout","bind","removalPending","removing","rendered","_setSize","htmlComp","size","exact","currentBounds","bounds","$comp","prefSize","preferredLayoutSize","onlyWidth","adjustSize","widthHint","width","insets","horizontal","layouted","animateResize","_resizeAnimated","_position","prefPosition","position","prefBounds","left","top","Math","ceil","height","equals","stop","cssHeight","cssWidth","cssLeft","x","cssTop","y","animate","complete","switchIfNecessary","setSize","_adjustPrefSizeWithMinMaxSize","boundToAnchor","anchorBounds","$anchor","_adjustSizeWithAnchor","_adjustSize","popupSize","maxSize","_calcMaxSize","min","repositionEnabled","maxWidth","maxHeight","windowPaddingX","windowPaddingY","popupMargins","margins","windowSize","getWindowSize","vertical","_calcMaxSizeAroundAnchor","Alignment","horizontalAlignment","verticalAlignment","floor","trimWidth","horizontalSwitch","right","max","RIGHT","LEFT","trimHeight","verticalSwitch","bottom","BOTTOM","TOP","CENTER","maxWidthLeft","maxWidthRight","maxHeightDown","maxHeightUp","getAnchorBounds","isOneOf","LEFTEDGE","RIGHTEDGE","BOTTOMEDGE","TOPEDGE"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension, graphics, Insets, Popup, Rectangle, scout} from '../index';\n\nexport default class PopupLayout extends AbstractLayout {\n\n  constructor(popup) {\n    super();\n    this.popup = popup;\n    this.doubleCalcPrefSize = true; // enables popups with a height which depends on the width (= popups with wrapping content)\n    this.autoPosition = true;\n    this.autoSize = true;\n  }\n\n  layout($container) {\n    if (this.popup.isOpeningAnimationRunning()) {\n      this.popup.$container.oneAnimationEnd(this.layout.bind(this, $container));\n      return;\n    }\n    if (this.popup.removalPending || this.popup.removing || !this.popup.rendered) {\n      return;\n    }\n    if (!this.autoSize) {\n      // Just layout the popup with the current size\n      this._setSize(this.popup.htmlComp.size({exact: true}));\n      return;\n    }\n\n    var htmlComp = this.popup.htmlComp;\n    // Read current bounds before calling pref size, because pref size may change position (_calcMaxSize)\n    var currentBounds = graphics.bounds(htmlComp.$comp);\n    var prefSize = this.preferredLayoutSize($container, {\n      exact: true,\n      onlyWidth: this.doubleCalcPrefSize\n    });\n\n    prefSize = this.adjustSize(prefSize);\n    if (this.doubleCalcPrefSize) {\n      prefSize = this.preferredLayoutSize($container, {\n        exact: true,\n        widthHint: prefSize.width - htmlComp.insets().horizontal()\n      });\n      prefSize = this.adjustSize(prefSize);\n    }\n\n    this._setSize(prefSize);\n\n    if (htmlComp.layouted && this.popup.animateResize) {\n      this._resizeAnimated(currentBounds, prefSize);\n    }\n  }\n\n  _resizeAnimated(currentBounds, prefSize) {\n    this._position();\n    var htmlComp = this.popup.htmlComp;\n    var prefPosition = htmlComp.$comp.position();\n\n    // Preferred size are exact, current bounds are rounded -> round preferred size up to make compare work\n    var prefBounds = new Rectangle(prefPosition.left, prefPosition.top, Math.ceil(prefSize.width), Math.ceil(prefSize.height));\n    if (currentBounds.equals(prefBounds)) {\n      // Bounds did not change -> do nothing\n      return;\n    }\n    htmlComp.$comp\n      .stop(true)\n      .cssHeight(currentBounds.height)\n      .cssWidth(currentBounds.width)\n      .cssLeft(currentBounds.x)\n      .cssTop(currentBounds.y)\n      .animate({\n        height: prefSize.height,\n        width: prefSize.width,\n        left: prefPosition.left,\n        top: prefPosition.top\n      }, {\n        complete: function() {\n          if (!this.popup.rendered) {\n            return;\n          }\n          // Ensure the arrow is at the correct position after the animation\n          this._position();\n        }.bind(this)\n      });\n  }\n\n  _position(switchIfNecessary) {\n    if (this.autoPosition) {\n      this.popup.position(switchIfNecessary);\n    }\n  }\n\n  _setSize(prefSize) {\n    graphics.setSize(this.popup.htmlComp.$comp, prefSize);\n  }\n\n  adjustSize(prefSize) {\n    // Consider CSS min/max rules\n    this.popup.htmlComp._adjustPrefSizeWithMinMaxSize(prefSize);\n\n    // Consider window boundaries\n    if (this.popup.boundToAnchor && (this.popup.anchorBounds || this.popup.$anchor)) {\n      return this._adjustSizeWithAnchor(prefSize);\n    }\n    return this._adjustSize(prefSize);\n  }\n\n  _adjustSize(prefSize) {\n    var popupSize = new Dimension(),\n      maxSize = this._calcMaxSize();\n\n    // Ensure the popup is not larger than max size\n    popupSize.width = Math.min(maxSize.width, prefSize.width);\n    popupSize.height = Math.min(maxSize.height, prefSize.height);\n\n    return popupSize;\n  }\n\n  /**\n   * Considers window boundaries.\n   *\n   * @returns {Dimension}\n   */\n  _calcMaxSize() {\n    if (this.popup.repositionEnabled) {\n      // Position the popup at the desired location before doing any calculations to consider the preferred bounds\n      this._position(false);\n    }\n\n    var maxWidth, maxHeight,\n      htmlComp = this.popup.htmlComp,\n      windowPaddingX = this.popup.windowPaddingX,\n      windowPaddingY = this.popup.windowPaddingY,\n      popupMargins = htmlComp.margins(),\n      windowSize = this.popup.getWindowSize();\n\n    maxWidth = (windowSize.width - popupMargins.horizontal() - windowPaddingX);\n    maxHeight = (windowSize.height - popupMargins.vertical() - windowPaddingY);\n\n    return new Dimension(maxWidth, maxHeight);\n  }\n\n  _adjustSizeWithAnchor(prefSize) {\n    var popupSize = new Dimension(),\n      maxSize = this._calcMaxSizeAroundAnchor(),\n      windowSize = this._calcMaxSize(),\n      Alignment = Popup.Alignment,\n      horizontalAlignment = this.popup.horizontalAlignment,\n      verticalAlignment = this.popup.verticalAlignment;\n\n    // Compared to $comp.height() and width(), $comp.offset() may return fractional values. This means the maxSizes may be fractional as well.\n    // The popup sizes must be integers, otherwise reading the height/width later on might result in wrong calculations.\n    // This is especially important for the position calculation.\n    // Popup.position() uses popup.overlap(), if the popup height is lets say 90.5, overlapY would be 0.5 because height returned 91\n    // -> the popup switches its direction unnecessarily\n    maxSize = maxSize.floor();\n\n    // Decide whether the prefSize can be used or the popup needs to be shrinked so that it fits into the viewport\n    // The decision is based on the preferred opening direction\n    // Example: The popup would like to be opened leftedge and bottom\n    // If there is enough space on the right and on the bottom -> pref size is used\n    // If there is not enough space on the right it checks whether there is enough space on the left\n    // If there is enough space on the left -> use preferred width -> The opening direction will be switched using position() at the end\n    // If there is not enough space on the left as well, the greater width is used -> Position() will either switch the direction or not, depending on the size of the popup\n    // The same happens for y direction if there is not enough space on the bottom\n    popupSize.width = prefSize.width;\n    if (this.popup.trimWidth) {\n      if (this.popup.horizontalSwitch) {\n        if (prefSize.width > maxSize.right && prefSize.width > maxSize.left) {\n          popupSize.width = Math.max(maxSize.right, maxSize.left);\n        }\n      } else {\n        if (horizontalAlignment === Alignment.RIGHT) {\n          popupSize.width = Math.min(popupSize.width, maxSize.right);\n        } else if (horizontalAlignment === Alignment.LEFT) {\n          popupSize.width = Math.min(popupSize.width, maxSize.left);\n        } else {\n          popupSize.width = Math.min(popupSize.width, windowSize.width);\n        }\n      }\n    }\n    popupSize.height = prefSize.height;\n    if (this.popup.trimHeight) {\n      if (this.popup.verticalSwitch) {\n        if (prefSize.height > maxSize.bottom && prefSize.height > maxSize.top) {\n          popupSize.height = Math.max(maxSize.bottom, maxSize.top);\n        }\n      } else {\n        if (verticalAlignment === Alignment.BOTTOM) {\n          popupSize.height = Math.min(popupSize.height, maxSize.bottom);\n        } else if (verticalAlignment === Alignment.TOP) {\n          popupSize.height = Math.min(popupSize.height, maxSize.top);\n        } else {\n          popupSize.height = Math.min(popupSize.height, windowSize.height);\n        }\n      }\n    }\n\n    // On CENTER alignment, the anchor must ne be considered. Instead make sure the popup does not exceed window boundaries (same as in adjustSize)\n    if (verticalAlignment === Alignment.CENTER || horizontalAlignment === Alignment.CENTER) {\n      if (horizontalAlignment === Alignment.CENTER) {\n        popupSize.width = Math.min(windowSize.width, prefSize.width);\n      }\n      if (verticalAlignment === Alignment.CENTER) {\n        popupSize.height = Math.min(windowSize.height, prefSize.height);\n      }\n    }\n\n    return popupSize;\n  }\n\n  /**\n   * Considers window boundaries.\n   *\n   * @returns {Insets}\n   */\n  _calcMaxSizeAroundAnchor() {\n    if (this.popup.repositionEnabled) {\n      // Position the popup at the desired location before doing any calculations because positioning adds CSS classes which might change margins\n      this._position(false);\n    }\n\n    var maxWidthLeft, maxWidthRight, maxHeightDown, maxHeightUp,\n      htmlComp = this.popup.htmlComp,\n      windowPaddingX = this.popup.windowPaddingX,\n      windowPaddingY = this.popup.windowPaddingY,\n      popupMargins = htmlComp.margins(),\n      anchorBounds = this.popup.getAnchorBounds(),\n      windowSize = this.popup.getWindowSize(),\n      horizontalAlignment = this.popup.horizontalAlignment,\n      verticalAlignment = this.popup.verticalAlignment,\n      Alignment = Popup.Alignment;\n\n    if (scout.isOneOf(horizontalAlignment, Alignment.LEFTEDGE, Alignment.RIGHTEDGE)) {\n      maxWidthRight = windowSize.width - anchorBounds.x - popupMargins.horizontal() - windowPaddingX;\n      maxWidthLeft = anchorBounds.right() - popupMargins.horizontal() - windowPaddingX;\n    } else { // LEFT or RIGHT\n      maxWidthRight = windowSize.width - anchorBounds.right() - popupMargins.horizontal() - windowPaddingX;\n      maxWidthLeft = anchorBounds.x - popupMargins.horizontal() - windowPaddingX;\n    }\n\n    if (scout.isOneOf(verticalAlignment, Alignment.BOTTOMEDGE, Alignment.TOPEDGE)) {\n      maxHeightDown = windowSize.height - anchorBounds.y - popupMargins.vertical() - windowPaddingY;\n      maxHeightUp = anchorBounds.bottom() - popupMargins.vertical() - windowPaddingY;\n    } else { // BOTTOM or TOP\n      maxHeightDown = windowSize.height - anchorBounds.bottom() - popupMargins.vertical() - windowPaddingY;\n      maxHeightUp = anchorBounds.y - popupMargins.vertical() - windowPaddingY;\n    }\n\n    return new Insets(maxHeightUp, maxWidthRight, maxHeightDown, maxWidthLeft);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}