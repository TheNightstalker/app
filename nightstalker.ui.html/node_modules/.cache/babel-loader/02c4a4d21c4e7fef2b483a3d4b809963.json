{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractTreeNavigationKeyStroke, keys } from '../../index';\n\nvar TreeExpandOrDrillDownKeyStroke = /*#__PURE__*/function (_AbstractTreeNavigati) {\n  _inherits(TreeExpandOrDrillDownKeyStroke, _AbstractTreeNavigati);\n\n  var _super = _createSuper(TreeExpandOrDrillDownKeyStroke);\n\n  function TreeExpandOrDrillDownKeyStroke(tree, modifierBitMask) {\n    var _this;\n\n    _classCallCheck(this, TreeExpandOrDrillDownKeyStroke);\n\n    _this = _super.call(this, tree, modifierBitMask);\n    _this.which = [keys.ADD];\n    _this.renderingHints.text = '+';\n\n    _this.renderingHints.$drawingArea = function ($drawingArea, event) {\n      var currentNode = event._treeCurrentNode;\n\n      if (this.isNodeExpandable(currentNode)) {\n        return currentNode.$node;\n      } else if (currentNode.childNodes.length > 0) {\n        return currentNode.childNodes[0].$node;\n      }\n    }.bind(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(TreeExpandOrDrillDownKeyStroke, [{\n    key: \"_accept\",\n    value: function _accept(event) {\n      var accepted = _get(_getPrototypeOf(TreeExpandOrDrillDownKeyStroke.prototype), \"_accept\", this).call(this, event);\n\n      var currentNode = event._treeCurrentNode;\n      return accepted && currentNode && (this.isNodeExpandable(currentNode) || currentNode.childNodes.length > 0);\n    }\n  }, {\n    key: \"isNodeExpandable\",\n    value: function isNodeExpandable(node) {\n      return !node.expanded && !node.leaf;\n    }\n  }, {\n    key: \"handle\",\n    value: function handle(event) {\n      var currentNode = event._treeCurrentNode;\n\n      if (this.isNodeExpandable(currentNode)) {\n        this.field.expandNode(currentNode, {\n          lazy: false // always show all nodes on node double click\n\n        });\n      } else {\n        var visibleChildNodes = currentNode.childNodes.filter(function (node) {\n          // Filter using isFilterAccepted does not work because node.filterAccepted is wrong for visible child nodes of a lazy expanded node\n          return this.field.visibleNodesFlat.indexOf(node) > -1;\n        }, this);\n\n        if (visibleChildNodes.length > 0) {\n          this.selectNodesAndReveal(visibleChildNodes[0], true);\n        }\n      }\n    }\n  }]);\n\n  return TreeExpandOrDrillDownKeyStroke;\n}(AbstractTreeNavigationKeyStroke);\n\nexport { TreeExpandOrDrillDownKeyStroke as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/tree/keystrokes/TreeExpandOrDrillDownKeyStroke.js"],"names":["AbstractTreeNavigationKeyStroke","keys","TreeExpandOrDrillDownKeyStroke","tree","modifierBitMask","which","ADD","renderingHints","text","$drawingArea","event","currentNode","_treeCurrentNode","isNodeExpandable","$node","childNodes","length","bind","accepted","node","expanded","leaf","field","expandNode","lazy","visibleChildNodes","filter","visibleNodesFlat","indexOf","selectNodesAndReveal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,+BAAR,EAAyCC,IAAzC,QAAoD,aAApD;;IAEqBC,8B;;;;;AAEnB,0CAAYC,IAAZ,EAAkBC,eAAlB,EAAmC;AAAA;;AAAA;;AACjC,8BAAMD,IAAN,EAAYC,eAAZ;AACA,UAAKC,KAAL,GAAa,CAACJ,IAAI,CAACK,GAAN,CAAb;AACA,UAAKC,cAAL,CAAoBC,IAApB,GAA2B,GAA3B;;AACA,UAAKD,cAAL,CAAoBE,YAApB,GAAmC,UAASA,YAAT,EAAuBC,KAAvB,EAA8B;AAC/D,UAAIC,WAAW,GAAGD,KAAK,CAACE,gBAAxB;;AACA,UAAI,KAAKC,gBAAL,CAAsBF,WAAtB,CAAJ,EAAwC;AACtC,eAAOA,WAAW,CAACG,KAAnB;AACD,OAFD,MAEO,IAAIH,WAAW,CAACI,UAAZ,CAAuBC,MAAvB,GAAgC,CAApC,EAAuC;AAC5C,eAAOL,WAAW,CAACI,UAAZ,CAAuB,CAAvB,EAA0BD,KAAjC;AACD;AACF,KAPkC,CAOjCG,IAPiC,+BAAnC;;AAJiC;AAYlC;;;;4BAEOP,K,EAAO;AACb,UAAIQ,QAAQ,+FAAiBR,KAAjB,CAAZ;;AACA,UAAIC,WAAW,GAAGD,KAAK,CAACE,gBAAxB;AACA,aAAOM,QAAQ,IAAIP,WAAZ,KAA4B,KAAKE,gBAAL,CAAsBF,WAAtB,KAAsCA,WAAW,CAACI,UAAZ,CAAuBC,MAAvB,GAAgC,CAAlG,CAAP;AACD;;;qCAEgBG,I,EAAM;AACrB,aAAO,CAACA,IAAI,CAACC,QAAN,IAAkB,CAACD,IAAI,CAACE,IAA/B;AACD;;;2BAEMX,K,EAAO;AACZ,UAAIC,WAAW,GAAGD,KAAK,CAACE,gBAAxB;;AACA,UAAI,KAAKC,gBAAL,CAAsBF,WAAtB,CAAJ,EAAwC;AACtC,aAAKW,KAAL,CAAWC,UAAX,CAAsBZ,WAAtB,EAAmC;AACjCa,UAAAA,IAAI,EAAE,KAD2B,CACrB;;AADqB,SAAnC;AAGD,OAJD,MAIO;AACL,YAAIC,iBAAiB,GAAGd,WAAW,CAACI,UAAZ,CAAuBW,MAAvB,CAA8B,UAASP,IAAT,EAAe;AACnE;AACA,iBAAO,KAAKG,KAAL,CAAWK,gBAAX,CAA4BC,OAA5B,CAAoCT,IAApC,IAA4C,CAAC,CAApD;AACD,SAHuB,EAGrB,IAHqB,CAAxB;;AAIA,YAAIM,iBAAiB,CAACT,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,eAAKa,oBAAL,CAA0BJ,iBAAiB,CAAC,CAAD,CAA3C,EAAgD,IAAhD;AACD;AACF;AACF;;;;EAzCyDzB,+B;;SAAvCE,8B","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractTreeNavigationKeyStroke, keys} from '../../index';\n\nexport default class TreeExpandOrDrillDownKeyStroke extends AbstractTreeNavigationKeyStroke {\n\n  constructor(tree, modifierBitMask) {\n    super(tree, modifierBitMask);\n    this.which = [keys.ADD];\n    this.renderingHints.text = '+';\n    this.renderingHints.$drawingArea = function($drawingArea, event) {\n      var currentNode = event._treeCurrentNode;\n      if (this.isNodeExpandable(currentNode)) {\n        return currentNode.$node;\n      } else if (currentNode.childNodes.length > 0) {\n        return currentNode.childNodes[0].$node;\n      }\n    }.bind(this);\n  }\n\n  _accept(event) {\n    var accepted = super._accept(event);\n    var currentNode = event._treeCurrentNode;\n    return accepted && currentNode && (this.isNodeExpandable(currentNode) || currentNode.childNodes.length > 0);\n  }\n\n  isNodeExpandable(node) {\n    return !node.expanded && !node.leaf;\n  }\n\n  handle(event) {\n    var currentNode = event._treeCurrentNode;\n    if (this.isNodeExpandable(currentNode)) {\n      this.field.expandNode(currentNode, {\n        lazy: false // always show all nodes on node double click\n      });\n    } else {\n      var visibleChildNodes = currentNode.childNodes.filter(function(node) {\n        // Filter using isFilterAccepted does not work because node.filterAccepted is wrong for visible child nodes of a lazy expanded node\n        return this.field.visibleNodesFlat.indexOf(node) > -1;\n      }, this);\n      if (visibleChildNodes.length > 0) {\n        this.selectNodesAndReveal(visibleChildNodes[0], true);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}