{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Device, scout } from '../index';\nimport $ from 'jquery';\n/**\n * Button utility class for a set of buttons, where each button has an option value.\n *\n * Constructor arguments:\n *\n * @param $parent\n *          required\n * @param onClickHandler\n *          optional, global onClickHandler to attach to each button without a specific clickHandler\n */\n\nvar BoxButtons = /*#__PURE__*/function () {\n  function BoxButtons($parent, onClickHandler) {\n    _classCallCheck(this, BoxButtons);\n\n    if (!$parent) {\n      throw new Error('Missing $parent');\n    }\n\n    $parent.addClass('box-buttons');\n    this._$parent = $parent;\n    this._onClickHandler = onClickHandler;\n    this._$buttons = [];\n  }\n  /**\n   * @param opts\n   *          [text]     required,  text of button to add\n   *          [tabIndex] optional,  tabindex to assign (default '0')\n   *          [enabled]  optional,  if button should be enabled or not (default true)\n   *          [onClick]  optional,  function to be executed when button is clicked.\n   *                                This function does _not_ have to check by itself if the button is\n   *                                enabled. If this argument is omitted, the global onClickHandler is\n   *                                used (see constructor).\n   *          [needsClick] optional true or false, default is false. This is a hint for the fastclick\n   *                                library. It sets an additional CSS class on the DIV element of the\n   *                                button. This class prevents fastclick from messing with click events\n   *                                which are sometimes required to programatically trigger an action on\n   *                                a HTML element such as the input type=file element.\n   *          [option]   optional,  a string that is assigned to be button and is passed\n   *                                to the global onClickHandler as an argument.\n   */\n\n\n  _createClass(BoxButtons, [{\n    key: \"addButton\",\n    value: function addButton(opts) {\n      opts = opts || {};\n\n      var $button = this._$parent.appendDiv().text(opts.text).addClass('box-button').unfocusable().setEnabled(scout.nvl(opts.enabled, true));\n\n      if (opts.needsClick) {\n        $button.addClass('needsclick');\n      }\n\n      if (!Device.get().supportsOnlyTouch()) {\n        $button.attr('tabindex', opts.tabIndex || '0');\n      }\n\n      if (opts.onClick) {\n        var onClick = opts.onClick;\n        $button.on('click', function (event) {\n          if ($.suppressEventIfDisabled(event)) {\n            return;\n          }\n\n          onClick(event);\n        });\n      } else if (this._onClickHandler) {\n        $button.on('click', this._onClick.bind(this));\n      }\n\n      $button.data('buttonOption', opts.option);\n\n      this._$buttons.push($button);\n\n      return $button;\n    }\n  }, {\n    key: \"_onClick\",\n    value: function _onClick(event) {\n      var $button = $(event.target);\n\n      if ($.suppressEventIfDisabled(event, $button)) {\n        return;\n      }\n\n      this._onClickHandler(event, $button.data('buttonOption'));\n    }\n  }, {\n    key: \"updateButtonWidths\",\n    value: function updateButtonWidths(availableWidth) {\n      // Find all visible buttons\n      var $visibleButtons = [];\n\n      this._$buttons.forEach(function ($button) {\n        if ($button.isVisible()) {\n          $visibleButtons.push($button);\n        }\n      });\n\n      var hasVisibleButtons = $visibleButtons.length > 0;\n\n      this._$parent.toggleClass('empty', !hasVisibleButtons); // Manually calculate equal width fore each button, adding remaining pixels to last button.\n      // (We don't use CSS percentage values, because sometimes browser calculations lead to wrong results.)\n\n\n      availableWidth = availableWidth || this._$parent.width();\n      var w = Math.floor(availableWidth / $visibleButtons.length);\n      $visibleButtons.forEach(function ($button, index) {\n        if (index === $visibleButtons.length - 1) {\n          w = availableWidth;\n        } else {\n          availableWidth -= w;\n        }\n\n        $button.outerWidth(w);\n      });\n    }\n  }, {\n    key: \"buttonCount\",\n    value: function buttonCount() {\n      return this._$buttons.length;\n    }\n  }]);\n\n  return BoxButtons;\n}();\n\nexport { BoxButtons as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/boxbuttons/BoxButtons.js"],"names":["Device","scout","$","BoxButtons","$parent","onClickHandler","Error","addClass","_$parent","_onClickHandler","_$buttons","opts","$button","appendDiv","text","unfocusable","setEnabled","nvl","enabled","needsClick","get","supportsOnlyTouch","attr","tabIndex","onClick","on","event","suppressEventIfDisabled","_onClick","bind","data","option","push","target","availableWidth","$visibleButtons","forEach","isVisible","hasVisibleButtons","length","toggleClass","width","w","Math","floor","index","outerWidth"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Device, scout} from '../index';\nimport $ from 'jquery';\n\n/**\n * Button utility class for a set of buttons, where each button has an option value.\n *\n * Constructor arguments:\n *\n * @param $parent\n *          required\n * @param onClickHandler\n *          optional, global onClickHandler to attach to each button without a specific clickHandler\n */\nexport default class BoxButtons {\n\n  constructor($parent, onClickHandler) {\n    if (!$parent) {\n      throw new Error('Missing $parent');\n    }\n    $parent.addClass('box-buttons');\n\n    this._$parent = $parent;\n    this._onClickHandler = onClickHandler;\n\n    this._$buttons = [];\n  }\n\n  /**\n   * @param opts\n   *          [text]     required,  text of button to add\n   *          [tabIndex] optional,  tabindex to assign (default '0')\n   *          [enabled]  optional,  if button should be enabled or not (default true)\n   *          [onClick]  optional,  function to be executed when button is clicked.\n   *                                This function does _not_ have to check by itself if the button is\n   *                                enabled. If this argument is omitted, the global onClickHandler is\n   *                                used (see constructor).\n   *          [needsClick] optional true or false, default is false. This is a hint for the fastclick\n   *                                library. It sets an additional CSS class on the DIV element of the\n   *                                button. This class prevents fastclick from messing with click events\n   *                                which are sometimes required to programatically trigger an action on\n   *                                a HTML element such as the input type=file element.\n   *          [option]   optional,  a string that is assigned to be button and is passed\n   *                                to the global onClickHandler as an argument.\n   */\n  addButton(opts) {\n    opts = opts || {};\n\n    var $button = this._$parent.appendDiv()\n      .text(opts.text)\n      .addClass('box-button')\n      .unfocusable()\n      .setEnabled(scout.nvl(opts.enabled, true));\n\n    if (opts.needsClick) {\n      $button.addClass('needsclick');\n    }\n\n    if (!Device.get().supportsOnlyTouch()) {\n      $button.attr('tabindex', opts.tabIndex || '0');\n    }\n\n    if (opts.onClick) {\n      var onClick = opts.onClick;\n      $button.on('click', function(event) {\n        if ($.suppressEventIfDisabled(event)) {\n          return;\n        }\n        onClick(event);\n      });\n    } else if (this._onClickHandler) {\n      $button.on('click', this._onClick.bind(this));\n    }\n    $button.data('buttonOption', opts.option);\n\n    this._$buttons.push($button);\n    return $button;\n  }\n\n  _onClick(event) {\n    var $button = $(event.target);\n    if ($.suppressEventIfDisabled(event, $button)) {\n      return;\n    }\n    this._onClickHandler(event, $button.data('buttonOption'));\n  }\n\n  updateButtonWidths(availableWidth) {\n    // Find all visible buttons\n    var $visibleButtons = [];\n    this._$buttons.forEach(function($button) {\n      if ($button.isVisible()) {\n        $visibleButtons.push($button);\n      }\n    });\n\n    var hasVisibleButtons = $visibleButtons.length > 0;\n    this._$parent.toggleClass('empty', !hasVisibleButtons);\n\n    // Manually calculate equal width fore each button, adding remaining pixels to last button.\n    // (We don't use CSS percentage values, because sometimes browser calculations lead to wrong results.)\n    availableWidth = availableWidth || this._$parent.width();\n    var w = Math.floor(availableWidth / $visibleButtons.length);\n    $visibleButtons.forEach(function($button, index) {\n      if (index === $visibleButtons.length - 1) {\n        w = availableWidth;\n      } else {\n        availableWidth -= w;\n      }\n      $button.outerWidth(w);\n    });\n  }\n\n  buttonCount() {\n    return this._$buttons.length;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}