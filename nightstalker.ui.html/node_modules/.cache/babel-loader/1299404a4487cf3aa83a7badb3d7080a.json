{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Device, Dimension, Insets, Point, Rectangle, scout, scrollbars } from '../index';\nimport $ from 'jquery';\n/**\n * This file contains helpers for graphical operations\n */\n\n/**\n * Returns the preferred size of $elem.\n * Precondition: $elem and it's parents must not be hidden (display: none. Visibility: hidden would be ok\n * because in this case the browser reserves the space the element would be using).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size.\n *\n * useCssSize               false           If true, the width and height properties are set to '' while\n *                                          measuring, thus allowing existing CSS rules to influence the\n *                                          sizes. If set to false, the sizes are set to 'auto' or the\n *                                          corresponding hint values (see below).\n *\n * widthHint                undefined       If useCssSize is false, this value is used as width (in pixels)\n *                                          instead of 'auto'. Useful to get the preferred height for a\n *                                          given width.\n *\n * heightHint               undefined       Same as 'widthHint' but for the height.\n *\n * restoreScrollPositions   true            By default, the $elem's scrolling position is saved and restored\n *                                          during the execution of this method (because applying\n *                                          intermediate styles for measurement might change the current\n *                                          position). If the calling method does that itself, you should\n *                                          set this option to false to prevent overriding the stored\n *                                          scrolling position in $elem's data attributes.\n * animateClasses           undefined       If set, the $elem is checked for one of these classes.\n *                                          If one class is currently set on the $elem, a clone of the $elem without the class\n *                                          is created and measured instead. See also {@link #prefSizeWithoutAnimation}.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\n\nexport function prefSize($elem, options) {\n  // Return 0/0 if element is not displayed (display: none).\n  // We don't use isVisible by purpose because isVisible returns false for elements with visibility: hidden which is wrong here (we would like to be able to measure hidden elements)\n  if (!$elem[0] || $elem.isDisplayNone()) {\n    return new Dimension(0, 0);\n  }\n\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n\n  var defaults = {\n    includeMargin: false,\n    useCssSize: false,\n    widthHint: undefined,\n    heightHint: undefined,\n    restoreScrollPositions: true\n  };\n  options = $.extend({}, defaults, options);\n\n  if (options.animateClasses && options.animateClasses.length > 0) {\n    return prefSizeWithoutAnimation($elem, options);\n  }\n\n  var oldStyle = $elem.attr('style');\n  var oldScrollLeft = $elem.scrollLeft();\n  var oldScrollTop = $elem.scrollTop();\n\n  if (options.restoreScrollPositions) {\n    scrollbars.storeScrollPositions($elem);\n  } // UseCssSize is necessary if the css rules have a fix height or width set.\n  // Otherwise setting the width/height to auto could result in a different size\n\n\n  var newWidth = options.useCssSize ? '' : scout.nvl(options.widthHint, 'auto');\n  var newHeight = options.useCssSize ? '' : scout.nvl(options.heightHint, 'auto');\n  var cssProperties = {\n    'width': newWidth,\n    'height': newHeight\n  }; // IE: In order to measure the correct size for elements with flex-layout we must temporarily\n  // change the position property because with absolute or relative positioning the size of the\n  // element maybe influenced or limited by the parent element which makes it impossible to\n  // determine the preferred size.\n\n  if (Device.get().isInternetExplorer() && $elem.css('display') === 'flex') {\n    cssProperties.position = 'fixed';\n  } // modify properties which prevent reading the preferred size\n\n\n  $elem.css(cssProperties); // measure\n\n  var bcr = $elem[0].getBoundingClientRect();\n  var prefSize = new Dimension(bcr.width, bcr.height);\n\n  if (options.includeMargin) {\n    prefSize.width += $elem.cssMarginX();\n    prefSize.height += $elem.cssMarginY();\n  } // reset the modified style attribute\n\n\n  $elem.attrOrRemove('style', oldStyle);\n  $elem.scrollLeft(oldScrollLeft);\n  $elem.scrollTop(oldScrollTop);\n\n  if (options.restoreScrollPositions) {\n    scrollbars.restoreScrollPositions($elem);\n  }\n\n  return exactPrefSize(prefSize, options);\n}\n/**\n * Ensure resulting numbers are integers. getBoundingClientRect() might correctly return fractional values\n * (because of the browser's sub-pixel rendering). However, if we use those numbers to set the size\n * of an element using CSS, it gets rounded or cut off. The behavior is not defined amongst different\n * browser engines.\n * Example:\n * - Measured size from this method:      h = 345.239990234375\n * - Set the size to an element:          $elem.css('height', h + 'px')\n * - Results:\n *    IE                   <div id=\"elem\" style=\"height: 345.23px\">     [Fractional part cut off after two digits]\n *    Firefox & Chrome     <div id=\"elem\" style=\"height: 345.24px\">     [Fractional part rounded to three digits]\n */\n\nexport function exactPrefSize(prefSize, options) {\n  var exact = scout.nvl(options.exact, false);\n\n  if (!exact) {\n    prefSize.width = Math.ceil(prefSize.width);\n    prefSize.height = Math.ceil(prefSize.height);\n  }\n\n  return prefSize;\n}\n/**\n * If the $container is currently animated by CSS, create a clone, remove the animating CSS class and measure the clone instead.\n * This may be necessary because the animation might change the size of the element.\n * If prefSize is called during the animation, the current size is returned instead of the one after the animation.\n */\n\nexport function prefSizeWithoutAnimation($elem, options) {\n  var animateClasses = arrays.ensure(options.animateClasses);\n  animateClasses = animateClasses.filter(function (cssClass) {\n    return $elem.hasClass(cssClass);\n  });\n  options = $.extend({}, options);\n  options.animateClasses = null;\n\n  if (animateClasses.length === 0) {\n    return prefSize($elem, options);\n  }\n\n  animateClasses = arrays.format(animateClasses, ' ');\n  var $clone = $elem.clone().removeClass(animateClasses).appendTo($elem.parent());\n  var prefSizeResult = prefSize($clone, options);\n  $clone.remove();\n  return prefSizeResult;\n}\n/* These functions are designed to be used with box-sizing:box-model. The only reliable\n * way to set the size of a component when working with box model is to use css('width/height'...)\n * in favor of width/height() functions.\n */\n\n/**\n * Returns the size of the element, insets included. The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size.\n *\n * exact                    false           When set to true the returned dimensions may contain fractional digits, otherwise the sizes are rounded up.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\n\nexport function size($elem, options) {\n  if (!$elem[0] || $elem.isDisplayNone()) {\n    return new Dimension(0, 0);\n  }\n\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n\n  var bcr = $elem[0].getBoundingClientRect();\n  var size = new Dimension(bcr.width, bcr.height);\n  var includeMargin = scout.nvl(options.includeMargin, false);\n\n  if (includeMargin) {\n    size.width += $elem.cssMarginX();\n    size.height += $elem.cssMarginY();\n  } // see comments in prefSize()\n\n\n  var exact = scout.nvl(options.exact, false);\n\n  if (!exact) {\n    size.width = Math.ceil(size.width);\n    size.height = Math.ceil(size.height);\n  }\n\n  return size;\n}\n/**\n * @returns {Dimension} the size of the element specified by the style.\n */\n\nexport function cssSize($elem) {\n  return new Dimension($elem.cssWidth(), $elem.cssHeight());\n}\n/**\n * @returns {Dimension} the max size of the element specified by the style.\n */\n\nexport function cssMaxSize($elem) {\n  return new Dimension($elem.cssMaxWidth(), $elem.cssMaxHeight());\n}\n/**\n * @returns {Dimension} the min size of the element specified by the style.\n */\n\nexport function cssMinSize($elem) {\n  return new Dimension($elem.cssMinWidth(), $elem.cssMinHeight());\n}\nexport function setSize($comp, vararg, height) {\n  var size = vararg instanceof Dimension ? vararg : new Dimension(vararg, height);\n  $comp.cssWidth(size.width).cssHeight(size.height);\n}\n/**\n * Returns the inset-dimensions of the component (padding, margin, border).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned insets.\n *\n * includePadding           true            Whether to include $elem's paddings in the returned insets.\n *\n * includeBorder            true            Whether to include $elem's borders in the returned insets.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\n\nexport function insets($comp, options) {\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n\n  var i,\n      directions = ['top', 'right', 'bottom', 'left'],\n      insets = [0, 0, 0, 0],\n      includeMargin = scout.nvl(options.includeMargin, false),\n      includePadding = scout.nvl(options.includePadding, true),\n      includeBorder = scout.nvl(options.includeBorder, true);\n\n  for (i = 0; i < directions.length; i++) {\n    if (includeMargin) {\n      insets[i] += $comp.cssPxValue('margin-' + directions[i]);\n    }\n\n    if (includePadding) {\n      insets[i] += $comp.cssPxValue('padding-' + directions[i]);\n    }\n\n    if (includeBorder) {\n      insets[i] += $comp.cssPxValue('border-' + directions[i] + '-width');\n    }\n  }\n\n  return new Insets(insets[0], insets[1], insets[2], insets[3]);\n}\nexport function margins($comp) {\n  return insets($comp, {\n    includeMargin: true,\n    includePadding: false,\n    includeBorder: false\n  });\n}\nexport function setMargins($comp, margins) {\n  $comp.css({\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    marginTop: margins.top,\n    marginBottom: margins.bottom\n  });\n}\nexport function paddings($comp) {\n  return insets($comp, {\n    includeMargin: false,\n    includePadding: true,\n    includeBorder: false\n  });\n}\nexport function borders($comp) {\n  return insets($comp, {\n    includeMargin: false,\n    includePadding: false,\n    includeBorder: true\n  });\n}\n/**\n * Sets the location (CSS properties left, top) of the component.\n * @param vararg integer value for X position OR instance of Point\n * @param y (optional) integer value for Y position\n * @returns\n */\n\nexport function setLocation($comp, vararg, y) {\n  var point = vararg instanceof Point ? vararg : new Point(vararg, y);\n  $comp.cssLeft(point.x).cssTop(point.y);\n}\n/**\n * Returns a Point consisting of the component's \"cssLeft\" and\n * \"cssTop\" values (reverse operation to setLocation).\n */\n\nexport function location($comp) {\n  return new Point($comp.cssLeft(), $comp.cssTop());\n}\n/**\n * Returns the bounds of the element relative to the offset parent, insets included.\n * The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size. X and Y are not affected by this option.\n *\n * exact                    false           When set to true the returned size may contain fractional digits, otherwise the sizes are rounded up. X and Y are not affected by this option.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\n\nexport function bounds($elem, options) {\n  return _bounds($elem, $elem.position(), options);\n}\n/**\n * @returns {Point} the position relative to the offset parent ($elem.position()).\n */\n\nexport function position($elem) {\n  var pos = $elem.position();\n  return new Point(pos.left, pos.top);\n}\n/**\n * Returns the bounds of the element relative to the document, insets included.\n * The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size. X and Y are not affected by this option.\n *\n * exact                    false           When set to true the returned size may contain fractional digits, otherwise the sizes are rounded up. X and Y are not affected by this option.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\n\nexport function offsetBounds($elem, options) {\n  return _bounds($elem, $elem.offset(), options);\n}\n/**\n * @returns {Point} the position relative to the document ($elem.offset()).\n */\n\nexport function offset($elem) {\n  var pos = $elem.offset();\n  return new Point(pos.left, pos.top);\n}\nexport function _bounds($elem, pos, options) {\n  var s = size($elem, options);\n  return new Rectangle(pos.left, pos.top, s.width, s.height);\n}\nexport function setBounds($comp, vararg, y, width, height) {\n  var bounds = vararg instanceof Rectangle ? vararg : new Rectangle(vararg, y, width, height);\n  $comp.cssLeft(bounds.x).cssTop(bounds.y).cssWidth(bounds.width).cssHeight(bounds.height);\n}\n/**\n * @returns {Rectangle} the bounds of the element specified by the style.\n */\n\nexport function cssBounds($elem) {\n  return new Rectangle($elem.cssLeft(), $elem.cssTop(), $elem.cssWidth(), $elem.cssHeight());\n}\nexport function debugOutput($comp) {\n  if (!$comp) {\n    return '$comp is undefined';\n  }\n\n  $comp = $.ensure($comp);\n\n  if ($comp.length === 0) {\n    return '$comp doesn\\t match any elements';\n  }\n\n  var attrs = '';\n\n  if ($comp.attr('id')) {\n    attrs += 'id=' + $comp.attr('id');\n  }\n\n  if ($comp.attr('class')) {\n    attrs += ' class=' + $comp.attr('class');\n  }\n\n  if ($comp.attr('data-modelclass')) {\n    attrs += ' data-modelclass=' + $comp.attr('data-modelclass');\n  }\n\n  if (attrs.length === 0) {\n    var html = scout.nvl($comp.html(), '');\n\n    if (html.length > 30) {\n      html = html.substring(0, 30) + '...';\n    }\n\n    attrs = html;\n  }\n\n  if (!$comp.isAttached()) {\n    attrs += ' attached=false';\n  }\n\n  return 'Element[' + attrs.trim() + ']';\n}\nexport default {\n  borders: borders,\n  bounds: bounds,\n  cssBounds: cssBounds,\n  cssMaxSize: cssMaxSize,\n  cssMinSize: cssMinSize,\n  cssSize: cssSize,\n  debugOutput: debugOutput,\n  exactPrefSize: exactPrefSize,\n  insets: insets,\n  location: location,\n  margins: margins,\n  offset: offset,\n  offsetBounds: offsetBounds,\n  paddings: paddings,\n  position: position,\n  prefSize: prefSize,\n  prefSizeWithoutAnimation: prefSizeWithoutAnimation,\n  setBounds: setBounds,\n  setLocation: setLocation,\n  setMargins: setMargins,\n  setSize: setSize,\n  size: size\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/layout/graphics.js"],"names":["arrays","Device","Dimension","Insets","Point","Rectangle","scout","scrollbars","$","prefSize","$elem","options","isDisplayNone","includeMargin","defaults","useCssSize","widthHint","undefined","heightHint","restoreScrollPositions","extend","animateClasses","length","prefSizeWithoutAnimation","oldStyle","attr","oldScrollLeft","scrollLeft","oldScrollTop","scrollTop","storeScrollPositions","newWidth","nvl","newHeight","cssProperties","get","isInternetExplorer","css","position","bcr","getBoundingClientRect","width","height","cssMarginX","cssMarginY","attrOrRemove","exactPrefSize","exact","Math","ceil","ensure","filter","cssClass","hasClass","format","$clone","clone","removeClass","appendTo","parent","prefSizeResult","remove","size","cssSize","cssWidth","cssHeight","cssMaxSize","cssMaxWidth","cssMaxHeight","cssMinSize","cssMinWidth","cssMinHeight","setSize","$comp","vararg","insets","i","directions","includePadding","includeBorder","cssPxValue","margins","setMargins","marginLeft","left","marginRight","right","marginTop","top","marginBottom","bottom","paddings","borders","setLocation","y","point","cssLeft","x","cssTop","location","bounds","_bounds","pos","offsetBounds","offset","s","setBounds","cssBounds","debugOutput","attrs","html","substring","isAttached","trim"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Device, Dimension, Insets, Point, Rectangle, scout, scrollbars} from '../index';\nimport $ from 'jquery';\n\n/**\n * This file contains helpers for graphical operations\n */\n\n/**\n * Returns the preferred size of $elem.\n * Precondition: $elem and it's parents must not be hidden (display: none. Visibility: hidden would be ok\n * because in this case the browser reserves the space the element would be using).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size.\n *\n * useCssSize               false           If true, the width and height properties are set to '' while\n *                                          measuring, thus allowing existing CSS rules to influence the\n *                                          sizes. If set to false, the sizes are set to 'auto' or the\n *                                          corresponding hint values (see below).\n *\n * widthHint                undefined       If useCssSize is false, this value is used as width (in pixels)\n *                                          instead of 'auto'. Useful to get the preferred height for a\n *                                          given width.\n *\n * heightHint               undefined       Same as 'widthHint' but for the height.\n *\n * restoreScrollPositions   true            By default, the $elem's scrolling position is saved and restored\n *                                          during the execution of this method (because applying\n *                                          intermediate styles for measurement might change the current\n *                                          position). If the calling method does that itself, you should\n *                                          set this option to false to prevent overriding the stored\n *                                          scrolling position in $elem's data attributes.\n * animateClasses           undefined       If set, the $elem is checked for one of these classes.\n *                                          If one class is currently set on the $elem, a clone of the $elem without the class\n *                                          is created and measured instead. See also {@link #prefSizeWithoutAnimation}.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function prefSize($elem, options) {\n  // Return 0/0 if element is not displayed (display: none).\n  // We don't use isVisible by purpose because isVisible returns false for elements with visibility: hidden which is wrong here (we would like to be able to measure hidden elements)\n  if (!$elem[0] || $elem.isDisplayNone()) {\n    return new Dimension(0, 0);\n  }\n\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n\n  var defaults = {\n    includeMargin: false,\n    useCssSize: false,\n    widthHint: undefined,\n    heightHint: undefined,\n    restoreScrollPositions: true\n  };\n  options = $.extend({}, defaults, options);\n\n  if (options.animateClasses && options.animateClasses.length > 0) {\n    return prefSizeWithoutAnimation($elem, options);\n  }\n\n  var oldStyle = $elem.attr('style');\n  var oldScrollLeft = $elem.scrollLeft();\n  var oldScrollTop = $elem.scrollTop();\n\n  if (options.restoreScrollPositions) {\n    scrollbars.storeScrollPositions($elem);\n  }\n\n  // UseCssSize is necessary if the css rules have a fix height or width set.\n  // Otherwise setting the width/height to auto could result in a different size\n  var newWidth = (options.useCssSize ? '' : scout.nvl(options.widthHint, 'auto'));\n  var newHeight = (options.useCssSize ? '' : scout.nvl(options.heightHint, 'auto'));\n\n  var cssProperties = {\n    'width': newWidth,\n    'height': newHeight\n  };\n\n  // IE: In order to measure the correct size for elements with flex-layout we must temporarily\n  // change the position property because with absolute or relative positioning the size of the\n  // element maybe influenced or limited by the parent element which makes it impossible to\n  // determine the preferred size.\n  if (Device.get().isInternetExplorer() && $elem.css('display') === 'flex') {\n    cssProperties.position = 'fixed';\n  }\n\n  // modify properties which prevent reading the preferred size\n  $elem.css(cssProperties);\n\n  // measure\n  var bcr = $elem[0].getBoundingClientRect();\n  var prefSize = new Dimension(bcr.width, bcr.height);\n  if (options.includeMargin) {\n    prefSize.width += $elem.cssMarginX();\n    prefSize.height += $elem.cssMarginY();\n  }\n\n  // reset the modified style attribute\n  $elem.attrOrRemove('style', oldStyle);\n  $elem.scrollLeft(oldScrollLeft);\n  $elem.scrollTop(oldScrollTop);\n\n  if (options.restoreScrollPositions) {\n    scrollbars.restoreScrollPositions($elem);\n  }\n\n  return exactPrefSize(prefSize, options);\n}\n\n/**\n * Ensure resulting numbers are integers. getBoundingClientRect() might correctly return fractional values\n * (because of the browser's sub-pixel rendering). However, if we use those numbers to set the size\n * of an element using CSS, it gets rounded or cut off. The behavior is not defined amongst different\n * browser engines.\n * Example:\n * - Measured size from this method:      h = 345.239990234375\n * - Set the size to an element:          $elem.css('height', h + 'px')\n * - Results:\n *    IE                   <div id=\"elem\" style=\"height: 345.23px\">     [Fractional part cut off after two digits]\n *    Firefox & Chrome     <div id=\"elem\" style=\"height: 345.24px\">     [Fractional part rounded to three digits]\n */\nexport function exactPrefSize(prefSize, options) {\n  var exact = scout.nvl(options.exact, false);\n  if (!exact) {\n    prefSize.width = Math.ceil(prefSize.width);\n    prefSize.height = Math.ceil(prefSize.height);\n  }\n  return prefSize;\n}\n\n/**\n * If the $container is currently animated by CSS, create a clone, remove the animating CSS class and measure the clone instead.\n * This may be necessary because the animation might change the size of the element.\n * If prefSize is called during the animation, the current size is returned instead of the one after the animation.\n */\nexport function prefSizeWithoutAnimation($elem, options) {\n  var animateClasses = arrays.ensure(options.animateClasses);\n  animateClasses = animateClasses.filter(function(cssClass) {\n    return $elem.hasClass(cssClass);\n  });\n  options = $.extend({}, options);\n  options.animateClasses = null;\n\n  if (animateClasses.length === 0) {\n    return prefSize($elem, options);\n  }\n\n  animateClasses = arrays.format(animateClasses, ' ');\n  var $clone = $elem\n    .clone()\n    .removeClass(animateClasses)\n    .appendTo($elem.parent());\n  var prefSizeResult = prefSize($clone, options);\n  $clone.remove();\n  return prefSizeResult;\n}\n\n/* These functions are designed to be used with box-sizing:box-model. The only reliable\n * way to set the size of a component when working with box model is to use css('width/height'...)\n * in favor of width/height() functions.\n */\n\n/**\n * Returns the size of the element, insets included. The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size.\n *\n * exact                    false           When set to true the returned dimensions may contain fractional digits, otherwise the sizes are rounded up.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function size($elem, options) {\n  if (!$elem[0] || $elem.isDisplayNone()) {\n    return new Dimension(0, 0);\n  }\n\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n\n  var bcr = $elem[0].getBoundingClientRect();\n  var size = new Dimension(bcr.width, bcr.height);\n  var includeMargin = scout.nvl(options.includeMargin, false);\n  if (includeMargin) {\n    size.width += $elem.cssMarginX();\n    size.height += $elem.cssMarginY();\n  }\n  // see comments in prefSize()\n  var exact = scout.nvl(options.exact, false);\n  if (!exact) {\n    size.width = Math.ceil(size.width);\n    size.height = Math.ceil(size.height);\n  }\n  return size;\n}\n\n/**\n * @returns {Dimension} the size of the element specified by the style.\n */\nexport function cssSize($elem) {\n  return new Dimension($elem.cssWidth(), $elem.cssHeight());\n}\n\n/**\n * @returns {Dimension} the max size of the element specified by the style.\n */\nexport function cssMaxSize($elem) {\n  return new Dimension($elem.cssMaxWidth(), $elem.cssMaxHeight());\n}\n\n/**\n * @returns {Dimension} the min size of the element specified by the style.\n */\nexport function cssMinSize($elem) {\n  return new Dimension($elem.cssMinWidth(), $elem.cssMinHeight());\n}\n\nexport function setSize($comp, vararg, height) {\n  var size = vararg instanceof Dimension ?\n    vararg : new Dimension(vararg, height);\n  $comp\n    .cssWidth(size.width)\n    .cssHeight(size.height);\n}\n\n/**\n * Returns the inset-dimensions of the component (padding, margin, border).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned insets.\n *\n * includePadding           true            Whether to include $elem's paddings in the returned insets.\n *\n * includeBorder            true            Whether to include $elem's borders in the returned insets.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function insets($comp, options) {\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n\n  var i,\n    directions = ['top', 'right', 'bottom', 'left'],\n    insets = [0, 0, 0, 0],\n    includeMargin = scout.nvl(options.includeMargin, false),\n    includePadding = scout.nvl(options.includePadding, true),\n    includeBorder = scout.nvl(options.includeBorder, true);\n\n  for (i = 0; i < directions.length; i++) {\n    if (includeMargin) {\n      insets[i] += $comp.cssPxValue('margin-' + directions[i]);\n    }\n    if (includePadding) {\n      insets[i] += $comp.cssPxValue('padding-' + directions[i]);\n    }\n    if (includeBorder) {\n      insets[i] += $comp.cssPxValue('border-' + directions[i] + '-width');\n    }\n  }\n  return new Insets(insets[0], insets[1], insets[2], insets[3]);\n}\n\nexport function margins($comp) {\n  return insets($comp, {\n    includeMargin: true,\n    includePadding: false,\n    includeBorder: false\n  });\n}\n\nexport function setMargins($comp, margins) {\n  $comp.css({\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    marginTop: margins.top,\n    marginBottom: margins.bottom\n  });\n}\n\nexport function paddings($comp) {\n  return insets($comp, {\n    includeMargin: false,\n    includePadding: true,\n    includeBorder: false\n  });\n}\n\nexport function borders($comp) {\n  return insets($comp, {\n    includeMargin: false,\n    includePadding: false,\n    includeBorder: true\n  });\n}\n\n/**\n * Sets the location (CSS properties left, top) of the component.\n * @param vararg integer value for X position OR instance of Point\n * @param y (optional) integer value for Y position\n * @returns\n */\nexport function setLocation($comp, vararg, y) {\n  var point = vararg instanceof Point ?\n    vararg : new Point(vararg, y);\n  $comp\n    .cssLeft(point.x)\n    .cssTop(point.y);\n}\n\n/**\n * Returns a Point consisting of the component's \"cssLeft\" and\n * \"cssTop\" values (reverse operation to setLocation).\n */\nexport function location($comp) {\n  return new Point($comp.cssLeft(), $comp.cssTop());\n}\n\n/**\n * Returns the bounds of the element relative to the offset parent, insets included.\n * The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size. X and Y are not affected by this option.\n *\n * exact                    false           When set to true the returned size may contain fractional digits, otherwise the sizes are rounded up. X and Y are not affected by this option.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function bounds($elem, options) {\n  return _bounds($elem, $elem.position(), options);\n}\n\n/**\n * @returns {Point} the position relative to the offset parent ($elem.position()).\n */\nexport function position($elem) {\n  var pos = $elem.position();\n  return new Point(pos.left, pos.top);\n}\n\n/**\n * Returns the bounds of the element relative to the document, insets included.\n * The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size. X and Y are not affected by this option.\n *\n * exact                    false           When set to true the returned size may contain fractional digits, otherwise the sizes are rounded up. X and Y are not affected by this option.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function offsetBounds($elem, options) {\n  return _bounds($elem, $elem.offset(), options);\n}\n\n/**\n * @returns {Point} the position relative to the document ($elem.offset()).\n */\nexport function offset($elem) {\n  var pos = $elem.offset();\n  return new Point(pos.left, pos.top);\n}\n\nexport function _bounds($elem, pos, options) {\n  var s = size($elem, options);\n  return new Rectangle(pos.left, pos.top, s.width, s.height);\n}\n\nexport function setBounds($comp, vararg, y, width, height) {\n  var bounds = vararg instanceof Rectangle ?\n    vararg : new Rectangle(vararg, y, width, height);\n  $comp\n    .cssLeft(bounds.x)\n    .cssTop(bounds.y)\n    .cssWidth(bounds.width)\n    .cssHeight(bounds.height);\n}\n\n/**\n * @returns {Rectangle} the bounds of the element specified by the style.\n */\nexport function cssBounds($elem) {\n  return new Rectangle($elem.cssLeft(), $elem.cssTop(), $elem.cssWidth(), $elem.cssHeight());\n}\n\nexport function debugOutput($comp) {\n  if (!$comp) {\n    return '$comp is undefined';\n  }\n  $comp = $.ensure($comp);\n  if ($comp.length === 0) {\n    return '$comp doesn\\t match any elements';\n  }\n  var attrs = '';\n  if ($comp.attr('id')) {\n    attrs += 'id=' + $comp.attr('id');\n  }\n  if ($comp.attr('class')) {\n    attrs += ' class=' + $comp.attr('class');\n  }\n  if ($comp.attr('data-modelclass')) {\n    attrs += ' data-modelclass=' + $comp.attr('data-modelclass');\n  }\n  if (attrs.length === 0) {\n    var html = scout.nvl($comp.html(), '');\n    if (html.length > 30) {\n      html = html.substring(0, 30) + '...';\n    }\n    attrs = html;\n  }\n  if (!$comp.isAttached()) {\n    attrs += ' attached=false';\n  }\n  return 'Element[' + attrs.trim() + ']';\n}\n\nexport default {\n  borders,\n  bounds,\n  cssBounds,\n  cssMaxSize,\n  cssMinSize,\n  cssSize,\n  debugOutput,\n  exactPrefSize,\n  insets,\n  location,\n  margins,\n  offset,\n  offsetBounds,\n  paddings,\n  position,\n  prefSize,\n  prefSizeWithoutAnimation,\n  setBounds,\n  setLocation,\n  setMargins,\n  setSize,\n  size\n};\n"]},"metadata":{},"sourceType":"module"}