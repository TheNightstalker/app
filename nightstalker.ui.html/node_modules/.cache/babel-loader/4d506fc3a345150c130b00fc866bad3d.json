{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AjaxError, Call, URL } from '../index';\nimport $ from 'jquery';\n\nvar AjaxCall = /*#__PURE__*/function (_Call) {\n  _inherits(AjaxCall, _Call);\n\n  var _super = _createSuper(AjaxCall);\n\n  function AjaxCall() {\n    var _this;\n\n    _classCallCheck(this, AjaxCall);\n\n    _this = _super.call(this);\n    _this.type = 'ajax';\n    _this.ajaxOptions = null;\n    return _this;\n  }\n\n  _createClass(AjaxCall, [{\n    key: \"init\",\n    value: function init(model) {\n      if (!model) {\n        throw new Error('Missing argument \"model\"');\n      }\n\n      if (!model.ajaxOptions) {\n        throw new Error('Missing model property \"ajaxOptions\"');\n      }\n\n      if (!model.name) {\n        model.name = model.ajaxOptions.url;\n      }\n\n      _get(_getPrototypeOf(AjaxCall.prototype), \"init\", this).call(this, model);\n    } // ==================================================================================\n\n  }, {\n    key: \"_callImpl\",\n    value: function _callImpl() {\n      // Mark retries by adding an URL parameter\n      if (this.callCounter !== 1) {\n        this.ajaxOptions.url = new URL(this.ajaxOptions.url).setParameter('retry', this.callCounter - 1).toString({\n          alwaysLast: ['retry']\n        });\n      }\n\n      $.log.isTraceEnabled() && $.log.trace(this.logPrefix + (this.callCounter === 1 ? '--- ' : '') + this.ajaxOptions.type + ' \"' + this.ajaxOptions.url + '\"' + (this.callCounter === 1 ? ' ---' : ''));\n      return $.ajax(this.ajaxOptions);\n    }\n  }, {\n    key: \"_setResultFail\",\n    value: function _setResultFail(jqXHR, textStatus, errorThrown) {\n      // Store result as single object to make rethrowing the error easier for callers of AjaxCall\n      this._setResult(new AjaxError({\n        jqXHR: jqXHR,\n        textStatus: textStatus,\n        errorThrown: errorThrown,\n        requestOptions: this.ajaxOptions\n      }));\n    }\n  }, {\n    key: \"_onCallDone\",\n    value: function _onCallDone(data, textStatus, jqXHR) {\n      $.log.isTraceEnabled() && $.log.trace(this.logPrefix + 'AJAX success');\n\n      _get(_getPrototypeOf(AjaxCall.prototype), \"_onCallDone\", this).call(this, data, textStatus, jqXHR);\n    }\n  }, {\n    key: \"_onCallFail\",\n    value: function _onCallFail(jqXHR, textStatus, errorThrown) {\n      $.log.isTraceEnabled() && $.log.trace(this.logPrefix + 'AJAX fail: type=' + textStatus + ', httpStatus=' + jqXHR.status + (errorThrown ? ' \"' + errorThrown + '\"' : ''));\n\n      _get(_getPrototypeOf(AjaxCall.prototype), \"_onCallFail\", this).call(this, jqXHR, textStatus, errorThrown);\n    }\n  }, {\n    key: \"_nextRetryImpl\",\n    value: function _nextRetryImpl(jqXHR, textStatus, errorThrown) {\n      var offlineError = AjaxCall.isOfflineError(jqXHR, textStatus, errorThrown, this.request);\n\n      if (!offlineError) {\n        $.log.isTraceEnabled() && $.log.trace(this.logPrefix + 'Unexpected HTTP error');\n        return false;\n      }\n\n      return _get(_getPrototypeOf(AjaxCall.prototype), \"_nextRetryImpl\", this).call(this);\n    }\n    /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  }], [{\n    key: \"isOfflineError\",\n    value: function isOfflineError(jqXHR, textStatus, errorThrown, request) {\n      // noinspection UnnecessaryLocalVariableJS\n      var offline = // Status code = 0 -> no connection\n      !jqXHR.status || // Workaround for IE 9: Apparently, Windows network error codes (http://msdn.microsoft.com/en-us/library/aa383770%28VS.85%29.aspx)\n      // are passed to JS as HTTP 'status' in some cases (e.g. when server goes offline).\n      jqXHR.status >= 12000 || // Status code 502 = Bad Gateway\n      // Status code 503 = Service Unavailable\n      // Status code 504 = Gateway Timeout\n      // Those codes usually happen when some network component between browser and UI server (e.g. a load balancer)\n      // has a short outage, most likely only temporarily. Therefore, we treat them like a lost connection.\n      // Otherwise, the polling loop would break, eventually causing the HTTP session to be invalidated on the\n      // server due to inactivity. Going offline starts the reconnector which regularly emits ping requests.\n      // This allows us to reconnect to the server as soon as the connection is fixed, hopefully saving the\n      // HTTP session from inactivation.\n      jqXHR.status === 502 || jqXHR.status === 503 || jqXHR.status === 504;\n      return offline;\n    }\n  }]);\n\n  return AjaxCall;\n}(Call);\n\nexport { AjaxCall as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/ajax/AjaxCall.js"],"names":["AjaxError","Call","URL","$","AjaxCall","type","ajaxOptions","model","Error","name","url","callCounter","setParameter","toString","alwaysLast","log","isTraceEnabled","trace","logPrefix","ajax","jqXHR","textStatus","errorThrown","_setResult","requestOptions","data","status","offlineError","isOfflineError","request","offline"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AjaxError, Call, URL} from '../index';\nimport $ from 'jquery';\n\nexport default class AjaxCall extends Call {\n\n  constructor() {\n    super();\n    this.type = 'ajax';\n    this.ajaxOptions = null;\n  }\n\n  init(model) {\n    if (!model) {\n      throw new Error('Missing argument \"model\"');\n    }\n    if (!model.ajaxOptions) {\n      throw new Error('Missing model property \"ajaxOptions\"');\n    }\n    if (!model.name) {\n      model.name = model.ajaxOptions.url;\n    }\n    super.init(model);\n  }\n\n  // ==================================================================================\n\n  _callImpl() {\n    // Mark retries by adding an URL parameter\n    if (this.callCounter !== 1) {\n      this.ajaxOptions.url = new URL(this.ajaxOptions.url).setParameter('retry', this.callCounter - 1).toString({\n        alwaysLast: ['retry']\n      });\n    }\n    $.log.isTraceEnabled() && $.log.trace(this.logPrefix + (this.callCounter === 1 ? '--- ' : '') + this.ajaxOptions.type + ' \"' + this.ajaxOptions.url + '\"' + (this.callCounter === 1 ? ' ---' : ''));\n\n    return $.ajax(this.ajaxOptions);\n  }\n\n  _setResultFail(jqXHR, textStatus, errorThrown) {\n    // Store result as single object to make rethrowing the error easier for callers of AjaxCall\n    this._setResult(new AjaxError({\n      jqXHR: jqXHR,\n      textStatus: textStatus,\n      errorThrown: errorThrown,\n      requestOptions: this.ajaxOptions\n    }));\n  }\n\n  _onCallDone(data, textStatus, jqXHR) {\n    $.log.isTraceEnabled() && $.log.trace(this.logPrefix + 'AJAX success');\n    super._onCallDone(data, textStatus, jqXHR);\n  }\n\n  _onCallFail(jqXHR, textStatus, errorThrown) {\n    $.log.isTraceEnabled() && $.log.trace(this.logPrefix + 'AJAX fail: type=' + textStatus + ', httpStatus=' + jqXHR.status + (errorThrown ? ' \"' + errorThrown + '\"' : ''));\n    super._onCallFail(jqXHR, textStatus, errorThrown);\n  }\n\n  _nextRetryImpl(jqXHR, textStatus, errorThrown) {\n    var offlineError = AjaxCall.isOfflineError(jqXHR, textStatus, errorThrown, this.request);\n    if (!offlineError) {\n      $.log.isTraceEnabled() && $.log.trace(this.logPrefix + 'Unexpected HTTP error');\n      return false;\n    }\n    return super._nextRetryImpl();\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  static isOfflineError(jqXHR, textStatus, errorThrown, request) {\n    // noinspection UnnecessaryLocalVariableJS\n    var offline = (\n      // Status code = 0 -> no connection\n      !jqXHR.status ||\n      // Workaround for IE 9: Apparently, Windows network error codes (http://msdn.microsoft.com/en-us/library/aa383770%28VS.85%29.aspx)\n      // are passed to JS as HTTP 'status' in some cases (e.g. when server goes offline).\n      jqXHR.status >= 12000 ||\n      // Status code 502 = Bad Gateway\n      // Status code 503 = Service Unavailable\n      // Status code 504 = Gateway Timeout\n      // Those codes usually happen when some network component between browser and UI server (e.g. a load balancer)\n      // has a short outage, most likely only temporarily. Therefore, we treat them like a lost connection.\n      // Otherwise, the polling loop would break, eventually causing the HTTP session to be invalidated on the\n      // server due to inactivity. Going offline starts the reconnector which regularly emits ping requests.\n      // This allows us to reconnect to the server as soon as the connection is fixed, hopefully saving the\n      // HTTP session from inactivation.\n      jqXHR.status === 502 ||\n      jqXHR.status === 503 ||\n      jqXHR.status === 504\n    );\n    return offline;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}