{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2010-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Dimension, Point } from '../index';\n/**\n * JavaScript port from java.awt.Rectangle.\n */\n\nvar Rectangle = /*#__PURE__*/function () {\n  function Rectangle(vararg, y, width, height) {\n    _classCallCheck(this, Rectangle);\n\n    if (vararg instanceof Rectangle) {\n      this.x = vararg.x;\n      this.y = vararg.y;\n      this.width = vararg.width;\n      this.height = vararg.height;\n    } else {\n      this.x = vararg || 0;\n      this.y = y || 0;\n      this.width = width || 0;\n      this.height = height || 0;\n    }\n  }\n\n  _createClass(Rectangle, [{\n    key: \"toString\",\n    value: function toString() {\n      return 'Rectangle[x=' + this.x + ' y=' + this.y + ' width=' + this.width + ' height=' + this.height + ']';\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(o) {\n      if (!o) {\n        return false;\n      }\n\n      return this.x === o.x && this.y === o.y && this.width === o.width && this.height === o.height;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n  }, {\n    key: \"center\",\n    value: function center() {\n      return new Point(this.x + this.width / 2, this.y + this.height / 2);\n    }\n  }, {\n    key: \"right\",\n    value: function right() {\n      return this.x + this.width;\n    }\n  }, {\n    key: \"bottom\",\n    value: function bottom() {\n      return this.y + this.height;\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(x, y) {\n      return y >= this.y && y < this.y + this.height && x >= this.x && x < this.x + this.width;\n    }\n    /**\n     * Tests whether or not the specified rectangle intersects this rectangle.\n     * This means the two rectangles share at least one internal point.\n     *\n     * @param r the rectangle to test against\n     * @return {boolean} true if the specified rectangle intersects this one\n     */\n\n  }, {\n    key: \"intersects\",\n    value: function intersects(r) {\n      if (!r) {\n        return false;\n      }\n\n      return r.width > 0 && r.height > 0 && this.width > 0 && this.height > 0 && r.x < this.right() && r.right() > this.x && r.y < this.bottom() && r.bottom() > this.y;\n    }\n    /**\n     * @returns {Rectangle}\n     */\n\n  }, {\n    key: \"subtract\",\n    value: function subtract(insets) {\n      return new Rectangle(this.x + insets.left, this.y + insets.top, this.width - insets.horizontal(), this.height - insets.vertical());\n    }\n    /**\n     * Subtracts the insets only from the dimension properties (width and height)\n     * @returns {Rectangle}\n     */\n\n  }, {\n    key: \"subtractFromDimension\",\n    value: function subtractFromDimension(insets) {\n      return new scout.Rectangle(this.x, this.y, this.width - insets.horizontal(), this.height - insets.vertical());\n    }\n    /**\n     * Moves the rectangle the given distance.\n     * <p>\n     * @param dx the distance to move the rectangle along the x axis.\n     * @param dy the distance to move the rectangle along the y axis.\n     */\n\n  }, {\n    key: \"translate\",\n    value: function translate(dx, dy) {\n      return new Rectangle(this.x + dx, this.y + dy, this.width, this.height);\n    }\n    /**\n     * @returns {Point} property x and y of this instance as new Point instance\n     */\n\n  }, {\n    key: \"point\",\n    value: function point() {\n      return new Point(this.x, this.y);\n    }\n    /**\n     * @returns {Dimension} property width and height of this instance as new Dimension instance\n     */\n\n  }, {\n    key: \"dimension\",\n    value: function dimension() {\n      return new Dimension(this.width, this.height);\n    }\n  }, {\n    key: \"union\",\n    value: function union(r) {\n      var tx2 = this.width;\n      var ty2 = this.height;\n\n      if (tx2 < 0 || ty2 < 0) {\n        // This rectangle has negative dimensions...\n        // If r has non-negative dimensions then it is the answer.\n        // If r is non-existant (has a negative dimension), then both\n        // are non-existant and we can return any non-existant rectangle\n        // as an answer.  Thus, returning r meets that criterion.\n        // Either way, r is our answer.\n        return new Rectangle(r.x, r.y, r.width, r.height);\n      }\n\n      var rx2 = r.width;\n      var ry2 = r.height;\n\n      if (rx2 < 0 || ry2 < 0) {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n      }\n\n      var tx1 = this.x;\n      var ty1 = this.y;\n      tx2 += tx1;\n      ty2 += ty1;\n      var rx1 = r.x;\n      var ry1 = r.y;\n      rx2 += rx1;\n      ry2 += ry1;\n\n      if (tx1 > rx1) {\n        tx1 = rx1;\n      }\n\n      if (ty1 > ry1) {\n        ty1 = ry1;\n      }\n\n      if (tx2 < rx2) {\n        tx2 = rx2;\n      }\n\n      if (ty2 < ry2) {\n        ty2 = ry2;\n      }\n\n      tx2 -= tx1;\n      ty2 -= ty1; // tx2,ty2 will never underflow since both original rectangles\n      // were already proven to be non-empty\n      // they might overflow, though...\n\n      if (tx2 > Number.MAX_VALUE) {\n        tx2 = Number.MAX_VALUE;\n      }\n\n      if (ty2 > Number.MAX_VALUE) {\n        ty2 = Number.MAX_VALUE;\n      }\n\n      return new Rectangle(tx1, ty1, tx2, ty2);\n    }\n  }, {\n    key: \"floor\",\n    value: function floor() {\n      return new Rectangle(Math.floor(this.x), Math.floor(this.y), Math.floor(this.width), Math.floor(this.height));\n    }\n  }, {\n    key: \"ceil\",\n    value: function ceil() {\n      return new Rectangle(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.width), Math.ceil(this.height));\n    }\n  }]);\n\n  return Rectangle;\n}();\n\nexport { Rectangle as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/layout/Rectangle.js"],"names":["Dimension","Point","Rectangle","vararg","y","width","height","x","o","r","right","bottom","insets","left","top","horizontal","vertical","scout","dx","dy","tx2","ty2","rx2","ry2","tx1","ty1","rx1","ry1","Number","MAX_VALUE","Math","floor","ceil"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2010-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Dimension, Point} from '../index';\n\n/**\n * JavaScript port from java.awt.Rectangle.\n */\nexport default class Rectangle {\n\n  constructor(vararg, y, width, height) {\n    if (vararg instanceof Rectangle) {\n      this.x = vararg.x;\n      this.y = vararg.y;\n      this.width = vararg.width;\n      this.height = vararg.height;\n    } else {\n      this.x = vararg || 0;\n      this.y = y || 0;\n      this.width = width || 0;\n      this.height = height || 0;\n    }\n  }\n\n  toString() {\n    return 'Rectangle[x=' + this.x + ' y=' + this.y + ' width=' + this.width + ' height=' + this.height + ']';\n  }\n\n  equals(o) {\n    if (!o) {\n      return false;\n    }\n    return (this.x === o.x && this.y === o.y && this.width === o.width && this.height === o.height);\n  }\n\n  clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  }\n\n  center() {\n    return new Point(this.x + this.width / 2, this.y + this.height / 2);\n  }\n\n  right() {\n    return this.x + this.width;\n  }\n\n  bottom() {\n    return this.y + this.height;\n  }\n\n  contains(x, y) {\n    return y >= this.y && y < this.y + this.height && x >= this.x && x < this.x + this.width;\n  }\n\n  /**\n   * Tests whether or not the specified rectangle intersects this rectangle.\n   * This means the two rectangles share at least one internal point.\n   *\n   * @param r the rectangle to test against\n   * @return {boolean} true if the specified rectangle intersects this one\n   */\n  intersects(r) {\n    if (!r) {\n      return false;\n    }\n    return r.width > 0 && r.height > 0 && this.width > 0 && this.height > 0 &&\n      r.x < this.right() && r.right() > this.x &&\n      r.y < this.bottom() && r.bottom() > this.y;\n  }\n\n  /**\n   * @returns {Rectangle}\n   */\n  subtract(insets) {\n    return new Rectangle(\n      this.x + insets.left,\n      this.y + insets.top,\n      this.width - insets.horizontal(),\n      this.height - insets.vertical());\n  }\n\n  /**\n   * Subtracts the insets only from the dimension properties (width and height)\n   * @returns {Rectangle}\n   */\n  subtractFromDimension(insets) {\n    return new scout.Rectangle(\n      this.x,\n      this.y,\n      this.width - insets.horizontal(),\n      this.height - insets.vertical());\n  }\n\n  /**\n   * Moves the rectangle the given distance.\n   * <p>\n   * @param dx the distance to move the rectangle along the x axis.\n   * @param dy the distance to move the rectangle along the y axis.\n   */\n  translate(dx, dy) {\n    return new Rectangle(\n      this.x + dx,\n      this.y + dy,\n      this.width,\n      this.height);\n  }\n\n  /**\n   * @returns {Point} property x and y of this instance as new Point instance\n   */\n  point() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * @returns {Dimension} property width and height of this instance as new Dimension instance\n   */\n  dimension() {\n    return new Dimension(this.width, this.height);\n  }\n\n  union(r) {\n    var tx2 = this.width;\n    var ty2 = this.height;\n    if (tx2 < 0 || ty2 < 0) {\n      // This rectangle has negative dimensions...\n      // If r has non-negative dimensions then it is the answer.\n      // If r is non-existant (has a negative dimension), then both\n      // are non-existant and we can return any non-existant rectangle\n      // as an answer.  Thus, returning r meets that criterion.\n      // Either way, r is our answer.\n      return new Rectangle(r.x, r.y, r.width, r.height);\n    }\n    var rx2 = r.width;\n    var ry2 = r.height;\n    if (rx2 < 0 || ry2 < 0) {\n      return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n    var tx1 = this.x;\n    var ty1 = this.y;\n    tx2 += tx1;\n    ty2 += ty1;\n    var rx1 = r.x;\n    var ry1 = r.y;\n    rx2 += rx1;\n    ry2 += ry1;\n    if (tx1 > rx1) {\n      tx1 = rx1;\n    }\n    if (ty1 > ry1) {\n      ty1 = ry1;\n    }\n    if (tx2 < rx2) {\n      tx2 = rx2;\n    }\n    if (ty2 < ry2) {\n      ty2 = ry2;\n    }\n    tx2 -= tx1;\n    ty2 -= ty1;\n    // tx2,ty2 will never underflow since both original rectangles\n    // were already proven to be non-empty\n    // they might overflow, though...\n    if (tx2 > Number.MAX_VALUE) {\n      tx2 = Number.MAX_VALUE;\n    }\n    if (ty2 > Number.MAX_VALUE) {\n      ty2 = Number.MAX_VALUE;\n    }\n    return new Rectangle(tx1, ty1, tx2, ty2);\n  }\n\n  floor() {\n    return new Rectangle(Math.floor(this.x), Math.floor(this.y), Math.floor(this.width), Math.floor(this.height));\n  }\n\n  ceil() {\n    return new Rectangle(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.width), Math.ceil(this.height));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}