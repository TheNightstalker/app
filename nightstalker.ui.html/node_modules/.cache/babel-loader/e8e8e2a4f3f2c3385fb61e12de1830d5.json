{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { scout, TreeVisitResult } from '../index';\n\nvar CodeType = /*#__PURE__*/function () {\n  function CodeType() {\n    _classCallCheck(this, CodeType);\n\n    this.id;\n    this.codes = [];\n    this.codeMap = {};\n  }\n\n  _createClass(CodeType, [{\n    key: \"init\",\n    value: function init(model) {\n      scout.assertParameter('id', model.id);\n      this.id = model.id;\n      this.modelClass = model.modelClass;\n\n      if (model.codes) {\n        for (var i = 0; i < model.codes.length; i++) {\n          this._initCode(model.codes[i]);\n        }\n      }\n    }\n  }, {\n    key: \"_initCode\",\n    value: function _initCode(modelCode, parent) {\n      var code = scout.create(modelCode);\n      this.add(code, parent);\n\n      if (modelCode.children) {\n        for (var i = 0; i < modelCode.children.length; i++) {\n          this._initCode(modelCode.children[i], code);\n        }\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(code, parent) {\n      this.codes.push(code);\n      this.codeMap[code.id] = code;\n\n      if (parent) {\n        parent.children.push(code);\n        code.parent = parent;\n      }\n    }\n    /**\n     * @param codeId\n     * @returns {Code}\n     * @throw {Error) if code does not exist\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(codeId) {\n      var code = this.optGet(codeId);\n\n      if (!code) {\n        throw new Error('No code found for id=' + codeId);\n      }\n\n      return code;\n    }\n    /**\n     * Same as <code>get</code>, but does not throw an error if the code does not exist.\n     *\n     * @param codeId\n     * @returns {Code} code for the given codeId or undefined if code does not exist\n     */\n\n  }, {\n    key: \"optGet\",\n    value: function optGet(codeId) {\n      return this.codeMap[codeId];\n    }\n    /**\n     * @param {boolean} rootOnly\n     * @returns {Array<string>}\n     */\n\n  }, {\n    key: \"getCodes\",\n    value: function getCodes(rootOnly) {\n      if (rootOnly) {\n        var rootCodes = [];\n\n        for (var i = 0; i < this.codes.length; i++) {\n          if (!this.codes[i].parent) {\n            rootCodes.push(this.codes[i]);\n          }\n        }\n\n        return rootCodes;\n      }\n\n      return this.codes;\n    }\n    /**\n     * Visits all codes and theirs children.\n     * <p>\n     * In order to abort visiting, the visitor can return true or TreeVisitResult.TERMINATE.\n     * To only abort the visiting of a sub tree, the visitor can return SKIP_SUBTREE.\n     * </p>\n     * @returns {boolean} true if the visitor aborted the visiting, false if the visiting completed without aborting\n     */\n\n  }, {\n    key: \"visit\",\n    value: function visit(visitor) {\n      var codes = this.codes.filter(function (code) {\n        // Only consider root codes\n        return !code.parent;\n      });\n\n      for (var i = 0; i < codes.length; i++) {\n        var code = codes[i];\n        var visitResult = visitor(code);\n\n        if (visitResult === true || visitResult === TreeVisitResult.TERMINATE) {\n          return TreeVisitResult.TERMINATE;\n        }\n\n        if (visitResult !== TreeVisitResult.SKIP_SUBTREE) {\n          visitResult = code.visitChildren(visitor);\n\n          if (visitResult === true || visitResult === TreeVisitResult.TERMINATE) {\n            return TreeVisitResult.TERMINATE;\n          }\n        }\n      }\n    }\n  }], [{\n    key: \"ensure\",\n    value: function ensure(codeType) {\n      if (!codeType) {\n        return codeType;\n      }\n\n      if (codeType instanceof CodeType) {\n        return codeType;\n      }\n\n      return scout.create('CodeType', codeType);\n    }\n  }]);\n\n  return CodeType;\n}();\n\nexport { CodeType as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/code/CodeType.js"],"names":["scout","TreeVisitResult","CodeType","id","codes","codeMap","model","assertParameter","modelClass","i","length","_initCode","modelCode","parent","code","create","add","children","push","codeId","optGet","Error","rootOnly","rootCodes","visitor","filter","visitResult","TERMINATE","SKIP_SUBTREE","visitChildren","codeType"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {scout, TreeVisitResult} from '../index';\n\nexport default class CodeType {\n\n  constructor() {\n    this.id;\n    this.codes = [];\n    this.codeMap = {};\n  }\n\n  init(model) {\n    scout.assertParameter('id', model.id);\n    this.id = model.id;\n    this.modelClass = model.modelClass;\n\n    if (model.codes) {\n      for (var i = 0; i < model.codes.length; i++) {\n        this._initCode(model.codes[i]);\n      }\n    }\n  }\n\n  _initCode(modelCode, parent) {\n    var code = scout.create(modelCode);\n    this.add(code, parent);\n    if (modelCode.children) {\n      for (var i = 0; i < modelCode.children.length; i++) {\n        this._initCode(modelCode.children[i], code);\n      }\n    }\n  }\n\n  add(code, parent) {\n    this.codes.push(code);\n    this.codeMap[code.id] = code;\n    if (parent) {\n      parent.children.push(code);\n      code.parent = parent;\n    }\n  }\n\n  /**\n   * @param codeId\n   * @returns {Code}\n   * @throw {Error) if code does not exist\n   */\n  get(codeId) {\n    var code = this.optGet(codeId);\n    if (!code) {\n      throw new Error('No code found for id=' + codeId);\n    }\n    return code;\n  }\n\n  /**\n   * Same as <code>get</code>, but does not throw an error if the code does not exist.\n   *\n   * @param codeId\n   * @returns {Code} code for the given codeId or undefined if code does not exist\n   */\n  optGet(codeId) {\n    return this.codeMap[codeId];\n  }\n\n  /**\n   * @param {boolean} rootOnly\n   * @returns {Array<string>}\n   */\n  getCodes(rootOnly) {\n    if (rootOnly) {\n      var rootCodes = [];\n      for (var i = 0; i < this.codes.length; i++) {\n        if (!this.codes[i].parent) {\n          rootCodes.push(this.codes[i]);\n        }\n      }\n      return rootCodes;\n    }\n    return this.codes;\n  }\n\n  /**\n   * Visits all codes and theirs children.\n   * <p>\n   * In order to abort visiting, the visitor can return true or TreeVisitResult.TERMINATE.\n   * To only abort the visiting of a sub tree, the visitor can return SKIP_SUBTREE.\n   * </p>\n   * @returns {boolean} true if the visitor aborted the visiting, false if the visiting completed without aborting\n   */\n  visit(visitor) {\n    var codes = this.codes.filter(function(code) {\n      // Only consider root codes\n      return !code.parent;\n    });\n    for (var i = 0; i < codes.length; i++) {\n      var code = codes[i];\n      var visitResult = visitor(code);\n      if (visitResult === true || visitResult === TreeVisitResult.TERMINATE) {\n        return TreeVisitResult.TERMINATE;\n      }\n      if (visitResult !== TreeVisitResult.SKIP_SUBTREE) {\n        visitResult = code.visitChildren(visitor);\n        if (visitResult === true || visitResult === TreeVisitResult.TERMINATE) {\n          return TreeVisitResult.TERMINATE;\n        }\n      }\n    }\n  }\n\n  static ensure(codeType) {\n    if (!codeType) {\n      return codeType;\n    }\n    if (codeType instanceof CodeType) {\n      return codeType;\n    }\n    return scout.create('CodeType', codeType);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}