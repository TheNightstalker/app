{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { ValueField } from '../../index';\n/**\n * Common base class for ValueFields having an HTML input field.\n */\n\nvar BasicField = /*#__PURE__*/function (_ValueField) {\n  _inherits(BasicField, _ValueField);\n\n  var _super = _createSuper(BasicField);\n\n  function BasicField() {\n    var _this;\n\n    _classCallCheck(this, BasicField);\n\n    _this = _super.call(this);\n    _this.disabledCopyOverlay = true;\n    _this._displayTextModifiedTimeoutId = null;\n    _this.updateDisplayTextOnModify = false;\n    _this.updateDisplayTextOnModifyDelay = 250; // in milliseconds\n\n    return _this;\n  }\n\n  _createClass(BasicField, [{\n    key: \"addField\",\n    value: function addField($field) {\n      _get(_getPrototypeOf(BasicField.prototype), \"addField\", this).call(this, $field);\n\n      if ($field) {\n        $field.on('input', this._onFieldInput.bind(this));\n      }\n    }\n  }, {\n    key: \"setUpdateDisplayTextOnModify\",\n    value: function setUpdateDisplayTextOnModify(updateDisplayTextOnModify) {\n      // Execute pending \"accept input while typing\" function _before_ updating the \"updateDisplayTextOnModify\" property\n      if (this._displayTextModifiedTimeoutId !== null) {\n        // Cancel pending \"acceptInput(true)\" call (see _onDisplayTextModified) and execute it now\n        clearTimeout(this._displayTextModifiedTimeoutId);\n\n        this._acceptInputWhileTyping();\n      }\n\n      this.setProperty('updateDisplayTextOnModify', updateDisplayTextOnModify);\n    }\n  }, {\n    key: \"setUpdateDisplayTextOnModifyDelay\",\n    value: function setUpdateDisplayTextOnModifyDelay(delay) {\n      this.setProperty('updateDisplayTextOnModifyDelay', delay);\n    }\n  }, {\n    key: \"_clear\",\n    value: function _clear() {\n      this.$field.val('');\n    }\n  }, {\n    key: \"_onFieldInput\",\n    value: function _onFieldInput() {\n      this._updateHasText();\n\n      if (this.updateDisplayTextOnModify) {\n        this._onDisplayTextModified();\n      }\n    }\n    /**\n     * Called when the property 'updateDisplayTextOnModified' is TRUE and the display text (field's input\n     * value) has been modified by a user action, e.g. a key or paste event. If the property is FALSE, this\n     * method is _never_ called. Uses the debounce pattern.\n     */\n\n  }, {\n    key: \"_onDisplayTextModified\",\n    value: function _onDisplayTextModified() {\n      clearTimeout(this._displayTextModifiedTimeoutId);\n\n      if (this.updateDisplayTextOnModifyDelay) {\n        this._displayTextModifiedTimeoutId = setTimeout(this._acceptInputWhileTyping.bind(this), this.updateDisplayTextOnModifyDelay);\n      } else {\n        this._acceptInputWhileTyping();\n      }\n    }\n  }, {\n    key: \"_acceptInputWhileTyping\",\n    value: function _acceptInputWhileTyping() {\n      this._displayTextModifiedTimeoutId = null;\n\n      if (this.rendered) {\n        // Check needed because field may have been removed in the meantime\n        this.acceptInput(true);\n      }\n    }\n  }, {\n    key: \"acceptInput\",\n    value: function acceptInput(whileTyping) {\n      if (this._displayTextModifiedTimeoutId !== null) {\n        // Cancel pending \"acceptInput(true)\" call (see _onDisplayTextModified) and execute it now\n        clearTimeout(this._displayTextModifiedTimeoutId);\n        this._displayTextModifiedTimeoutId = null;\n      }\n\n      _get(_getPrototypeOf(BasicField.prototype), \"acceptInput\", this).call(this, whileTyping);\n    }\n  }, {\n    key: \"_renderDisplayText\",\n    value: function _renderDisplayText() {\n      this.$field.val(this.displayText);\n\n      _get(_getPrototypeOf(BasicField.prototype), \"_renderDisplayText\", this).call(this);\n    }\n  }, {\n    key: \"_readDisplayText\",\n    value: function _readDisplayText() {\n      return this.$field.val();\n    }\n    /**\n     * @override ValueField.js\n     */\n\n  }, {\n    key: \"_checkDisplayTextChanged\",\n    value: function _checkDisplayTextChanged(displayText, whileTyping) {\n      var displayTextChanged = _get(_getPrototypeOf(BasicField.prototype), \"_checkDisplayTextChanged\", this).call(this, displayText, whileTyping);\n\n      if (whileTyping) {\n        if (this.updateDisplayTextOnModify && displayTextChanged) {\n          // Remember that we sent some events to the server with \"whileTyping=true\"\n          this._displayTextChangedWhileTyping = true;\n        }\n      } else {\n        // In 'updateDisplayTextOnModify' mode, each change of text is sent to the server with whileTyping=true,\n        // see _onDisplayTextModified (facade: \"setDisplayTextFromUI\"). On field blur, the text must be sent again\n        // with whileTyping=false to update the model's value as well (facade: \"parseAndSetValueFromUI\").\n        // Usually, the displayText is only sent if it has changed (to prevent too many server requests). But in\n        // the case 'updateDisplayTextOnModify AND whileTyping=false', it has to be sent if the displayText\n        // was previously sent with whileTyping=true. To do so, we make the acceptInput() method think that the\n        // text has changed (even if it has not).\n        if (this._displayTextChangedWhileTyping) {\n          displayTextChanged = true;\n        }\n\n        this._displayTextChangedWhileTyping = false;\n      }\n\n      return displayTextChanged;\n    }\n  }]);\n\n  return BasicField;\n}(ValueField);\n\nexport { BasicField as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/BasicField.js"],"names":["ValueField","BasicField","disabledCopyOverlay","_displayTextModifiedTimeoutId","updateDisplayTextOnModify","updateDisplayTextOnModifyDelay","$field","on","_onFieldInput","bind","clearTimeout","_acceptInputWhileTyping","setProperty","delay","val","_updateHasText","_onDisplayTextModified","setTimeout","rendered","acceptInput","whileTyping","displayText","displayTextChanged","_displayTextChangedWhileTyping"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,UAAR,QAAyB,aAAzB;AAEA;AACA;AACA;;IACqBC,U;;;;;AAEnB,wBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,mBAAL,GAA2B,IAA3B;AACA,UAAKC,6BAAL,GAAqC,IAArC;AACA,UAAKC,yBAAL,GAAiC,KAAjC;AACA,UAAKC,8BAAL,GAAsC,GAAtC,CALY,CAK+B;;AAL/B;AAMb;;;;6BAEQC,M,EAAQ;AACf,+EAAeA,MAAf;;AACA,UAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACC,EAAP,CAAU,OAAV,EAAmB,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAnB;AACD;AACF;;;iDAE4BL,yB,EAA2B;AACtD;AACA,UAAI,KAAKD,6BAAL,KAAuC,IAA3C,EAAiD;AAC/C;AACAO,QAAAA,YAAY,CAAC,KAAKP,6BAAN,CAAZ;;AACA,aAAKQ,uBAAL;AACD;;AAED,WAAKC,WAAL,CAAiB,2BAAjB,EAA8CR,yBAA9C;AACD;;;sDAEiCS,K,EAAO;AACvC,WAAKD,WAAL,CAAiB,gCAAjB,EAAmDC,KAAnD;AACD;;;6BAEQ;AACP,WAAKP,MAAL,CAAYQ,GAAZ,CAAgB,EAAhB;AACD;;;oCAEe;AACd,WAAKC,cAAL;;AACA,UAAI,KAAKX,yBAAT,EAAoC;AAClC,aAAKY,sBAAL;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;;6CAC2B;AACvBN,MAAAA,YAAY,CAAC,KAAKP,6BAAN,CAAZ;;AACA,UAAI,KAAKE,8BAAT,EAAyC;AACvC,aAAKF,6BAAL,GAAqCc,UAAU,CAAC,KAAKN,uBAAL,CAA6BF,IAA7B,CAAkC,IAAlC,CAAD,EAA0C,KAAKJ,8BAA/C,CAA/C;AACD,OAFD,MAEO;AACL,aAAKM,uBAAL;AACD;AACF;;;8CAEyB;AACxB,WAAKR,6BAAL,GAAqC,IAArC;;AACA,UAAI,KAAKe,QAAT,EAAmB;AAAE;AACnB,aAAKC,WAAL,CAAiB,IAAjB;AACD;AACF;;;gCAEWC,W,EAAa;AACvB,UAAI,KAAKjB,6BAAL,KAAuC,IAA3C,EAAiD;AAC/C;AACAO,QAAAA,YAAY,CAAC,KAAKP,6BAAN,CAAZ;AACA,aAAKA,6BAAL,GAAqC,IAArC;AACD;;AACD,kFAAkBiB,WAAlB;AACD;;;yCAEoB;AACnB,WAAKd,MAAL,CAAYQ,GAAZ,CAAgB,KAAKO,WAArB;;AACA;AACD;;;uCAEkB;AACjB,aAAO,KAAKf,MAAL,CAAYQ,GAAZ,EAAP;AACD;AAED;AACF;AACA;;;;6CAC2BO,W,EAAaD,W,EAAa;AACjD,UAAIE,kBAAkB,4FAAkCD,WAAlC,EAA+CD,WAA/C,CAAtB;;AAEA,UAAIA,WAAJ,EAAiB;AACf,YAAI,KAAKhB,yBAAL,IAAkCkB,kBAAtC,EAA0D;AACxD;AACA,eAAKC,8BAAL,GAAsC,IAAtC;AACD;AACF,OALD,MAKO;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAI,KAAKA,8BAAT,EAAyC;AACvCD,UAAAA,kBAAkB,GAAG,IAArB;AACD;;AACD,aAAKC,8BAAL,GAAsC,KAAtC;AACD;;AAED,aAAOD,kBAAP;AACD;;;;EA5GqCtB,U;;SAAnBC,U","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {ValueField} from '../../index';\n\n/**\n * Common base class for ValueFields having an HTML input field.\n */\nexport default class BasicField extends ValueField {\n\n  constructor() {\n    super();\n    this.disabledCopyOverlay = true;\n    this._displayTextModifiedTimeoutId = null;\n    this.updateDisplayTextOnModify = false;\n    this.updateDisplayTextOnModifyDelay = 250; // in milliseconds\n  }\n\n  addField($field) {\n    super.addField($field);\n    if ($field) {\n      $field.on('input', this._onFieldInput.bind(this));\n    }\n  }\n\n  setUpdateDisplayTextOnModify(updateDisplayTextOnModify) {\n    // Execute pending \"accept input while typing\" function _before_ updating the \"updateDisplayTextOnModify\" property\n    if (this._displayTextModifiedTimeoutId !== null) {\n      // Cancel pending \"acceptInput(true)\" call (see _onDisplayTextModified) and execute it now\n      clearTimeout(this._displayTextModifiedTimeoutId);\n      this._acceptInputWhileTyping();\n    }\n\n    this.setProperty('updateDisplayTextOnModify', updateDisplayTextOnModify);\n  }\n\n  setUpdateDisplayTextOnModifyDelay(delay) {\n    this.setProperty('updateDisplayTextOnModifyDelay', delay);\n  }\n\n  _clear() {\n    this.$field.val('');\n  }\n\n  _onFieldInput() {\n    this._updateHasText();\n    if (this.updateDisplayTextOnModify) {\n      this._onDisplayTextModified();\n    }\n  }\n\n  /**\n   * Called when the property 'updateDisplayTextOnModified' is TRUE and the display text (field's input\n   * value) has been modified by a user action, e.g. a key or paste event. If the property is FALSE, this\n   * method is _never_ called. Uses the debounce pattern.\n   */\n  _onDisplayTextModified() {\n    clearTimeout(this._displayTextModifiedTimeoutId);\n    if (this.updateDisplayTextOnModifyDelay) {\n      this._displayTextModifiedTimeoutId = setTimeout(this._acceptInputWhileTyping.bind(this), this.updateDisplayTextOnModifyDelay);\n    } else {\n      this._acceptInputWhileTyping();\n    }\n  }\n\n  _acceptInputWhileTyping() {\n    this._displayTextModifiedTimeoutId = null;\n    if (this.rendered) { // Check needed because field may have been removed in the meantime\n      this.acceptInput(true);\n    }\n  }\n\n  acceptInput(whileTyping) {\n    if (this._displayTextModifiedTimeoutId !== null) {\n      // Cancel pending \"acceptInput(true)\" call (see _onDisplayTextModified) and execute it now\n      clearTimeout(this._displayTextModifiedTimeoutId);\n      this._displayTextModifiedTimeoutId = null;\n    }\n    super.acceptInput(whileTyping);\n  }\n\n  _renderDisplayText() {\n    this.$field.val(this.displayText);\n    super._renderDisplayText();\n  }\n\n  _readDisplayText() {\n    return this.$field.val();\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  _checkDisplayTextChanged(displayText, whileTyping) {\n    var displayTextChanged = super._checkDisplayTextChanged(displayText, whileTyping);\n\n    if (whileTyping) {\n      if (this.updateDisplayTextOnModify && displayTextChanged) {\n        // Remember that we sent some events to the server with \"whileTyping=true\"\n        this._displayTextChangedWhileTyping = true;\n      }\n    } else {\n      // In 'updateDisplayTextOnModify' mode, each change of text is sent to the server with whileTyping=true,\n      // see _onDisplayTextModified (facade: \"setDisplayTextFromUI\"). On field blur, the text must be sent again\n      // with whileTyping=false to update the model's value as well (facade: \"parseAndSetValueFromUI\").\n      // Usually, the displayText is only sent if it has changed (to prevent too many server requests). But in\n      // the case 'updateDisplayTextOnModify AND whileTyping=false', it has to be sent if the displayText\n      // was previously sent with whileTyping=true. To do so, we make the acceptInput() method think that the\n      // text has changed (even if it has not).\n      if (this._displayTextChangedWhileTyping) {\n        displayTextChanged = true;\n      }\n      this._displayTextChangedWhileTyping = false;\n    }\n\n    return displayTextChanged;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}