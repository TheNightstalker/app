{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension, HtmlComponent, HtmlEnvironment, LayoutConstants, LogicalGridLayoutConfig, LogicalGridLayoutInfo } from '../../index';\nimport $ from 'jquery';\n/**\n * JavaScript port of org.eclipse.scout.rt.ui.swing.LogicalGridLayout.\n *\n * @param options available options: hgap, vgap, rowHeight, columnWidth, minWidth\n *\n */\n\nvar LogicalGridLayout = /*#__PURE__*/function (_AbstractLayout) {\n  _inherits(LogicalGridLayout, _AbstractLayout);\n\n  var _super = _createSuper(LogicalGridLayout);\n\n  function LogicalGridLayout(widget, layoutConfig) {\n    var _this;\n\n    _classCallCheck(this, LogicalGridLayout);\n\n    _this = _super.call(this);\n    _this.cssClass = 'logical-grid-layout';\n    _this.validityBasedOnContainerSize = new Dimension();\n    _this.valid = false;\n    _this.widget = widget;\n    _this.info = null;\n\n    _this._initDefaults();\n\n    _this.layoutConfig = LogicalGridLayoutConfig.ensure(layoutConfig || {});\n\n    _this.layoutConfig.applyToLayout(_assertThisInitialized(_this));\n\n    _this.htmlPropertyChangeHandler = _this._onHtmlEnvironmenPropertyChange.bind(_assertThisInitialized(_this));\n    HtmlEnvironment.get().on('propertyChange', _this.htmlPropertyChangeHandler);\n\n    _this.widget.one('remove', function () {\n      HtmlEnvironment.get().off('propertyChange', this.htmlPropertyChangeHandler);\n    }.bind(_assertThisInitialized(_this)));\n\n    return _this;\n  }\n\n  _createClass(LogicalGridLayout, [{\n    key: \"_initDefaults\",\n    value: function _initDefaults() {\n      var env = HtmlEnvironment.get();\n      this.hgap = env.formColumnGap;\n      this.vgap = env.formRowGap;\n      this.columnWidth = env.formColumnWidth;\n      this.rowHeight = env.formRowHeight;\n      this.minWidth = 0;\n    }\n  }, {\n    key: \"_onHtmlEnvironmenPropertyChange\",\n    value: function _onHtmlEnvironmenPropertyChange() {\n      this._initDefaults();\n\n      this.layoutConfig.applyToLayout(this);\n      this.widget.invalidateLayoutTree();\n      this.widget.invalidateLogicalGrid();\n    }\n  }, {\n    key: \"validateLayout\",\n    value: function validateLayout($container, options) {\n      var visibleComps = [],\n          visibleCons = []; // If there is a logical grid, validate it (= recalculate if it is dirty) and use the grid config to get the grid relevant widgets (Scout JS).\n      // If there is no logical grid the grid relevant widgets are found using DOM by selecting the children with a html component (Scout classic).\n\n      if (this.widget.logicalGrid) {\n        this.widget.validateLogicalGrid(); // It is important that the logical grid and the layout use the same widgets. Otherwise there may be widgets without a gridData which is required by the layout.\n        // This can happen if the widgets are inserted and removed by an animation before the layout has been done. If the widget is removed using an animation it is not in the list of getGridWidgets() anymore but may still be in the DOM.\n\n        this.widget.logicalGrid.gridConfig.getGridWidgets().forEach(function (widget) {\n          if (!widget.rendered) {\n            // getGridWidgets may return non rendered widgets, but grid should be calculated nevertheless\n            return;\n          }\n\n          if (!widget.htmlComp) {\n            $.log.isWarnEnabled() && $.log.warn('(LogicalGridLayout#validateLayout) no htmlComp found, widget cannot be layouted. Widget: ' + widget);\n            return;\n          }\n\n          validateGridData.call(this, widget.htmlComp);\n        }, this);\n      } else {\n        $container.children().each(function (idx, elem) {\n          var $comp = $(elem);\n          var htmlComp = HtmlComponent.optGet($comp);\n\n          if (!htmlComp) {\n            // Only consider elements with a html component\n            return;\n          }\n\n          validateGridData.call(this, htmlComp);\n        }.bind(this));\n      }\n\n      function validateGridData(htmlComp) {\n        if (this._validateGridData(htmlComp)) {\n          visibleComps.push(htmlComp.$comp);\n          visibleCons.push(htmlComp.layoutData);\n        }\n      }\n\n      this.info = new LogicalGridLayoutInfo({\n        $components: visibleComps,\n        cons: visibleCons,\n        hgap: this.hgap,\n        vgap: this.vgap,\n        rowHeight: this.rowHeight,\n        columnWidth: this.columnWidth,\n        widthHint: options.widthHint,\n        heightHint: options.heightHint,\n        widthOnly: options.widthOnly\n      });\n      $.log.isTraceEnabled() && $.log.trace('(LogicalGridLayout#validateLayout) $container=' + HtmlComponent.get($container).debug());\n    }\n  }, {\n    key: \"_validateGridData\",\n    value: function _validateGridData(htmlComp) {\n      var $comp = htmlComp.$comp;\n      var widget = $comp.data('widget'); // Prefer the visibility state of the widget, if there is one.\n      // This allows for transitions, because the $component may still be in the process of being made invisible\n\n      var visible = widget ? widget.isVisible() : $comp.isVisible();\n\n      if (visible) {\n        htmlComp.layoutData.validate();\n        return true;\n      }\n    }\n  }, {\n    key: \"layout\",\n    value: function layout($container) {\n      this._layout($container);\n    }\n  }, {\n    key: \"_layout\",\n    value: function _layout($container) {\n      var htmlContainer = HtmlComponent.get($container),\n          containerSize = htmlContainer.availableSize(),\n          containerInsets = htmlContainer.insets();\n      this.validateLayout($container, {\n        widthHint: containerSize.width - containerInsets.horizontal(),\n        heightHint: containerSize.height - containerInsets.vertical()\n      });\n\n      if (this.minWidth > 0 && containerSize.width < this.minWidth) {\n        containerSize.width = this.minWidth;\n      }\n\n      $.log.isTraceEnabled() && $.log.trace('(LogicalGridLayout#layout) container ' + htmlContainer.debug() + ' size=' + containerSize + ' insets=' + containerInsets);\n\n      var cellBounds = this._layoutCellBounds(containerSize, containerInsets); // Set bounds of components\n\n\n      var r1, r2, r, d, $comp, i, htmlComp, data, delta, margins;\n\n      for (i = 0; i < this.info.$components.length; i++) {\n        $comp = this.info.$components[i];\n        htmlComp = HtmlComponent.get($comp);\n        data = this.info.gridDatas[i];\n        r1 = cellBounds[data.gridy][data.gridx];\n        r2 = cellBounds[data.gridy + data.gridh - 1][data.gridx + data.gridw - 1];\n        r = r1.union(r2);\n        margins = htmlComp.margins();\n        r.width -= margins.horizontal();\n        r.height -= margins.vertical();\n\n        if (data.fillHorizontal && data.fillVertical) {// ok\n        } else {\n          d = this.info.compSize[i];\n\n          if (!data.fillHorizontal && d.width < r.width) {\n            delta = r.width - d.width;\n            r.width = d.width;\n\n            if (data.horizontalAlignment === 0) {\n              // Do ceil the result as other layout managers of Java also handle floating calculation results that way.\n              // This is important if being used in conjunction with another layout manager.\n              // E.g. the editable checkbox in inline table cell is a JCheckBox and rendered by LogicalGridLayout,\n              // whereas the default boolean representation in a table cell is simply an image on a label positioned by\n              // default layout manager. If switching in between of edit and non-edit mode, the widget would bounce otherwise.\n              r.x += Math.ceil(delta / 2.0);\n            } else if (data.horizontalAlignment > 0) {\n              r.x += delta;\n            }\n          }\n\n          if (!data.fillVertical && d.height < r.height) {\n            delta = r.height - d.height;\n\n            if (data.heightHint === 0) {\n              r.height = d.height;\n            } else {\n              r.height = data.heightHint;\n            }\n\n            if (data.verticalAlignment === 0) {\n              // Do ceil the result as other layout managers of Java also handle floating calculation results that way.\n              // This is important if being used in conjunction with another layout manager.\n              // E.g. the editable checkbox in inline table cell is a JCheckBox and rendered by LogicalGridLayout,\n              // whereas the default boolean representation in a table cell is simply an image on a label positioned by\n              // default layout manager. If switching in between of edit and non-edit mode, the widget would bounce otherwise.\n              r.y += Math.ceil(delta / 2.0);\n            } else if (data.verticalAlignment > 0) {\n              r.y += delta;\n            }\n          }\n        }\n\n        $.log.isTraceEnabled() && $.log.trace('(LogicalGridLayout#layout) comp=' + htmlComp.debug() + ' bounds=' + r);\n        htmlComp.setBounds(r);\n      }\n    }\n  }, {\n    key: \"_layoutCellBounds\",\n    value: function _layoutCellBounds(containerSize, containerInsets) {\n      return this.info.layoutCellBounds(containerSize, containerInsets);\n    }\n  }, {\n    key: \"preferredLayoutSize\",\n    value: function preferredLayoutSize($container, options) {\n      // widthHint and heightHint are already adjusted by HtmlComponent, no need to remove insets here\n      this.validateLayout($container, options);\n      var sizeflag = LayoutConstants.PREF;\n      var dim = new Dimension(); // w\n\n      var i,\n          w,\n          h,\n          useCount = 0;\n\n      for (i = 0; i < this.info.cols; i++) {\n        w = this.info.width[i][sizeflag];\n\n        if (useCount > 0) {\n          dim.width += this.hgap;\n        }\n\n        dim.width += w;\n        useCount++;\n      } // h\n\n\n      useCount = 0;\n\n      for (i = 0; i < this.info.rows; i++) {\n        h = this.info.height[i][sizeflag];\n\n        if (useCount > 0) {\n          dim.height += this.vgap;\n        }\n\n        dim.height += h;\n        useCount++;\n      } // insets\n\n\n      var insets = HtmlComponent.get($container).insets();\n      dim.width += insets.horizontal();\n      dim.height += insets.vertical();\n      return dim;\n    }\n  }]);\n\n  return LogicalGridLayout;\n}(AbstractLayout);\n\nexport { LogicalGridLayout as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/layout/logicalgrid/LogicalGridLayout.js"],"names":["AbstractLayout","Dimension","HtmlComponent","HtmlEnvironment","LayoutConstants","LogicalGridLayoutConfig","LogicalGridLayoutInfo","$","LogicalGridLayout","widget","layoutConfig","cssClass","validityBasedOnContainerSize","valid","info","_initDefaults","ensure","applyToLayout","htmlPropertyChangeHandler","_onHtmlEnvironmenPropertyChange","bind","get","on","one","off","env","hgap","formColumnGap","vgap","formRowGap","columnWidth","formColumnWidth","rowHeight","formRowHeight","minWidth","invalidateLayoutTree","invalidateLogicalGrid","$container","options","visibleComps","visibleCons","logicalGrid","validateLogicalGrid","gridConfig","getGridWidgets","forEach","rendered","htmlComp","log","isWarnEnabled","warn","validateGridData","call","children","each","idx","elem","$comp","optGet","_validateGridData","push","layoutData","$components","cons","widthHint","heightHint","widthOnly","isTraceEnabled","trace","debug","data","visible","isVisible","validate","_layout","htmlContainer","containerSize","availableSize","containerInsets","insets","validateLayout","width","horizontal","height","vertical","cellBounds","_layoutCellBounds","r1","r2","r","d","i","delta","margins","length","gridDatas","gridy","gridx","gridh","gridw","union","fillHorizontal","fillVertical","compSize","horizontalAlignment","x","Math","ceil","verticalAlignment","y","setBounds","layoutCellBounds","sizeflag","PREF","dim","w","h","useCount","cols","rows"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension, HtmlComponent, HtmlEnvironment, LayoutConstants, LogicalGridLayoutConfig, LogicalGridLayoutInfo} from '../../index';\nimport $ from 'jquery';\n\n/**\n * JavaScript port of org.eclipse.scout.rt.ui.swing.LogicalGridLayout.\n *\n * @param options available options: hgap, vgap, rowHeight, columnWidth, minWidth\n *\n */\nexport default class LogicalGridLayout extends AbstractLayout {\n\n  constructor(widget, layoutConfig) {\n    super();\n    this.cssClass = 'logical-grid-layout';\n    this.validityBasedOnContainerSize = new Dimension();\n    this.valid = false;\n    this.widget = widget;\n    this.info = null;\n\n    this._initDefaults();\n    this.layoutConfig = LogicalGridLayoutConfig.ensure(layoutConfig || {});\n    this.layoutConfig.applyToLayout(this);\n\n    this.htmlPropertyChangeHandler = this._onHtmlEnvironmenPropertyChange.bind(this);\n    HtmlEnvironment.get().on('propertyChange', this.htmlPropertyChangeHandler);\n    this.widget.one('remove', function() {\n      HtmlEnvironment.get().off('propertyChange', this.htmlPropertyChangeHandler);\n    }.bind(this));\n\n  }\n\n  _initDefaults() {\n    var env = HtmlEnvironment.get();\n    this.hgap = env.formColumnGap;\n    this.vgap = env.formRowGap;\n    this.columnWidth = env.formColumnWidth;\n    this.rowHeight = env.formRowHeight;\n    this.minWidth = 0;\n  }\n\n  _onHtmlEnvironmenPropertyChange() {\n    this._initDefaults();\n    this.layoutConfig.applyToLayout(this);\n    this.widget.invalidateLayoutTree();\n    this.widget.invalidateLogicalGrid();\n  }\n\n  validateLayout($container, options) {\n    var visibleComps = [],\n      visibleCons = [];\n\n    // If there is a logical grid, validate it (= recalculate if it is dirty) and use the grid config to get the grid relevant widgets (Scout JS).\n    // If there is no logical grid the grid relevant widgets are found using DOM by selecting the children with a html component (Scout classic).\n    if (this.widget.logicalGrid) {\n      this.widget.validateLogicalGrid();\n      // It is important that the logical grid and the layout use the same widgets. Otherwise there may be widgets without a gridData which is required by the layout.\n      // This can happen if the widgets are inserted and removed by an animation before the layout has been done. If the widget is removed using an animation it is not in the list of getGridWidgets() anymore but may still be in the DOM.\n      this.widget.logicalGrid.gridConfig.getGridWidgets().forEach(function(widget) {\n        if (!widget.rendered) {\n          // getGridWidgets may return non rendered widgets, but grid should be calculated nevertheless\n          return;\n        }\n        if (!widget.htmlComp) {\n          $.log.isWarnEnabled() && $.log.warn('(LogicalGridLayout#validateLayout) no htmlComp found, widget cannot be layouted. Widget: ' + widget);\n          return;\n        }\n        validateGridData.call(this, widget.htmlComp);\n      }, this);\n    } else {\n      $container.children().each(function(idx, elem) {\n        var $comp = $(elem);\n        var htmlComp = HtmlComponent.optGet($comp);\n        if (!htmlComp) {\n          // Only consider elements with a html component\n          return;\n        }\n        validateGridData.call(this, htmlComp);\n      }.bind(this));\n    }\n\n    function validateGridData(htmlComp) {\n      if (this._validateGridData(htmlComp)) {\n        visibleComps.push(htmlComp.$comp);\n        visibleCons.push(htmlComp.layoutData);\n      }\n    }\n\n    this.info = new LogicalGridLayoutInfo({\n      $components: visibleComps,\n      cons: visibleCons,\n      hgap: this.hgap,\n      vgap: this.vgap,\n      rowHeight: this.rowHeight,\n      columnWidth: this.columnWidth,\n      widthHint: options.widthHint,\n      heightHint: options.heightHint,\n      widthOnly: options.widthOnly\n    });\n    $.log.isTraceEnabled() && $.log.trace('(LogicalGridLayout#validateLayout) $container=' + HtmlComponent.get($container).debug());\n  }\n\n  _validateGridData(htmlComp) {\n    var $comp = htmlComp.$comp;\n    var widget = $comp.data('widget');\n    // Prefer the visibility state of the widget, if there is one.\n    // This allows for transitions, because the $component may still be in the process of being made invisible\n    var visible = widget ? widget.isVisible() : $comp.isVisible();\n    if (visible) {\n      htmlComp.layoutData.validate();\n      return true;\n    }\n  }\n\n  layout($container) {\n    this._layout($container);\n  }\n\n  _layout($container) {\n    var htmlContainer = HtmlComponent.get($container),\n      containerSize = htmlContainer.availableSize(),\n      containerInsets = htmlContainer.insets();\n    this.validateLayout($container, {\n      widthHint: containerSize.width - containerInsets.horizontal(),\n      heightHint: containerSize.height - containerInsets.vertical()\n    });\n    if (this.minWidth > 0 && containerSize.width < this.minWidth) {\n      containerSize.width = this.minWidth;\n    }\n    $.log.isTraceEnabled() && $.log.trace('(LogicalGridLayout#layout) container ' + htmlContainer.debug() + ' size=' + containerSize + ' insets=' + containerInsets);\n    var cellBounds = this._layoutCellBounds(containerSize, containerInsets);\n\n    // Set bounds of components\n    var r1, r2, r, d, $comp, i, htmlComp, data, delta, margins;\n    for (i = 0; i < this.info.$components.length; i++) {\n      $comp = this.info.$components[i];\n      htmlComp = HtmlComponent.get($comp);\n      data = this.info.gridDatas[i];\n      r1 = cellBounds[data.gridy][data.gridx];\n      r2 = cellBounds[data.gridy + data.gridh - 1][data.gridx + data.gridw - 1];\n      r = r1.union(r2);\n      margins = htmlComp.margins();\n      r.width -= margins.horizontal();\n      r.height -= margins.vertical();\n      if (data.fillHorizontal && data.fillVertical) {\n        // ok\n      } else {\n        d = this.info.compSize[i];\n        if (!data.fillHorizontal && d.width < r.width) {\n          delta = r.width - d.width;\n          r.width = d.width;\n          if (data.horizontalAlignment === 0) {\n            // Do ceil the result as other layout managers of Java also handle floating calculation results that way.\n            // This is important if being used in conjunction with another layout manager.\n            // E.g. the editable checkbox in inline table cell is a JCheckBox and rendered by LogicalGridLayout,\n            // whereas the default boolean representation in a table cell is simply an image on a label positioned by\n            // default layout manager. If switching in between of edit and non-edit mode, the widget would bounce otherwise.\n            r.x += Math.ceil(delta / 2.0);\n          } else if (data.horizontalAlignment > 0) {\n            r.x += delta;\n          }\n        }\n        if (!data.fillVertical && d.height < r.height) {\n          delta = r.height - d.height;\n          if (data.heightHint === 0) {\n            r.height = d.height;\n          } else {\n            r.height = data.heightHint;\n          }\n          if (data.verticalAlignment === 0) {\n            // Do ceil the result as other layout managers of Java also handle floating calculation results that way.\n            // This is important if being used in conjunction with another layout manager.\n            // E.g. the editable checkbox in inline table cell is a JCheckBox and rendered by LogicalGridLayout,\n            // whereas the default boolean representation in a table cell is simply an image on a label positioned by\n            // default layout manager. If switching in between of edit and non-edit mode, the widget would bounce otherwise.\n            r.y += Math.ceil(delta / 2.0);\n          } else if (data.verticalAlignment > 0) {\n            r.y += delta;\n          }\n        }\n      }\n      $.log.isTraceEnabled() && $.log.trace('(LogicalGridLayout#layout) comp=' + htmlComp.debug() + ' bounds=' + r);\n      htmlComp.setBounds(r);\n    }\n  }\n\n  _layoutCellBounds(containerSize, containerInsets) {\n    return this.info.layoutCellBounds(containerSize, containerInsets);\n  }\n\n  preferredLayoutSize($container, options) {\n    // widthHint and heightHint are already adjusted by HtmlComponent, no need to remove insets here\n    this.validateLayout($container, options);\n\n    var sizeflag = LayoutConstants.PREF;\n    var dim = new Dimension();\n    // w\n    var i, w, h, useCount = 0;\n    for (i = 0; i < this.info.cols; i++) {\n      w = this.info.width[i][sizeflag];\n      if (useCount > 0) {\n        dim.width += this.hgap;\n      }\n      dim.width += w;\n      useCount++;\n    }\n    // h\n    useCount = 0;\n    for (i = 0; i < this.info.rows; i++) {\n      h = this.info.height[i][sizeflag];\n      if (useCount > 0) {\n        dim.height += this.vgap;\n      }\n      dim.height += h;\n      useCount++;\n    }\n    // insets\n    var insets = HtmlComponent.get($container).insets();\n    dim.width += insets.horizontal();\n    dim.height += insets.vertical();\n    return dim;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}