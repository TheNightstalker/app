{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\n/**\n * Is used to render glasspane after the glasspane targets are set. This case occurs when a child is rendered before a parent is rendered-> on reload page.\n */\nvar DeferredGlassPaneTarget = /*#__PURE__*/function () {\n  function DeferredGlassPaneTarget() {\n    _classCallCheck(this, DeferredGlassPaneTarget);\n\n    this.$glassPaneTargets;\n    this.glassPaneRenderer;\n  }\n\n  _createClass(DeferredGlassPaneTarget, [{\n    key: \"ready\",\n    value: function ready($glassPaneTargets) {\n      this.$glassPaneTargets = $glassPaneTargets;\n      this.renderWhenReady();\n    }\n  }, {\n    key: \"rendererReady\",\n    value: function rendererReady(glassPaneRenderer) {\n      this.glassPaneRenderer = glassPaneRenderer;\n      this.renderWhenReady();\n    }\n  }, {\n    key: \"removeGlassPaneRenderer\",\n    value: function removeGlassPaneRenderer(glassPaneRenderer) {\n      if (this.glassPaneRenderer === glassPaneRenderer) {\n        this.glassPaneRenderer = null;\n      }\n    }\n  }, {\n    key: \"renderWhenReady\",\n    value: function renderWhenReady() {\n      if (this.glassPaneRenderer && this.$glassPaneTargets && this.$glassPaneTargets.length > 0) {\n        this.$glassPaneTargets.forEach(function ($glassPaneTarget) {\n          this.glassPaneRenderer.renderGlassPane($glassPaneTarget);\n        }.bind(this));\n      }\n    }\n    /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n    /**\n     * @param widget a not rendered Widget\n     * @findGlassPaneTargets function which returns the targets\n     */\n\n  }], [{\n    key: \"createFor\",\n    value: function createFor(widget, findGlassPaneTargets) {\n      if (widget.rendered) {\n        throw new Error('Don\\'t call this function if widget is already rendered.');\n      }\n\n      var deferred = new DeferredGlassPaneTarget();\n\n      var renderedHandler = function renderedHandler(event) {\n        var elements = findGlassPaneTargets();\n        deferred.ready(elements);\n      };\n\n      widget.one('render', renderedHandler);\n      widget.one('destroy', function () {\n        widget.off('render', renderedHandler);\n      });\n      return [deferred];\n    }\n  }]);\n\n  return DeferredGlassPaneTarget;\n}();\n\nexport { DeferredGlassPaneTarget as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/glasspane/DeferredGlassPaneTarget.js"],"names":["DeferredGlassPaneTarget","$glassPaneTargets","glassPaneRenderer","renderWhenReady","length","forEach","$glassPaneTarget","renderGlassPane","bind","widget","findGlassPaneTargets","rendered","Error","deferred","renderedHandler","event","elements","ready","one","off"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;IACqBA,uB;AACnB,qCAAc;AAAA;;AACZ,SAAKC,iBAAL;AACA,SAAKC,iBAAL;AACD;;;;0BAEKD,iB,EAAmB;AACvB,WAAKA,iBAAL,GAAyBA,iBAAzB;AACA,WAAKE,eAAL;AACD;;;kCAEaD,iB,EAAmB;AAC/B,WAAKA,iBAAL,GAAyBA,iBAAzB;AACA,WAAKC,eAAL;AACD;;;4CAEuBD,iB,EAAmB;AACzC,UAAI,KAAKA,iBAAL,KAA2BA,iBAA/B,EAAkD;AAChD,aAAKA,iBAAL,GAAyB,IAAzB;AACD;AACF;;;sCAEiB;AAChB,UAAI,KAAKA,iBAAL,IAA0B,KAAKD,iBAA/B,IAAoD,KAAKA,iBAAL,CAAuBG,MAAvB,GAAgC,CAAxF,EAA2F;AACzF,aAAKH,iBAAL,CAAuBI,OAAvB,CAA+B,UAASC,gBAAT,EAA2B;AACxD,eAAKJ,iBAAL,CAAuBK,eAAvB,CAAuCD,gBAAvC;AACD,SAF8B,CAE7BE,IAF6B,CAExB,IAFwB,CAA/B;AAGD;AACF;AAED;;AAEA;AACF;AACA;AACA;;;;8BACmBC,M,EAAQC,oB,EAAsB;AAC7C,UAAID,MAAM,CAACE,QAAX,EAAqB;AACnB,cAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,UAAIC,QAAQ,GAAG,IAAIb,uBAAJ,EAAf;;AACA,UAAIc,eAAe,GAAG,SAAlBA,eAAkB,CAASC,KAAT,EAAgB;AACpC,YAAIC,QAAQ,GAAGN,oBAAoB,EAAnC;AACAG,QAAAA,QAAQ,CAACI,KAAT,CAAeD,QAAf;AACD,OAHD;;AAKAP,MAAAA,MAAM,CAACS,GAAP,CAAW,QAAX,EAAqBJ,eAArB;AACAL,MAAAA,MAAM,CAACS,GAAP,CAAW,SAAX,EAAsB,YAAW;AAC/BT,QAAAA,MAAM,CAACU,GAAP,CAAW,QAAX,EAAqBL,eAArB;AACD,OAFD;AAGA,aAAO,CAACD,QAAD,CAAP;AACD;;;;;;SApDkBb,uB","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\n/**\n * Is used to render glasspane after the glasspane targets are set. This case occurs when a child is rendered before a parent is rendered-> on reload page.\n */\nexport default class DeferredGlassPaneTarget {\n  constructor() {\n    this.$glassPaneTargets;\n    this.glassPaneRenderer;\n  }\n\n  ready($glassPaneTargets) {\n    this.$glassPaneTargets = $glassPaneTargets;\n    this.renderWhenReady();\n  }\n\n  rendererReady(glassPaneRenderer) {\n    this.glassPaneRenderer = glassPaneRenderer;\n    this.renderWhenReady();\n  }\n\n  removeGlassPaneRenderer(glassPaneRenderer) {\n    if (this.glassPaneRenderer === glassPaneRenderer) {\n      this.glassPaneRenderer = null;\n    }\n  }\n\n  renderWhenReady() {\n    if (this.glassPaneRenderer && this.$glassPaneTargets && this.$glassPaneTargets.length > 0) {\n      this.$glassPaneTargets.forEach(function($glassPaneTarget) {\n        this.glassPaneRenderer.renderGlassPane($glassPaneTarget);\n      }.bind(this));\n    }\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  /**\n   * @param widget a not rendered Widget\n   * @findGlassPaneTargets function which returns the targets\n   */\n  static createFor(widget, findGlassPaneTargets) {\n    if (widget.rendered) {\n      throw new Error('Don\\'t call this function if widget is already rendered.');\n    }\n\n    var deferred = new DeferredGlassPaneTarget();\n    var renderedHandler = function(event) {\n      var elements = findGlassPaneTargets();\n      deferred.ready(elements);\n    };\n\n    widget.one('render', renderedHandler);\n    widget.one('destroy', function() {\n      widget.off('render', renderedHandler);\n    });\n    return [deferred];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}