{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Device, FormField, scout, strings, Widget, widgets } from '../../index';\n/**\n * @param $parent used to determine which HTML document is used to create the new HTML element\n * @returns an INPUT element as used in Scout forms.\n */\n\nexport function makeTextField($parent, cssClass) {\n  return $parent.makeElement('<input>', cssClass).attr('type', 'text').attr('autocomplete', 'NoAutocomplete')\n  /* off and false are currently ignored in Chrome */\n  .disableSpellcheck();\n}\nexport function appendIcon($field, cssClass) {\n  /*\n   * Note: the field usually does $field.focus() when the icon is clicked.\n   * Unfocusable is required because when the icon is clicked the browser is in the middle of setting\n   * a new focus target, so we cannot simply change the focus target, because at the end the wrong target would be\n   * focused and the popup would be closed immediately. With 'unfocusable' the focus manager will prevent the default focus (and does not execute _handleIEEvent either)\n   */\n  var $icon = $field.appendSpan('icon unfocusable');\n\n  if (cssClass) {\n    $icon.addClass(cssClass);\n  }\n\n  return $icon;\n}\nexport function initTouch(field, model) {\n  field.embedded = scout.nvl(model.embedded, false); // when 'touchMode' is not set explicitly, check the device\n\n  field.touchMode = scout.nvl(model.touchMode, Device.get().supportsOnlyTouch());\n}\n/**\n * Calls JQuery $.text() for touch-devices and $.val() for all other devices, used together with #makeInputOrDiv().\n * Works as setter when called with 2 arguments, works a getter when called with 1 arguments.\n *\n * @return when called with 1 argument: $field.text() or $field.val()\n */\n\nexport function valOrText($field, text) {\n  var isDiv = $field.is('div');\n\n  if (arguments.length === 2) {\n    if (isDiv) {\n      $field.text(text);\n    } else {\n      $field.val(text);\n    }\n  } else {\n    return isDiv ? $field.text() : $field.val();\n  }\n}\n/**\n * Creates a DIV element for touch-devices and an INPUT element for all other devices,\n * depending on the touch flag of the given field.\n *\n * @param {FormField} field\n * @param {string} [cssClass]\n */\n\nexport function makeInputOrDiv(field, cssClass) {\n  if (field.touchMode) {\n    return makeInputDiv(field, cssClass);\n  }\n\n  return makeTextField(field.$container, cssClass);\n}\n/**\n * Creates a DIV element that looks like an INPUT element.\n *\n * @param {FormField} field\n * @param {string} [cssClass]\n */\n\nexport function makeInputDiv(field, cssClass) {\n  return field.$container.makeDiv(strings.join(' ', 'input-field', cssClass));\n} // note: the INPUT element does not process the click event when the field is disabled\n// however, the DIV element used in touch-mode does process the event anyway, that's\n// why this check is required.\n\nexport function handleOnClick(field) {\n  return field.enabledComputed && !field.embedded && !field.popup;\n}\n/**\n * Calls activate() on the first focusable field of the given fields. Does nothing if the widget is disabled or not rendered.\n *\n * @param {Widget} field\n * @param {FormField[]} fields\n */\n\nexport function activateFirstField(widget, fields) {\n  var firstField = widgets.findFirstFocusableWidget(fields, widget);\n\n  if (firstField) {\n    firstField.activate();\n  }\n}\n/**\n * Links the given element with the given label by setting aria-labelledby.<br>\n * This allows screen readers to build a catalog of the elements on the screen and their relationships, for example, to read the label when the input is focused.\n */\n\nexport function linkElementWithLabel($elem, $label) {\n  var labelId = $label.attr('id');\n\n  if (!labelId) {\n    // Create an id if the element does not have one yet\n    labelId = widgets.createUniqueId('lbl');\n    $label.attr('id', labelId);\n  }\n\n  var labelledBy = $elem.attr('aria-labelledby') || '';\n\n  if (labelledBy) {\n    // Add to the existing value if there is one\n    labelId += ' ' + labelledBy;\n  }\n\n  $elem.attr('aria-labelledby', labelId);\n}\n/**\n * @param field a ValueField which works like a Proposal- or SmartField. The field must have a property <i>popup</i> and\n *     a <i>_tooltip</i> function.\n * @param target\n * @returns {boolean} Whether or not the target is on the field (including popup and tooltip)\n */\n\nexport function eventOutsideProposalField(field, target) {\n  var eventOnField = safeIsOrHas(field.$field, target) || safeIsOrHas(field.$icon, target) || safeIsOrHas(field.$clearIcon, target);\n  var eventOnPopup = safeWidgetIsOrHas(field.popup, target);\n  var eventOnTooltip = safeWidgetIsOrHas(field._tooltip(), target);\n  return !eventOnField && !eventOnPopup && !eventOnTooltip;\n\n  function safeIsOrHas($elem, target) {\n    return $elem && $elem.isOrHas(target);\n  }\n\n  function safeWidgetIsOrHas(widget, target) {\n    return widget && widget.rendered && widget.$container.isOrHas(target);\n  }\n}\nexport default {\n  activateFirstField: activateFirstField,\n  appendIcon: appendIcon,\n  eventOutsideProposalField: eventOutsideProposalField,\n  handleOnClick: handleOnClick,\n  initTouch: initTouch,\n  linkElementWithLabel: linkElementWithLabel,\n  makeInputDiv: makeInputDiv,\n  makeInputOrDiv: makeInputOrDiv,\n  makeTextField: makeTextField,\n  valOrText: valOrText\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/fields.js"],"names":["Device","FormField","scout","strings","Widget","widgets","makeTextField","$parent","cssClass","makeElement","attr","disableSpellcheck","appendIcon","$field","$icon","appendSpan","addClass","initTouch","field","model","embedded","nvl","touchMode","get","supportsOnlyTouch","valOrText","text","isDiv","is","arguments","length","val","makeInputOrDiv","makeInputDiv","$container","makeDiv","join","handleOnClick","enabledComputed","popup","activateFirstField","widget","fields","firstField","findFirstFocusableWidget","activate","linkElementWithLabel","$elem","$label","labelId","createUniqueId","labelledBy","eventOutsideProposalField","target","eventOnField","safeIsOrHas","$clearIcon","eventOnPopup","safeWidgetIsOrHas","eventOnTooltip","_tooltip","isOrHas","rendered"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Device, FormField, scout, strings, Widget, widgets} from '../../index';\n\n/**\n * @param $parent used to determine which HTML document is used to create the new HTML element\n * @returns an INPUT element as used in Scout forms.\n */\nexport function makeTextField($parent, cssClass) {\n  return $parent.makeElement('<input>', cssClass)\n    .attr('type', 'text')\n    .attr('autocomplete', 'NoAutocomplete') /* off and false are currently ignored in Chrome */\n    .disableSpellcheck();\n}\n\nexport function appendIcon($field, cssClass) {\n  /*\n   * Note: the field usually does $field.focus() when the icon is clicked.\n   * Unfocusable is required because when the icon is clicked the browser is in the middle of setting\n   * a new focus target, so we cannot simply change the focus target, because at the end the wrong target would be\n   * focused and the popup would be closed immediately. With 'unfocusable' the focus manager will prevent the default focus (and does not execute _handleIEEvent either)\n   */\n  var $icon = $field.appendSpan('icon unfocusable');\n  if (cssClass) {\n    $icon.addClass(cssClass);\n  }\n  return $icon;\n}\n\nexport function initTouch(field, model) {\n  field.embedded = scout.nvl(model.embedded, false);\n  // when 'touchMode' is not set explicitly, check the device\n  field.touchMode = scout.nvl(model.touchMode, Device.get().supportsOnlyTouch());\n}\n\n/**\n * Calls JQuery $.text() for touch-devices and $.val() for all other devices, used together with #makeInputOrDiv().\n * Works as setter when called with 2 arguments, works a getter when called with 1 arguments.\n *\n * @return when called with 1 argument: $field.text() or $field.val()\n */\nexport function valOrText($field, text) {\n  var isDiv = $field.is('div');\n  if (arguments.length === 2) {\n    if (isDiv) {\n      $field.text(text);\n    } else {\n      $field.val(text);\n    }\n  } else {\n    return isDiv ? $field.text() : $field.val();\n  }\n}\n\n/**\n * Creates a DIV element for touch-devices and an INPUT element for all other devices,\n * depending on the touch flag of the given field.\n *\n * @param {FormField} field\n * @param {string} [cssClass]\n */\nexport function makeInputOrDiv(field, cssClass) {\n  if (field.touchMode) {\n    return makeInputDiv(field, cssClass);\n  }\n  return makeTextField(field.$container, cssClass);\n}\n\n/**\n * Creates a DIV element that looks like an INPUT element.\n *\n * @param {FormField} field\n * @param {string} [cssClass]\n */\nexport function makeInputDiv(field, cssClass) {\n  return field.$container.makeDiv(strings.join(' ', 'input-field', cssClass));\n}\n\n// note: the INPUT element does not process the click event when the field is disabled\n// however, the DIV element used in touch-mode does process the event anyway, that's\n// why this check is required.\nexport function handleOnClick(field) {\n  return field.enabledComputed && !field.embedded && !field.popup;\n}\n\n/**\n * Calls activate() on the first focusable field of the given fields. Does nothing if the widget is disabled or not rendered.\n *\n * @param {Widget} field\n * @param {FormField[]} fields\n */\nexport function activateFirstField(widget, fields) {\n  var firstField = widgets.findFirstFocusableWidget(fields, widget);\n  if (firstField) {\n    firstField.activate();\n  }\n}\n\n/**\n * Links the given element with the given label by setting aria-labelledby.<br>\n * This allows screen readers to build a catalog of the elements on the screen and their relationships, for example, to read the label when the input is focused.\n */\nexport function linkElementWithLabel($elem, $label) {\n  var labelId = $label.attr('id');\n  if (!labelId) {\n    // Create an id if the element does not have one yet\n    labelId = widgets.createUniqueId('lbl');\n    $label.attr('id', labelId);\n  }\n  var labelledBy = $elem.attr('aria-labelledby') || '';\n  if (labelledBy) {\n    // Add to the existing value if there is one\n    labelId += ' ' + labelledBy;\n  }\n  $elem.attr('aria-labelledby', labelId);\n}\n\n/**\n * @param field a ValueField which works like a Proposal- or SmartField. The field must have a property <i>popup</i> and\n *     a <i>_tooltip</i> function.\n * @param target\n * @returns {boolean} Whether or not the target is on the field (including popup and tooltip)\n */\nexport function eventOutsideProposalField(field, target) {\n  var eventOnField =\n    safeIsOrHas(field.$field, target) ||\n    safeIsOrHas(field.$icon, target) ||\n    safeIsOrHas(field.$clearIcon, target);\n  var eventOnPopup = safeWidgetIsOrHas(field.popup, target);\n  var eventOnTooltip = safeWidgetIsOrHas(field._tooltip(), target);\n\n  return !eventOnField && !eventOnPopup && !eventOnTooltip;\n\n  function safeIsOrHas($elem, target) {\n    return $elem && $elem.isOrHas(target);\n  }\n\n  function safeWidgetIsOrHas(widget, target) {\n    return widget && widget.rendered && widget.$container.isOrHas(target);\n  }\n}\n\nexport default {\n  activateFirstField,\n  appendIcon,\n  eventOutsideProposalField,\n  handleOnClick,\n  initTouch,\n  linkElementWithLabel,\n  makeInputDiv,\n  makeInputOrDiv,\n  makeTextField,\n  valOrText\n};\n"]},"metadata":{},"sourceType":"module"}