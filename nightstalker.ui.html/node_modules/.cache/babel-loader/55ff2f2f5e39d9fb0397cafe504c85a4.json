{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AjaxCall, App, arrays, BackgroundJobPollingStatus, BackgroundJobPollingSupport, Device, EventSupport, FileInput, FocusManager, fonts, LayoutValidator, Locale, MessageBox, ModelAdapter, NullWidget, ObjectFactory, objects, Reconnector, RemoteEvent, ResponseQueue, scout, Status, strings, TextMap, texts, TypeDescriptor, URL, UserAgent, webstorage } from '../index';\nimport $ from 'jquery';\n\nvar Session = /*#__PURE__*/function () {\n  function Session() {\n    _classCallCheck(this, Session);\n\n    this.$entryPoint = null;\n    this.partId = 0;\n    this.url = new URL();\n    this.userAgent = new UserAgent({\n      deviceType: Device.get().type,\n      touch: Device.get().supportsOnlyTouch(),\n      standalone: Device.get().isStandalone()\n    });\n    this.locale = null;\n    this.textMap = new TextMap();\n    this.ready = false; // true after desktop has been completely rendered\n\n    this.unloading = false; // true when 'beforeOnload' event has been triggered\n\n    this.unloaded = false; // true after unload event has been received from the window\n\n    this.loggedOut = false;\n    this.inspector = false;\n    this.persistent = false;\n    this.desktop = null;\n    this.layoutValidator = new LayoutValidator();\n    this.focusManager = null;\n    this.keyStrokeManager = null;\n    this.uiSessionId = null; // assigned by server on session startup (OWASP recommendation, see https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern).\n\n    this.clientSessionId = this._getClientSessionIdFromStorage();\n    this.forceNewClientSession = false;\n    this.remoteUrl = 'json';\n    this.unloadUrl = 'unload';\n    this.modelAdapterRegistry = {};\n    this.ajaxCalls = [];\n    this.asyncEvents = [];\n    this.responseQueue = new ResponseQueue(this);\n    this.requestsPendingCounter = 0;\n    this.suppressErrors = false;\n    this.requestTimeoutCancel = 5000; // ms\n\n    this.requestTimeoutPoll = 75000; // ms, depends on polling interval, will therefore be initialized on startup\n\n    this.requestTimeoutPing = 5000; // ms\n\n    this.backgroundJobPollingSupport = new BackgroundJobPollingSupport(true);\n    this.reconnector = new Reconnector(this);\n    this.processingEvents = false; // This property is enabled by URL parameter &adapterExportEnabled=1. Default is false\n\n    this.adapterExportEnabled = false;\n    this._adapterDataCache = {};\n    this._busy = false;\n    this._busyIndicator = null;\n    this._busyIndicatorTimeoutId = null;\n    this._deferred = null;\n    this._fatalMessagesOnScreen = {};\n    this._retryRequest = null;\n    this._queuedRequest = null;\n    this.requestSequenceNo = 0;\n    this.rootAdapter = new ModelAdapter();\n    this.rootAdapter.init({\n      session: this,\n      id: '1',\n      objectType: 'RootAdapter'\n    });\n    var rootParent = new NullWidget();\n    rootParent.session = this;\n    rootParent.initialized = true;\n    this.root = this.rootAdapter.createWidget({\n      session: this,\n      id: '1',\n      objectType: 'NullWidget'\n    }, rootParent);\n    this.events = this._createEventSupport();\n  } // Corresponds to constants in JsonResponse\n\n\n  _createClass(Session, [{\n    key: \"init\",\n\n    /**\n     * $entryPoint is required to create a new session.\n     *\n     * The 'options' argument holds all optional values that may be used during\n     * initialization (it is the same object passed to the scout.init() function).\n     * The following 'options' properties are read by this constructor function:\n     *   [portletPartId]\n     *     Optional, default is 0. Necessary when multiple UI sessions are managed\n     *     by the same window (portlet support). Each session's partId must be unique.\n     *   [clientSessionId]\n     *     Identifies the 'client instance' on the UI server. If the property is not set\n     *     (which is the default case), the clientSessionId is taken from the browser's\n     *     session storage (per browser window, survives F5 refresh of page). If no\n     *     clientSessionId can be found, a new one is generated on the server.\n     *   [userAgent]\n     *     Default: DESKTOP\n     *   [backgroundJobPollingEnabled]\n     *     Unless websockets is used, this property turns on (default) or off background\n     *     polling using an async ajax call together with setTimeout()\n     *   [suppressErrors]\n     *     Basically added because of Jasmine-tests. When working with async tests that\n     *     use setTimeout(), sometimes the Jasmine-Maven plug-in fails and aborts the\n     *     build because there were console errors. These errors always happen in this\n     *     class. That's why we can skip suppress error handling with this flag.\n     *   [focusManagerActive]\n     *     Forces the focus manager to be active or not. If undefined, the value is\n     *     auto detected by Device.js.\n     *   [reconnectorOptions]\n     *     Optional, properties of this object are copied to the Session's reconnector\n     *     instance (see Reconnector.js).\n     *   [ajaxCallOptions]\n     *     Optional, properties of this object are copied to all instances of AjaxCall.js.\n     */\n    value: function init(model) {\n      var options = model || {};\n\n      if (!options.$entryPoint) {\n        throw new Error('$entryPoint is not defined');\n      }\n\n      this.$entryPoint = options.$entryPoint;\n      this.partId = scout.nvl(options.portletPartId, this.partId);\n      this.forceNewClientSession = scout.nvl(this.url.getParameter('forceNewClientSession'), options.forceNewClientSession);\n\n      if (this.forceNewClientSession) {\n        this.clientSessionId = null;\n      } else {\n        this.clientSessionId = scout.nvl(options.clientSessionId, this.clientSessionId);\n      }\n\n      this.userAgent = scout.nvl(options.userAgent, this.userAgent);\n      this.suppressErrors = scout.nvl(options.suppressErrors, this.suppressErrors);\n\n      if (options.locale) {\n        this.locale = Locale.ensure(options.locale);\n        this.textMap = texts.get(this.locale.languageTag);\n      }\n\n      if (options.backgroundJobPollingEnabled === false) {\n        this.backgroundJobPollingSupport.enabled = false;\n      }\n\n      $.extend(this.reconnector, options.reconnectorOptions);\n      this.ajaxCallOptions = options.ajaxCallOptions; // Set inspector flag by looking at URL params. This is required when running in offline mode.\n      // In online mode, the server may override this flag again, see _processStartupResponse().\n\n      if (this.url.getParameter('debug') === 'true' || this.url.getParameter('inspector') === 'true') {\n        this.inspector = true;\n      }\n\n      if (this.url.getParameter('adapterExportEnabled') === 'true') {\n        this.adapterExportEnabled = true;\n      } // Install focus management for this session (cannot be created in constructor, because this.$entryPoint is required)\n\n\n      this.focusManager = new FocusManager({\n        session: this,\n        active: options.focusManagerActive\n      });\n      this.keyStrokeManager = scout.create('KeyStrokeManager', {\n        session: this\n      });\n    }\n  }, {\n    key: \"_throwError\",\n    value: function _throwError(message) {\n      if (!this.suppressErrors) {\n        throw new Error(message);\n      }\n    }\n  }, {\n    key: \"unregisterModelAdapter\",\n    value: function unregisterModelAdapter(modelAdapter) {\n      delete this.modelAdapterRegistry[modelAdapter.id];\n    }\n  }, {\n    key: \"registerModelAdapter\",\n    value: function registerModelAdapter(modelAdapter) {\n      if (modelAdapter.id === undefined) {\n        throw new Error('modelAdapter.id must be defined');\n      }\n\n      this.modelAdapterRegistry[modelAdapter.id] = modelAdapter;\n    }\n  }, {\n    key: \"getModelAdapter\",\n    value: function getModelAdapter(id) {\n      return this.modelAdapterRegistry[id];\n    }\n  }, {\n    key: \"getWidget\",\n    value: function getWidget(adapterId) {\n      if (!adapterId) {\n        return null;\n      }\n\n      if (typeof adapterId !== 'string') {\n        throw new Error('typeof adapterId must be string');\n      }\n\n      var adapter = this.getModelAdapter(adapterId);\n\n      if (!adapter) {\n        return null;\n      }\n\n      return adapter.widget;\n    }\n  }, {\n    key: \"getOrCreateWidget\",\n    value: function getOrCreateWidget(adapterId, parent, strict) {\n      if (!adapterId) {\n        return null;\n      }\n\n      if (typeof adapterId !== 'string') {\n        throw new Error('typeof adapterId must be string');\n      }\n\n      var widget = this.getWidget(adapterId);\n\n      if (widget) {\n        return widget;\n      }\n\n      var adapterData = this._getAdapterData(adapterId);\n\n      if (!adapterData) {\n        if (scout.nvl(strict, true)) {\n          throw new Error('no adapterData found for adapterId=' + adapterId);\n        }\n\n        return null;\n      }\n\n      var adapter = this.createModelAdapter(adapterData);\n      return adapter.createWidget(adapterData, parent);\n    }\n  }, {\n    key: \"createModelAdapter\",\n    value: function createModelAdapter(adapterData) {\n      var objectType = adapterData.objectType;\n      var createOpts = {};\n      var objectInfo = TypeDescriptor.parse(objectType);\n\n      if (objectInfo.modelVariant) {\n        objectType = objectInfo.objectType.toString() + 'Adapter' + ObjectFactory.MODEL_VARIANT_SEPARATOR + objectInfo.modelVariant.toString(); // If no adapter exists for the given variant then create an adapter without variant.\n        // Mostly variant is only essential for the widget, not the adapter\n\n        createOpts.variantLenient = true;\n      } else {\n        objectType = objectInfo.objectType.toString() + 'Adapter';\n      } // TODO [7.0] bsh, cgu: Add classId/modelClass? Think about if IDs should be different for widgets (maybe prefix with 'w')\n\n\n      var adapterModel = {\n        id: adapterData.id,\n        session: this\n      };\n      var adapter = scout.create(objectType, adapterModel, createOpts);\n      $.log.isTraceEnabled() && $.log.trace('created new adapter ' + adapter);\n      return adapter;\n    }\n    /**\n     * Sends the request asynchronously and processes the response later.<br>\n     * Furthermore, the request is sent delayed. If send is called multiple times\n     * during the same user interaction, the events are collected and sent in one\n     * request at the end of the user interaction\n     */\n\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(event, delay) {\n      delay = delay || 0;\n      this.asyncEvents = this._coalesceEvents(this.asyncEvents, event);\n      this.asyncEvents.push(event); // Use the specified delay, except another event is already scheduled. In that case, use the minimal delay.\n      // This ensures that an event with a long delay doesn't hold back another event with a short delay.\n\n      this._asyncDelay = Math.min(delay, scout.nvl(this._asyncDelay, delay));\n      clearTimeout(this._sendTimeoutId);\n      this._sendTimeoutId = setTimeout(function () {\n        this._sendTimeoutId = null;\n        this._asyncDelay = null;\n\n        if (this.areRequestsPending()) {\n          // do not send if there are any requests pending because the order matters -> prevents race conditions\n          return;\n        }\n\n        this._sendNow();\n      }.bind(this), this._asyncDelay);\n    }\n  }, {\n    key: \"_sendStartupRequest\",\n    value: function _sendStartupRequest() {\n      // Build startup request (see JavaDoc for JsonStartupRequest.java for details)\n      var request = this._newRequest({\n        startup: true\n      });\n\n      if (this.partId) {\n        request.partId = this.partId;\n      }\n\n      if (this.clientSessionId) {\n        request.clientSessionId = this.clientSessionId;\n      }\n\n      if (App.get().version) {\n        request.version = App.get().version;\n      }\n\n      request.userAgent = this.userAgent;\n      request.sessionStartupParams = this._createSessionStartupParams(); // Send request\n\n      var ajaxOptions = this.defaultAjaxOptions(request);\n      return $.ajax(ajaxOptions).catch(onAjaxFail.bind(this)).then(onAjaxDone.bind(this)); // ----- Helper methods -----\n\n      function onAjaxDone(data) {\n        this._processStartupResponse(data);\n\n        if (data.error) {\n          return $.rejectedPromise(data);\n        }\n      }\n\n      function onAjaxFail(jqXHR, textStatus, errorThrown) {\n        this._setApplicationLoading(false);\n\n        this._processErrorResponse(jqXHR, textStatus, errorThrown, request);\n\n        var args = objects.argumentsToArray(arguments);\n        return $.rejectedPromise.apply($, args);\n      }\n    }\n    /**\n     * Creates an object to send to the server as \"startupParams\".\n     *\n     * Default params:\n     * \"url\":\n     *   browser URL (without query and hash part)\n     * \"geolocationServiceAvailable\":\n     *   true if browser supports geo location services\n     *\n     * Additionally, all query parameters from the URL are put in the resulting object.\n     */\n\n  }, {\n    key: \"_createSessionStartupParams\",\n    value: function _createSessionStartupParams() {\n      var params = {\n        url: this.url.baseUrlRaw,\n        geolocationServiceAvailable: Device.get().supportsGeolocation()\n      }; // Extract query parameters from URL and put them in the resulting object\n\n      var urlParameterMap = this.url.parameterMap;\n\n      for (var prop in urlParameterMap) {\n        params[prop] = urlParameterMap[prop];\n      }\n\n      return params;\n    }\n  }, {\n    key: \"_processStartupResponse\",\n    value: function _processStartupResponse(data) {\n      // Handle errors from server\n      if (data.error) {\n        this._processErrorJsonResponse(data.error);\n\n        return;\n      }\n\n      webstorage.removeItem(sessionStorage, 'scout:versionMismatch');\n\n      if (!data.startupData) {\n        throw new Error('Missing startupData');\n      } // Mark session as persistent (means a persistent session cookie is used and the client session will be restored after a browser restart)\n\n\n      this.persistent = data.startupData.persistent; // Store clientSessionId in sessionStorage (to send the same ID again on page reload)\n\n      this.clientSessionId = data.startupData.clientSessionId;\n\n      this._storeClientSessionIdInStorage(this.clientSessionId); // Assign server generated uiSessionId. It must be sent along with all further requests.\n\n\n      this.uiSessionId = data.startupData.uiSessionId; // Destroy UI session on server when page is closed or reloaded\n\n      $(window).on('beforeunload.' + this.uiSessionId, this._onWindowBeforeUnload.bind(this)).on('unload.' + this.uiSessionId, this._onWindowUnload.bind(this)); // Special case: Page must be reloaded on startup (e.g. theme changed)\n\n      if (data.startupData.reloadPage) {\n        scout.reloadPage();\n        return;\n      } // Enable inspector mode if server requests it (e.g. when server is running in development mode)\n\n\n      if (data.startupData.inspector) {\n        this.inspector = true;\n      } // Init request timeout for poller\n\n\n      this.requestTimeoutPoll = (data.startupData.pollingInterval + 15) * 1000; // Register UI session\n\n      this.modelAdapterRegistry[this.uiSessionId] = this; // TODO [7.0] cgu: maybe better separate session object from event processing, create ClientSession.js?. If yes, desktop should not have rootadapter as parent, see 406\n      // Store adapters to adapter data cache\n\n      if (data.adapterData) {\n        this._copyAdapterData(data.adapterData);\n      }\n\n      this.locale = new Locale(data.startupData.locale);\n      this.textMap = texts.get(this.locale.languageTag);\n      this.textMap.addAll(data.startupData.textMap); // Create the desktop\n      // Extract client session data without creating a model adapter for it. It is (currently) only used to transport the desktop's adapterId.\n\n      var clientSessionData = this._getAdapterData(data.startupData.clientSession);\n\n      this.desktop = this.getOrCreateWidget(clientSessionData.desktop, this.rootAdapter.widget);\n\n      var renderDesktopImpl = function () {\n        this._renderDesktop(); // In case the server sent additional events, process them\n\n\n        if (data.events) {\n          this.processingEvents = true;\n\n          try {\n            this._processEvents(data.events);\n          } finally {\n            this.processingEvents = false;\n          }\n        } // Ensure layout is valid (explicitly layout immediately and don't wait for setTimeout to run to make layouting invisible to the user)\n\n\n        this.layoutValidator.validate();\n        this.focusManager.validateFocus(); // Start poller\n\n        this._resumeBackgroundJobPolling();\n\n        this.ready = true;\n        $.log.isInfoEnabled() && $.log.info('Session initialized. Detected ' + Device.get());\n\n        if ($.log.isDebugEnabled()) {\n          $.log.isDebugEnabled() && $.log.debug('size of _adapterDataCache after session has been initialized: ' + objects.countOwnProperties(this._adapterDataCache));\n          $.log.isDebugEnabled() && $.log.debug('size of modelAdapterRegistry after session has been initialized: ' + objects.countOwnProperties(this.modelAdapterRegistry));\n        }\n      }.bind(this);\n\n      this.render(renderDesktopImpl);\n    }\n  }, {\n    key: \"_storeClientSessionIdInStorage\",\n    value: function _storeClientSessionIdInStorage(clientSessionId) {\n      webstorage.removeItem(sessionStorage, 'scout:clientSessionId');\n      webstorage.removeItem(localStorage, 'scout:clientSessionId');\n      var storage = sessionStorage;\n\n      if (this.persistent) {\n        storage = localStorage;\n      }\n\n      webstorage.setItem(storage, 'scout:clientSessionId', clientSessionId);\n    }\n  }, {\n    key: \"_getClientSessionIdFromStorage\",\n    value: function _getClientSessionIdFromStorage() {\n      var id = webstorage.getItem(sessionStorage, 'scout:clientSessionId');\n\n      if (!id) {\n        // If the session is persistent it was stored in the local storage (cannot check for this.persistent here because it is not known yet)\n        id = webstorage.getItem(localStorage, 'scout:clientSessionId');\n      }\n\n      return id;\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderFunc) {\n      // Render desktop after fonts have been preloaded (this fixes initial layouting issues when font icons are not yet ready)\n      if (fonts.loadingComplete) {\n        renderFunc();\n      } else {\n        fonts.preloader().then(renderFunc);\n      }\n    }\n  }, {\n    key: \"_sendUnloadRequest\",\n    value: function _sendUnloadRequest() {\n      var request = this._newRequest({\n        unload: true,\n        showBusyIndicator: false\n      }); // Send request\n\n\n      this._sendRequest(request);\n    }\n  }, {\n    key: \"_sendNow\",\n    value: function _sendNow() {\n      if (this.asyncEvents.length === 0) {\n        // Nothing to send -> return\n        return;\n      } // If an event requires a new request, only the previous events are sent now.\n      // The next requests are send the next time _sendNow is called (-> when the response to the current request arrives)\n\n\n      var events = [];\n      this.asyncEvents.some(function (event, i) {\n        if (event.newRequest && events.length > 0) {\n          return true;\n        }\n\n        events.push(event);\n        return false;\n      });\n\n      var request = this._newRequest({\n        events: events\n      }); // Busy indicator required when at least one event requests it\n\n\n      request.showBusyIndicator = request.events.some(function (event) {\n        return scout.nvl(event.showBusyIndicator, true);\n      });\n      this.responseQueue.prepareRequest(request); // Send request\n\n      this._sendRequest(request); // Remove the events which are sent now from the list, keep the ones which are sent later\n\n\n      this.asyncEvents = this.asyncEvents.slice(events.length);\n    }\n  }, {\n    key: \"_coalesceEvents\",\n    value: function _coalesceEvents(previousEvents, event) {\n      if (!event.coalesce) {\n        return previousEvents;\n      }\n\n      var filter = $.negate(event.coalesce).bind(event);\n      return previousEvents.filter(filter);\n    }\n  }, {\n    key: \"_sendRequest\",\n    value: function _sendRequest(request) {\n      if (!request) {\n        return; // nothing to send\n      }\n\n      if (this.offline && !request.unload) {\n        // In Firefox, \"offline\" is already true when page is unloaded\n        this._handleSendWhenOffline(request);\n\n        return;\n      }\n\n      if (request.unload && navigator.sendBeacon) {\n        // The unload request must _not_ be sent asynchronously, because the browser would cancel\n        // it when the page unload is completed. Because the support for synchronous AJAX request\n        // will apparently be dropped eventually, we use the \"sendBeacon\" method to send the unload\n        // request to the server (we don't expect an answer). Not all browsers support this method,\n        // therefore we check for its existence and fall back to (legacy) synchronous AJAX call\n        // when it is missing. More information:\n        // - http://stackoverflow.com/questions/15479103/can-beforeunload-unload-be-used-to-send-xmlhttprequests-reliably\n        // - https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/7nKMdg_ALcc\n        // - https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon\n        navigator.sendBeacon(this.unloadUrl + '/' + this.uiSessionId, '');\n        return;\n      }\n\n      var ajaxOptions = this.defaultAjaxOptions(request);\n      var busyHandling = scout.nvl(request.showBusyIndicator, true);\n\n      if (request.unload) {\n        ajaxOptions.async = false;\n      }\n\n      this._performUserAjaxRequest(ajaxOptions, busyHandling, request);\n    }\n  }, {\n    key: \"_handleSendWhenOffline\",\n    value: function _handleSendWhenOffline(request) {\n      // No need to queue the request when request does not contain events (e.g. log request, unload request)\n      if (!request.events) {\n        return;\n      } // Merge request with queued event\n\n\n      if (this._queuedRequest) {\n        if (this._queuedRequest.events) {\n          // 1. Remove request events from queued events\n          request.events.forEach(function (event) {\n            this._queuedRequest.events = this._coalesceEvents(this._queuedRequest.events, event);\n          }.bind(this)); // 2. Add request events to end of queued events\n\n          this._queuedRequest.events = this._queuedRequest.events.concat(request.events);\n        } else {\n          this._queuedRequest.events = request.events;\n        }\n      } else {\n        this._queuedRequest = request;\n      }\n\n      this.layoutValidator.validate();\n    }\n  }, {\n    key: \"defaultAjaxOptions\",\n    value: function defaultAjaxOptions(request) {\n      request = request || this._newRequest();\n\n      var url = this._decorateUrl(this.remoteUrl, request);\n\n      var ajaxOptions = {\n        type: 'POST',\n        dataType: 'json',\n        contentType: 'application/json; charset=UTF-8',\n        cache: false,\n        url: url,\n        data: this._requestToJson(request)\n      }; // Ensure that certain request don't run forever. When a timeout occurs, the session\n      // is put into offline mode. Note that normal requests should NOT be limited, because\n      // the server processing might take very long (e.g. long running database query).\n\n      ajaxOptions.timeout = 0; // \"infinite\"\n\n      if (request.cancel) {\n        ajaxOptions.timeout = this.requestTimeoutCancel;\n      }\n\n      if (request.ping) {\n        ajaxOptions.timeout = this.requestTimeoutPing;\n      }\n\n      if (request.pollForBackgroundJobs) {\n        ajaxOptions.timeout = this.requestTimeoutPoll;\n      }\n\n      return ajaxOptions;\n    }\n  }, {\n    key: \"_decorateUrl\",\n    value: function _decorateUrl(url, request) {\n      var urlHint = null; // Add dummy URL parameter as marker (for debugging purposes)\n\n      if (request.unload) {\n        urlHint = 'unload';\n      } else if (request.pollForBackgroundJobs) {\n        urlHint = 'poll';\n      } else if (request.ping) {\n        urlHint = 'ping';\n      } else if (request.cancel) {\n        urlHint = 'cancel';\n      } else if (request.log) {\n        urlHint = 'log';\n      } else if (request.syncResponseQueue) {\n        urlHint = 'sync';\n      }\n\n      if (urlHint) {\n        url = new URL(url).addParameter(urlHint).toString();\n      }\n\n      return url;\n    }\n  }, {\n    key: \"_getRequestName\",\n    value: function _getRequestName(request, defaultName) {\n      if (request) {\n        if (request.unload) {\n          return 'unload';\n        } else if (request.pollForBackgroundJobs) {\n          return 'pollForBackgroundJobs';\n        } else if (request.ping) {\n          return 'ping';\n        } else if (request.cancel) {\n          return 'cancel';\n        } else if (request.log) {\n          return 'log';\n        } else if (request.syncResponseQueue) {\n          return 'syncResponseQueue';\n        }\n      }\n\n      return defaultName;\n    }\n  }, {\n    key: \"_requestToJson\",\n    value: function _requestToJson(request) {\n      return JSON.stringify(request, function (key, value) {\n        // Replacer function that filter certain properties from the resulting JSON string.\n        // See https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n        var ignore = this === request && key === 'showBusyIndicator' || this instanceof RemoteEvent && scout.isOneOf(key, 'showBusyIndicator', 'coalesce', 'newRequest');\n        return ignore ? undefined : value;\n      });\n    }\n  }, {\n    key: \"_callAjax\",\n    value: function _callAjax(callOptions) {\n      var defaultOptions = {\n        retryIntervals: [100, 500, 500, 500]\n      };\n      var ajaxCall = scout.create('AjaxCall', $.extend(defaultOptions, callOptions, this.ajaxCallOptions), {\n        ensureUniqueId: false\n      });\n      this.registerAjaxCall(ajaxCall);\n      return ajaxCall.call().always(this.unregisterAjaxCall.bind(this, ajaxCall));\n    }\n  }, {\n    key: \"_performUserAjaxRequest\",\n    value: function _performUserAjaxRequest(ajaxOptions, busyHandling, request) {\n      if (busyHandling) {\n        this.setBusy(true);\n      }\n\n      this.setRequestPending(true);\n      var jsError = null,\n          success = false;\n\n      this._callAjax({\n        ajaxOptions: ajaxOptions,\n        request: request,\n        name: this._getRequestName(request, 'user request')\n      }).done(onAjaxDone.bind(this)).fail(onAjaxFail.bind(this)).always(onAjaxAlways.bind(this)); // ----- Helper methods -----\n\n\n      function onAjaxDone(data) {\n        try {\n          // Busy handling is remove _before_ processing the response, otherwise the focus cannot be set\n          // correctly, because the glasspane of the busy indicator is still visible.\n          // The second check prevents flickering of the busy indicator if there is a scheduled request\n          // that will be sent immediately afterwards (see onAjaxAlways).\n          if (busyHandling && !this.areBusyIndicatedEventsQueued()) {\n            this.setBusy(false);\n          }\n\n          success = this.responseQueue.process(data);\n        } catch (err) {\n          jsError = jsError || err;\n        }\n      }\n\n      function onAjaxFail(ajaxError) {\n        try {\n          if (busyHandling) {\n            this.setBusy(false);\n          }\n\n          this._processErrorResponse(ajaxError.jqXHR, ajaxError.textStatus, ajaxError.errorThrown, request);\n        } catch (err) {\n          jsError = jsError || err;\n        }\n      } // Variable arguments:\n      // \"done\" --> data, textStatus, jqXHR\n      // \"fail\" --> jqXHR, textStatus, errorThrown\n\n\n      function onAjaxAlways(data, textStatus, errorThrown) {\n        this.setRequestPending(false); // \"success\" is false when either\n        // a) an HTTP error occurred or\n        // b) a JSON response with the error flag set (UI processing error) was returned\n\n        if (success) {\n          this._resumeBackgroundJobPolling();\n\n          this._fireRequestFinished(data);\n\n          if (this._retryRequest) {\n            // Send retry request first\n            var retryRequest = this._retryRequest;\n            this._retryRequest = null;\n            this.responseQueue.prepareRequest(retryRequest);\n\n            this._sendRequest(retryRequest);\n          } else if (this._queuedRequest) {\n            // Send events that happened while being offline\n            var queuedRequest = this._queuedRequest;\n            this._queuedRequest = null;\n            this.responseQueue.prepareRequest(queuedRequest);\n\n            this._sendRequest(queuedRequest);\n          } // If there already is a another request pending, send it now\n          // But only if it should not be sent delayed\n\n\n          if (!this._sendTimeoutId) {\n            this._sendNow();\n          }\n        }\n\n        this.layoutValidator.validate(); // Throw previously caught error\n\n        if (jsError) {\n          throw jsError;\n        }\n      }\n    }\n  }, {\n    key: \"registerAjaxCall\",\n    value: function registerAjaxCall(ajaxCall) {\n      this.ajaxCalls.push(ajaxCall);\n    }\n  }, {\n    key: \"unregisterAjaxCall\",\n    value: function unregisterAjaxCall(ajaxCall) {\n      arrays.remove(this.ajaxCalls, ajaxCall);\n    }\n  }, {\n    key: \"interruptAllAjaxCalls\",\n    value: function interruptAllAjaxCalls() {\n      // Because the error handlers alter the \"this.ajaxCalls\" array,\n      // the loop must operate on a copy of the original array!\n      this.ajaxCalls.slice().forEach(function (ajaxCall) {\n        ajaxCall.pendingCall && ajaxCall.pendingCall.abort();\n      });\n    }\n  }, {\n    key: \"abortAllAjaxCalls\",\n    value: function abortAllAjaxCalls() {\n      // Because the error handlers alter the \"this.ajaxCalls\" array,\n      // the loop must operate on a copy of the original array!\n      this.ajaxCalls.slice().forEach(function (ajaxCall) {\n        ajaxCall.abort();\n      });\n    }\n    /**\n     * (Re-)starts background job polling when not started yet or when an error occurred while polling.\n     * In the latter case, polling is resumed when a user-initiated request has been successful.\n     */\n\n  }, {\n    key: \"_resumeBackgroundJobPolling\",\n    value: function _resumeBackgroundJobPolling() {\n      if (this.backgroundJobPollingSupport.enabled && this.backgroundJobPollingSupport.status !== BackgroundJobPollingStatus.RUNNING) {\n        $.log.isInfoEnabled() && $.log.info('Resume background jobs polling request, status was=' + this.backgroundJobPollingSupport.status);\n\n        this._pollForBackgroundJobs();\n      }\n    }\n    /**\n     * Polls the results of jobs running in the background. Note: we cannot use the _sendRequest method here\n     * since we don't want any busy handling in case of background jobs. The request may take a while, since\n     * the server doesn't return until either a time-out occurs or there's something in the response when\n     * a model job is done and no request initiated by a user is running.\n     */\n\n  }, {\n    key: \"_pollForBackgroundJobs\",\n    value: function _pollForBackgroundJobs() {\n      this.backgroundJobPollingSupport.setRunning();\n\n      var request = this._newRequest({\n        pollForBackgroundJobs: true\n      });\n\n      this.responseQueue.prepareRequest(request);\n      var ajaxOptions = this.defaultAjaxOptions(request);\n\n      this._callAjax({\n        ajaxOptions: ajaxOptions,\n        request: request,\n        name: this._getRequestName(request, 'request')\n      }).done(onAjaxDone.bind(this)).fail(onAjaxFail.bind(this)); // --- Helper methods ---\n\n\n      function onAjaxDone(data) {\n        if (data.error) {\n          // Don't schedule a new polling request, when an error occurs\n          // when the next user-initiated request succeeds, we re-enable polling\n          // otherwise the polling would ping the server to death in case of an error\n          $.log.warn('Polling request failed. Interrupt polling until the next user-initiated request succeeds');\n          this.backgroundJobPollingSupport.setFailed();\n\n          if (this.areRequestsPending()) {\n            // Add response to queue, handle later by _performUserAjaxRequest()\n            this.responseQueue.add(data);\n          } else {\n            // No user request pending, handle immediately\n            this.responseQueue.process(data);\n          }\n        } else if (data.sessionTerminated) {\n          $.log.info('Session terminated, stopped polling for background jobs');\n          this.backgroundJobPollingSupport.setStopped(); // If were are not yet logged out, redirect to the logout URL (the session that initiated the\n          // session invalidation will receive a dedicated logout event, redirect is handled there).\n\n          if (!this.loggedOut && data.redirectUrl) {\n            this.logout(data.redirectUrl);\n          }\n        } else {\n          try {\n            // No need to change backgroundJobPollingSupport state, it should still be RUNNING\n            if (this.areRequestsPending()) {\n              // Add response to queue, handle later by _performUserAjaxRequest()\n              this.responseQueue.add(data);\n            } else {\n              // No user request pending, handle immediately\n              this.responseQueue.process(data);\n              this.layoutValidator.validate();\n            }\n\n            setTimeout(this._pollForBackgroundJobs.bind(this));\n          } catch (error) {\n            this.backgroundJobPollingSupport.setFailed();\n            throw error;\n          }\n        }\n      }\n\n      function onAjaxFail(ajaxError) {\n        this.backgroundJobPollingSupport.setFailed();\n\n        this._processErrorResponse(ajaxError.jqXHR, ajaxError.textStatus, ajaxError.errorThrown, request);\n      }\n    }\n    /**\n     * Do NOT call this method directly, always use the response queue:\n     *\n     *   session.responseQueue.process(data);\n     *\n     * Otherwise, the response queue's expected sequence number will get out of sync.\n     */\n\n  }, {\n    key: \"processJsonResponseInternal\",\n    value: function processJsonResponseInternal(data) {\n      var success = false;\n\n      if (data.error) {\n        this._processErrorJsonResponse(data.error);\n      } else {\n        this._processSuccessResponse(data);\n\n        success = true;\n      }\n\n      return success;\n    }\n  }, {\n    key: \"_processSuccessResponse\",\n    value: function _processSuccessResponse(message) {\n      if (message.adapterData) {\n        this._copyAdapterData(message.adapterData);\n      }\n\n      if (message.events) {\n        this.processingEvents = true;\n\n        try {\n          this._processEvents(message.events);\n        } finally {\n          this.processingEvents = false;\n        }\n      }\n\n      if ($.log.isDebugEnabled()) {\n        var cacheSize = objects.countOwnProperties(this._adapterDataCache);\n        $.log.trace('size of _adapterDataCache after response has been processed: ' + cacheSize);\n        cacheSize = objects.countOwnProperties(this.modelAdapterRegistry);\n        $.log.trace('size of modelAdapterRegistry after response has been processed: ' + cacheSize);\n      }\n    }\n  }, {\n    key: \"_copyAdapterData\",\n    value: function _copyAdapterData(adapterData) {\n      var count = 0;\n      var prop;\n\n      for (prop in adapterData) {\n        this._adapterDataCache[prop] = adapterData[prop];\n        count++;\n      }\n\n      if (count > 0) {\n        $.log.isTraceEnabled() && $.log.trace('Stored ' + count + ' properties in adapterDataCache');\n      }\n    }\n    /**\n     * @param textStatus 'timeout', 'abort', 'error' or 'parseerror' (see http://api.jquery.com/jquery.ajax/)\n     */\n\n  }, {\n    key: \"_processErrorResponse\",\n    value: function _processErrorResponse(jqXHR, textStatus, errorThrown, request) {\n      $.log.error('errorResponse: status=' + jqXHR.status + ', textStatus=' + textStatus + ', errorThrown=' + errorThrown);\n      var offlineError = AjaxCall.isOfflineError(jqXHR, textStatus, errorThrown, request);\n\n      if (offlineError) {\n        if (this.ready) {\n          this.goOffline();\n\n          if (request && !request.pollForBackgroundJobs && !this._retryRequest) {\n            this._retryRequest = request;\n          }\n\n          return;\n        } // Not ready yet (startup request)\n\n\n        errorThrown = errorThrown || this.optText('ui.ConnectionInterrupted', 'Connection interrupted');\n      } // Show error message\n\n\n      var boxOptions = {\n        header: this.optText('ui.NetworkError', 'Network error'),\n        body: strings.join(' ', jqXHR.status || '', errorThrown),\n        yesButtonText: this.optText('ui.Reload', 'Reload'),\n        yesButtonAction: function yesButtonAction() {\n          scout.reloadPage();\n        },\n        noButtonText: this.ready ? this.optText('ui.Ignore', 'Ignore') : null\n      };\n      this.showFatalMessage(boxOptions, jqXHR.status + '.net');\n    }\n  }, {\n    key: \"_processErrorJsonResponse\",\n    value: function _processErrorJsonResponse(jsonError) {\n      if (jsonError.code === Session.JsonResponseError.VERSION_MISMATCH) {\n        var loopDetection = webstorage.getItem(sessionStorage, 'scout:versionMismatch');\n\n        if (!loopDetection) {\n          webstorage.setItem(sessionStorage, 'scout:versionMismatch', 'yes'); // Reload page -> everything should then be up to date\n\n          scout.reloadPage();\n          return;\n        }\n\n        webstorage.removeItem(sessionStorage, 'scout:versionMismatch');\n      } // Default values for fatal message boxes\n\n\n      var boxOptions = {\n        header: this.optText('ui.ServerError', 'Server error') + ' (' + this.optText('ui.ErrorCodeX', 'Code ' + jsonError.code, jsonError.code) + ')',\n        body: jsonError.message,\n        yesButtonText: this.optText('ui.Reload', 'Reload'),\n        yesButtonAction: function yesButtonAction() {\n          scout.reloadPage();\n        }\n      }; // Customize for specific error codes\n\n      if (jsonError.code === Session.JsonResponseError.STARTUP_FAILED) {\n        // there are no texts yet if session startup failed\n        boxOptions.header = jsonError.message;\n        boxOptions.body = null;\n        boxOptions.yesButtonText = 'Retry';\n      } else if (jsonError.code === Session.JsonResponseError.SESSION_TIMEOUT) {\n        boxOptions.header = this.optText('ui.SessionTimeout', boxOptions.header);\n        boxOptions.body = this.optText('ui.SessionExpiredMsg', boxOptions.body);\n      } else if (jsonError.code === Session.JsonResponseError.UI_PROCESSING) {\n        boxOptions.header = this.optText('ui.UnexpectedProblem', boxOptions.header);\n        boxOptions.body = strings.join('\\n\\n', this.optText('ui.InternalProcessingErrorMsg', boxOptions.body, ' (' + this.optText('ui.ErrorCodeX', 'Code 20', '20') + ')'), this.optText('ui.UiInconsistentMsg', ''));\n        boxOptions.noButtonText = this.optText('ui.Ignore', 'Ignore');\n      } else if (jsonError.code === Session.JsonResponseError.UNSAFE_UPLOAD) {\n        boxOptions.header = this.optText('ui.UnsafeUpload', boxOptions.header);\n        boxOptions.body = this.optText('ui.UnsafeUploadMsg', boxOptions.body);\n        boxOptions.yesButtonText = this.optText('ui.Ok', 'Ok');\n\n        boxOptions.yesButtonAction = function () {};\n      }\n\n      this.showFatalMessage(boxOptions, jsonError.code);\n    }\n  }, {\n    key: \"_fireRequestFinished\",\n    value: function _fireRequestFinished(message) {\n      if (!this._deferred) {\n        return;\n      }\n\n      if (message.events) {\n        for (var i = 0; i < message.events.length; i++) {\n          this._deferredEventTypes.push(message.events[i].type);\n        }\n      }\n\n      if (this.requestsPendingCounter === 0) {\n        this._deferred.resolve(this._deferredEventTypes);\n\n        this._deferred = null;\n        this._deferredEventTypes = null;\n      }\n    }\n    /**\n     * Shows a UI-only message box.\n     *\n     * @param options\n     *          Options for the message box, see MessageBox\n     * @param errorCode\n     *          If defined, a second call to this method with the same errorCode will\n     *          do nothing. Can be used to prevent double messages for the same error.\n     */\n\n  }, {\n    key: \"showFatalMessage\",\n    value: function showFatalMessage(options, errorCode) {\n      if (errorCode) {\n        if (this._fatalMessagesOnScreen[errorCode]) {\n          return;\n        }\n\n        this._fatalMessagesOnScreen[errorCode] = true;\n      }\n\n      this._setApplicationLoading(false);\n\n      options = options || {};\n      var model = {\n        session: this,\n        parent: this.desktop || new NullWidget(),\n        iconId: options.iconId,\n        severity: scout.nvl(options.severity, Status.Severity.ERROR),\n        header: options.header,\n        body: options.body,\n        hiddenText: options.hiddenText,\n        yesButtonText: options.yesButtonText,\n        noButtonText: options.noButtonText,\n        cancelButtonText: options.cancelButtonText\n      },\n          messageBox = scout.create('MessageBox', model),\n          $entryPoint = options.entryPoint || this.$entryPoint;\n      messageBox.on('action', function (event) {\n        delete this._fatalMessagesOnScreen[errorCode];\n        messageBox.destroy();\n        var option = event.option;\n\n        if (option === 'yes' && options.yesButtonAction) {\n          options.yesButtonAction.apply(this);\n        } else if (option === 'no' && options.noButtonAction) {\n          options.noButtonAction.apply(this);\n        } else if (option === 'cancel' && options.cancelButtonAction) {\n          options.cancelButtonAction.apply(this);\n        }\n      }.bind(this));\n      messageBox.render($entryPoint);\n    }\n  }, {\n    key: \"uploadFiles\",\n    value: function uploadFiles(target, files, uploadProperties, maxTotalSize, allowedTypes) {\n      var formData = new FormData(),\n          totalSize = 0;\n\n      if (uploadProperties) {\n        $.each(uploadProperties, function (key, value) {\n          formData.append(key, value);\n        });\n      }\n\n      $.each(files, function (index, value) {\n        if (!allowedTypes || allowedTypes.length === 0 || scout.isOneOf(value.type, allowedTypes)) {\n          totalSize += value.size;\n          /*\n           * - see ClipboardField for comments on \"scoutName\"\n           * - Some Browsers (e.g. Edge) handle an empty string as filename as if the filename is not set and therefore introduce a default filename like 'blob'.\n           *   To counter this, we introduce a empty filename string. The string consists of characters that can not occur in regular filenames, to prevent collisions.\n           */\n\n          var filename = scout.nvl(value.scoutName, value.name, Session.EMPTY_UPLOAD_FILENAME);\n          formData.append('files', value, filename);\n        }\n      }); // 50 MB as default maximum size\n\n      maxTotalSize = scout.nvl(maxTotalSize, FileInput.DEFAULT_MAXIMUM_UPLOAD_SIZE); // very large files must not be sent to server otherwise the whole system might crash (for all users).\n\n      if (totalSize > maxTotalSize) {\n        var boxOptions = {\n          header: this.text('ui.FileSizeLimitTitle'),\n          body: this.text('ui.FileSizeLimit', maxTotalSize / 1024 / 1024),\n          yesButtonText: this.optText('Ok', 'Ok')\n        };\n        this.showFatalMessage(boxOptions);\n        return false;\n      }\n\n      var uploadAjaxOptions = {\n        type: 'POST',\n        url: 'upload/' + this.uiSessionId + '/' + target.id,\n        cache: false,\n        // Don't touch the data (do not convert it to string)\n        processData: false,\n        // Do not automatically add content type (otherwise, multipart boundary would be missing)\n        contentType: false,\n        data: formData\n      }; // Special handling for FormData polyfill\n\n      if (formData.polyfill) {\n        formData.applyToAjaxOptions(uploadAjaxOptions);\n      }\n\n      this.responseQueue.prepareHttpRequest(uploadAjaxOptions);\n      var busyHandling = !this.areRequestsPending();\n\n      this._performUserAjaxRequest(uploadAjaxOptions, busyHandling);\n\n      return true;\n    }\n  }, {\n    key: \"goOffline\",\n    value: function goOffline() {\n      if (this.offline) {\n        return; // already offline\n      }\n\n      this.offline = true; // Abort pending ajax requests.\n\n      this.abortAllAjaxCalls(); // In Firefox, the current async polling request is interrupted immediately when the page is unloaded. Therefore,\n      // an offline message would appear at once on the desktop. When reloading the page, all elements are cleared anyway,\n      // thus we wait some short period of time before displaying the message and starting the reconnector. If\n      // we find that goOffline() was called because of request unloading, we skip the unnecessary part. Note that\n      // FF doesn't guarantee that _onWindowUnload() is called before this setTimeout() function is called. Therefore,\n      // we have to look at another property \"unloading\" that is set earlier in _onWindowBeforeUnload().\n\n      setTimeout(function () {\n        if (this.unloading || this.unloaded) {\n          return;\n        }\n\n        this.rootAdapter.goOffline();\n        this.reconnector.start();\n      }.bind(this), 100);\n    }\n  }, {\n    key: \"goOnline\",\n    value: function goOnline() {\n      this.offline = false;\n      this.rootAdapter.goOnline();\n\n      var request = this._newRequest({\n        syncResponseQueue: true\n      });\n\n      this.responseQueue.prepareRequest(request);\n\n      this._sendRequest(request); // implies \"_resumeBackgroundJobPolling\", and also sends queued request\n\n    }\n  }, {\n    key: \"onReconnecting\",\n    value: function onReconnecting() {\n      if (this.desktop) {\n        this.desktop.onReconnecting();\n      }\n    }\n  }, {\n    key: \"onReconnectingSucceeded\",\n    value: function onReconnectingSucceeded() {\n      if (this.desktop) {\n        this.desktop.onReconnectingSucceeded();\n      }\n\n      this.goOnline();\n    }\n  }, {\n    key: \"onReconnectingFailed\",\n    value: function onReconnectingFailed() {\n      if (this.desktop) {\n        this.desktop.onReconnectingFailed();\n      }\n    }\n  }, {\n    key: \"listen\",\n    value: function listen() {\n      if (!this._deferred) {\n        this._deferred = $.Deferred();\n        this._deferredEventTypes = [];\n      }\n\n      return this._deferred;\n    }\n    /**\n     * Executes the given callback when pending requests are finished, or immediately if there are no requests pending.\n     * @param func callback function\n     * @param vararg arguments to pass to the callback function\n     */\n\n  }, {\n    key: \"onRequestsDone\",\n    value: function onRequestsDone(func) {\n      var argumentsArray = Array.prototype.slice.call(arguments).slice();\n      argumentsArray.shift(); // remove argument func, remainder: all other arguments\n\n      if (this.areRequestsPending() || this.areEventsQueued()) {\n        this.listen().done(onEventsProcessed);\n      } else {\n        func.apply(this, argumentsArray);\n      }\n\n      function onEventsProcessed() {\n        func.apply(this, argumentsArray);\n      }\n    }\n    /**\n     * Executes the given callback when all events of the current response are processed. Executes it immediately if no events are being processed.\n     * @param func callback function\n     * @param vararg arguments to pass to the callback function\n     */\n\n  }, {\n    key: \"onEventsProcessed\",\n    value: function onEventsProcessed(func) {\n      var argumentsArray = Array.prototype.slice.call(arguments).slice();\n      argumentsArray.shift(); // remove argument func, remainder: all other arguments\n\n      if (this.processingEvents) {\n        this.one('eventsProcessed', execFunc);\n      } else {\n        execFunc();\n      }\n\n      function execFunc() {\n        func.apply(this, argumentsArray);\n      }\n    }\n  }, {\n    key: \"areEventsQueued\",\n    value: function areEventsQueued() {\n      return this.asyncEvents.length > 0;\n    }\n  }, {\n    key: \"areBusyIndicatedEventsQueued\",\n    value: function areBusyIndicatedEventsQueued() {\n      return this.asyncEvents.some(function (event) {\n        return scout.nvl(event.showBusyIndicator, true);\n      });\n    }\n  }, {\n    key: \"areResponsesQueued\",\n    value: function areResponsesQueued() {\n      return this.responseQueue.size() > 0;\n    }\n  }, {\n    key: \"areRequestsPending\",\n    value: function areRequestsPending() {\n      return this.requestsPendingCounter > 0;\n    }\n  }, {\n    key: \"setRequestPending\",\n    value: function setRequestPending(pending) {\n      if (pending) {\n        this.requestsPendingCounter++;\n      } else {\n        this.requestsPendingCounter--;\n      } // In \"inspector\" mode, add/remove a marker attribute to the $entryPoint that\n      // can be used to detect pending server calls by UI testing tools, e.g. Selenium\n\n\n      if (this.inspector) {\n        this.$entryPoint.toggleAttr('data-request-pending', pending, 'true');\n      }\n    }\n  }, {\n    key: \"setBusy\",\n    value: function setBusy(busy) {\n      if (busy) {\n        if (!this._busy) {\n          this._renderBusy();\n        }\n\n        this._busy = true;\n      } else {\n        if (this._busy) {\n          this._removeBusy();\n        }\n\n        this._busy = false;\n      }\n    }\n  }, {\n    key: \"_renderBusy\",\n    value: function _renderBusy() {\n      if (this._busyIndicatorTimeoutId !== null && this._busyIndicatorTimeoutId !== undefined) {\n        // Do not schedule it twice\n        return;\n      } // Don't show the busy indicator immediately. Set a short timer instead (which may be\n      // cancelled again if the busy state returns to false in the meantime).\n\n\n      this._busyIndicatorTimeoutId = setTimeout(function () {\n        if (this._busyIndicator) {\n          // busy indicator is already showing\n          return;\n        }\n\n        if (!this.desktop || !this.desktop.rendered) {\n          return; // No busy indicator without desktop (e.g. during shutdown)\n        }\n\n        this._busyIndicator = scout.create('BusyIndicator', {\n          parent: this.desktop\n        });\n\n        this._busyIndicator.on('cancel', this._onCancelProcessing.bind(this));\n\n        this._busyIndicator.render(this.$entryPoint);\n      }.bind(this), 500);\n    }\n  }, {\n    key: \"_removeBusy\",\n    value: function _removeBusy() {\n      // Clear pending timer\n      clearTimeout(this._busyIndicatorTimeoutId);\n      this._busyIndicatorTimeoutId = null; // Remove busy indicator (if it was already created)\n\n      if (this._busyIndicator) {\n        this._busyIndicator.destroy();\n\n        this._busyIndicator = null;\n      }\n    }\n  }, {\n    key: \"_onCancelProcessing\",\n    value: function _onCancelProcessing(event) {\n      var busyIndicator = this._busyIndicator;\n\n      if (!busyIndicator) {\n        return; // removed in the mean time\n      }\n\n      busyIndicator.off('cancel'); // Set \"canceling\" state in busy indicator (after 100ms, would not look good otherwise)\n\n      setTimeout(function () {\n        busyIndicator.cancelled();\n      }, 100);\n\n      this._sendCancelRequest();\n    }\n  }, {\n    key: \"_sendCancelRequest\",\n    value: function _sendCancelRequest() {\n      var request = this._newRequest({\n        cancel: true,\n        showBusyIndicator: false\n      });\n\n      this._sendRequest(request);\n    }\n    /**\n     * Sends a request containing the error message for logging purpose.\n     * The request is sent immediately (does not await pending requests)\n     */\n\n  }, {\n    key: \"sendLogRequest\",\n    value: function sendLogRequest(message) {\n      var request = this._newRequest({\n        log: true,\n        message: message\n      });\n\n      if (this.currentEvent) {\n        request.event = {\n          target: this.currentEvent.target,\n          type: this.currentEvent.type\n        };\n      } // Do not use _sendRequest to make sure a log request has no side effects and will be sent only once\n\n\n      $.ajax(this.defaultAjaxOptions(request));\n    }\n  }, {\n    key: \"_newRequest\",\n    value: function _newRequest(requestData) {\n      var request = $.extend({\n        uiSessionId: this.uiSessionId\n      }, requestData); // Certain requests do not require a sequence number\n\n      if (!request.log && !request.syncResponseQueue) {\n        request['#'] = this.requestSequenceNo++;\n      }\n\n      return request;\n    }\n  }, {\n    key: \"_setApplicationLoading\",\n    value: function _setApplicationLoading(applicationLoading) {\n      if (applicationLoading) {\n        this._applicationLoadingTimeoutId = setTimeout(function () {\n          if (!this.desktop || !this.desktop.rendered) {\n            this._renderApplicationLoading();\n          }\n        }.bind(this), 200);\n      } else {\n        clearTimeout(this._applicationLoadingTimeoutId);\n        this._applicationLoadingTimeoutId = null;\n\n        this._removeApplicationLoading();\n      }\n    }\n  }, {\n    key: \"_renderApplicationLoading\",\n    value: function _renderApplicationLoading() {\n      var $loadingRoot = $('body').appendDiv('application-loading-root').addClass('application-loading-root').fadeIn();\n      $loadingRoot.appendDiv('application-loading01').hide().fadeIn();\n      $loadingRoot.appendDiv('application-loading02').hide().fadeIn();\n    }\n  }, {\n    key: \"_removeApplicationLoading\",\n    value: function _removeApplicationLoading() {\n      var $loadingRoot = $('body').children('.application-loading-root');\n      $loadingRoot.addClass('application-loading-root-fadeout');\n\n      if (Device.get().supportsCssAnimation()) {\n        $loadingRoot.oneAnimationEnd(function () {\n          $loadingRoot.remove();\n        });\n      } else {\n        // fallback for old browsers that do not support the animation-end event\n        $loadingRoot.remove();\n      }\n    }\n  }, {\n    key: \"_processEvents\",\n    value: function _processEvents(events) {\n      var i = 0;\n\n      while (i < events.length) {\n        var event = events[i];\n        this.currentEvent = event;\n        var adapter = this.getModelAdapter(event.target);\n\n        if (!adapter) {\n          // Sometimes events seem to happen \"too early\", e.g. when a \"requestFocus\" event for a field is\n          // encountered before the \"showForm\" event has been processed. If the target adapter cannot be\n          // resolved, we try the other events first, expecting them to trigger the creation of the event\n          // adapter. As soon as a event could be processed successfully, we try our postponed event again.\n          $.log.isDebugEnabled() && $.log.debug('Postponing \\'' + event.type + '\\' for adapter with ID ' + event.target);\n          i++;\n          continue;\n        } // Remove the successful event and reset the pointer to the start of the remaining events (to\n        // retry previously postponed events).\n\n\n        events.splice(i, 1);\n        i = 0;\n        $.log.isDebugEnabled() && $.log.debug('Processing event \\'' + event.type + '\\' for adapter with ID ' + event.target);\n        adapter.onModelEvent(event);\n        adapter.resetEventFilters();\n      }\n\n      this.currentEvent = null; // If there are still events whose target could not be resolved, throw an error\n\n      if (events.length) {\n        throw new Error('Could not resolve event targets: [' + events.map(function (event) {\n          var msg = 'target: ' + event.target + ', type: ' + event.type;\n\n          if (event.properties) {\n            msg += ', properties: ' + Object.keys(event.properties);\n          }\n\n          return '\"' + msg + '\"';\n        }, this).join(', ') + ']');\n      }\n\n      this.trigger('eventsProcessed');\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      $.log.isInfoEnabled() && $.log.info('Session starting...'); // After a short time, display a loading animation (will be removed again in _renderDesktop)\n\n      this._setApplicationLoading(true); // Send startup request\n\n\n      return this._sendStartupRequest();\n    }\n  }, {\n    key: \"onModelEvent\",\n    value: function onModelEvent(event) {\n      if (event.type === 'localeChanged') {\n        this._onLocaleChanged(event);\n      } else if (event.type === 'logout') {\n        this._onLogout(event);\n      } else if (event.type === 'disposeAdapter') {\n        this._onDisposeAdapter(event);\n      } else if (event.type === 'reloadPage') {\n        this._onReloadPage(event);\n      } else {\n        $.log.warn('Model action \"' + event.type + '\" is not supported by UI session');\n      }\n    }\n  }, {\n    key: \"resetEventFilters\",\n    value: function resetEventFilters() {// NOP\n    }\n  }, {\n    key: \"_onLocaleChanged\",\n    value: function _onLocaleChanged(event) {\n      var locale = new Locale(event.locale);\n      var textMap = new TextMap(event.textMap);\n      this.switchLocale(locale, textMap);\n    }\n    /**\n     * @param {Locale} the new locale\n     * @param {TextMap} [textMap] the new textMap. If not defined, the corresponding textMap for the new locale is used.\n     */\n\n  }, {\n    key: \"switchLocale\",\n    value: function switchLocale(locale, textMap) {\n      scout.assertParameter('locale', locale, Locale);\n      this.locale = locale;\n      this.textMap = texts.get(locale.languageTag);\n\n      if (textMap) {\n        objects.copyOwnProperties(textMap, this.textMap);\n      } // TODO [7.0] bsh: inform components to reformat display text? also check Collator in comparators.TEXT\n\n\n      this.trigger('localeSwitch', {\n        locale: this.locale\n      });\n    }\n  }, {\n    key: \"_renderDesktop\",\n    value: function _renderDesktop() {\n      this.desktop.render(this.$entryPoint);\n      this.desktop.invalidateLayoutTree(false);\n\n      this._setApplicationLoading(false);\n    }\n  }, {\n    key: \"_onLogout\",\n    value: function _onLogout(event) {\n      this.logout(event.redirectUrl);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout(logoutUrl) {\n      this.loggedOut = true; // TODO [7.0] bsh: Check if there is a better solution (e.g. send a flag from server \"action\" = [ \"redirect\" | \"closeWindow\" ])\n\n      if (this.forceNewClientSession) {\n        this.desktop.$container.window(true).close();\n      } else {\n        // remember current url to not lose query parameters (such as debug; however, ignore deeplinks)\n        var url = new URL();\n        url.removeParameter('dl'); // deeplink\n\n        url.removeParameter('i'); // deeplink info\n\n        webstorage.setItem(sessionStorage, 'scout:loginUrl', url.toString()); // Clear everything and reload the page. We wrap that in setTimeout() to allow other events to be executed normally before.\n\n        setTimeout(function () {\n          scout.reloadPage({\n            redirectUrl: logoutUrl\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_onDisposeAdapter\",\n    value: function _onDisposeAdapter(event) {\n      // Model adapter was disposed on server -> dispose it on the UI, too\n      var adapter = this.getModelAdapter(event.adapter);\n\n      if (adapter) {\n        // adapter may be null if it was never sent to the UI, e.g. a form that was opened and closed in the same request\n        adapter.destroy();\n      }\n    }\n  }, {\n    key: \"_onReloadPage\",\n    value: function _onReloadPage(event) {\n      // Don't clear the body, because other events might be processed before the reload and\n      // it could cause errors when all DOM elements are already removed.\n      scout.reloadPage({\n        clearBody: false\n      });\n    }\n  }, {\n    key: \"_onWindowBeforeUnload\",\n    value: function _onWindowBeforeUnload() {\n      $.log.isInfoEnabled() && $.log.info('Session before unloading...'); // TODO [7.0] bsh: Cancel pending requests\n      // Set a flag that indicates unloading before _onWindowUnload() is called.\n      // See goOffline() why this is necessary.\n\n      this.unloading = true;\n      setTimeout(function () {\n        // Because there is no callback when the unloading was cancelled, we always\n        // reset the flag after a short period of time.\n        this.unloading = false;\n      }.bind(this), 200);\n    }\n  }, {\n    key: \"_onWindowUnload\",\n    value: function _onWindowUnload() {\n      $.log.isInfoEnabled() && $.log.info('Session unloading...');\n      this.unloaded = true; // Close popup windows\n\n      if (this.desktop && this.desktop.formController) {\n        this.desktop.formController.closePopupWindows();\n      } // Destroy UI session on server (only when the server did not not initiate the logout,\n      // otherwise the UI session would already be disposed)\n\n\n      if (!this.loggedOut) {\n        this._sendUnloadRequest();\n      }\n\n      if (this.loggedOut && this.persistent) {\n        webstorage.removeItem(localStorage, 'scout:clientSessionId');\n      }\n    }\n    /**\n     * Returns the adapter-data sent with the JSON response from the adapter-data cache. Note that this operation\n     * removes the requested element from the cache, thus you cannot request the same ID twice. Typically once\n     * you've requested an element from this cache an adapter for that ID is created and stored in the adapter\n     * registry which too exists on this session object.\n     */\n\n  }, {\n    key: \"_getAdapterData\",\n    value: function _getAdapterData(id) {\n      var adapterData = this._adapterDataCache[id];\n      var deleteAdapterData = !this.adapterExportEnabled;\n\n      if (deleteAdapterData) {\n        delete this._adapterDataCache[id];\n      }\n\n      return adapterData;\n    }\n  }, {\n    key: \"getAdapterData\",\n    value: function getAdapterData(id) {\n      return this._adapterDataCache[id];\n    }\n  }, {\n    key: \"text\",\n    value: function text(textKey) {\n      var _this$textMap;\n\n      return (_this$textMap = this.textMap).get.apply(_this$textMap, arguments);\n    }\n  }, {\n    key: \"optText\",\n    value: function optText(textKey, defaultValue) {\n      var _this$textMap2;\n\n      return (_this$textMap2 = this.textMap).optGet.apply(_this$textMap2, arguments);\n    }\n  }, {\n    key: \"textExists\",\n    value: function textExists(textKey) {\n      return this.textMap.exists(textKey);\n    } // --- Event handling methods ---\n\n  }, {\n    key: \"_createEventSupport\",\n    value: function _createEventSupport() {\n      return new EventSupport();\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(type, event) {\n      event = event || {};\n      event.source = this;\n      this.events.trigger(type, event);\n    }\n  }, {\n    key: \"one\",\n    value: function one(type, func) {\n      this.events.one(type, func);\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, func) {\n      return this.events.on(type, func);\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, func) {\n      this.events.off(type, func);\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      this.events.addListener(listener);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      this.events.removeListener(listener);\n    }\n  }, {\n    key: \"when\",\n    value: function when(type) {\n      return this.events.when(type);\n    }\n  }]);\n\n  return Session;\n}();\n\n_defineProperty(Session, \"JsonResponseError\", {\n  STARTUP_FAILED: 5,\n  SESSION_TIMEOUT: 10,\n  UI_PROCESSING: 20,\n  UNSAFE_UPLOAD: 30,\n  VERSION_MISMATCH: 40\n});\n\n_defineProperty(Session, \"EMPTY_UPLOAD_FILENAME\", '*empty*');\n\nexport { Session as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/session/Session.js"],"names":["AjaxCall","App","arrays","BackgroundJobPollingStatus","BackgroundJobPollingSupport","Device","EventSupport","FileInput","FocusManager","fonts","LayoutValidator","Locale","MessageBox","ModelAdapter","NullWidget","ObjectFactory","objects","Reconnector","RemoteEvent","ResponseQueue","scout","Status","strings","TextMap","texts","TypeDescriptor","URL","UserAgent","webstorage","$","Session","$entryPoint","partId","url","userAgent","deviceType","get","type","touch","supportsOnlyTouch","standalone","isStandalone","locale","textMap","ready","unloading","unloaded","loggedOut","inspector","persistent","desktop","layoutValidator","focusManager","keyStrokeManager","uiSessionId","clientSessionId","_getClientSessionIdFromStorage","forceNewClientSession","remoteUrl","unloadUrl","modelAdapterRegistry","ajaxCalls","asyncEvents","responseQueue","requestsPendingCounter","suppressErrors","requestTimeoutCancel","requestTimeoutPoll","requestTimeoutPing","backgroundJobPollingSupport","reconnector","processingEvents","adapterExportEnabled","_adapterDataCache","_busy","_busyIndicator","_busyIndicatorTimeoutId","_deferred","_fatalMessagesOnScreen","_retryRequest","_queuedRequest","requestSequenceNo","rootAdapter","init","session","id","objectType","rootParent","initialized","root","createWidget","events","_createEventSupport","model","options","Error","nvl","portletPartId","getParameter","ensure","languageTag","backgroundJobPollingEnabled","enabled","extend","reconnectorOptions","ajaxCallOptions","active","focusManagerActive","create","message","modelAdapter","undefined","adapterId","adapter","getModelAdapter","widget","parent","strict","getWidget","adapterData","_getAdapterData","createModelAdapter","createOpts","objectInfo","parse","modelVariant","toString","MODEL_VARIANT_SEPARATOR","variantLenient","adapterModel","log","isTraceEnabled","trace","event","delay","_coalesceEvents","push","_asyncDelay","Math","min","clearTimeout","_sendTimeoutId","setTimeout","areRequestsPending","_sendNow","bind","request","_newRequest","startup","version","sessionStartupParams","_createSessionStartupParams","ajaxOptions","defaultAjaxOptions","ajax","catch","onAjaxFail","then","onAjaxDone","data","_processStartupResponse","error","rejectedPromise","jqXHR","textStatus","errorThrown","_setApplicationLoading","_processErrorResponse","args","argumentsToArray","arguments","apply","params","baseUrlRaw","geolocationServiceAvailable","supportsGeolocation","urlParameterMap","parameterMap","prop","_processErrorJsonResponse","removeItem","sessionStorage","startupData","_storeClientSessionIdInStorage","window","on","_onWindowBeforeUnload","_onWindowUnload","reloadPage","pollingInterval","_copyAdapterData","addAll","clientSessionData","clientSession","getOrCreateWidget","renderDesktopImpl","_renderDesktop","_processEvents","validate","validateFocus","_resumeBackgroundJobPolling","isInfoEnabled","info","isDebugEnabled","debug","countOwnProperties","render","localStorage","storage","setItem","getItem","renderFunc","loadingComplete","preloader","unload","showBusyIndicator","_sendRequest","length","some","i","newRequest","prepareRequest","slice","previousEvents","coalesce","filter","negate","offline","_handleSendWhenOffline","navigator","sendBeacon","busyHandling","async","_performUserAjaxRequest","forEach","concat","_decorateUrl","dataType","contentType","cache","_requestToJson","timeout","cancel","ping","pollForBackgroundJobs","urlHint","syncResponseQueue","addParameter","defaultName","JSON","stringify","key","value","ignore","isOneOf","callOptions","defaultOptions","retryIntervals","ajaxCall","ensureUniqueId","registerAjaxCall","call","always","unregisterAjaxCall","setBusy","setRequestPending","jsError","success","_callAjax","name","_getRequestName","done","fail","onAjaxAlways","areBusyIndicatedEventsQueued","process","err","ajaxError","_fireRequestFinished","retryRequest","queuedRequest","remove","pendingCall","abort","status","RUNNING","_pollForBackgroundJobs","setRunning","warn","setFailed","add","sessionTerminated","setStopped","redirectUrl","logout","_processSuccessResponse","cacheSize","count","offlineError","isOfflineError","goOffline","optText","boxOptions","header","body","join","yesButtonText","yesButtonAction","noButtonText","showFatalMessage","jsonError","code","JsonResponseError","VERSION_MISMATCH","loopDetection","STARTUP_FAILED","SESSION_TIMEOUT","UI_PROCESSING","UNSAFE_UPLOAD","_deferredEventTypes","resolve","errorCode","iconId","severity","Severity","ERROR","hiddenText","cancelButtonText","messageBox","entryPoint","destroy","option","noButtonAction","cancelButtonAction","target","files","uploadProperties","maxTotalSize","allowedTypes","formData","FormData","totalSize","each","append","index","size","filename","scoutName","EMPTY_UPLOAD_FILENAME","DEFAULT_MAXIMUM_UPLOAD_SIZE","text","uploadAjaxOptions","processData","polyfill","applyToAjaxOptions","prepareHttpRequest","abortAllAjaxCalls","start","goOnline","onReconnecting","onReconnectingSucceeded","onReconnectingFailed","Deferred","func","argumentsArray","shift","areEventsQueued","listen","onEventsProcessed","one","execFunc","pending","toggleAttr","busy","_renderBusy","_removeBusy","rendered","_onCancelProcessing","busyIndicator","off","cancelled","_sendCancelRequest","currentEvent","requestData","applicationLoading","_applicationLoadingTimeoutId","_renderApplicationLoading","_removeApplicationLoading","$loadingRoot","appendDiv","addClass","fadeIn","hide","children","supportsCssAnimation","oneAnimationEnd","splice","onModelEvent","resetEventFilters","map","msg","properties","Object","keys","trigger","_sendStartupRequest","_onLocaleChanged","_onLogout","_onDisposeAdapter","_onReloadPage","switchLocale","assertParameter","copyOwnProperties","invalidateLayoutTree","logoutUrl","$container","close","removeParameter","clearBody","formController","closePopupWindows","_sendUnloadRequest","deleteAdapterData","textKey","defaultValue","optGet","exists","source","listener","addListener","removeListener","when"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {\n  AjaxCall,\n  App,\n  arrays,\n  BackgroundJobPollingStatus,\n  BackgroundJobPollingSupport,\n  Device,\n  EventSupport,\n  FileInput,\n  FocusManager,\n  fonts,\n  LayoutValidator,\n  Locale,\n  MessageBox,\n  ModelAdapter,\n  NullWidget,\n  ObjectFactory,\n  objects,\n  Reconnector,\n  RemoteEvent,\n  ResponseQueue,\n  scout,\n  Status,\n  strings,\n  TextMap,\n  texts,\n  TypeDescriptor,\n  URL,\n  UserAgent,\n  webstorage\n} from '../index';\nimport $ from 'jquery';\n\nexport default class Session {\n  constructor() {\n    this.$entryPoint = null;\n    this.partId = 0;\n\n    this.url = new URL();\n    this.userAgent = new UserAgent({\n      deviceType: Device.get().type,\n      touch: Device.get().supportsOnlyTouch(),\n      standalone: Device.get().isStandalone()\n    });\n    this.locale = null;\n    this.textMap = new TextMap();\n\n    this.ready = false; // true after desktop has been completely rendered\n    this.unloading = false; // true when 'beforeOnload' event has been triggered\n    this.unloaded = false; // true after unload event has been received from the window\n    this.loggedOut = false;\n    this.inspector = false;\n    this.persistent = false;\n    this.desktop = null;\n    this.layoutValidator = new LayoutValidator();\n    this.focusManager = null;\n    this.keyStrokeManager = null;\n\n    this.uiSessionId = null; // assigned by server on session startup (OWASP recommendation, see https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern).\n    this.clientSessionId = this._getClientSessionIdFromStorage();\n    this.forceNewClientSession = false;\n    this.remoteUrl = 'json';\n    this.unloadUrl = 'unload';\n    this.modelAdapterRegistry = {};\n    this.ajaxCalls = [];\n    this.asyncEvents = [];\n    this.responseQueue = new ResponseQueue(this);\n    this.requestsPendingCounter = 0;\n    this.suppressErrors = false;\n    this.requestTimeoutCancel = 5000; // ms\n    this.requestTimeoutPoll = 75000; // ms, depends on polling interval, will therefore be initialized on startup\n    this.requestTimeoutPing = 5000; // ms\n    this.backgroundJobPollingSupport = new BackgroundJobPollingSupport(true);\n    this.reconnector = new Reconnector(this);\n    this.processingEvents = false;\n\n    // This property is enabled by URL parameter &adapterExportEnabled=1. Default is false\n    this.adapterExportEnabled = false;\n    this._adapterDataCache = {};\n    this._busy = false;\n    this._busyIndicator = null;\n    this._busyIndicatorTimeoutId = null;\n    this._deferred = null;\n    this._fatalMessagesOnScreen = {};\n    this._retryRequest = null;\n    this._queuedRequest = null;\n    this.requestSequenceNo = 0;\n\n    this.rootAdapter = new ModelAdapter();\n    this.rootAdapter.init({\n      session: this,\n      id: '1',\n      objectType: 'RootAdapter'\n    });\n\n    var rootParent = new NullWidget();\n    rootParent.session = this;\n    rootParent.initialized = true;\n\n    this.root = this.rootAdapter.createWidget({\n      session: this,\n      id: '1',\n      objectType: 'NullWidget'\n    }, rootParent);\n    this.events = this._createEventSupport();\n  }\n\n  // Corresponds to constants in JsonResponse\n  static JsonResponseError = {\n    STARTUP_FAILED: 5,\n    SESSION_TIMEOUT: 10,\n    UI_PROCESSING: 20,\n    UNSAFE_UPLOAD: 30,\n    VERSION_MISMATCH: 40\n  };\n\n  // Placeholder string for an empty filename\n  static EMPTY_UPLOAD_FILENAME = '*empty*';\n\n  /**\n   * $entryPoint is required to create a new session.\n   *\n   * The 'options' argument holds all optional values that may be used during\n   * initialization (it is the same object passed to the scout.init() function).\n   * The following 'options' properties are read by this constructor function:\n   *   [portletPartId]\n   *     Optional, default is 0. Necessary when multiple UI sessions are managed\n   *     by the same window (portlet support). Each session's partId must be unique.\n   *   [clientSessionId]\n   *     Identifies the 'client instance' on the UI server. If the property is not set\n   *     (which is the default case), the clientSessionId is taken from the browser's\n   *     session storage (per browser window, survives F5 refresh of page). If no\n   *     clientSessionId can be found, a new one is generated on the server.\n   *   [userAgent]\n   *     Default: DESKTOP\n   *   [backgroundJobPollingEnabled]\n   *     Unless websockets is used, this property turns on (default) or off background\n   *     polling using an async ajax call together with setTimeout()\n   *   [suppressErrors]\n   *     Basically added because of Jasmine-tests. When working with async tests that\n   *     use setTimeout(), sometimes the Jasmine-Maven plug-in fails and aborts the\n   *     build because there were console errors. These errors always happen in this\n   *     class. That's why we can skip suppress error handling with this flag.\n   *   [focusManagerActive]\n   *     Forces the focus manager to be active or not. If undefined, the value is\n   *     auto detected by Device.js.\n   *   [reconnectorOptions]\n   *     Optional, properties of this object are copied to the Session's reconnector\n   *     instance (see Reconnector.js).\n   *   [ajaxCallOptions]\n   *     Optional, properties of this object are copied to all instances of AjaxCall.js.\n   */\n  init(model) {\n    var options = model || {};\n\n    if (!options.$entryPoint) {\n      throw new Error('$entryPoint is not defined');\n    }\n    this.$entryPoint = options.$entryPoint;\n    this.partId = scout.nvl(options.portletPartId, this.partId);\n    this.forceNewClientSession = scout.nvl(this.url.getParameter('forceNewClientSession'), options.forceNewClientSession);\n    if (this.forceNewClientSession) {\n      this.clientSessionId = null;\n    } else {\n      this.clientSessionId = scout.nvl(options.clientSessionId, this.clientSessionId);\n    }\n    this.userAgent = scout.nvl(options.userAgent, this.userAgent);\n    this.suppressErrors = scout.nvl(options.suppressErrors, this.suppressErrors);\n    if (options.locale) {\n      this.locale = Locale.ensure(options.locale);\n      this.textMap = texts.get(this.locale.languageTag);\n    }\n    if (options.backgroundJobPollingEnabled === false) {\n      this.backgroundJobPollingSupport.enabled = false;\n    }\n    $.extend(this.reconnector, options.reconnectorOptions);\n    this.ajaxCallOptions = options.ajaxCallOptions;\n\n    // Set inspector flag by looking at URL params. This is required when running in offline mode.\n    // In online mode, the server may override this flag again, see _processStartupResponse().\n    if (this.url.getParameter('debug') === 'true' || this.url.getParameter('inspector') === 'true') {\n      this.inspector = true;\n    }\n\n    if (this.url.getParameter('adapterExportEnabled') === 'true') {\n      this.adapterExportEnabled = true;\n    }\n\n    // Install focus management for this session (cannot be created in constructor, because this.$entryPoint is required)\n    this.focusManager = new FocusManager({\n      session: this,\n      active: options.focusManagerActive\n    });\n    this.keyStrokeManager = scout.create('KeyStrokeManager', {\n      session: this\n    });\n  }\n\n  _throwError(message) {\n    if (!this.suppressErrors) {\n      throw new Error(message);\n    }\n  }\n\n  unregisterModelAdapter(modelAdapter) {\n    delete this.modelAdapterRegistry[modelAdapter.id];\n  }\n\n  registerModelAdapter(modelAdapter) {\n    if (modelAdapter.id === undefined) {\n      throw new Error('modelAdapter.id must be defined');\n    }\n    this.modelAdapterRegistry[modelAdapter.id] = modelAdapter;\n  }\n\n  getModelAdapter(id) {\n    return this.modelAdapterRegistry[id];\n  }\n\n  getWidget(adapterId) {\n    if (!adapterId) {\n      return null;\n    }\n    if (typeof adapterId !== 'string') {\n      throw new Error('typeof adapterId must be string');\n    }\n    var adapter = this.getModelAdapter(adapterId);\n    if (!adapter) {\n      return null;\n    }\n    return adapter.widget;\n  }\n\n  getOrCreateWidget(adapterId, parent, strict) {\n    if (!adapterId) {\n      return null;\n    }\n    if (typeof adapterId !== 'string') {\n      throw new Error('typeof adapterId must be string');\n    }\n    var widget = this.getWidget(adapterId);\n    if (widget) {\n      return widget;\n    }\n    var adapterData = this._getAdapterData(adapterId);\n    if (!adapterData) {\n      if (scout.nvl(strict, true)) {\n        throw new Error('no adapterData found for adapterId=' + adapterId);\n      }\n      return null;\n    }\n    var adapter = this.createModelAdapter(adapterData);\n    return adapter.createWidget(adapterData, parent);\n  }\n\n  createModelAdapter(adapterData) {\n    var objectType = adapterData.objectType;\n    var createOpts = {};\n\n    var objectInfo = TypeDescriptor.parse(objectType);\n    if (objectInfo.modelVariant) {\n      objectType = objectInfo.objectType.toString() + 'Adapter' + ObjectFactory.MODEL_VARIANT_SEPARATOR + objectInfo.modelVariant.toString();\n      // If no adapter exists for the given variant then create an adapter without variant.\n      // Mostly variant is only essential for the widget, not the adapter\n      createOpts.variantLenient = true;\n    } else {\n      objectType = objectInfo.objectType.toString() + 'Adapter';\n    }\n\n    // TODO [7.0] bsh, cgu: Add classId/modelClass? Think about if IDs should be different for widgets (maybe prefix with 'w')\n    var adapterModel = {\n      id: adapterData.id,\n      session: this\n    };\n    var adapter = scout.create(objectType, adapterModel, createOpts);\n    $.log.isTraceEnabled() && $.log.trace('created new adapter ' + adapter);\n    return adapter;\n  }\n\n  /**\n   * Sends the request asynchronously and processes the response later.<br>\n   * Furthermore, the request is sent delayed. If send is called multiple times\n   * during the same user interaction, the events are collected and sent in one\n   * request at the end of the user interaction\n   */\n  sendEvent(event, delay) {\n    delay = delay || 0;\n\n    this.asyncEvents = this._coalesceEvents(this.asyncEvents, event);\n    this.asyncEvents.push(event);\n    // Use the specified delay, except another event is already scheduled. In that case, use the minimal delay.\n    // This ensures that an event with a long delay doesn't hold back another event with a short delay.\n    this._asyncDelay = Math.min(delay, scout.nvl(this._asyncDelay, delay));\n\n    clearTimeout(this._sendTimeoutId);\n    this._sendTimeoutId = setTimeout(function() {\n      this._sendTimeoutId = null;\n      this._asyncDelay = null;\n      if (this.areRequestsPending()) {\n        // do not send if there are any requests pending because the order matters -> prevents race conditions\n        return;\n      }\n      this._sendNow();\n    }.bind(this), this._asyncDelay);\n  }\n\n  _sendStartupRequest() {\n    // Build startup request (see JavaDoc for JsonStartupRequest.java for details)\n    var request = this._newRequest({\n      startup: true\n    });\n    if (this.partId) {\n      request.partId = this.partId;\n    }\n    if (this.clientSessionId) {\n      request.clientSessionId = this.clientSessionId;\n    }\n    if (App.get().version) {\n      request.version = App.get().version;\n    }\n    request.userAgent = this.userAgent;\n    request.sessionStartupParams = this._createSessionStartupParams();\n\n    // Send request\n    var ajaxOptions = this.defaultAjaxOptions(request);\n\n    return $.ajax(ajaxOptions)\n      .catch(onAjaxFail.bind(this))\n      .then(onAjaxDone.bind(this));\n\n    // ----- Helper methods -----\n\n    function onAjaxDone(data) {\n      this._processStartupResponse(data);\n      if (data.error) {\n        return $.rejectedPromise(data);\n      }\n    }\n\n    function onAjaxFail(jqXHR, textStatus, errorThrown) {\n      this._setApplicationLoading(false);\n      this._processErrorResponse(jqXHR, textStatus, errorThrown, request);\n      var args = objects.argumentsToArray(arguments);\n      return $.rejectedPromise.apply($, args);\n    }\n  }\n\n  /**\n   * Creates an object to send to the server as \"startupParams\".\n   *\n   * Default params:\n   * \"url\":\n   *   browser URL (without query and hash part)\n   * \"geolocationServiceAvailable\":\n   *   true if browser supports geo location services\n   *\n   * Additionally, all query parameters from the URL are put in the resulting object.\n   */\n  _createSessionStartupParams() {\n    var params = {\n      url: this.url.baseUrlRaw,\n      geolocationServiceAvailable: Device.get().supportsGeolocation()\n    };\n\n    // Extract query parameters from URL and put them in the resulting object\n    var urlParameterMap = this.url.parameterMap;\n    for (var prop in urlParameterMap) {\n      params[prop] = urlParameterMap[prop];\n    }\n    return params;\n  }\n\n  _processStartupResponse(data) {\n    // Handle errors from server\n    if (data.error) {\n      this._processErrorJsonResponse(data.error);\n      return;\n    }\n\n    webstorage.removeItem(sessionStorage, 'scout:versionMismatch');\n\n    if (!data.startupData) {\n      throw new Error('Missing startupData');\n    }\n\n    // Mark session as persistent (means a persistent session cookie is used and the client session will be restored after a browser restart)\n    this.persistent = data.startupData.persistent;\n\n    // Store clientSessionId in sessionStorage (to send the same ID again on page reload)\n    this.clientSessionId = data.startupData.clientSessionId;\n    this._storeClientSessionIdInStorage(this.clientSessionId);\n\n    // Assign server generated uiSessionId. It must be sent along with all further requests.\n    this.uiSessionId = data.startupData.uiSessionId;\n\n    // Destroy UI session on server when page is closed or reloaded\n    $(window)\n      .on('beforeunload.' + this.uiSessionId, this._onWindowBeforeUnload.bind(this))\n      .on('unload.' + this.uiSessionId, this._onWindowUnload.bind(this));\n\n    // Special case: Page must be reloaded on startup (e.g. theme changed)\n    if (data.startupData.reloadPage) {\n      scout.reloadPage();\n      return;\n    }\n\n    // Enable inspector mode if server requests it (e.g. when server is running in development mode)\n    if (data.startupData.inspector) {\n      this.inspector = true;\n    }\n\n    // Init request timeout for poller\n    this.requestTimeoutPoll = (data.startupData.pollingInterval + 15) * 1000;\n\n    // Register UI session\n    this.modelAdapterRegistry[this.uiSessionId] = this; // TODO [7.0] cgu: maybe better separate session object from event processing, create ClientSession.js?. If yes, desktop should not have rootadapter as parent, see 406\n\n    // Store adapters to adapter data cache\n    if (data.adapterData) {\n      this._copyAdapterData(data.adapterData);\n    }\n\n    this.locale = new Locale(data.startupData.locale);\n    this.textMap = texts.get(this.locale.languageTag);\n    this.textMap.addAll(data.startupData.textMap);\n\n    // Create the desktop\n    // Extract client session data without creating a model adapter for it. It is (currently) only used to transport the desktop's adapterId.\n    var clientSessionData = this._getAdapterData(data.startupData.clientSession);\n    this.desktop = this.getOrCreateWidget(clientSessionData.desktop, this.rootAdapter.widget);\n    var renderDesktopImpl = function() {\n      this._renderDesktop();\n\n      // In case the server sent additional events, process them\n      if (data.events) {\n        this.processingEvents = true;\n        try {\n          this._processEvents(data.events);\n        } finally {\n          this.processingEvents = false;\n        }\n      }\n\n      // Ensure layout is valid (explicitly layout immediately and don't wait for setTimeout to run to make layouting invisible to the user)\n      this.layoutValidator.validate();\n      this.focusManager.validateFocus();\n\n      // Start poller\n      this._resumeBackgroundJobPolling();\n\n      this.ready = true;\n\n      $.log.isInfoEnabled() && $.log.info('Session initialized. Detected ' + Device.get());\n      if ($.log.isDebugEnabled()) {\n        $.log.isDebugEnabled() && $.log.debug('size of _adapterDataCache after session has been initialized: ' + objects.countOwnProperties(this._adapterDataCache));\n        $.log.isDebugEnabled() && $.log.debug('size of modelAdapterRegistry after session has been initialized: ' + objects.countOwnProperties(this.modelAdapterRegistry));\n      }\n    }.bind(this);\n\n    this.render(renderDesktopImpl);\n  }\n\n  _storeClientSessionIdInStorage(clientSessionId) {\n    webstorage.removeItem(sessionStorage, 'scout:clientSessionId');\n    webstorage.removeItem(localStorage, 'scout:clientSessionId');\n    var storage = sessionStorage;\n    if (this.persistent) {\n      storage = localStorage;\n    }\n    webstorage.setItem(storage, 'scout:clientSessionId', clientSessionId);\n  }\n\n  _getClientSessionIdFromStorage() {\n    var id = webstorage.getItem(sessionStorage, 'scout:clientSessionId');\n    if (!id) {\n      // If the session is persistent it was stored in the local storage (cannot check for this.persistent here because it is not known yet)\n      id = webstorage.getItem(localStorage, 'scout:clientSessionId');\n    }\n    return id;\n  }\n\n  render(renderFunc) {\n    // Render desktop after fonts have been preloaded (this fixes initial layouting issues when font icons are not yet ready)\n    if (fonts.loadingComplete) {\n      renderFunc();\n    } else {\n      fonts.preloader().then(renderFunc);\n    }\n  }\n\n  _sendUnloadRequest() {\n    var request = this._newRequest({\n      unload: true,\n      showBusyIndicator: false\n    });\n    // Send request\n    this._sendRequest(request);\n  }\n\n  _sendNow() {\n    if (this.asyncEvents.length === 0) {\n      // Nothing to send -> return\n      return;\n    }\n    // If an event requires a new request, only the previous events are sent now.\n    // The next requests are send the next time _sendNow is called (-> when the response to the current request arrives)\n    var events = [];\n    this.asyncEvents.some(function(event, i) {\n      if (event.newRequest && events.length > 0) {\n        return true;\n      }\n      events.push(event);\n      return false;\n    });\n    var request = this._newRequest({\n      events: events\n    });\n    // Busy indicator required when at least one event requests it\n    request.showBusyIndicator = request.events.some(function(event) {\n      return scout.nvl(event.showBusyIndicator, true);\n    });\n    this.responseQueue.prepareRequest(request);\n    // Send request\n    this._sendRequest(request);\n    // Remove the events which are sent now from the list, keep the ones which are sent later\n    this.asyncEvents = this.asyncEvents.slice(events.length);\n  }\n\n  _coalesceEvents(previousEvents, event) {\n    if (!event.coalesce) {\n      return previousEvents;\n    }\n    var filter = $.negate(event.coalesce).bind(event);\n    return previousEvents.filter(filter);\n  }\n\n  _sendRequest(request) {\n    if (!request) {\n      return; // nothing to send\n    }\n\n    if (this.offline && !request.unload) { // In Firefox, \"offline\" is already true when page is unloaded\n      this._handleSendWhenOffline(request);\n      return;\n    }\n\n    if (request.unload && navigator.sendBeacon) {\n      // The unload request must _not_ be sent asynchronously, because the browser would cancel\n      // it when the page unload is completed. Because the support for synchronous AJAX request\n      // will apparently be dropped eventually, we use the \"sendBeacon\" method to send the unload\n      // request to the server (we don't expect an answer). Not all browsers support this method,\n      // therefore we check for its existence and fall back to (legacy) synchronous AJAX call\n      // when it is missing. More information:\n      // - http://stackoverflow.com/questions/15479103/can-beforeunload-unload-be-used-to-send-xmlhttprequests-reliably\n      // - https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/7nKMdg_ALcc\n      // - https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon\n      navigator.sendBeacon(this.unloadUrl + '/' + this.uiSessionId, '');\n      return;\n    }\n\n    var ajaxOptions = this.defaultAjaxOptions(request);\n\n    var busyHandling = scout.nvl(request.showBusyIndicator, true);\n    if (request.unload) {\n      ajaxOptions.async = false;\n    }\n    this._performUserAjaxRequest(ajaxOptions, busyHandling, request);\n  }\n\n  _handleSendWhenOffline(request) {\n    // No need to queue the request when request does not contain events (e.g. log request, unload request)\n    if (!request.events) {\n      return;\n    }\n\n    // Merge request with queued event\n    if (this._queuedRequest) {\n      if (this._queuedRequest.events) {\n        // 1. Remove request events from queued events\n        request.events.forEach(function(event) {\n          this._queuedRequest.events = this._coalesceEvents(this._queuedRequest.events, event);\n        }.bind(this));\n        // 2. Add request events to end of queued events\n        this._queuedRequest.events = this._queuedRequest.events.concat(request.events);\n      } else {\n        this._queuedRequest.events = request.events;\n      }\n    } else {\n      this._queuedRequest = request;\n    }\n    this.layoutValidator.validate();\n  }\n\n  defaultAjaxOptions(request) {\n    request = request || this._newRequest();\n    var url = this._decorateUrl(this.remoteUrl, request);\n\n    var ajaxOptions = {\n      type: 'POST',\n      dataType: 'json',\n      contentType: 'application/json; charset=UTF-8',\n      cache: false,\n      url: url,\n      data: this._requestToJson(request)\n    };\n\n    // Ensure that certain request don't run forever. When a timeout occurs, the session\n    // is put into offline mode. Note that normal requests should NOT be limited, because\n    // the server processing might take very long (e.g. long running database query).\n    ajaxOptions.timeout = 0; // \"infinite\"\n    if (request.cancel) {\n      ajaxOptions.timeout = this.requestTimeoutCancel;\n    }\n    if (request.ping) {\n      ajaxOptions.timeout = this.requestTimeoutPing;\n    }\n    if (request.pollForBackgroundJobs) {\n      ajaxOptions.timeout = this.requestTimeoutPoll;\n    }\n    return ajaxOptions;\n  }\n\n  _decorateUrl(url, request) {\n    var urlHint = null;\n    // Add dummy URL parameter as marker (for debugging purposes)\n    if (request.unload) {\n      urlHint = 'unload';\n    } else if (request.pollForBackgroundJobs) {\n      urlHint = 'poll';\n    } else if (request.ping) {\n      urlHint = 'ping';\n    } else if (request.cancel) {\n      urlHint = 'cancel';\n    } else if (request.log) {\n      urlHint = 'log';\n    } else if (request.syncResponseQueue) {\n      urlHint = 'sync';\n    }\n    if (urlHint) {\n      url = new URL(url).addParameter(urlHint)\n        .toString();\n    }\n    return url;\n  }\n\n  _getRequestName(request, defaultName) {\n    if (request) {\n      if (request.unload) {\n        return 'unload';\n      } else if (request.pollForBackgroundJobs) {\n        return 'pollForBackgroundJobs';\n      } else if (request.ping) {\n        return 'ping';\n      } else if (request.cancel) {\n        return 'cancel';\n      } else if (request.log) {\n        return 'log';\n      } else if (request.syncResponseQueue) {\n        return 'syncResponseQueue';\n      }\n    }\n    return defaultName;\n  }\n\n  _requestToJson(request) {\n    return JSON.stringify(request, function(key, value) {\n      // Replacer function that filter certain properties from the resulting JSON string.\n      // See https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n      var ignore =\n        this === request && key === 'showBusyIndicator' ||\n        this instanceof RemoteEvent && scout.isOneOf(key, 'showBusyIndicator', 'coalesce', 'newRequest');\n      return ignore ? undefined : value;\n    });\n  }\n\n  _callAjax(callOptions) {\n    var defaultOptions = {\n      retryIntervals: [100, 500, 500, 500]\n    };\n    var ajaxCall = scout.create('AjaxCall', $.extend(defaultOptions, callOptions, this.ajaxCallOptions), {\n      ensureUniqueId: false\n    });\n    this.registerAjaxCall(ajaxCall);\n    return ajaxCall.call()\n      .always(this.unregisterAjaxCall.bind(this, ajaxCall));\n  }\n\n  _performUserAjaxRequest(ajaxOptions, busyHandling, request) {\n    if (busyHandling) {\n      this.setBusy(true);\n    }\n    this.setRequestPending(true);\n\n    var jsError = null,\n      success = false;\n\n    this._callAjax({\n      ajaxOptions: ajaxOptions,\n      request: request,\n      name: this._getRequestName(request, 'user request')\n    })\n      .done(onAjaxDone.bind(this))\n      .fail(onAjaxFail.bind(this))\n      .always(onAjaxAlways.bind(this));\n\n    // ----- Helper methods -----\n\n    function onAjaxDone(data) {\n      try {\n        // Busy handling is remove _before_ processing the response, otherwise the focus cannot be set\n        // correctly, because the glasspane of the busy indicator is still visible.\n        // The second check prevents flickering of the busy indicator if there is a scheduled request\n        // that will be sent immediately afterwards (see onAjaxAlways).\n        if (busyHandling && !this.areBusyIndicatedEventsQueued()) {\n          this.setBusy(false);\n        }\n        success = this.responseQueue.process(data);\n      } catch (err) {\n        jsError = jsError || err;\n      }\n    }\n\n    function onAjaxFail(ajaxError) {\n      try {\n        if (busyHandling) {\n          this.setBusy(false);\n        }\n        this._processErrorResponse(ajaxError.jqXHR, ajaxError.textStatus, ajaxError.errorThrown, request);\n      } catch (err) {\n        jsError = jsError || err;\n      }\n    }\n\n    // Variable arguments:\n    // \"done\" --> data, textStatus, jqXHR\n    // \"fail\" --> jqXHR, textStatus, errorThrown\n    function onAjaxAlways(data, textStatus, errorThrown) {\n      this.setRequestPending(false);\n\n      // \"success\" is false when either\n      // a) an HTTP error occurred or\n      // b) a JSON response with the error flag set (UI processing error) was returned\n      if (success) {\n        this._resumeBackgroundJobPolling();\n        this._fireRequestFinished(data);\n\n        if (this._retryRequest) {\n          // Send retry request first\n          var retryRequest = this._retryRequest;\n          this._retryRequest = null;\n          this.responseQueue.prepareRequest(retryRequest);\n          this._sendRequest(retryRequest);\n        } else if (this._queuedRequest) {\n          // Send events that happened while being offline\n          var queuedRequest = this._queuedRequest;\n          this._queuedRequest = null;\n          this.responseQueue.prepareRequest(queuedRequest);\n          this._sendRequest(queuedRequest);\n        }\n\n        // If there already is a another request pending, send it now\n        // But only if it should not be sent delayed\n        if (!this._sendTimeoutId) {\n          this._sendNow();\n        }\n      }\n      this.layoutValidator.validate();\n\n      // Throw previously caught error\n      if (jsError) {\n        throw jsError;\n      }\n    }\n  }\n\n  registerAjaxCall(ajaxCall) {\n    this.ajaxCalls.push(ajaxCall);\n  }\n\n  unregisterAjaxCall(ajaxCall) {\n    arrays.remove(this.ajaxCalls, ajaxCall);\n  }\n\n  interruptAllAjaxCalls() {\n    // Because the error handlers alter the \"this.ajaxCalls\" array,\n    // the loop must operate on a copy of the original array!\n    this.ajaxCalls.slice().forEach(function(ajaxCall) {\n      ajaxCall.pendingCall && ajaxCall.pendingCall.abort();\n    });\n  }\n\n  abortAllAjaxCalls() {\n    // Because the error handlers alter the \"this.ajaxCalls\" array,\n    // the loop must operate on a copy of the original array!\n    this.ajaxCalls.slice().forEach(function(ajaxCall) {\n      ajaxCall.abort();\n    });\n  }\n\n  /**\n   * (Re-)starts background job polling when not started yet or when an error occurred while polling.\n   * In the latter case, polling is resumed when a user-initiated request has been successful.\n   */\n  _resumeBackgroundJobPolling() {\n    if (this.backgroundJobPollingSupport.enabled && this.backgroundJobPollingSupport.status !== BackgroundJobPollingStatus.RUNNING) {\n      $.log.isInfoEnabled() && $.log.info('Resume background jobs polling request, status was=' + this.backgroundJobPollingSupport.status);\n      this._pollForBackgroundJobs();\n    }\n  }\n\n  /**\n   * Polls the results of jobs running in the background. Note: we cannot use the _sendRequest method here\n   * since we don't want any busy handling in case of background jobs. The request may take a while, since\n   * the server doesn't return until either a time-out occurs or there's something in the response when\n   * a model job is done and no request initiated by a user is running.\n   */\n  _pollForBackgroundJobs() {\n    this.backgroundJobPollingSupport.setRunning();\n\n    var request = this._newRequest({\n      pollForBackgroundJobs: true\n    });\n    this.responseQueue.prepareRequest(request);\n\n    var ajaxOptions = this.defaultAjaxOptions(request);\n\n    this._callAjax({\n      ajaxOptions: ajaxOptions,\n      request: request,\n      name: this._getRequestName(request, 'request')\n    })\n      .done(onAjaxDone.bind(this))\n      .fail(onAjaxFail.bind(this));\n\n    // --- Helper methods ---\n\n    function onAjaxDone(data) {\n      if (data.error) {\n        // Don't schedule a new polling request, when an error occurs\n        // when the next user-initiated request succeeds, we re-enable polling\n        // otherwise the polling would ping the server to death in case of an error\n        $.log.warn('Polling request failed. Interrupt polling until the next user-initiated request succeeds');\n        this.backgroundJobPollingSupport.setFailed();\n        if (this.areRequestsPending()) {\n          // Add response to queue, handle later by _performUserAjaxRequest()\n          this.responseQueue.add(data);\n        } else {\n          // No user request pending, handle immediately\n          this.responseQueue.process(data);\n        }\n      } else if (data.sessionTerminated) {\n        $.log.info('Session terminated, stopped polling for background jobs');\n        this.backgroundJobPollingSupport.setStopped();\n        // If were are not yet logged out, redirect to the logout URL (the session that initiated the\n        // session invalidation will receive a dedicated logout event, redirect is handled there).\n        if (!this.loggedOut && data.redirectUrl) {\n          this.logout(data.redirectUrl);\n        }\n      } else {\n        try {\n          // No need to change backgroundJobPollingSupport state, it should still be RUNNING\n          if (this.areRequestsPending()) {\n            // Add response to queue, handle later by _performUserAjaxRequest()\n            this.responseQueue.add(data);\n          } else {\n            // No user request pending, handle immediately\n            this.responseQueue.process(data);\n            this.layoutValidator.validate();\n          }\n          setTimeout(this._pollForBackgroundJobs.bind(this));\n        } catch (error) {\n          this.backgroundJobPollingSupport.setFailed();\n          throw error;\n        }\n      }\n    }\n\n    function onAjaxFail(ajaxError) {\n      this.backgroundJobPollingSupport.setFailed();\n      this._processErrorResponse(ajaxError.jqXHR, ajaxError.textStatus, ajaxError.errorThrown, request);\n    }\n  }\n\n  /**\n   * Do NOT call this method directly, always use the response queue:\n   *\n   *   session.responseQueue.process(data);\n   *\n   * Otherwise, the response queue's expected sequence number will get out of sync.\n   */\n  processJsonResponseInternal(data) {\n    var success = false;\n    if (data.error) {\n      this._processErrorJsonResponse(data.error);\n    } else {\n      this._processSuccessResponse(data);\n      success = true;\n    }\n    return success;\n  }\n\n  _processSuccessResponse(message) {\n    if (message.adapterData) {\n      this._copyAdapterData(message.adapterData);\n    }\n\n    if (message.events) {\n      this.processingEvents = true;\n      try {\n        this._processEvents(message.events);\n      } finally {\n        this.processingEvents = false;\n      }\n    }\n\n    if ($.log.isDebugEnabled()) {\n      var cacheSize = objects.countOwnProperties(this._adapterDataCache);\n      $.log.trace('size of _adapterDataCache after response has been processed: ' + cacheSize);\n      cacheSize = objects.countOwnProperties(this.modelAdapterRegistry);\n      $.log.trace('size of modelAdapterRegistry after response has been processed: ' + cacheSize);\n    }\n  }\n\n  _copyAdapterData(adapterData) {\n    var count = 0;\n    var prop;\n\n    for (prop in adapterData) {\n      this._adapterDataCache[prop] = adapterData[prop];\n      count++;\n    }\n    if (count > 0) {\n      $.log.isTraceEnabled() && $.log.trace('Stored ' + count + ' properties in adapterDataCache');\n    }\n  }\n\n  /**\n   * @param textStatus 'timeout', 'abort', 'error' or 'parseerror' (see http://api.jquery.com/jquery.ajax/)\n   */\n  _processErrorResponse(jqXHR, textStatus, errorThrown, request) {\n    $.log.error('errorResponse: status=' + jqXHR.status + ', textStatus=' + textStatus + ', errorThrown=' + errorThrown);\n\n    var offlineError = AjaxCall.isOfflineError(jqXHR, textStatus, errorThrown, request);\n    if (offlineError) {\n      if (this.ready) {\n        this.goOffline();\n        if (request && !request.pollForBackgroundJobs && !this._retryRequest) {\n          this._retryRequest = request;\n        }\n        return;\n      }\n      // Not ready yet (startup request)\n      errorThrown = errorThrown || this.optText('ui.ConnectionInterrupted', 'Connection interrupted');\n    }\n\n    // Show error message\n    var boxOptions = {\n      header: this.optText('ui.NetworkError', 'Network error'),\n      body: strings.join(' ', jqXHR.status || '', errorThrown),\n      yesButtonText: this.optText('ui.Reload', 'Reload'),\n      yesButtonAction: function() {\n        scout.reloadPage();\n      },\n      noButtonText: this.ready ? this.optText('ui.Ignore', 'Ignore') : null\n    };\n    this.showFatalMessage(boxOptions, jqXHR.status + '.net');\n  }\n\n  _processErrorJsonResponse(jsonError) {\n    if (jsonError.code === Session.JsonResponseError.VERSION_MISMATCH) {\n      var loopDetection = webstorage.getItem(sessionStorage, 'scout:versionMismatch');\n      if (!loopDetection) {\n        webstorage.setItem(sessionStorage, 'scout:versionMismatch', 'yes');\n        // Reload page -> everything should then be up to date\n        scout.reloadPage();\n        return;\n      }\n      webstorage.removeItem(sessionStorage, 'scout:versionMismatch');\n    }\n\n    // Default values for fatal message boxes\n    var boxOptions = {\n      header: this.optText('ui.ServerError', 'Server error') + ' (' + this.optText('ui.ErrorCodeX', 'Code ' + jsonError.code, jsonError.code) + ')',\n      body: jsonError.message,\n      yesButtonText: this.optText('ui.Reload', 'Reload'),\n      yesButtonAction: function() {\n        scout.reloadPage();\n      }\n    };\n\n    // Customize for specific error codes\n    if (jsonError.code === Session.JsonResponseError.STARTUP_FAILED) {\n      // there are no texts yet if session startup failed\n      boxOptions.header = jsonError.message;\n      boxOptions.body = null;\n      boxOptions.yesButtonText = 'Retry';\n    } else if (jsonError.code === Session.JsonResponseError.SESSION_TIMEOUT) {\n      boxOptions.header = this.optText('ui.SessionTimeout', boxOptions.header);\n      boxOptions.body = this.optText('ui.SessionExpiredMsg', boxOptions.body);\n    } else if (jsonError.code === Session.JsonResponseError.UI_PROCESSING) {\n      boxOptions.header = this.optText('ui.UnexpectedProblem', boxOptions.header);\n      boxOptions.body = strings.join('\\n\\n',\n        this.optText('ui.InternalProcessingErrorMsg', boxOptions.body, ' (' + this.optText('ui.ErrorCodeX', 'Code 20', '20') + ')'),\n        this.optText('ui.UiInconsistentMsg', ''));\n      boxOptions.noButtonText = this.optText('ui.Ignore', 'Ignore');\n    } else if (jsonError.code === Session.JsonResponseError.UNSAFE_UPLOAD) {\n      boxOptions.header = this.optText('ui.UnsafeUpload', boxOptions.header);\n      boxOptions.body = this.optText('ui.UnsafeUploadMsg', boxOptions.body);\n      boxOptions.yesButtonText = this.optText('ui.Ok', 'Ok');\n      boxOptions.yesButtonAction = function() {\n      };\n    }\n    this.showFatalMessage(boxOptions, jsonError.code);\n  }\n\n  _fireRequestFinished(message) {\n    if (!this._deferred) {\n      return;\n    }\n    if (message.events) {\n      for (var i = 0; i < message.events.length; i++) {\n        this._deferredEventTypes.push(message.events[i].type);\n      }\n    }\n    if (this.requestsPendingCounter === 0) {\n      this._deferred.resolve(this._deferredEventTypes);\n      this._deferred = null;\n      this._deferredEventTypes = null;\n    }\n  }\n\n  /**\n   * Shows a UI-only message box.\n   *\n   * @param options\n   *          Options for the message box, see MessageBox\n   * @param errorCode\n   *          If defined, a second call to this method with the same errorCode will\n   *          do nothing. Can be used to prevent double messages for the same error.\n   */\n  showFatalMessage(options, errorCode) {\n    if (errorCode) {\n      if (this._fatalMessagesOnScreen[errorCode]) {\n        return;\n      }\n      this._fatalMessagesOnScreen[errorCode] = true;\n    }\n    this._setApplicationLoading(false);\n\n    options = options || {};\n    var model = {\n        session: this,\n        parent: this.desktop || new NullWidget(),\n        iconId: options.iconId,\n        severity: scout.nvl(options.severity, Status.Severity.ERROR),\n        header: options.header,\n        body: options.body,\n        hiddenText: options.hiddenText,\n        yesButtonText: options.yesButtonText,\n        noButtonText: options.noButtonText,\n        cancelButtonText: options.cancelButtonText\n      },\n      messageBox = scout.create('MessageBox', model),\n      $entryPoint = options.entryPoint || this.$entryPoint;\n\n    messageBox.on('action', function(event) {\n      delete this._fatalMessagesOnScreen[errorCode];\n      messageBox.destroy();\n      var option = event.option;\n      if (option === 'yes' && options.yesButtonAction) {\n        options.yesButtonAction.apply(this);\n      } else if (option === 'no' && options.noButtonAction) {\n        options.noButtonAction.apply(this);\n      } else if (option === 'cancel' && options.cancelButtonAction) {\n        options.cancelButtonAction.apply(this);\n      }\n    }.bind(this));\n    messageBox.render($entryPoint);\n  }\n\n  uploadFiles(target, files, uploadProperties, maxTotalSize, allowedTypes) {\n    var formData = new FormData(),\n      totalSize = 0;\n\n    if (uploadProperties) {\n      $.each(uploadProperties, function(key, value) {\n        formData.append(key, value);\n      });\n    }\n\n    $.each(files, function(index, value) {\n      if (!allowedTypes || allowedTypes.length === 0 || scout.isOneOf(value.type, allowedTypes)) {\n        totalSize += value.size;\n        /*\n         * - see ClipboardField for comments on \"scoutName\"\n         * - Some Browsers (e.g. Edge) handle an empty string as filename as if the filename is not set and therefore introduce a default filename like 'blob'.\n         *   To counter this, we introduce a empty filename string. The string consists of characters that can not occur in regular filenames, to prevent collisions.\n         */\n        var filename = scout.nvl(value.scoutName, value.name, Session.EMPTY_UPLOAD_FILENAME);\n        formData.append('files', value, filename);\n      }\n    });\n\n    // 50 MB as default maximum size\n    maxTotalSize = scout.nvl(maxTotalSize, FileInput.DEFAULT_MAXIMUM_UPLOAD_SIZE);\n\n    // very large files must not be sent to server otherwise the whole system might crash (for all users).\n    if (totalSize > maxTotalSize) {\n      var boxOptions = {\n        header: this.text('ui.FileSizeLimitTitle'),\n        body: this.text('ui.FileSizeLimit', maxTotalSize / 1024 / 1024),\n        yesButtonText: this.optText('Ok', 'Ok')\n      };\n\n      this.showFatalMessage(boxOptions);\n      return false;\n    }\n\n    var uploadAjaxOptions = {\n      type: 'POST',\n      url: 'upload/' + this.uiSessionId + '/' + target.id,\n      cache: false,\n      // Don't touch the data (do not convert it to string)\n      processData: false,\n      // Do not automatically add content type (otherwise, multipart boundary would be missing)\n      contentType: false,\n      data: formData\n    };\n    // Special handling for FormData polyfill\n    if (formData.polyfill) {\n      formData.applyToAjaxOptions(uploadAjaxOptions);\n    }\n    this.responseQueue.prepareHttpRequest(uploadAjaxOptions);\n\n    var busyHandling = !this.areRequestsPending();\n    this._performUserAjaxRequest(uploadAjaxOptions, busyHandling);\n    return true;\n  }\n\n  goOffline() {\n    if (this.offline) {\n      return; // already offline\n    }\n    this.offline = true;\n\n    // Abort pending ajax requests.\n    this.abortAllAjaxCalls();\n\n    // In Firefox, the current async polling request is interrupted immediately when the page is unloaded. Therefore,\n    // an offline message would appear at once on the desktop. When reloading the page, all elements are cleared anyway,\n    // thus we wait some short period of time before displaying the message and starting the reconnector. If\n    // we find that goOffline() was called because of request unloading, we skip the unnecessary part. Note that\n    // FF doesn't guarantee that _onWindowUnload() is called before this setTimeout() function is called. Therefore,\n    // we have to look at another property \"unloading\" that is set earlier in _onWindowBeforeUnload().\n    setTimeout(function() {\n      if (this.unloading || this.unloaded) {\n        return;\n      }\n      this.rootAdapter.goOffline();\n      this.reconnector.start();\n    }.bind(this), 100);\n  }\n\n  goOnline() {\n    this.offline = false;\n    this.rootAdapter.goOnline();\n\n    var request = this._newRequest({\n      syncResponseQueue: true\n    });\n    this.responseQueue.prepareRequest(request);\n    this._sendRequest(request); // implies \"_resumeBackgroundJobPolling\", and also sends queued request\n  }\n\n  onReconnecting() {\n    if (this.desktop) {\n      this.desktop.onReconnecting();\n    }\n  }\n\n  onReconnectingSucceeded() {\n    if (this.desktop) {\n      this.desktop.onReconnectingSucceeded();\n    }\n    this.goOnline();\n  }\n\n  onReconnectingFailed() {\n    if (this.desktop) {\n      this.desktop.onReconnectingFailed();\n    }\n  }\n\n  listen() {\n    if (!this._deferred) {\n      this._deferred = $.Deferred();\n      this._deferredEventTypes = [];\n    }\n    return this._deferred;\n  }\n\n  /**\n   * Executes the given callback when pending requests are finished, or immediately if there are no requests pending.\n   * @param func callback function\n   * @param vararg arguments to pass to the callback function\n   */\n  onRequestsDone(func) {\n    var argumentsArray = [...arguments].slice();\n    argumentsArray.shift(); // remove argument func, remainder: all other arguments\n\n    if (this.areRequestsPending() || this.areEventsQueued()) {\n      this.listen().done(onEventsProcessed);\n    } else {\n      func.apply(this, argumentsArray);\n    }\n\n    function onEventsProcessed() {\n      func.apply(this, argumentsArray);\n    }\n  }\n\n  /**\n   * Executes the given callback when all events of the current response are processed. Executes it immediately if no events are being processed.\n   * @param func callback function\n   * @param vararg arguments to pass to the callback function\n   */\n  onEventsProcessed(func) {\n    var argumentsArray = [...arguments].slice();\n    argumentsArray.shift(); // remove argument func, remainder: all other arguments\n\n    if (this.processingEvents) {\n      this.one('eventsProcessed', execFunc);\n    } else {\n      execFunc();\n    }\n\n    function execFunc() {\n      func.apply(this, argumentsArray);\n    }\n  }\n\n  areEventsQueued() {\n    return this.asyncEvents.length > 0;\n  }\n\n  areBusyIndicatedEventsQueued() {\n    return this.asyncEvents.some(function(event) {\n      return scout.nvl(event.showBusyIndicator, true);\n    });\n  }\n\n  areResponsesQueued() {\n    return this.responseQueue.size() > 0;\n  }\n\n  areRequestsPending() {\n    return this.requestsPendingCounter > 0;\n  }\n\n  setRequestPending(pending) {\n    if (pending) {\n      this.requestsPendingCounter++;\n    } else {\n      this.requestsPendingCounter--;\n    }\n\n    // In \"inspector\" mode, add/remove a marker attribute to the $entryPoint that\n    // can be used to detect pending server calls by UI testing tools, e.g. Selenium\n    if (this.inspector) {\n      this.$entryPoint.toggleAttr('data-request-pending', pending, 'true');\n    }\n  }\n\n  setBusy(busy) {\n    if (busy) {\n      if (!this._busy) {\n        this._renderBusy();\n      }\n      this._busy = true;\n    } else {\n      if (this._busy) {\n        this._removeBusy();\n      }\n      this._busy = false;\n    }\n  }\n\n  _renderBusy() {\n    if (this._busyIndicatorTimeoutId !== null && this._busyIndicatorTimeoutId !== undefined) {\n      // Do not schedule it twice\n      return;\n    }\n    // Don't show the busy indicator immediately. Set a short timer instead (which may be\n    // cancelled again if the busy state returns to false in the meantime).\n    this._busyIndicatorTimeoutId = setTimeout(function() {\n      if (this._busyIndicator) {\n        // busy indicator is already showing\n        return;\n      }\n      if (!this.desktop || !this.desktop.rendered) {\n        return; // No busy indicator without desktop (e.g. during shutdown)\n      }\n      this._busyIndicator = scout.create('BusyIndicator', {\n        parent: this.desktop\n      });\n      this._busyIndicator.on('cancel', this._onCancelProcessing.bind(this));\n      this._busyIndicator.render(this.$entryPoint);\n    }.bind(this), 500);\n  }\n\n  _removeBusy() {\n    // Clear pending timer\n    clearTimeout(this._busyIndicatorTimeoutId);\n    this._busyIndicatorTimeoutId = null;\n\n    // Remove busy indicator (if it was already created)\n    if (this._busyIndicator) {\n      this._busyIndicator.destroy();\n      this._busyIndicator = null;\n    }\n  }\n\n  _onCancelProcessing(event) {\n    var busyIndicator = this._busyIndicator;\n    if (!busyIndicator) {\n      return; // removed in the mean time\n    }\n    busyIndicator.off('cancel');\n\n    // Set \"canceling\" state in busy indicator (after 100ms, would not look good otherwise)\n    setTimeout(function() {\n      busyIndicator.cancelled();\n    }, 100);\n\n    this._sendCancelRequest();\n  }\n\n  _sendCancelRequest() {\n    var request = this._newRequest({\n      cancel: true,\n      showBusyIndicator: false\n    });\n    this._sendRequest(request);\n  }\n\n  /**\n   * Sends a request containing the error message for logging purpose.\n   * The request is sent immediately (does not await pending requests)\n   */\n  sendLogRequest(message) {\n    var request = this._newRequest({\n      log: true,\n      message: message\n    });\n    if (this.currentEvent) {\n      request.event = {\n        target: this.currentEvent.target,\n        type: this.currentEvent.type\n      };\n    }\n\n    // Do not use _sendRequest to make sure a log request has no side effects and will be sent only once\n    $.ajax(this.defaultAjaxOptions(request));\n  }\n\n  _newRequest(requestData) {\n    var request = $.extend({\n      uiSessionId: this.uiSessionId\n    }, requestData);\n\n    // Certain requests do not require a sequence number\n    if (!request.log && !request.syncResponseQueue) {\n      request['#'] = this.requestSequenceNo++;\n    }\n    return request;\n  }\n\n  _setApplicationLoading(applicationLoading) {\n    if (applicationLoading) {\n      this._applicationLoadingTimeoutId = setTimeout(function() {\n        if (!this.desktop || !this.desktop.rendered) {\n          this._renderApplicationLoading();\n        }\n      }.bind(this), 200);\n    } else {\n      clearTimeout(this._applicationLoadingTimeoutId);\n      this._applicationLoadingTimeoutId = null;\n      this._removeApplicationLoading();\n    }\n  }\n\n  _renderApplicationLoading() {\n    var $loadingRoot = $('body').appendDiv('application-loading-root')\n      .addClass('application-loading-root')\n      .fadeIn();\n    $loadingRoot.appendDiv('application-loading01').hide()\n      .fadeIn();\n    $loadingRoot.appendDiv('application-loading02').hide()\n      .fadeIn();\n  }\n\n  _removeApplicationLoading() {\n    var $loadingRoot = $('body').children('.application-loading-root');\n    $loadingRoot.addClass('application-loading-root-fadeout');\n    if (Device.get().supportsCssAnimation()) {\n      $loadingRoot.oneAnimationEnd(function() {\n        $loadingRoot.remove();\n      });\n    } else {\n      // fallback for old browsers that do not support the animation-end event\n      $loadingRoot.remove();\n    }\n  }\n\n  _processEvents(events) {\n    var i = 0;\n    while (i < events.length) {\n      var event = events[i];\n      this.currentEvent = event;\n\n      var adapter = this.getModelAdapter(event.target);\n      if (!adapter) {\n        // Sometimes events seem to happen \"too early\", e.g. when a \"requestFocus\" event for a field is\n        // encountered before the \"showForm\" event has been processed. If the target adapter cannot be\n        // resolved, we try the other events first, expecting them to trigger the creation of the event\n        // adapter. As soon as a event could be processed successfully, we try our postponed event again.\n        $.log.isDebugEnabled() && $.log.debug('Postponing \\'' + event.type + '\\' for adapter with ID ' + event.target);\n        i++;\n        continue;\n      }\n      // Remove the successful event and reset the pointer to the start of the remaining events (to\n      // retry previously postponed events).\n      events.splice(i, 1);\n      i = 0;\n\n      $.log.isDebugEnabled() && $.log.debug('Processing event \\'' + event.type + '\\' for adapter with ID ' + event.target);\n      adapter.onModelEvent(event);\n      adapter.resetEventFilters();\n    }\n    this.currentEvent = null;\n\n    // If there are still events whose target could not be resolved, throw an error\n    if (events.length) {\n      throw new Error('Could not resolve event targets: [' + events.map(function(event) {\n        var msg = 'target: ' + event.target + ', type: ' + event.type;\n        if (event.properties) {\n          msg += ', properties: ' + Object.keys(event.properties);\n        }\n        return '\"' + msg + '\"';\n      }, this).join(', ') + ']');\n    }\n    this.trigger('eventsProcessed');\n  }\n\n  start() {\n    $.log.isInfoEnabled() && $.log.info('Session starting...');\n\n    // After a short time, display a loading animation (will be removed again in _renderDesktop)\n    this._setApplicationLoading(true);\n\n    // Send startup request\n    return this._sendStartupRequest();\n  }\n\n  onModelEvent(event) {\n    if (event.type === 'localeChanged') {\n      this._onLocaleChanged(event);\n    } else if (event.type === 'logout') {\n      this._onLogout(event);\n    } else if (event.type === 'disposeAdapter') {\n      this._onDisposeAdapter(event);\n    } else if (event.type === 'reloadPage') {\n      this._onReloadPage(event);\n    } else {\n      $.log.warn('Model action \"' + event.type + '\" is not supported by UI session');\n    }\n  }\n\n  resetEventFilters() {\n    // NOP\n  }\n\n  _onLocaleChanged(event) {\n    var locale = new Locale(event.locale);\n    var textMap = new TextMap(event.textMap);\n    this.switchLocale(locale, textMap);\n  }\n\n  /**\n   * @param {Locale} the new locale\n   * @param {TextMap} [textMap] the new textMap. If not defined, the corresponding textMap for the new locale is used.\n   */\n  switchLocale(locale, textMap) {\n    scout.assertParameter('locale', locale, Locale);\n    this.locale = locale;\n    this.textMap = texts.get(locale.languageTag);\n    if (textMap) {\n      objects.copyOwnProperties(textMap, this.textMap);\n    }\n    // TODO [7.0] bsh: inform components to reformat display text? also check Collator in comparators.TEXT\n\n    this.trigger('localeSwitch', {\n      locale: this.locale\n    });\n  }\n\n  _renderDesktop() {\n    this.desktop.render(this.$entryPoint);\n    this.desktop.invalidateLayoutTree(false);\n    this._setApplicationLoading(false);\n  }\n\n  _onLogout(event) {\n    this.logout(event.redirectUrl);\n  }\n\n  logout(logoutUrl) {\n    this.loggedOut = true;\n    // TODO [7.0] bsh: Check if there is a better solution (e.g. send a flag from server \"action\" = [ \"redirect\" | \"closeWindow\" ])\n    if (this.forceNewClientSession) {\n      this.desktop.$container.window(true).close();\n    } else {\n      // remember current url to not lose query parameters (such as debug; however, ignore deeplinks)\n      var url = new URL();\n      url.removeParameter('dl'); // deeplink\n      url.removeParameter('i'); // deeplink info\n      webstorage.setItem(sessionStorage, 'scout:loginUrl', url.toString());\n      // Clear everything and reload the page. We wrap that in setTimeout() to allow other events to be executed normally before.\n      setTimeout(function() {\n        scout.reloadPage({\n          redirectUrl: logoutUrl\n        });\n      });\n    }\n  }\n\n  _onDisposeAdapter(event) {\n    // Model adapter was disposed on server -> dispose it on the UI, too\n    var adapter = this.getModelAdapter(event.adapter);\n    if (adapter) { // adapter may be null if it was never sent to the UI, e.g. a form that was opened and closed in the same request\n      adapter.destroy();\n    }\n  }\n\n  _onReloadPage(event) {\n    // Don't clear the body, because other events might be processed before the reload and\n    // it could cause errors when all DOM elements are already removed.\n    scout.reloadPage({\n      clearBody: false\n    });\n  }\n\n  _onWindowBeforeUnload() {\n    $.log.isInfoEnabled() && $.log.info('Session before unloading...');\n    // TODO [7.0] bsh: Cancel pending requests\n\n    // Set a flag that indicates unloading before _onWindowUnload() is called.\n    // See goOffline() why this is necessary.\n    this.unloading = true;\n    setTimeout(function() {\n      // Because there is no callback when the unloading was cancelled, we always\n      // reset the flag after a short period of time.\n      this.unloading = false;\n    }.bind(this), 200);\n  }\n\n  _onWindowUnload() {\n    $.log.isInfoEnabled() && $.log.info('Session unloading...');\n    this.unloaded = true;\n\n    // Close popup windows\n    if (this.desktop && this.desktop.formController) {\n      this.desktop.formController.closePopupWindows();\n    }\n\n    // Destroy UI session on server (only when the server did not not initiate the logout,\n    // otherwise the UI session would already be disposed)\n    if (!this.loggedOut) {\n      this._sendUnloadRequest();\n    }\n    if (this.loggedOut && this.persistent) {\n      webstorage.removeItem(localStorage, 'scout:clientSessionId');\n    }\n  }\n\n  /**\n   * Returns the adapter-data sent with the JSON response from the adapter-data cache. Note that this operation\n   * removes the requested element from the cache, thus you cannot request the same ID twice. Typically once\n   * you've requested an element from this cache an adapter for that ID is created and stored in the adapter\n   * registry which too exists on this session object.\n   */\n  _getAdapterData(id) {\n    var adapterData = this._adapterDataCache[id];\n    var deleteAdapterData = !this.adapterExportEnabled;\n    if (deleteAdapterData) {\n      delete this._adapterDataCache[id];\n    }\n    return adapterData;\n  }\n\n  getAdapterData(id) {\n    return this._adapterDataCache[id];\n  }\n\n  text(textKey) {\n    return this.textMap.get(...arguments);\n  }\n\n  optText(textKey, defaultValue) {\n    return this.textMap.optGet(...arguments);\n  }\n\n  textExists(textKey) {\n    return this.textMap.exists(textKey);\n  }\n\n  // --- Event handling methods ---\n  _createEventSupport() {\n    return new EventSupport();\n  }\n\n  trigger(type, event) {\n    event = event || {};\n    event.source = this;\n    this.events.trigger(type, event);\n  }\n\n  one(type, func) {\n    this.events.one(type, func);\n  }\n\n  on(type, func) {\n    return this.events.on(type, func);\n  }\n\n  off(type, func) {\n    this.events.off(type, func);\n  }\n\n  addListener(listener) {\n    this.events.addListener(listener);\n  }\n\n  removeListener(listener) {\n    this.events.removeListener(listener);\n  }\n\n  when(type) {\n    return this.events.when(type);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}