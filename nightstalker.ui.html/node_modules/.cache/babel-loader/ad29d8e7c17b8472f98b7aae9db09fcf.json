{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, scout, strings } from '../index';\nimport $ from 'jquery';\nvar CONST_REGEX = /\\${const:([^}]*)}/;\n/**\n * Uses Object.create(null) to create an object without a prototype. This is different to use the literal {} which links the object to Object.prototype.\n * <p>\n * Not using the literal has the advantage that the object does not contain any inherited properties like `toString` so it is not necessary to use `o.hasOwnProperty(p)`\n * instead of `p in o` to check for the existence.\n *\n * @param [object] properties optional initial properties to be set on the new created object\n */\n\nexport function createMap(properties) {\n  var map = Object.create(null);\n\n  if (properties) {\n    $.extend(map, properties);\n  }\n\n  return map;\n}\n/**\n * Copies all the properties (including the ones from the prototype.) from dest to source\n * @param {[]} [filter] an array of property names.\n * @returns {object} the destination object (the destination parameter will be modified as well)\n */\n\nexport function copyProperties(source, dest, filter) {\n  var propertyName;\n  filter = arrays.ensure(filter);\n\n  for (propertyName in source) {\n    if (filter.length === 0 || filter.indexOf(propertyName) !== -1) {\n      dest[propertyName] = source[propertyName];\n    }\n  }\n\n  return dest;\n}\n/**\n * Copies the own properties (excluding the ones from the prototype) from dest to source.\n * If a filter is specified, only the properties matching the ones in the filter are copied.\n * @param {[]} [filter] an array of property names.\n * @returns {object} the destination object (the destination parameter will be modified as well)\n */\n\nexport function copyOwnProperties(source, dest, filter) {\n  var propertyName;\n  filter = arrays.ensure(filter);\n\n  for (propertyName in source) {\n    if (Object.prototype.hasOwnProperty.call(source, propertyName) && (filter.length === 0 || filter.indexOf(propertyName) !== -1)) {\n      dest[propertyName] = source[propertyName];\n    }\n  }\n\n  return dest;\n}\n/**\n * Counts and returns the properties of a given object or map (see #createMap).\n */\n\nexport function countOwnProperties(obj) {\n  // map objects don't have a prototype\n  if (!Object.getPrototypeOf(obj)) {\n    return Object.keys(obj).length;\n  } // regular objects may inherit a property through their prototype\n  // we're only interested in own properties\n\n\n  var count = 0;\n\n  for (var prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      count++;\n    }\n  }\n\n  return count;\n}\n/**\n * Copies the specified properties (including the ones from the prototype) from source to dest.\n * Properties that already exist on dest are NOT overwritten.\n */\n\nexport function extractProperties(source, dest, properties) {\n  properties.forEach(function (propertyName) {\n    if (dest[propertyName] === undefined) {\n      dest[propertyName] = source[propertyName];\n    }\n  });\n  return dest;\n}\n/**\n * returns\n *  - true if the obj has at least one of the given properties.\n *  - false if the obj has none of the given properties.\n *\n * @param obj\n * @param properties a single property or an array of properties\n * @returns {Boolean}\n */\n\nexport function someOwnProperties(obj, properties) {\n  var propArr = arrays.ensure(properties);\n  return propArr.some(function (prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n  });\n}\n/**\n * returns\n *  - true if the obj or its prototypes have at least one of the given properties.\n *  - false if the obj or its prototypes have none of the given properties.\n *\n * @param obj\n * @param properties a single property or an array of properties\n * @returns {Boolean}\n */\n\nexport function someProperties(obj, properties) {\n  var propArr = arrays.ensure(properties);\n  return propArr.some(function (prop) {\n    return prop in obj;\n  });\n}\nexport function valueCopy(obj) {\n  // Nothing to be done for immutable things\n  if (obj === undefined || obj === null || _typeof(obj) !== 'object') {\n    return obj;\n  }\n\n  var copy; // Arrays\n\n  if (Array.isArray(obj)) {\n    copy = [];\n\n    for (var i = 0; i < obj.length; i++) {\n      copy[i] = valueCopy(obj[i]);\n    }\n\n    return copy;\n  } // All other objects\n\n\n  copy = {};\n\n  for (var prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      copy[prop] = valueCopy(obj[prop]);\n    }\n  }\n\n  return copy;\n}\n/**\n * Returns the first object with the given property and propertyValue or null if there is no such object within parentObj.\n * @param parentObj\n * @param property property to search for\n * @param propertyValue value of the property\n * @returns {Object}\n */\n\nexport function findChildObjectByKey(parentObj, property, propertyValue) {\n  if (parentObj === undefined || parentObj === null || _typeof(parentObj) !== 'object') {\n    return null;\n  }\n\n  if (parentObj[property] === propertyValue) {\n    return parentObj;\n  }\n\n  var child;\n\n  if (Array.isArray(parentObj)) {\n    for (var i = 0; i < parentObj.length; i++) {\n      child = findChildObjectByKey(parentObj[i], property, propertyValue);\n\n      if (child) {\n        return child;\n      }\n    }\n  }\n\n  for (var prop in parentObj) {\n    if (Object.prototype.hasOwnProperty.call(parentObj, prop)) {\n      child = findChildObjectByKey(parentObj[prop], property, propertyValue);\n\n      if (child) {\n        return child;\n      }\n    }\n  }\n\n  return null;\n}\n/**\n * Returns true if the given object is an object, _not_ an array and not null or undefined.\n */\n\nexport function isPlainObject(obj) {\n  return _typeof(obj) === 'object' && !isNullOrUndefined(obj) && !Array.isArray(obj);\n}\n/**\n * Null-safe access the property of an objects. Examples:\n * <ul>\n * <li><code>optProperty(obj, 'value');</code> try to access and return obj.value</li>\n * <li><code>optProperty(obj, 'foo', 'bar');</code> try to access and return obj.foo.bar</li>\n * </ul>\n *\n * @returns {*} the value of the requested property or undefined if the property does not exist on the object\n */\n\nexport function optProperty(obj) {\n  if (!obj) {\n    return null;\n  }\n\n  var numArgs = arguments.length;\n\n  if (numArgs < 2) {\n    return obj;\n  }\n\n  if (numArgs === 2) {\n    return obj[arguments[1]];\n  }\n\n  for (var i = 1; i < numArgs - 1; i++) {\n    obj = obj[arguments[i]];\n\n    if (!obj) {\n      return null;\n    }\n  }\n\n  return obj[arguments[numArgs - 1]];\n}\n/**\n * Returns true if:\n * - obj is not undefined or null\n * - obj not isNaN\n * - obj isFinite\n *\n * This method is handy in cases where you want to check if a number is set. Since you cannot write:\n *   if (myNumber) { ...\n *\n * Because when myNumber === 0 would also resolve to false. In that case use instead:\n *   if (isNumber(myNumber)) { ...\n *\n * @param obj\n * @returns {Boolean}\n */\n\nexport function isNumber(obj) {\n  return obj !== null && !isNaN(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n}\nexport function isString(obj) {\n  return typeof obj === 'string';\n}\nexport function isNullOrUndefined(obj) {\n  return obj === null || obj === undefined;\n}\nexport function isFunction(obj) {\n  return $.isFunction(obj);\n}\nexport function isArray(obj) {\n  return Array.isArray(obj);\n}\n/**\n * Returns values from the given (map) object. By default only values of 'own' properties are returned.\n *\n * @returns {Array} an Array with values\n * @param {Object} obj\n * @param {boolean} [all] can be set to true to return all properties instead of own properties\n */\n\nexport function values(obj, all) {\n  var values = [];\n\n  if (obj) {\n    if (typeof obj.hasOwnProperty !== 'function') {\n      all = true;\n    }\n\n    for (var key in obj) {\n      if (all || obj.hasOwnProperty(key)) {\n        values.push(obj[key]);\n      }\n    }\n  }\n\n  return values;\n}\n/**\n * @returns {string} the key / name of a property\n */\n\nexport function keyByValue(obj, value) {\n  return Object.keys(obj)[values(obj).indexOf(value)];\n}\n/**\n * Java-like equals method. Compares the given objects by checking with ===, if that fails, the function\n * checks if both objects have an equals function and use the equals function to compare the two objects\n * by value.\n * @returns {boolean} true if both objects are equals by reference or by value\n */\n\nexport function equals(objA, objB) {\n  if (objA === objB) {\n    return true;\n  } // both objects have an equals() method\n\n\n  if (objA && objB && objA.equals && objB.equals) {\n    return objA.equals(objB);\n  }\n\n  return false;\n}\n/**\n * Compare two objects and all its child elements recursively.\n * @returns {boolean} true if both objects and all child elements are equals by value or implemented equals method\n */\n\nexport function equalsRecursive(objA, objB) {\n  var i;\n\n  if (isPlainObject(objA) && isPlainObject(objB)) {\n    if (isFunction(objA.equals) && isFunction(objB.equals)) {\n      return objA.equals(objB);\n    }\n\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n\n    if (!arrays.equalsIgnoreOrder(keysA, keysB)) {\n      return false;\n    }\n\n    for (i = 0; i < keysA.length; i++) {\n      if (!equalsRecursive(objA[keysA[i]], objB[keysA[i]])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else if (isArray(objA) && isArray(objB)) {\n    if (objA.length !== objB.length) {\n      return false;\n    }\n\n    for (i = 0; i < objA.length; i++) {\n      if (!equalsRecursive(objA[i], objB[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return objA === objB;\n}\n/**\n * Compares a list of properties of two objects by using the equals method for each property.\n */\n\nexport function propertiesEquals(objA, objB, properties) {\n  var i, property;\n\n  for (i = 0; i < properties.length; i++) {\n    property = properties[i];\n\n    if (!equals(objA[property], objB[property])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @returns {function} the function identified by funcName from the given object. The function will return an error\n *     if that function does not exist. Use this function if you modify an existing framework function\n *     to find problems after refactorings / renamings as soon as possible.\n */\n\nexport function mandatoryFunction(obj, funcName) {\n  var func = obj[funcName];\n\n  if (!func || typeof func !== 'function') {\n    throw new Error('Function \\'' + funcName + '\\' does not exist on object. Check if it has been renamed or moved.', obj);\n  }\n\n  return func;\n}\n/**\n * Use this method to replace a function on a prototype of an object. It checks if that function exists\n * by calling <code>mandatoryFunction</code>.\n */\n\nexport function replacePrototypeFunction(obj, funcName, func, rememberOrig) {\n  var proto = obj.prototype;\n  mandatoryFunction(proto, funcName);\n\n  if (rememberOrig) {\n    proto[funcName + 'Orig'] = proto[funcName];\n  }\n\n  proto[funcName] = func;\n}\n/**\n * @returns a real Array for the pseudo-array 'arguments'.\n */\n\nexport function argumentsToArray(args) {\n  return args ? Array.prototype.slice.call(args) : [];\n}\n/**\n * Used to loop over 'arguments' pseudo-array with forEach.\n */\n\nexport function forEachArgument(args, func) {\n  return argumentsToArray(args).forEach(func);\n}\n/**\n * Development utility to check if overrides in JavaScript \"classes\" are correct.\n *\n * How to use:\n *   1. Start application in development mode (non-minimized).\n *   2. Open browser's development console\n *   3. Type: checkFunctionOverrides().join('\\n')\n */\n\nexport function checkFunctionOverrides() {\n  var whitelist = ['ModelAdapter.init', 'ModelAdapter._init', 'Calendar.init'];\n  var result1 = ['Legend:', '[!] Function includes super call, and parent function uses arguments', ' ~  Function includes super call, but parent function does not use arguments', '    Function does not include super call', '', 'Wrong number of arguments:'];\n  var result2 = ['Different argument names:'];\n\n  for (var prop in scout) {\n    if (!scout.hasOwnProperty(prop)) {\n      continue;\n    }\n\n    var o = scout[prop]; // Only check functions that have a \"parent\"\n\n    if (typeof o === 'function' && o.parent) {\n      for (var name in o.prototype) {\n        if (!o.prototype.hasOwnProperty(name)) {\n          continue;\n        }\n\n        var fn = o.prototype[name]; // Ignore constructor, inherited properties and non-functions\n\n        if (name === 'constructor' || !o.prototype.hasOwnProperty(name) || typeof fn !== 'function') {\n          continue;\n        }\n\n        var args = getFunctionArguments(fn); // Check all parents\n\n        var parent = o.parent;\n\n        while (parent) {\n          var parentFn = parent.prototype[name];\n\n          if (parent.prototype.hasOwnProperty(name) && typeof parentFn === 'function') {\n            var parentArgs = getFunctionArguments(parentFn); // Check arguments (at least all of the parent args must be present)\n\n            var mismatch = false;\n\n            for (var i = 0; i < parentArgs.length; i++) {\n              if (args.length < i || args[i] !== parentArgs[i]) {\n                mismatch = true;\n                break;\n              }\n            }\n\n            var fname = prop + '.' + name;\n\n            if (mismatch && whitelist.indexOf(fname) === -1) {\n              // && args.length !== parentArgs.length) {\n              // Collect found mismatch\n              var result = fname + '(' + args.join(', ') + ') does not correctly override ' + getPrototypeOwner(parentFn) + '.' + name + '(' + parentArgs.join(', ') + ')';\n              var includesSuperCall = fn.toString().match(new RegExp('scout.' + strings.quote(prop) + '.parent.prototype.' + strings.quote(name) + '.call\\\\(')) !== null;\n              var parentFunctionUsesArguments = false;\n\n              if (includesSuperCall) {\n                for (var j = 0; j < parentArgs.length; j++) {\n                  var m = parentFn.toString().match(new RegExp('[^.\\\\w]' + strings.quote(parentArgs[j]) + '[^\\\\w]', 'g'));\n\n                  if (m !== null && m.length > 1) {\n                    parentFunctionUsesArguments = true;\n                    break;\n                  }\n                }\n              }\n\n              result = (includesSuperCall ? parentFunctionUsesArguments ? '[!]' : ' ~ ' : '   ') + ' ' + result;\n\n              if (args.length !== parentArgs.length) {\n                result1.push(result);\n              } else {\n                result2.push(result);\n              }\n            }\n          }\n\n          parent = parent.parent;\n        }\n      }\n    }\n  }\n\n  result1.push('');\n  return result1.concat(result2); // ----- Helper functions -----\n\n  function getFunctionArguments(fn) {\n    var FN_COMMENTS = /\\/\\*.*?\\*\\/|\\/\\/.*$/mg; // removes comments in function declaration\n\n    var FN_ARGS = /^function[^(]*\\((.*?)\\)/m; // fetches all arguments in m[1]\n\n    if (typeof fn !== 'function') {\n      throw new Error('Argument is not a function: ' + fn);\n    }\n\n    var m = fn.toString().replace(FN_COMMENTS, '').match(FN_ARGS);\n    var args = [];\n\n    if (m !== null) {\n      m[1].split(',').forEach(function (arg, i) {\n        arg = arg.trim();\n\n        if (arg.length > 0) {\n          args.push(arg);\n        }\n      });\n    }\n\n    return args;\n  }\n\n  function getPrototypeOwner(fx) {\n    for (var prop in scout) {\n      if (!scout.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      var o = scout[prop];\n\n      if (typeof o === 'function') {\n        for (var name in o.prototype) {\n          if (!o.prototype.hasOwnProperty(name)) {\n            continue;\n          }\n\n          var fn = o.prototype[name]; // Ignore constructor, inherited properties and non-functions\n\n          if (name === 'constructor' || !o.prototype.hasOwnProperty(name) || typeof fn !== 'function') {\n            continue;\n          }\n\n          if (fn === fx) {\n            return prop;\n          }\n        }\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * @param value text which contains a constant reference like '${const:FormField.LabelPosition.RIGHT}'.\n * @return the resolved constant value or the unchanged input value if the constant could not be resolved.\n */\n\nexport function resolveConst(value, constType) {\n  if (!isString(value)) {\n    return value;\n  }\n\n  var result = CONST_REGEX.exec(value);\n\n  if (result && result.length === 2) {\n    // go down the object hierarchy starting on the given constType-object or on 'window'\n    var objectHierarchy = result[1].split('.');\n    var obj = constType || window;\n\n    for (var i = 0; i < objectHierarchy.length; i++) {\n      obj = obj[objectHierarchy[i]];\n\n      if (obj === undefined) {\n        window.console.log('Failed to resolve constant \\'' + result[1] + '\\', object is undefined');\n        return value;\n      }\n    }\n\n    return obj;\n  }\n\n  return value;\n}\n/**\n * @param object config An object with 2 properties: property, constType\n */\n\nexport function resolveConstProperty(object, config) {\n  scout.assertProperty(config, 'property');\n  scout.assertProperty(config, 'constType');\n  var value = object[config.property];\n  var resolvedValue = resolveConst(value, config.constType);\n\n  if (value !== resolvedValue) {\n    object[config.property] = resolvedValue;\n  }\n}\nexport default {\n  CONST_REGEX: CONST_REGEX,\n  argumentsToArray: argumentsToArray,\n  checkFunctionOverrides: checkFunctionOverrides,\n  copyOwnProperties: copyOwnProperties,\n  copyProperties: copyProperties,\n  countOwnProperties: countOwnProperties,\n  createMap: createMap,\n  equals: equals,\n  equalsRecursive: equalsRecursive,\n  extractProperties: extractProperties,\n  findChildObjectByKey: findChildObjectByKey,\n  forEachArgument: forEachArgument,\n  isArray: isArray,\n  isFunction: isFunction,\n  isNullOrUndefined: isNullOrUndefined,\n  isNumber: isNumber,\n  isPlainObject: isPlainObject,\n  isString: isString,\n  keyByValue: keyByValue,\n  mandatoryFunction: mandatoryFunction,\n  optProperty: optProperty,\n  propertiesEquals: propertiesEquals,\n  replacePrototypeFunction: replacePrototypeFunction,\n  resolveConst: resolveConst,\n  resolveConstProperty: resolveConstProperty,\n  someOwnProperties: someOwnProperties,\n  someProperties: someProperties,\n  valueCopy: valueCopy,\n  values: values\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/util/objects.js"],"names":["arrays","scout","strings","$","CONST_REGEX","createMap","properties","map","Object","create","extend","copyProperties","source","dest","filter","propertyName","ensure","length","indexOf","copyOwnProperties","prototype","hasOwnProperty","call","countOwnProperties","obj","getPrototypeOf","keys","count","prop","extractProperties","forEach","undefined","someOwnProperties","propArr","some","someProperties","valueCopy","copy","Array","isArray","i","findChildObjectByKey","parentObj","property","propertyValue","child","isPlainObject","isNullOrUndefined","optProperty","numArgs","arguments","isNumber","isNaN","isFinite","parseFloat","isString","isFunction","values","all","key","push","keyByValue","value","equals","objA","objB","equalsRecursive","keysA","keysB","equalsIgnoreOrder","propertiesEquals","mandatoryFunction","funcName","func","Error","replacePrototypeFunction","rememberOrig","proto","argumentsToArray","args","slice","forEachArgument","checkFunctionOverrides","whitelist","result1","result2","o","parent","name","fn","getFunctionArguments","parentFn","parentArgs","mismatch","fname","result","join","getPrototypeOwner","includesSuperCall","toString","match","RegExp","quote","parentFunctionUsesArguments","j","m","concat","FN_COMMENTS","FN_ARGS","replace","split","arg","trim","fx","resolveConst","constType","exec","objectHierarchy","window","console","log","resolveConstProperty","object","config","assertProperty","resolvedValue"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, scout, strings} from '../index';\nimport $ from 'jquery';\n\nconst CONST_REGEX = /\\${const:([^}]*)}/;\n\n/**\n * Uses Object.create(null) to create an object without a prototype. This is different to use the literal {} which links the object to Object.prototype.\n * <p>\n * Not using the literal has the advantage that the object does not contain any inherited properties like `toString` so it is not necessary to use `o.hasOwnProperty(p)`\n * instead of `p in o` to check for the existence.\n *\n * @param [object] properties optional initial properties to be set on the new created object\n */\nexport function createMap(properties) {\n  var map = Object.create(null);\n  if (properties) {\n    $.extend(map, properties);\n  }\n  return map;\n}\n\n/**\n * Copies all the properties (including the ones from the prototype.) from dest to source\n * @param {[]} [filter] an array of property names.\n * @returns {object} the destination object (the destination parameter will be modified as well)\n */\nexport function copyProperties(source, dest, filter) {\n  var propertyName;\n  filter = arrays.ensure(filter);\n  for (propertyName in source) {\n    if (filter.length === 0 || filter.indexOf(propertyName) !== -1) {\n      dest[propertyName] = source[propertyName];\n    }\n  }\n  return dest;\n}\n\n/**\n * Copies the own properties (excluding the ones from the prototype) from dest to source.\n * If a filter is specified, only the properties matching the ones in the filter are copied.\n * @param {[]} [filter] an array of property names.\n * @returns {object} the destination object (the destination parameter will be modified as well)\n */\nexport function copyOwnProperties(source, dest, filter) {\n  var propertyName;\n  filter = arrays.ensure(filter);\n  for (propertyName in source) {\n    if (Object.prototype.hasOwnProperty.call(source, propertyName) && (filter.length === 0 || filter.indexOf(propertyName) !== -1)) {\n      dest[propertyName] = source[propertyName];\n    }\n  }\n  return dest;\n}\n\n/**\n * Counts and returns the properties of a given object or map (see #createMap).\n */\nexport function countOwnProperties(obj) {\n  // map objects don't have a prototype\n  if (!Object.getPrototypeOf(obj)) {\n    return Object.keys(obj).length;\n  }\n\n  // regular objects may inherit a property through their prototype\n  // we're only interested in own properties\n  var count = 0;\n  for (var prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/**\n * Copies the specified properties (including the ones from the prototype) from source to dest.\n * Properties that already exist on dest are NOT overwritten.\n */\nexport function extractProperties(source, dest, properties) {\n  properties.forEach(function(propertyName) {\n    if (dest[propertyName] === undefined) {\n      dest[propertyName] = source[propertyName];\n    }\n  });\n  return dest;\n}\n\n/**\n * returns\n *  - true if the obj has at least one of the given properties.\n *  - false if the obj has none of the given properties.\n *\n * @param obj\n * @param properties a single property or an array of properties\n * @returns {Boolean}\n */\nexport function someOwnProperties(obj, properties) {\n  var propArr = arrays.ensure(properties);\n  return propArr.some(function(prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n  });\n}\n\n/**\n * returns\n *  - true if the obj or its prototypes have at least one of the given properties.\n *  - false if the obj or its prototypes have none of the given properties.\n *\n * @param obj\n * @param properties a single property or an array of properties\n * @returns {Boolean}\n */\nexport function someProperties(obj, properties) {\n  var propArr = arrays.ensure(properties);\n  return propArr.some(function(prop) {\n    return prop in obj;\n  });\n}\n\nexport function valueCopy(obj) {\n  // Nothing to be done for immutable things\n  if (obj === undefined || obj === null || typeof obj !== 'object') {\n    return obj;\n  }\n  var copy;\n  // Arrays\n  if (Array.isArray(obj)) {\n    copy = [];\n    for (var i = 0; i < obj.length; i++) {\n      copy[i] = valueCopy(obj[i]);\n    }\n    return copy;\n  }\n  // All other objects\n  copy = {};\n  for (var prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      copy[prop] = valueCopy(obj[prop]);\n    }\n  }\n  return copy;\n}\n\n/**\n * Returns the first object with the given property and propertyValue or null if there is no such object within parentObj.\n * @param parentObj\n * @param property property to search for\n * @param propertyValue value of the property\n * @returns {Object}\n */\nexport function findChildObjectByKey(parentObj, property, propertyValue) {\n  if (parentObj === undefined || parentObj === null || typeof parentObj !== 'object') {\n    return null;\n  }\n  if (parentObj[property] === propertyValue) {\n    return parentObj;\n  }\n  var child;\n  if (Array.isArray(parentObj)) {\n    for (var i = 0; i < parentObj.length; i++) {\n      child = findChildObjectByKey(parentObj[i], property, propertyValue);\n      if (child) {\n        return child;\n      }\n    }\n  }\n  for (var prop in parentObj) {\n    if (Object.prototype.hasOwnProperty.call(parentObj, prop)) {\n      child = findChildObjectByKey(parentObj[prop], property, propertyValue);\n      if (child) {\n        return child;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * Returns true if the given object is an object, _not_ an array and not null or undefined.\n */\nexport function isPlainObject(obj) {\n  return typeof obj === 'object' &&\n    !isNullOrUndefined(obj) &&\n    !Array.isArray(obj);\n}\n\n/**\n * Null-safe access the property of an objects. Examples:\n * <ul>\n * <li><code>optProperty(obj, 'value');</code> try to access and return obj.value</li>\n * <li><code>optProperty(obj, 'foo', 'bar');</code> try to access and return obj.foo.bar</li>\n * </ul>\n *\n * @returns {*} the value of the requested property or undefined if the property does not exist on the object\n */\nexport function optProperty(obj) {\n  if (!obj) {\n    return null;\n  }\n\n  var numArgs = arguments.length;\n  if (numArgs < 2) {\n    return obj;\n  }\n  if (numArgs === 2) {\n    return obj[arguments[1]];\n  }\n\n  for (var i = 1; i < numArgs - 1; i++) {\n    obj = obj[arguments[i]];\n    if (!obj) {\n      return null;\n    }\n  }\n  return obj[arguments[numArgs - 1]];\n}\n\n/**\n * Returns true if:\n * - obj is not undefined or null\n * - obj not isNaN\n * - obj isFinite\n *\n * This method is handy in cases where you want to check if a number is set. Since you cannot write:\n *   if (myNumber) { ...\n *\n * Because when myNumber === 0 would also resolve to false. In that case use instead:\n *   if (isNumber(myNumber)) { ...\n *\n * @param obj\n * @returns {Boolean}\n */\nexport function isNumber(obj) {\n  return obj !== null && !isNaN(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n}\n\nexport function isString(obj) {\n  return typeof obj === 'string';\n}\n\nexport function isNullOrUndefined(obj) {\n  return obj === null || obj === undefined;\n}\n\nexport function isFunction(obj) {\n  return $.isFunction(obj);\n}\n\nexport function isArray(obj) {\n  return Array.isArray(obj);\n}\n\n/**\n * Returns values from the given (map) object. By default only values of 'own' properties are returned.\n *\n * @returns {Array} an Array with values\n * @param {Object} obj\n * @param {boolean} [all] can be set to true to return all properties instead of own properties\n */\nexport function values(obj, all) {\n  var values = [];\n  if (obj) {\n    if (typeof obj.hasOwnProperty !== 'function') {\n      all = true;\n    }\n    for (var key in obj) {\n      if (all || obj.hasOwnProperty(key)) {\n        values.push(obj[key]);\n      }\n    }\n  }\n  return values;\n}\n\n/**\n * @returns {string} the key / name of a property\n */\nexport function keyByValue(obj, value) {\n  return Object.keys(obj)[values(obj).indexOf(value)];\n}\n\n/**\n * Java-like equals method. Compares the given objects by checking with ===, if that fails, the function\n * checks if both objects have an equals function and use the equals function to compare the two objects\n * by value.\n * @returns {boolean} true if both objects are equals by reference or by value\n */\nexport function equals(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n  // both objects have an equals() method\n  if (objA && objB && (objA.equals && objB.equals)) {\n    return objA.equals(objB);\n  }\n  return false;\n}\n\n/**\n * Compare two objects and all its child elements recursively.\n * @returns {boolean} true if both objects and all child elements are equals by value or implemented equals method\n */\nexport function equalsRecursive(objA, objB) {\n  var i;\n  if (isPlainObject(objA) && isPlainObject(objB)) {\n    if (isFunction(objA.equals) && isFunction(objB.equals)) {\n      return objA.equals(objB);\n    }\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n    if (!arrays.equalsIgnoreOrder(keysA, keysB)) {\n      return false;\n    }\n    for (i = 0; i < keysA.length; i++) {\n      if (!equalsRecursive(objA[keysA[i]], objB[keysA[i]])) {\n        return false;\n      }\n    }\n    return true;\n  } else if (isArray(objA) && isArray(objB)) {\n    if (objA.length !== objB.length) {\n      return false;\n    }\n    for (i = 0; i < objA.length; i++) {\n      if (!equalsRecursive(objA[i], objB[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  return objA === objB;\n}\n\n/**\n * Compares a list of properties of two objects by using the equals method for each property.\n */\nexport function propertiesEquals(objA, objB, properties) {\n  var i, property;\n  for (i = 0; i < properties.length; i++) {\n    property = properties[i];\n    if (!equals(objA[property], objB[property])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @returns {function} the function identified by funcName from the given object. The function will return an error\n *     if that function does not exist. Use this function if you modify an existing framework function\n *     to find problems after refactorings / renamings as soon as possible.\n */\nexport function mandatoryFunction(obj, funcName) {\n  var func = obj[funcName];\n  if (!func || typeof func !== 'function') {\n    throw new Error('Function \\'' + funcName + '\\' does not exist on object. Check if it has been renamed or moved.', obj);\n  }\n  return func;\n}\n\n/**\n * Use this method to replace a function on a prototype of an object. It checks if that function exists\n * by calling <code>mandatoryFunction</code>.\n */\nexport function replacePrototypeFunction(obj, funcName, func, rememberOrig) {\n  var proto = obj.prototype;\n  mandatoryFunction(proto, funcName);\n  if (rememberOrig) {\n    proto[funcName + 'Orig'] = proto[funcName];\n  }\n  proto[funcName] = func;\n}\n\n/**\n * @returns a real Array for the pseudo-array 'arguments'.\n */\nexport function argumentsToArray(args) {\n  return args ? Array.prototype.slice.call(args) : [];\n}\n\n/**\n * Used to loop over 'arguments' pseudo-array with forEach.\n */\nexport function forEachArgument(args, func) {\n  return argumentsToArray(args).forEach(func);\n}\n\n/**\n * Development utility to check if overrides in JavaScript \"classes\" are correct.\n *\n * How to use:\n *   1. Start application in development mode (non-minimized).\n *   2. Open browser's development console\n *   3. Type: checkFunctionOverrides().join('\\n')\n */\nexport function checkFunctionOverrides() {\n  var whitelist = [\n    'ModelAdapter.init',\n    'ModelAdapter._init',\n    'Calendar.init'\n  ];\n  var result1 = [\n    'Legend:',\n    '[!] Function includes super call, and parent function uses arguments',\n    ' ~  Function includes super call, but parent function does not use arguments',\n    '    Function does not include super call',\n    '',\n    'Wrong number of arguments:'\n  ];\n  var result2 = ['Different argument names:'];\n\n  for (var prop in scout) {\n    if (!scout.hasOwnProperty(prop)) {\n      continue;\n    }\n    var o = scout[prop];\n    // Only check functions that have a \"parent\"\n    if (typeof o === 'function' && o.parent) {\n      for (var name in o.prototype) {\n        if (!o.prototype.hasOwnProperty(name)) {\n          continue;\n        }\n        var fn = o.prototype[name];\n        // Ignore constructor, inherited properties and non-functions\n        if (name === 'constructor' || !o.prototype.hasOwnProperty(name) || typeof fn !== 'function') {\n          continue;\n        }\n        var args = getFunctionArguments(fn);\n        // Check all parents\n        var parent = o.parent;\n        while (parent) {\n          var parentFn = parent.prototype[name];\n          if (parent.prototype.hasOwnProperty(name) && typeof parentFn === 'function') {\n            var parentArgs = getFunctionArguments(parentFn);\n            // Check arguments (at least all of the parent args must be present)\n            var mismatch = false;\n            for (var i = 0; i < parentArgs.length; i++) {\n              if (args.length < i || args[i] !== parentArgs[i]) {\n                mismatch = true;\n                break;\n              }\n            }\n            var fname = prop + '.' + name;\n            if (mismatch && whitelist.indexOf(fname) === -1) { // && args.length !== parentArgs.length) {\n              // Collect found mismatch\n              var result = fname + '(' + args.join(', ') + ') does not correctly override ' + getPrototypeOwner(parentFn) + '.' + name + '(' + parentArgs.join(', ') + ')';\n              var includesSuperCall = fn.toString().match(new RegExp('scout.' + strings.quote(prop) + '.parent.prototype.' + strings.quote(name) + '.call\\\\(')) !== null;\n              var parentFunctionUsesArguments = false;\n              if (includesSuperCall) {\n                for (var j = 0; j < parentArgs.length; j++) {\n                  var m = parentFn.toString().match(new RegExp('[^.\\\\w]' + strings.quote(parentArgs[j]) + '[^\\\\w]', 'g'));\n                  if (m !== null && m.length > 1) {\n                    parentFunctionUsesArguments = true;\n                    break;\n                  }\n                }\n              }\n              result = (includesSuperCall ? parentFunctionUsesArguments ? '[!]' : ' ~ ' : '   ') + ' ' + result;\n              if (args.length !== parentArgs.length) {\n                result1.push(result);\n              } else {\n                result2.push(result);\n              }\n            }\n          }\n          parent = parent.parent;\n        }\n      }\n    }\n  }\n\n  result1.push('');\n  return result1.concat(result2);\n\n  // ----- Helper functions -----\n\n  function getFunctionArguments(fn) {\n    var FN_COMMENTS = /\\/\\*.*?\\*\\/|\\/\\/.*$/mg; // removes comments in function declaration\n    var FN_ARGS = /^function[^(]*\\((.*?)\\)/m; // fetches all arguments in m[1]\n\n    if (typeof fn !== 'function') {\n      throw new Error('Argument is not a function: ' + fn);\n    }\n\n    var m = fn.toString().replace(FN_COMMENTS, '')\n      .match(FN_ARGS);\n    var args = [];\n    if (m !== null) {\n      m[1].split(',').forEach(function(arg, i) {\n        arg = arg.trim();\n        if (arg.length > 0) {\n          args.push(arg);\n        }\n      });\n    }\n    return args;\n  }\n\n  function getPrototypeOwner(fx) {\n    for (var prop in scout) {\n      if (!scout.hasOwnProperty(prop)) {\n        continue;\n      }\n      var o = scout[prop];\n      if (typeof o === 'function') {\n        for (var name in o.prototype) {\n          if (!o.prototype.hasOwnProperty(name)) {\n            continue;\n          }\n          var fn = o.prototype[name];\n          // Ignore constructor, inherited properties and non-functions\n          if (name === 'constructor' || !o.prototype.hasOwnProperty(name) || typeof fn !== 'function') {\n            continue;\n          }\n          if (fn === fx) {\n            return prop;\n          }\n        }\n      }\n    }\n    return '';\n  }\n}\n\n/**\n * @param value text which contains a constant reference like '${const:FormField.LabelPosition.RIGHT}'.\n * @return the resolved constant value or the unchanged input value if the constant could not be resolved.\n */\nexport function resolveConst(value, constType) {\n  if (!isString(value)) {\n    return value;\n  }\n\n  var result = CONST_REGEX.exec(value);\n  if (result && result.length === 2) {\n    // go down the object hierarchy starting on the given constType-object or on 'window'\n    var objectHierarchy = result[1].split('.');\n    var obj = constType || window;\n    for (var i = 0; i < objectHierarchy.length; i++) {\n      obj = obj[objectHierarchy[i]];\n      if (obj === undefined) {\n        window.console.log('Failed to resolve constant \\'' + result[1] + '\\', object is undefined');\n        return value;\n      }\n    }\n    return obj;\n  }\n  return value;\n}\n\n/**\n * @param object config An object with 2 properties: property, constType\n */\nexport function resolveConstProperty(object, config) {\n  scout.assertProperty(config, 'property');\n  scout.assertProperty(config, 'constType');\n  var value = object[config.property];\n  var resolvedValue = resolveConst(value, config.constType);\n  if (value !== resolvedValue) {\n    object[config.property] = resolvedValue;\n  }\n}\n\nexport default {\n  CONST_REGEX,\n  argumentsToArray,\n  checkFunctionOverrides,\n  copyOwnProperties,\n  copyProperties,\n  countOwnProperties,\n  createMap,\n  equals,\n  equalsRecursive,\n  extractProperties,\n  findChildObjectByKey,\n  forEachArgument,\n  isArray,\n  isFunction,\n  isNullOrUndefined,\n  isNumber,\n  isPlainObject,\n  isString,\n  keyByValue,\n  mandatoryFunction,\n  optProperty,\n  propertiesEquals,\n  replacePrototypeFunction,\n  resolveConst,\n  resolveConstProperty,\n  someOwnProperties,\n  someProperties,\n  valueCopy,\n  values\n};\n"]},"metadata":{},"sourceType":"module"}