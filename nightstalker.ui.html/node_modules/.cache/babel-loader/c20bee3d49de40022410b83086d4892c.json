{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, LookupBox, objects, scout, TreeBoxLayout } from '../../../index';\n\nvar TreeBox = /*#__PURE__*/function (_LookupBox) {\n  _inherits(TreeBox, _LookupBox);\n\n  var _super = _createSuper(TreeBox);\n\n  function TreeBox() {\n    var _this;\n\n    _classCallCheck(this, TreeBox);\n\n    _this = _super.call(this);\n    _this.tree = null;\n    _this._populating = false;\n\n    _this._addWidgetProperties(['tree', 'filterBox']);\n\n    return _this;\n  }\n\n  _createClass(TreeBox, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(TreeBox.prototype), \"_init\", this).call(this, model);\n\n      this.tree.on('nodesChecked', this._onTreeNodesChecked.bind(this));\n      this.tree.setScrollTop(this.scrollTop);\n    }\n  }, {\n    key: \"_initStructure\",\n    value: function _initStructure(value) {\n      if (!this.tree) {\n        this.tree = this._createDefaultTreeBoxTree();\n      }\n    }\n  }, {\n    key: \"_initValue\",\n    value: function _initValue(value) {\n      if (!this.tree) {\n        this.tree = this._createDefaultTreeBoxTree();\n      }\n\n      _get(_getPrototypeOf(TreeBox.prototype), \"_initValue\", this).call(this, value);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(TreeBox.prototype), \"_render\", this).call(this);\n\n      this.$container.addClass('tree-box');\n    }\n  }, {\n    key: \"_createFieldContainerLayout\",\n    value: function _createFieldContainerLayout() {\n      return new TreeBoxLayout(this, this.tree, this.filterBox);\n    }\n  }, {\n    key: \"_renderStructure\",\n    value: function _renderStructure($fieldContainer) {\n      this.tree.render(this.$fieldContainer);\n      this.addField(this.tree.$container);\n    }\n  }, {\n    key: \"_onTreeNodesChecked\",\n    value: function _onTreeNodesChecked(event) {\n      if (this._populating) {\n        return;\n      }\n\n      this._syncTreeToValue();\n    }\n  }, {\n    key: \"_syncTreeToValue\",\n    value: function _syncTreeToValue() {\n      if (!this.lookupCall || this._valueSyncing) {\n        return;\n      }\n\n      this._valueSyncing = true;\n      var valueArray = objects.values(this.tree.nodesMap).filter(function (node) {\n        return node.checked;\n      }).map(function (node) {\n        return node.id;\n      });\n      this.setValue(valueArray);\n      this._valueSyncing = false;\n    }\n  }, {\n    key: \"_valueChanged\",\n    value: function _valueChanged() {\n      _get(_getPrototypeOf(TreeBox.prototype), \"_valueChanged\", this).call(this);\n\n      this._syncValueToTree(this.value);\n    }\n  }, {\n    key: \"_syncValueToTree\",\n    value: function _syncValueToTree(newValue) {\n      if (!this.lookupCall || this._valueSyncing || !this.initialized) {\n        return;\n      }\n\n      this._valueSyncing = true;\n      var opts = {\n        checkOnlyEnabled: false,\n        checkChildren: false\n      };\n\n      try {\n        if (arrays.empty(newValue)) {\n          this.uncheckAll(opts);\n        } else {\n          // if lookup was not executed yet: do it now.\n          var lookupScheduled = this._ensureLookupCallExecuted();\n\n          if (lookupScheduled) {\n            return; // was the first lookup: tree has no nodes yet. cancel sync. Will be executed again after lookup execution.\n          }\n\n          this.uncheckAll(opts);\n          objects.values(this.tree.nodesMap).forEach(function (node) {\n            if (arrays.containsAny(newValue, node.id)) {\n              this.tree.checkNode(node, true, opts);\n            }\n          }, this);\n        }\n\n        this._updateDisplayText();\n      } finally {\n        this._valueSyncing = false;\n      }\n    }\n  }, {\n    key: \"uncheckAll\",\n    value: function uncheckAll(options) {\n      for (var nodeId in this.tree.nodesMap) {\n        if (this.tree.nodesMap.hasOwnProperty(nodeId)) {\n          this.tree.uncheckNode(this.tree.nodesMap[nodeId], options);\n        }\n      }\n    }\n  }, {\n    key: \"_lookupByAllDone\",\n    value: function _lookupByAllDone(result) {\n      if (_get(_getPrototypeOf(TreeBox.prototype), \"_lookupByAllDone\", this).call(this, result)) {\n        this._populateTree(result);\n      }\n    }\n  }, {\n    key: \"_populateTree\",\n    value: function _populateTree(result) {\n      var topLevelNodes = [];\n      this._populating = true;\n\n      this._populateTreeRecursive(null, topLevelNodes, result.lookupRows);\n\n      this.tree.deleteAllNodes();\n      this.tree.insertNodes(topLevelNodes);\n      this._populating = false;\n\n      this._syncValueToTree(this.value);\n    }\n  }, {\n    key: \"_populateTreeRecursive\",\n    value: function _populateTreeRecursive(parentKey, nodesArray, lookupRows) {\n      var node;\n      lookupRows.forEach(function (lookupRow) {\n        if (lookupRow.parentKey === parentKey) {\n          node = this._createNode(lookupRow);\n\n          this._populateTreeRecursive(node.id, node.childNodes, lookupRows);\n\n          node.leaf = !node.childNodes.length;\n          nodesArray.push(node);\n        }\n      }, this);\n    }\n    /**\n     * Returns a lookup row for each node currently checked.\n     */\n\n  }, {\n    key: \"getCheckedLookupRows\",\n    value: function getCheckedLookupRows() {\n      if (this.value === null || arrays.empty(this.value) || this.tree.nodes.length === 0) {\n        return [];\n      }\n\n      return objects.values(this.tree.nodesMap).filter(function (node) {\n        return node.checked;\n      }).map(function (node) {\n        return node.lookupRow;\n      });\n    }\n  }, {\n    key: \"_createNode\",\n    value: function _createNode(lookupRow) {\n      var node = scout.create('TreeNode', {\n        parent: this.tree,\n        id: lookupRow.key,\n        text: lookupRow.text,\n        lookupRow: lookupRow\n      });\n\n      if (lookupRow.iconId) {\n        node.iconId = lookupRow.iconId;\n      }\n\n      if (lookupRow.tooltipText) {\n        node.tooltipText = lookupRow.tooltipText;\n      }\n\n      if (lookupRow.backgroundColor) {\n        node.backgroundColor = lookupRow.backgroundColor;\n      }\n\n      if (lookupRow.foregroundColor) {\n        node.foregroundColor = lookupRow.foregroundColor;\n      }\n\n      if (lookupRow.font) {\n        node.font = lookupRow.font;\n      }\n\n      if (lookupRow.enabled === false) {\n        node.enabled = false;\n      }\n\n      if (lookupRow.active === false) {\n        node.active = false;\n      }\n\n      if (lookupRow.cssClass) {\n        node.cssClass = lookupRow.cssClass;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"_createDefaultTreeBoxTree\",\n    value: function _createDefaultTreeBoxTree() {\n      return scout.create('Tree', {\n        parent: this,\n        checkable: true\n      });\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getDelegateScrollable\",\n    value: function getDelegateScrollable() {\n      return this.tree;\n    }\n  }]);\n\n  return TreeBox;\n}(LookupBox);\n\nexport { TreeBox as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/treebox/TreeBox.js"],"names":["arrays","LookupBox","objects","scout","TreeBoxLayout","TreeBox","tree","_populating","_addWidgetProperties","model","on","_onTreeNodesChecked","bind","setScrollTop","scrollTop","value","_createDefaultTreeBoxTree","$container","addClass","filterBox","$fieldContainer","render","addField","event","_syncTreeToValue","lookupCall","_valueSyncing","valueArray","values","nodesMap","filter","node","checked","map","id","setValue","_syncValueToTree","newValue","initialized","opts","checkOnlyEnabled","checkChildren","empty","uncheckAll","lookupScheduled","_ensureLookupCallExecuted","forEach","containsAny","checkNode","_updateDisplayText","options","nodeId","hasOwnProperty","uncheckNode","result","_populateTree","topLevelNodes","_populateTreeRecursive","lookupRows","deleteAllNodes","insertNodes","parentKey","nodesArray","lookupRow","_createNode","childNodes","leaf","length","push","nodes","create","parent","key","text","iconId","tooltipText","backgroundColor","foregroundColor","font","enabled","active","cssClass","checkable"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAR,EAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,KAApC,EAA2CC,aAA3C,QAA+D,gBAA/D;;IAEqBC,O;;;;;AAEnB,qBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,IAAL,GAAY,IAAZ;AACA,UAAKC,WAAL,GAAmB,KAAnB;;AACA,UAAKC,oBAAL,CAA0B,CAAC,MAAD,EAAS,WAAT,CAA1B;;AAJY;AAKb;;;;0BAEKC,K,EAAO;AACX,yEAAYA,KAAZ;;AACA,WAAKH,IAAL,CAAUI,EAAV,CAAa,cAAb,EAA6B,KAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAA7B;AACA,WAAKN,IAAL,CAAUO,YAAV,CAAuB,KAAKC,SAA5B;AACD;;;mCAEcC,K,EAAO;AACpB,UAAI,CAAC,KAAKT,IAAV,EAAgB;AACd,aAAKA,IAAL,GAAY,KAAKU,yBAAL,EAAZ;AACD;AACF;;;+BAEUD,K,EAAO;AAChB,UAAI,CAAC,KAAKT,IAAV,EAAgB;AACd,aAAKA,IAAL,GAAY,KAAKU,yBAAL,EAAZ;AACD;;AACD,8EAAiBD,KAAjB;AACD;;;8BAES;AACR;;AACA,WAAKE,UAAL,CAAgBC,QAAhB,CAAyB,UAAzB;AACD;;;kDAE6B;AAC5B,aAAO,IAAId,aAAJ,CAAkB,IAAlB,EAAwB,KAAKE,IAA7B,EAAmC,KAAKa,SAAxC,CAAP;AACD;;;qCAEgBC,e,EAAiB;AAChC,WAAKd,IAAL,CAAUe,MAAV,CAAiB,KAAKD,eAAtB;AACA,WAAKE,QAAL,CAAc,KAAKhB,IAAL,CAAUW,UAAxB;AACD;;;wCAEmBM,K,EAAO;AACzB,UAAI,KAAKhB,WAAT,EAAsB;AACpB;AACD;;AACD,WAAKiB,gBAAL;AACD;;;uCAEkB;AACjB,UAAI,CAAC,KAAKC,UAAN,IAAoB,KAAKC,aAA7B,EAA4C;AAC1C;AACD;;AACD,WAAKA,aAAL,GAAqB,IAArB;AACA,UAAIC,UAAU,GAAGzB,OAAO,CAAC0B,MAAR,CAAe,KAAKtB,IAAL,CAAUuB,QAAzB,EAAmCC,MAAnC,CAA0C,UAASC,IAAT,EAAe;AACxE,eAAOA,IAAI,CAACC,OAAZ;AACD,OAFgB,EAEdC,GAFc,CAEV,UAASF,IAAT,EAAe;AACpB,eAAOA,IAAI,CAACG,EAAZ;AACD,OAJgB,CAAjB;AAMA,WAAKC,QAAL,CAAcR,UAAd;AACA,WAAKD,aAAL,GAAqB,KAArB;AACD;;;oCAEe;AACd;;AACA,WAAKU,gBAAL,CAAsB,KAAKrB,KAA3B;AACD;;;qCAEgBsB,Q,EAAU;AACzB,UAAI,CAAC,KAAKZ,UAAN,IAAoB,KAAKC,aAAzB,IAA0C,CAAC,KAAKY,WAApD,EAAiE;AAC/D;AACD;;AAED,WAAKZ,aAAL,GAAqB,IAArB;AACA,UAAIa,IAAI,GAAG;AACTC,QAAAA,gBAAgB,EAAE,KADT;AAETC,QAAAA,aAAa,EAAE;AAFN,OAAX;;AAIA,UAAI;AACF,YAAIzC,MAAM,CAAC0C,KAAP,CAAaL,QAAb,CAAJ,EAA4B;AAC1B,eAAKM,UAAL,CAAgBJ,IAAhB;AACD,SAFD,MAEO;AACL;AACA,cAAIK,eAAe,GAAG,KAAKC,yBAAL,EAAtB;;AACA,cAAID,eAAJ,EAAqB;AACnB,mBADmB,CACX;AACT;;AAED,eAAKD,UAAL,CAAgBJ,IAAhB;AACArC,UAAAA,OAAO,CAAC0B,MAAR,CAAe,KAAKtB,IAAL,CAAUuB,QAAzB,EAAmCiB,OAAnC,CAA2C,UAASf,IAAT,EAAe;AACxD,gBAAI/B,MAAM,CAAC+C,WAAP,CAAmBV,QAAnB,EAA6BN,IAAI,CAACG,EAAlC,CAAJ,EAA2C;AACzC,mBAAK5B,IAAL,CAAU0C,SAAV,CAAoBjB,IAApB,EAA0B,IAA1B,EAAgCQ,IAAhC;AACD;AACF,WAJD,EAIG,IAJH;AAKD;;AAED,aAAKU,kBAAL;AACD,OAnBD,SAmBU;AACR,aAAKvB,aAAL,GAAqB,KAArB;AACD;AACF;;;+BAEUwB,O,EAAS;AAClB,WAAK,IAAIC,MAAT,IAAmB,KAAK7C,IAAL,CAAUuB,QAA7B,EAAuC;AACrC,YAAI,KAAKvB,IAAL,CAAUuB,QAAV,CAAmBuB,cAAnB,CAAkCD,MAAlC,CAAJ,EAA+C;AAC7C,eAAK7C,IAAL,CAAU+C,WAAV,CAAsB,KAAK/C,IAAL,CAAUuB,QAAV,CAAmBsB,MAAnB,CAAtB,EAAkDD,OAAlD;AACD;AACF;AACF;;;qCAEgBI,M,EAAQ;AACvB,wFAA2BA,MAA3B,GAAoC;AAClC,aAAKC,aAAL,CAAmBD,MAAnB;AACD;AACF;;;kCAEaA,M,EAAQ;AACpB,UAAIE,aAAa,GAAG,EAApB;AACA,WAAKjD,WAAL,GAAmB,IAAnB;;AACA,WAAKkD,sBAAL,CAA4B,IAA5B,EAAkCD,aAAlC,EAAiDF,MAAM,CAACI,UAAxD;;AAEA,WAAKpD,IAAL,CAAUqD,cAAV;AACA,WAAKrD,IAAL,CAAUsD,WAAV,CAAsBJ,aAAtB;AACA,WAAKjD,WAAL,GAAmB,KAAnB;;AAEA,WAAK6B,gBAAL,CAAsB,KAAKrB,KAA3B;AACD;;;2CAEsB8C,S,EAAWC,U,EAAYJ,U,EAAY;AACxD,UAAI3B,IAAJ;AACA2B,MAAAA,UAAU,CAACZ,OAAX,CAAmB,UAASiB,SAAT,EAAoB;AACrC,YAAIA,SAAS,CAACF,SAAV,KAAwBA,SAA5B,EAAuC;AACrC9B,UAAAA,IAAI,GAAG,KAAKiC,WAAL,CAAiBD,SAAjB,CAAP;;AACA,eAAKN,sBAAL,CAA4B1B,IAAI,CAACG,EAAjC,EAAqCH,IAAI,CAACkC,UAA1C,EAAsDP,UAAtD;;AACA3B,UAAAA,IAAI,CAACmC,IAAL,GAAY,CAACnC,IAAI,CAACkC,UAAL,CAAgBE,MAA7B;AACAL,UAAAA,UAAU,CAACM,IAAX,CAAgBrC,IAAhB;AACD;AACF,OAPD,EAOG,IAPH;AAQD;AAED;AACF;AACA;;;;2CACyB;AACrB,UAAI,KAAKhB,KAAL,KAAe,IAAf,IAAuBf,MAAM,CAAC0C,KAAP,CAAa,KAAK3B,KAAlB,CAAvB,IAAmD,KAAKT,IAAL,CAAU+D,KAAV,CAAgBF,MAAhB,KAA2B,CAAlF,EAAqF;AACnF,eAAO,EAAP;AACD;;AAED,aAAOjE,OAAO,CAAC0B,MAAR,CAAe,KAAKtB,IAAL,CAAUuB,QAAzB,EAAmCC,MAAnC,CAA0C,UAASC,IAAT,EAAe;AAC9D,eAAOA,IAAI,CAACC,OAAZ;AACD,OAFM,EAEJC,GAFI,CAEA,UAASF,IAAT,EAAe;AACpB,eAAOA,IAAI,CAACgC,SAAZ;AACD,OAJM,CAAP;AAKD;;;gCAEWA,S,EAAW;AACrB,UACEhC,IAAI,GAAG5B,KAAK,CAACmE,MAAN,CAAa,UAAb,EAAyB;AAC9BC,QAAAA,MAAM,EAAE,KAAKjE,IADiB;AAE9B4B,QAAAA,EAAE,EAAE6B,SAAS,CAACS,GAFgB;AAG9BC,QAAAA,IAAI,EAAEV,SAAS,CAACU,IAHc;AAI9BV,QAAAA,SAAS,EAAEA;AAJmB,OAAzB,CADT;;AAQA,UAAIA,SAAS,CAACW,MAAd,EAAsB;AACpB3C,QAAAA,IAAI,CAAC2C,MAAL,GAAcX,SAAS,CAACW,MAAxB;AACD;;AACD,UAAIX,SAAS,CAACY,WAAd,EAA2B;AACzB5C,QAAAA,IAAI,CAAC4C,WAAL,GAAmBZ,SAAS,CAACY,WAA7B;AACD;;AACD,UAAIZ,SAAS,CAACa,eAAd,EAA+B;AAC7B7C,QAAAA,IAAI,CAAC6C,eAAL,GAAuBb,SAAS,CAACa,eAAjC;AACD;;AACD,UAAIb,SAAS,CAACc,eAAd,EAA+B;AAC7B9C,QAAAA,IAAI,CAAC8C,eAAL,GAAuBd,SAAS,CAACc,eAAjC;AACD;;AACD,UAAId,SAAS,CAACe,IAAd,EAAoB;AAClB/C,QAAAA,IAAI,CAAC+C,IAAL,GAAYf,SAAS,CAACe,IAAtB;AACD;;AACD,UAAIf,SAAS,CAACgB,OAAV,KAAsB,KAA1B,EAAiC;AAC/BhD,QAAAA,IAAI,CAACgD,OAAL,GAAe,KAAf;AACD;;AACD,UAAIhB,SAAS,CAACiB,MAAV,KAAqB,KAAzB,EAAgC;AAC9BjD,QAAAA,IAAI,CAACiD,MAAL,GAAc,KAAd;AACD;;AACD,UAAIjB,SAAS,CAACkB,QAAd,EAAwB;AACtBlD,QAAAA,IAAI,CAACkD,QAAL,GAAgBlB,SAAS,CAACkB,QAA1B;AACD;;AAED,aAAOlD,IAAP;AACD;;;gDAE2B;AAC1B,aAAO5B,KAAK,CAACmE,MAAN,CAAa,MAAb,EAAqB;AAC1BC,QAAAA,MAAM,EAAE,IADkB;AAE1BW,QAAAA,SAAS,EAAE;AAFe,OAArB,CAAP;AAID;AAED;AACF;AACA;;;;4CAC0B;AACtB,aAAO,KAAK5E,IAAZ;AACD;;;;EA7MkCL,S;;SAAhBI,O","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, LookupBox, objects, scout, TreeBoxLayout} from '../../../index';\n\nexport default class TreeBox extends LookupBox {\n\n  constructor() {\n    super();\n    this.tree = null;\n    this._populating = false;\n    this._addWidgetProperties(['tree', 'filterBox']);\n  }\n\n  _init(model) {\n    super._init(model);\n    this.tree.on('nodesChecked', this._onTreeNodesChecked.bind(this));\n    this.tree.setScrollTop(this.scrollTop);\n  }\n\n  _initStructure(value) {\n    if (!this.tree) {\n      this.tree = this._createDefaultTreeBoxTree();\n    }\n  }\n\n  _initValue(value) {\n    if (!this.tree) {\n      this.tree = this._createDefaultTreeBoxTree();\n    }\n    super._initValue(value);\n  }\n\n  _render() {\n    super._render();\n    this.$container.addClass('tree-box');\n  }\n\n  _createFieldContainerLayout() {\n    return new TreeBoxLayout(this, this.tree, this.filterBox);\n  }\n\n  _renderStructure($fieldContainer) {\n    this.tree.render(this.$fieldContainer);\n    this.addField(this.tree.$container);\n  }\n\n  _onTreeNodesChecked(event) {\n    if (this._populating) {\n      return;\n    }\n    this._syncTreeToValue();\n  }\n\n  _syncTreeToValue() {\n    if (!this.lookupCall || this._valueSyncing) {\n      return;\n    }\n    this._valueSyncing = true;\n    var valueArray = objects.values(this.tree.nodesMap).filter(function(node) {\n      return node.checked;\n    }).map(function(node) {\n      return node.id;\n    });\n\n    this.setValue(valueArray);\n    this._valueSyncing = false;\n  }\n\n  _valueChanged() {\n    super._valueChanged();\n    this._syncValueToTree(this.value);\n  }\n\n  _syncValueToTree(newValue) {\n    if (!this.lookupCall || this._valueSyncing || !this.initialized) {\n      return;\n    }\n\n    this._valueSyncing = true;\n    var opts = {\n      checkOnlyEnabled: false,\n      checkChildren: false\n    };\n    try {\n      if (arrays.empty(newValue)) {\n        this.uncheckAll(opts);\n      } else {\n        // if lookup was not executed yet: do it now.\n        var lookupScheduled = this._ensureLookupCallExecuted();\n        if (lookupScheduled) {\n          return; // was the first lookup: tree has no nodes yet. cancel sync. Will be executed again after lookup execution.\n        }\n\n        this.uncheckAll(opts);\n        objects.values(this.tree.nodesMap).forEach(function(node) {\n          if (arrays.containsAny(newValue, node.id)) {\n            this.tree.checkNode(node, true, opts);\n          }\n        }, this);\n      }\n\n      this._updateDisplayText();\n    } finally {\n      this._valueSyncing = false;\n    }\n  }\n\n  uncheckAll(options) {\n    for (var nodeId in this.tree.nodesMap) {\n      if (this.tree.nodesMap.hasOwnProperty(nodeId)) {\n        this.tree.uncheckNode(this.tree.nodesMap[nodeId], options);\n      }\n    }\n  }\n\n  _lookupByAllDone(result) {\n    if (super._lookupByAllDone(result)) {\n      this._populateTree(result);\n    }\n  }\n\n  _populateTree(result) {\n    var topLevelNodes = [];\n    this._populating = true;\n    this._populateTreeRecursive(null, topLevelNodes, result.lookupRows);\n\n    this.tree.deleteAllNodes();\n    this.tree.insertNodes(topLevelNodes);\n    this._populating = false;\n\n    this._syncValueToTree(this.value);\n  }\n\n  _populateTreeRecursive(parentKey, nodesArray, lookupRows) {\n    var node;\n    lookupRows.forEach(function(lookupRow) {\n      if (lookupRow.parentKey === parentKey) {\n        node = this._createNode(lookupRow);\n        this._populateTreeRecursive(node.id, node.childNodes, lookupRows);\n        node.leaf = !node.childNodes.length;\n        nodesArray.push(node);\n      }\n    }, this);\n  }\n\n  /**\n   * Returns a lookup row for each node currently checked.\n   */\n  getCheckedLookupRows() {\n    if (this.value === null || arrays.empty(this.value) || this.tree.nodes.length === 0) {\n      return [];\n    }\n\n    return objects.values(this.tree.nodesMap).filter(function(node) {\n      return node.checked;\n    }).map(function(node) {\n      return node.lookupRow;\n    });\n  }\n\n  _createNode(lookupRow) {\n    var\n      node = scout.create('TreeNode', {\n        parent: this.tree,\n        id: lookupRow.key,\n        text: lookupRow.text,\n        lookupRow: lookupRow\n      });\n\n    if (lookupRow.iconId) {\n      node.iconId = lookupRow.iconId;\n    }\n    if (lookupRow.tooltipText) {\n      node.tooltipText = lookupRow.tooltipText;\n    }\n    if (lookupRow.backgroundColor) {\n      node.backgroundColor = lookupRow.backgroundColor;\n    }\n    if (lookupRow.foregroundColor) {\n      node.foregroundColor = lookupRow.foregroundColor;\n    }\n    if (lookupRow.font) {\n      node.font = lookupRow.font;\n    }\n    if (lookupRow.enabled === false) {\n      node.enabled = false;\n    }\n    if (lookupRow.active === false) {\n      node.active = false;\n    }\n    if (lookupRow.cssClass) {\n      node.cssClass = lookupRow.cssClass;\n    }\n\n    return node;\n  }\n\n  _createDefaultTreeBoxTree() {\n    return scout.create('Tree', {\n      parent: this,\n      checkable: true\n    });\n  }\n\n  /**\n   * @override\n   */\n  getDelegateScrollable() {\n    return this.tree;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}