{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { HtmlEncoder, objects, PlainTextEncoder, scout } from '../index';\nvar htmlEncoder = null;\nvar plainTextEncoder = null;\n/**\n * @param text\n * @param encodeHtml defaults to true\n */\n\nexport function nl2br(text, encodeHtml) {\n  if (!text) {\n    return text;\n  }\n\n  text = asString(text);\n  encodeHtml = scout.nvl(encodeHtml, true);\n\n  if (encodeHtml) {\n    text = encode(text);\n  }\n\n  return text.replace(/\\n/g, '<br>').replace(/\\r/g, '');\n}\nexport function insertAt(text, insertText, position) {\n  if (!text) {\n    return text;\n  }\n\n  text = asString(text);\n  insertText = asString(insertText);\n\n  if (insertText && (typeof position === 'number' || position instanceof Number) && position >= 0) {\n    return text.substr(0, position) + insertText + text.substr(position);\n  }\n\n  return text;\n}\n/**\n * @returns {boolean} true if the given string contains any non-space characters\n */\n\nexport function hasText(text) {\n  if (text === undefined || text === null) {\n    return false;\n  }\n\n  text = asString(text);\n\n  if (typeof text !== 'string' || text.length === 0) {\n    return false;\n  }\n\n  return !/^\\s*$/.test(text);\n}\n/**\n * Inverse operation of hasText(string). Used because empty(s) is more readable than !hasText(s).\n * @returns {boolean} true if the given string is not set or contains only white-space characters.\n */\n\nexport function empty(text) {\n  return !hasText(text);\n}\nexport function repeat(pattern, count) {\n  if (pattern === undefined || pattern === null) {\n    return pattern;\n  }\n\n  if (typeof count !== 'number' || count < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  for (var i = 0; i < count; i++) {\n    result += pattern;\n  }\n\n  return result;\n}\nexport function padZeroLeft(string, padding) {\n  string = asString(string);\n\n  if (string === undefined || string === null || typeof padding !== 'number' || padding < 1 || (string + '').length >= padding) {\n    return string;\n  }\n\n  var z = repeat('0', padding) + string;\n  return z.slice(-padding);\n}\nexport function contains(string, searchFor) {\n  if (!string) {\n    return false;\n  }\n\n  return string.indexOf(searchFor) > -1;\n} // noinspection DuplicatedCode\n\nexport function startsWith(fullString, startString) {\n  if (fullString === undefined || fullString === null || startString === undefined || startString === null) {\n    return false;\n  }\n\n  fullString = asString(fullString);\n  startString = asString(startString);\n\n  if (startString.length === 0) {\n    return true; // every string starts with the empty string\n  }\n\n  if (fullString.length === 0) {\n    return false; // empty string cannot start with non-empty string\n  }\n\n  return fullString.substr(0, startString.length) === startString;\n} // noinspection DuplicatedCode\n\nexport function endsWith(fullString, endString) {\n  if (fullString === undefined || fullString === null || endString === undefined || endString === null) {\n    return false;\n  }\n\n  fullString = asString(fullString);\n  endString = asString(endString);\n\n  if (endString.length === 0) {\n    return true; // every string ends with the empty string\n  }\n\n  if (fullString.length === 0) {\n    return false; // empty string cannot end with non-empty string\n  }\n\n  return fullString.substr(-endString.length) === endString;\n}\n/**\n * Returns the number of occurrences of 'separator' in 'string'\n */\n\nexport function count(string, separator) {\n  if (!string || separator === undefined || separator === null) {\n    return 0;\n  }\n\n  string = asString(string);\n  separator = asString(separator);\n  return string.split(separator).length - 1;\n}\n/**\n * Returns the HTML encoded text. Example: 'Foo<br>Bar' returns 'Foo&amp;lt;br&amp;gt;Bar'.\n * @param {string} text\n * @return {string} HTML encoded text\n */\n\nexport function encode(text) {\n  if (!htmlEncoder) {\n    // lazy instantiation to avoid cyclic dependency errors during webpack bootstrap\n    htmlEncoder = new HtmlEncoder();\n  }\n\n  return htmlEncoder.encode(text);\n}\n/**\n * Returns the plain text of the given html string using simple tag replacement.<p>\n * Tries to preserve the new lines. Since it does not consider the style, it won't be right in any cases.\n * A div for example always generates a new line, even if display style is not set to block.\n *\n * Options:\n * - compact: Multiple consecutive empty lines are reduced to a single empty line\n * - trim: Calls string.trim(). White space at the beginning and the end of the text gets removed.\n */\n\nexport function plainText(text, options) {\n  if (!plainTextEncoder) {\n    // lazy instantiation to avoid cyclic dependency errors during webpack bootstrap\n    plainTextEncoder = new PlainTextEncoder();\n  }\n\n  return plainTextEncoder.encode(text, options);\n}\n/**\n * Joins a list of strings to a single string using the given separator. Elements that are\n * not defined or have zero length are ignored. The default return value is the empty string.\n *\n * @param {string} separator String to use as separator\n * @param {arguments|array} varargs List of strings to join\n */\n\nexport function join(separator, vararg) {\n  var stringsToJoin;\n\n  if (vararg && objects.isArray(vararg)) {\n    stringsToJoin = vararg;\n  } else {\n    stringsToJoin = objects.argumentsToArray(arguments).slice(1);\n  }\n\n  separator = asString(separator);\n  var s = '';\n\n  for (var i = 0; i < stringsToJoin.length; i++) {\n    var arg = asString(stringsToJoin[i]);\n\n    if (arg) {\n      if (s && separator) {\n        s += separator;\n      }\n\n      s += arg;\n    }\n  }\n\n  return s;\n}\n/**\n * If the given 'string' has text, it is returned with the 'prefix' and 'suffix'\n * prepended and appended, respectively. Otherwise, the empty string is returned.\n */\n\nexport function box(prefix, string, suffix) {\n  prefix = asString(prefix);\n  string = asString(string);\n  suffix = asString(suffix);\n  var s = '';\n\n  if (hasText(string)) {\n    if (prefix) {\n      s += prefix;\n    }\n\n    s += string;\n\n    if (suffix) {\n      s += suffix;\n    }\n  }\n\n  return s;\n}\n/**\n * If the given 'string' has text, its first letter is returned in lower case,\n * the remainder is unchanged. Otherwise, the empty string is returned.\n */\n\nexport function lowercaseFirstLetter(string) {\n  return _changeFirstLetter(string, 'toLowerCase');\n}\n/**\n * If the given 'string' has text, its first letter is returned in upper case,\n * the remainder is unchanged. Otherwise, the empty string is returned.\n */\n\nexport function uppercaseFirstLetter(string) {\n  return _changeFirstLetter(string, 'toUpperCase');\n}\nexport function _changeFirstLetter(string, funcName) {\n  if (string === undefined || string === null) {\n    return string;\n  }\n\n  string = asString(string);\n  var s = '';\n\n  if (hasText(string)) {\n    s = string.charAt(0)[funcName]() + string.slice(1);\n  }\n\n  return s;\n}\n/**\n * Quotes a string for use in a regular expression, i.e. escapes all characters with special meaning.\n */\n\nexport function quote(string) {\n  if (string === undefined || string === null) {\n    return string;\n  }\n\n  string = asString(string); // see \"escapeRegExp()\" from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\n\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& = last match\n}\n/**\n * If the given input is not of type string, it is converted to a string (using the standard\n * JavaScript \"String()\" function). Inputs 'null' and 'undefined' are returned as they are.\n */\n\nexport function asString(input) {\n  if (input === undefined || input === null) {\n    return input;\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return input;\n  }\n\n  return String(input);\n}\n/**\n * This is a shortcut for <code>scout.nvl(string, '')</code>.\n * @param {string} string String to check\n * @returns {string} Empty string '' when given string is null or undefined.\n */\n\nexport function nvl(string) {\n  if (arguments.length > 1) {\n    throw new Error('strings.nvl only accepts one argument. Use scout.nvl if you need to handle multiple arguments');\n  }\n\n  return scout.nvl(string, '');\n}\nexport function toUpperCaseFirstLetter(string) {\n  return string.substring(0, 1).toUpperCase() + string.substring(1);\n}\n/**\n * Returns the number of unicode characters in the given string.\n * As opposed to the string.length property, astral symbols are\n * counted as one single character.\n * Example: <code>'\\uD83D\\uDC4D'.length</code> returns 2, whereas\n * <code>countCharpoints('\\uD83D\\uDC4D')</code> returns 1.\n * (\\uD83D\\uDC4D is Unicode Character 'THUMBS UP SIGN' (U+1F44D))\n */\n\nexport function countCodePoints(string) {\n  return string // Replace every surrogate pair with a BMP symbol.\n  .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, '_') // and then get the length.\n  .length;\n}\n/**\n * Splits the given 'string' at 'separator' while returning at most 'limit' elements.\n * Unlike String.prototype.split(), this function does not discard elements if more than\n * 'limit' elements are found. Instead, the surplus elements are joined with the last element.\n *\n * Example:\n *   'a-b-c'.split('-', 2)                     ==>   ['a', 'b']\n *   splitMax('a-b-c', '-', 2)   ==>   ['a', 'b-c']\n */\n\nexport function splitMax(string, separator, limit) {\n  if (string === null || string === undefined) {\n    return [];\n  }\n\n  string = asString(string);\n  separator = asString(separator);\n  limit = Number(limit);\n  var array = string.split(separator);\n\n  if (isNaN(limit) || limit <= 0 || limit >= array.length) {\n    return array;\n  }\n\n  var arrayShort = array.slice(0, limit - 1);\n  var last = array.slice(limit - 1).join(separator); // combine the rest\n\n  arrayShort.push(last);\n  return arrayShort;\n}\nexport function nullIfEmpty(string) {\n  return empty(string) ? null : string;\n}\n/**\n * Null safe case sensitive comparison of two strings.\n *\n * @param [ignoreCase] optional flag to perform case insensitive comparison\n */\n\nexport function equals(a, b, ignoreCase) {\n  a = nullIfEmpty(a);\n  b = nullIfEmpty(b);\n\n  if (!a && !b) {\n    return true;\n  }\n\n  if (!a || !b) {\n    return false;\n  }\n\n  if (ignoreCase) {\n    return a.toLowerCase() === b.toLowerCase();\n  }\n\n  return a === b;\n}\nexport function equalsIgnoreCase(a, b) {\n  return equals(a, b, true);\n}\nexport function removePrefix(string, prefix) {\n  var s = string;\n\n  if (startsWith(string, prefix)) {\n    s = string.substring(prefix.length);\n  }\n\n  return s;\n}\nexport function removeSuffix(string, suffix) {\n  var s = string;\n\n  if (endsWith(string, suffix)) {\n    s = string.substring(0, string.length - suffix.length);\n  }\n\n  return s;\n}\nexport default {\n  asString: asString,\n  box: box,\n  contains: contains,\n  count: count,\n  countCodePoints: countCodePoints,\n  empty: empty,\n  encode: encode,\n  endsWith: endsWith,\n  equals: equals,\n  equalsIgnoreCase: equalsIgnoreCase,\n  hasText: hasText,\n  insertAt: insertAt,\n  join: join,\n  lowercaseFirstLetter: lowercaseFirstLetter,\n  nl2br: nl2br,\n  nullIfEmpty: nullIfEmpty,\n  nvl: nvl,\n  padZeroLeft: padZeroLeft,\n  plainText: plainText,\n  quote: quote,\n  removePrefix: removePrefix,\n  removeSuffix: removeSuffix,\n  repeat: repeat,\n  splitMax: splitMax,\n  startsWith: startsWith,\n  toUpperCaseFirstLetter: toUpperCaseFirstLetter,\n  uppercaseFirstLetter: uppercaseFirstLetter\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/util/strings.js"],"names":["HtmlEncoder","objects","PlainTextEncoder","scout","htmlEncoder","plainTextEncoder","nl2br","text","encodeHtml","asString","nvl","encode","replace","insertAt","insertText","position","Number","substr","hasText","undefined","length","test","empty","repeat","pattern","count","result","i","padZeroLeft","string","padding","z","slice","contains","searchFor","indexOf","startsWith","fullString","startString","endsWith","endString","separator","split","plainText","options","join","vararg","stringsToJoin","isArray","argumentsToArray","arguments","s","arg","box","prefix","suffix","lowercaseFirstLetter","_changeFirstLetter","uppercaseFirstLetter","funcName","charAt","quote","input","String","Error","toUpperCaseFirstLetter","substring","toUpperCase","countCodePoints","splitMax","limit","array","isNaN","arrayShort","last","push","nullIfEmpty","equals","a","b","ignoreCase","toLowerCase","equalsIgnoreCase","removePrefix","removeSuffix"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {HtmlEncoder, objects, PlainTextEncoder, scout} from '../index';\n\nlet htmlEncoder = null;\nlet plainTextEncoder = null;\n\n/**\n * @param text\n * @param encodeHtml defaults to true\n */\nexport function nl2br(text, encodeHtml) {\n  if (!text) {\n    return text;\n  }\n  text = asString(text);\n  encodeHtml = scout.nvl(encodeHtml, true);\n  if (encodeHtml) {\n    text = encode(text);\n  }\n  return text.replace(/\\n/g, '<br>').replace(/\\r/g, '');\n}\n\nexport function insertAt(text, insertText, position) {\n  if (!text) {\n    return text;\n  }\n  text = asString(text);\n  insertText = asString(insertText);\n  if (insertText && (typeof position === 'number' || position instanceof Number) && position >= 0) {\n    return text.substr(0, position) + insertText + text.substr(position);\n  }\n  return text;\n}\n\n/**\n * @returns {boolean} true if the given string contains any non-space characters\n */\nexport function hasText(text) {\n  if (text === undefined || text === null) {\n    return false;\n  }\n  text = asString(text);\n  if (typeof text !== 'string' || text.length === 0) {\n    return false;\n  }\n  return !/^\\s*$/.test(text);\n}\n\n/**\n * Inverse operation of hasText(string). Used because empty(s) is more readable than !hasText(s).\n * @returns {boolean} true if the given string is not set or contains only white-space characters.\n */\nexport function empty(text) {\n  return !hasText(text);\n}\n\nexport function repeat(pattern, count) {\n  if (pattern === undefined || pattern === null) {\n    return pattern;\n  }\n  if (typeof count !== 'number' || count < 1) {\n    return '';\n  }\n  var result = '';\n  for (var i = 0; i < count; i++) {\n    result += pattern;\n  }\n  return result;\n}\n\nexport function padZeroLeft(string, padding) {\n  string = asString(string);\n  if (string === undefined || string === null || typeof padding !== 'number' || padding < 1 || (string + '').length >= padding) {\n    return string;\n  }\n  var z = repeat('0', padding) + string;\n  return z.slice(-padding);\n}\n\nexport function contains(string, searchFor) {\n  if (!string) {\n    return false;\n  }\n  return string.indexOf(searchFor) > -1;\n}\n\n// noinspection DuplicatedCode\nexport function startsWith(fullString, startString) {\n  if (fullString === undefined || fullString === null || startString === undefined || startString === null) {\n    return false;\n  }\n  fullString = asString(fullString);\n  startString = asString(startString);\n  if (startString.length === 0) {\n    return true; // every string starts with the empty string\n  }\n  if (fullString.length === 0) {\n    return false; // empty string cannot start with non-empty string\n  }\n  return (fullString.substr(0, startString.length) === startString);\n}\n\n// noinspection DuplicatedCode\nexport function endsWith(fullString, endString) {\n  if (fullString === undefined || fullString === null || endString === undefined || endString === null) {\n    return false;\n  }\n  fullString = asString(fullString);\n  endString = asString(endString);\n  if (endString.length === 0) {\n    return true; // every string ends with the empty string\n  }\n  if (fullString.length === 0) {\n    return false; // empty string cannot end with non-empty string\n  }\n  return (fullString.substr(-endString.length) === endString);\n}\n\n/**\n * Returns the number of occurrences of 'separator' in 'string'\n */\nexport function count(string, separator) {\n  if (!string || separator === undefined || separator === null) {\n    return 0;\n  }\n  string = asString(string);\n  separator = asString(separator);\n  return string.split(separator).length - 1;\n}\n\n/**\n * Returns the HTML encoded text. Example: 'Foo<br>Bar' returns 'Foo&amp;lt;br&amp;gt;Bar'.\n * @param {string} text\n * @return {string} HTML encoded text\n */\nexport function encode(text) {\n  if (!htmlEncoder) { // lazy instantiation to avoid cyclic dependency errors during webpack bootstrap\n    htmlEncoder = new HtmlEncoder();\n  }\n  return htmlEncoder.encode(text);\n}\n\n/**\n * Returns the plain text of the given html string using simple tag replacement.<p>\n * Tries to preserve the new lines. Since it does not consider the style, it won't be right in any cases.\n * A div for example always generates a new line, even if display style is not set to block.\n *\n * Options:\n * - compact: Multiple consecutive empty lines are reduced to a single empty line\n * - trim: Calls string.trim(). White space at the beginning and the end of the text gets removed.\n */\nexport function plainText(text, options) {\n  if (!plainTextEncoder) { // lazy instantiation to avoid cyclic dependency errors during webpack bootstrap\n    plainTextEncoder = new PlainTextEncoder();\n  }\n  return plainTextEncoder.encode(text, options);\n}\n\n/**\n * Joins a list of strings to a single string using the given separator. Elements that are\n * not defined or have zero length are ignored. The default return value is the empty string.\n *\n * @param {string} separator String to use as separator\n * @param {arguments|array} varargs List of strings to join\n */\nexport function join(separator, vararg) {\n  var stringsToJoin;\n  if (vararg && objects.isArray(vararg)) {\n    stringsToJoin = vararg;\n  } else {\n    stringsToJoin = objects.argumentsToArray(arguments).slice(1);\n  }\n  separator = asString(separator);\n  var s = '';\n  for (var i = 0; i < stringsToJoin.length; i++) {\n    var arg = asString(stringsToJoin[i]);\n    if (arg) {\n      if (s && separator) {\n        s += separator;\n      }\n      s += arg;\n    }\n  }\n  return s;\n}\n\n/**\n * If the given 'string' has text, it is returned with the 'prefix' and 'suffix'\n * prepended and appended, respectively. Otherwise, the empty string is returned.\n */\nexport function box(prefix, string, suffix) {\n  prefix = asString(prefix);\n  string = asString(string);\n  suffix = asString(suffix);\n  var s = '';\n  if (hasText(string)) {\n    if (prefix) {\n      s += prefix;\n    }\n    s += string;\n    if (suffix) {\n      s += suffix;\n    }\n  }\n  return s;\n}\n\n/**\n * If the given 'string' has text, its first letter is returned in lower case,\n * the remainder is unchanged. Otherwise, the empty string is returned.\n */\nexport function lowercaseFirstLetter(string) {\n  return _changeFirstLetter(string, 'toLowerCase');\n}\n\n/**\n * If the given 'string' has text, its first letter is returned in upper case,\n * the remainder is unchanged. Otherwise, the empty string is returned.\n */\nexport function uppercaseFirstLetter(string) {\n  return _changeFirstLetter(string, 'toUpperCase');\n}\n\nexport function _changeFirstLetter(string, funcName) {\n  if (string === undefined || string === null) {\n    return string;\n  }\n  string = asString(string);\n  var s = '';\n  if (hasText(string)) {\n    s = string.charAt(0)[funcName]() + string.slice(1);\n  }\n  return s;\n}\n\n/**\n * Quotes a string for use in a regular expression, i.e. escapes all characters with special meaning.\n */\nexport function quote(string) {\n  if (string === undefined || string === null) {\n    return string;\n  }\n  string = asString(string);\n  // see \"escapeRegExp()\" from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& = last match\n}\n\n/**\n * If the given input is not of type string, it is converted to a string (using the standard\n * JavaScript \"String()\" function). Inputs 'null' and 'undefined' are returned as they are.\n */\nexport function asString(input) {\n  if (input === undefined || input === null) {\n    return input;\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    return input;\n  }\n  return String(input);\n}\n\n/**\n * This is a shortcut for <code>scout.nvl(string, '')</code>.\n * @param {string} string String to check\n * @returns {string} Empty string '' when given string is null or undefined.\n */\nexport function nvl(string) {\n  if (arguments.length > 1) {\n    throw new Error('strings.nvl only accepts one argument. Use scout.nvl if you need to handle multiple arguments');\n  }\n  return scout.nvl(string, '');\n}\n\nexport function toUpperCaseFirstLetter(string) {\n  return string.substring(0, 1).toUpperCase() + string.substring(1);\n}\n\n/**\n * Returns the number of unicode characters in the given string.\n * As opposed to the string.length property, astral symbols are\n * counted as one single character.\n * Example: <code>'\\uD83D\\uDC4D'.length</code> returns 2, whereas\n * <code>countCharpoints('\\uD83D\\uDC4D')</code> returns 1.\n * (\\uD83D\\uDC4D is Unicode Character 'THUMBS UP SIGN' (U+1F44D))\n */\nexport function countCodePoints(string) {\n  return string\n    // Replace every surrogate pair with a BMP symbol.\n    .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, '_')\n    // and then get the length.\n    .length;\n}\n\n/**\n * Splits the given 'string' at 'separator' while returning at most 'limit' elements.\n * Unlike String.prototype.split(), this function does not discard elements if more than\n * 'limit' elements are found. Instead, the surplus elements are joined with the last element.\n *\n * Example:\n *   'a-b-c'.split('-', 2)                     ==>   ['a', 'b']\n *   splitMax('a-b-c', '-', 2)   ==>   ['a', 'b-c']\n */\nexport function splitMax(string, separator, limit) {\n  if (string === null || string === undefined) {\n    return [];\n  }\n  string = asString(string);\n  separator = asString(separator);\n  limit = Number(limit);\n\n  var array = string.split(separator);\n  if (isNaN(limit) || limit <= 0 || limit >= array.length) {\n    return array;\n  }\n\n  var arrayShort = array.slice(0, limit - 1);\n  var last = array.slice(limit - 1).join(separator); // combine the rest\n  arrayShort.push(last);\n  return arrayShort;\n}\n\nexport function nullIfEmpty(string) {\n  return empty(string) ? null : string;\n}\n\n/**\n * Null safe case sensitive comparison of two strings.\n *\n * @param [ignoreCase] optional flag to perform case insensitive comparison\n */\nexport function equals(a, b, ignoreCase) {\n  a = nullIfEmpty(a);\n  b = nullIfEmpty(b);\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  if (ignoreCase) {\n    return a.toLowerCase() === b.toLowerCase();\n  }\n  return a === b;\n}\n\nexport function equalsIgnoreCase(a, b) {\n  return equals(a, b, true);\n}\n\nexport function removePrefix(string, prefix) {\n  var s = string;\n  if (startsWith(string, prefix)) {\n    s = string.substring(prefix.length);\n  }\n  return s;\n}\n\nexport function removeSuffix(string, suffix) {\n  var s = string;\n  if (endsWith(string, suffix)) {\n    s = string.substring(0, string.length - suffix.length);\n  }\n  return s;\n}\n\nexport default {\n  asString,\n  box,\n  contains,\n  count,\n  countCodePoints,\n  empty,\n  encode,\n  endsWith,\n  equals,\n  equalsIgnoreCase,\n  hasText,\n  insertAt,\n  join,\n  lowercaseFirstLetter,\n  nl2br,\n  nullIfEmpty,\n  nvl,\n  padZeroLeft,\n  plainText,\n  quote,\n  removePrefix,\n  removeSuffix,\n  repeat,\n  splitMax,\n  startsWith,\n  toUpperCaseFirstLetter,\n  uppercaseFirstLetter\n};\n"]},"metadata":{},"sourceType":"module"}