{"ast":null,"code":"/*\n * Copyright (c) 2010-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { App, Device, ObjectFactory, objects, strings, ValueField, widgets } from './index';\nimport $ from 'jquery';\nvar $activeElements = null;\nvar objectFactories = {};\n/**\n * Returns the first of the given arguments that is not null or undefined. If no such element\n * is present, the last argument is returned. If no arguments are given, undefined is returned.\n */\n\nexport function nvl() {\n  var result;\n\n  for (var i = 0; i < arguments.length; i++) {\n    result = arguments[i];\n\n    if (result !== undefined && result !== null) {\n      break;\n    }\n  }\n\n  return result;\n}\n/**\n * Use this method in your functions to assert that a mandatory parameter is passed\n * to the function. Throws an error when value is not set.\n *\n * @param {string} parameterName\n * @param {object} [value]\n * @param {function} [type] if this optional parameter is set, the given value must be of this type (instanceof check)\n * @return {object} the value\n */\n\nexport function assertParameter(parameterName, value, type) {\n  if (objects.isNullOrUndefined(value)) {\n    throw new Error('Missing required parameter \\'' + parameterName + '\\'');\n  }\n\n  if (type && !(value instanceof type)) {\n    throw new Error('Parameter \\'' + parameterName + '\\' has wrong type');\n  }\n\n  return value;\n}\n/**\n * Use this method to assert that a mandatory property is set. Throws an error when value is not set.\n *\n * @param type (optional) if this parameter is set, the value must be of this type (instanceof check)\n * @return the value (for direct assignment)\n */\n\nexport function assertProperty(object, propertyName, type) {\n  var value = object[propertyName];\n\n  if (objects.isNullOrUndefined(value)) {\n    throw new Error('Missing required property \\'' + propertyName + '\\'');\n  }\n\n  if (type && !(value instanceof type)) {\n    throw new Error('Property \\'' + propertyName + '\\' has wrong type');\n  }\n\n  return value;\n}\n/**\n * Checks if one of the arguments from 1-n is equal to the first argument.\n * @param value\n * @param arguments to check against the value, may be an array or a variable argument list.\n */\n\nexport function isOneOf(value) {\n  if (arguments.length < 2) {\n    return false;\n  }\n\n  var argsToCheck;\n\n  if (arguments.length === 2 && Array.isArray(arguments[1])) {\n    argsToCheck = arguments[1];\n  } else {\n    argsToCheck = Array.prototype.slice.call(arguments, 1);\n  }\n\n  return argsToCheck.indexOf(value) !== -1;\n}\n/**\n * Creates a new object instance.<p> Delegates the create call to scout.ObjectFactory#create.\n * @returns {object}\n */\n\nexport function create(objectType, model, options) {\n  return ObjectFactory.get().create(objectType, model, options);\n}\n/**\n * Prepares the DOM for scout in the given document. This should be called once while initializing scout.\n * If the target document is not specified, the global \"document\" variable is used instead.\n *\n * This is used by apps (App, LoginApp, LogoutApp)\n *\n * Currently it does the following:\n * - Remove the <noscript> tag (obviously there is no need for it).\n * - Remove <scout-text> tags (they must have been processed before, see texts.readFromDOM())\n * - Remove <scout-version> tag (it must have been processed before, see scout.App._initVersion())\n * - Add a device / browser class to the body tag to allow for device specific CSS rules.\n * - If the browser is Google Chrome, add a special meta header to prevent automatic translation.\n */\n\nexport function prepareDOM(targetDocument) {\n  targetDocument = targetDocument || document; // Cleanup DOM\n\n  $('noscript', targetDocument).remove();\n  $('scout-text', targetDocument).remove();\n  $('scout-version', targetDocument).remove();\n  $('body', targetDocument).addDeviceClass(); // Prevent \"Do you want to translate this page?\" in Google Chrome\n\n  if (Device.get().browser === Device.Browser.CHROME) {\n    var metaNoTranslate = '<meta name=\"google\" content=\"notranslate\" />';\n    var $title = $('head > title', targetDocument);\n\n    if ($title.length === 0) {\n      // Add to end of head\n      $('head', targetDocument).append(metaNoTranslate);\n    } else {\n      $title.after(metaNoTranslate);\n    }\n  }\n}\n/**\n * Installs a global 'mousedown' interceptor to invoke 'aboutToBlurByMouseDown' on value field before anything else gets executed.\n */\n\nexport function installGlobalMouseDownInterceptor(myDocument) {\n  myDocument.addEventListener('mousedown', function (event) {\n    ValueField.invokeValueFieldAboutToBlurByMouseDown(event.target || event.srcElement);\n  }, true); // true=the event handler is executed in the capturing phase\n}\n/**\n * Because Firefox does not set the active state of a DOM element when the mousedown event\n * for that element is prevented, we set an 'active' CSS class instead. This means in the\n * CSS we must deal with :active and with .active, where we need same behavior for the\n * active state across all browsers.\n * <p>\n * Typically you'd write something like this in your CSS:\n *   button:active, button.active { ... }\n */\n\nexport function installSyntheticActiveStateHandler(myDocument) {\n  if (Device.get().requiresSyntheticActiveState()) {\n    $activeElements = [];\n    $(myDocument).on('mousedown', function (event) {\n      var $element = $(event.target);\n\n      while ($element.length) {\n        $activeElements.push($element.addClass('active'));\n        $element = $element.parent();\n      }\n    }).on('mouseup', function () {\n      $activeElements.forEach(function ($element) {\n        $element.removeClass('active');\n      });\n      $activeElements = [];\n    });\n  }\n}\n/**\n * Resolves the widget using the given widget id or HTML element.\n * <p>\n * If the argument is a string or a number, it will search the widget hierarchy for the given id using Widget#widget(id).\n * If the argument is a HTML or jQuery element, it will use widgets.get() to get the widget which belongs to the given element.\n *\n * @param widgetIdOrElement\n *          a widget ID or a HTML or jQuery element\n * @param [partId]\n *          partId of the session the widget belongs to (optional, only relevant if the\n *          argument is a widget ID). If omitted, the first session is used.\n * @returns\n *          the widget for the given element or id\n */\n\nexport function widget(widgetIdOrElement, partId) {\n  if (objects.isNullOrUndefined(widgetIdOrElement)) {\n    return null;\n  }\n\n  var $elem = widgetIdOrElement;\n\n  if (typeof widgetIdOrElement === 'string' || typeof widgetIdOrElement === 'number') {\n    // Find widget for ID\n    var session = scout.getSession(partId);\n\n    if (session) {\n      widgetIdOrElement = strings.asString(widgetIdOrElement);\n      return session.root.widget(widgetIdOrElement);\n    }\n  }\n\n  return widgets.get($elem);\n}\n/**\n * Helper function to get the model adapter for a given adapterId. If there is more than one\n * session, e.g. in case of portlets, the second argument specifies the partId of the session\n * to be queried. If not specified explicitly, the first session is used. If the session or\n * the adapter could not be found, null is returned.\n */\n\nexport function adapter(adapterId, partId) {\n  if (objects.isNullOrUndefined(adapterId)) {\n    return null;\n  }\n\n  var session = scout.getSession(partId);\n\n  if (session && session.modelAdapterRegistry) {\n    return session.modelAdapterRegistry[adapterId];\n  }\n\n  return null;\n}\nexport function getSession(partId) {\n  var sessions = App.get().sessions;\n\n  if (!sessions) {\n    return null;\n  }\n\n  if (objects.isNullOrUndefined(partId)) {\n    return sessions[0];\n  }\n\n  for (var i = 0; i < sessions.length; i++) {\n    var session = sessions[i]; // noinspection EqualityComparisonWithCoercionJS\n    // eslint-disable-next-line eqeqeq\n\n    if (session.partId == partId) {\n      // <-- compare with '==' is intentional! (NOSONAR)\n      return session;\n    }\n  }\n\n  return null;\n}\n/**\n * This method exports the adapter with the given ID as JSON, it returns an plain object containing the\n * configuration of the adapter. You can transform that object into JSON by calling <code>JSON.stringify</code>.\n * This method can only be called through the browser JavaScript console.\n * Here's an example of how to call the method:\n *\n * JSON.stringify(scout.exportAdapter(4))\n *\n * @param adapterId\n */\n\nexport function exportAdapter(adapterId, partId) {\n  var session = scout.getSession(partId);\n\n  if (session && session.modelAdapterRegistry) {\n    var adapter = session.getModelAdapter(adapterId);\n\n    if (!adapter) {\n      return null;\n    }\n\n    var adapterData = cloneAdapterData(adapterId);\n    resolveAdapterReferences(adapter, adapterData);\n    adapterData.type = 'model'; // property 'type' is required for models.js\n\n    return adapterData;\n  } // ----- Helper functions -----\n\n\n  function cloneAdapterData(adapterId) {\n    var adapterData = session.getAdapterData(adapterId);\n    adapterData = $.extend(true, {}, adapterData);\n    return adapterData;\n  }\n\n  function resolveAdapterReferences(adapter, adapterData) {\n    var tmpAdapter, tmpAdapterData;\n\n    adapter.widget._widgetProperties.forEach(function (WidgetPropertyName) {\n      var WidgetPropertyValue = adapterData[WidgetPropertyName];\n\n      if (!WidgetPropertyValue) {\n        return; // nothing to do when property is null\n      }\n\n      if (Array.isArray(WidgetPropertyValue)) {\n        // value is an array of adapter IDs\n        var adapterDataArray = [];\n        WidgetPropertyValue.forEach(function (adapterId) {\n          tmpAdapter = session.getModelAdapter(adapterId);\n          tmpAdapterData = cloneAdapterData(adapterId);\n          resolveAdapterReferences(tmpAdapter, tmpAdapterData);\n          adapterDataArray.push(tmpAdapterData);\n        });\n        adapterData[WidgetPropertyName] = adapterDataArray;\n      } else {\n        // value is an adapter ID\n        tmpAdapter = session.getModelAdapter(WidgetPropertyValue);\n        tmpAdapterData = cloneAdapterData(WidgetPropertyValue);\n        resolveAdapterReferences(tmpAdapter, tmpAdapterData);\n        adapterData[WidgetPropertyName] = tmpAdapterData;\n      }\n    });\n\n    adapterData = adapter.exportAdapterData(adapterData);\n  }\n}\n/**\n * Reloads the entire browser window.\n *\n * Options:\n *   [schedule]\n *     If true, the page reload is not executed in the current thread but scheduled using setTimeout().\n *     This is useful if the caller wants to execute some other code before the reload. The default is false.\n *   [clearBody]\n *     If true, the body is cleared first before the reload is performed. This is useful to prevent\n *     showing \"old\" content in the browser until the new content arrives. The default is true.\n *   [redirectUrl]\n *      The new URL to load. If not specified, the current location is used (window.location).\n */\n\nexport function reloadPage(options) {\n  options = options || {};\n\n  if (options.schedule) {\n    setTimeout(reloadPageImpl);\n  } else {\n    reloadPageImpl();\n  } // ----- Helper functions -----\n\n\n  function reloadPageImpl() {\n    // Hide everything (on entire page, not only $entryPoint)\n    if (nvl(options.clearBody, true)) {\n      $('body').html('');\n    } // Reload window (using setTimeout, to overcome drawing issues in IE)\n\n\n    setTimeout(function () {\n      if (options.redirectUrl) {\n        window.location.href = options.redirectUrl;\n      } else {\n        window.location.reload();\n      }\n    });\n  }\n}\nexport function addObjectFactories(factories) {\n  objectFactories = $.extend(objectFactories, factories);\n}\nexport function cloneShallow(template, properties, createUniqueId) {\n  assertParameter('template', template);\n  var clone = Object.create(Object.getPrototypeOf(template));\n  Object.getOwnPropertyNames(template).forEach(function (key) {\n    clone[key] = template[key];\n  });\n\n  if (properties) {\n    for (var key in properties) {\n      clone[key] = properties[key];\n    }\n  }\n\n  if (nvl(createUniqueId, true)) {\n    clone.id = ObjectFactory.get().createUniqueId();\n  }\n\n  if (clone.cloneOf === undefined) {\n    clone.cloneOf = template;\n  }\n\n  return clone;\n}\nexport default {\n  nvl: nvl,\n  assertParameter: assertParameter,\n  assertProperty: assertProperty,\n  isOneOf: isOneOf,\n  create: create,\n  prepareDOM: prepareDOM,\n  installGlobalMouseDownInterceptor: installGlobalMouseDownInterceptor,\n  installSyntheticActiveStateHandler: installSyntheticActiveStateHandler,\n  widget: widget,\n  adapter: adapter,\n  getSession: getSession,\n  exportAdapter: exportAdapter,\n  reloadPage: reloadPage,\n  addObjectFactories: addObjectFactories,\n  objectFactories: objectFactories,\n  cloneShallow: cloneShallow\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/scout.js"],"names":["App","Device","ObjectFactory","objects","strings","ValueField","widgets","$","$activeElements","objectFactories","nvl","result","i","arguments","length","undefined","assertParameter","parameterName","value","type","isNullOrUndefined","Error","assertProperty","object","propertyName","isOneOf","argsToCheck","Array","isArray","prototype","slice","call","indexOf","create","objectType","model","options","get","prepareDOM","targetDocument","document","remove","addDeviceClass","browser","Browser","CHROME","metaNoTranslate","$title","append","after","installGlobalMouseDownInterceptor","myDocument","addEventListener","event","invokeValueFieldAboutToBlurByMouseDown","target","srcElement","installSyntheticActiveStateHandler","requiresSyntheticActiveState","on","$element","push","addClass","parent","forEach","removeClass","widget","widgetIdOrElement","partId","$elem","session","scout","getSession","asString","root","adapter","adapterId","modelAdapterRegistry","sessions","exportAdapter","getModelAdapter","adapterData","cloneAdapterData","resolveAdapterReferences","getAdapterData","extend","tmpAdapter","tmpAdapterData","_widgetProperties","WidgetPropertyName","WidgetPropertyValue","adapterDataArray","exportAdapterData","reloadPage","schedule","setTimeout","reloadPageImpl","clearBody","html","redirectUrl","window","location","href","reload","addObjectFactories","factories","cloneShallow","template","properties","createUniqueId","clone","Object","getPrototypeOf","getOwnPropertyNames","key","id","cloneOf"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2010-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\nimport {App, Device, ObjectFactory, objects, strings, ValueField, widgets} from './index';\nimport $ from 'jquery';\n\nlet $activeElements = null;\nlet objectFactories = {};\n\n/**\n * Returns the first of the given arguments that is not null or undefined. If no such element\n * is present, the last argument is returned. If no arguments are given, undefined is returned.\n */\nexport function nvl() {\n  var result;\n  for (var i = 0; i < arguments.length; i++) {\n    result = arguments[i];\n    if (result !== undefined && result !== null) {\n      break;\n    }\n  }\n  return result;\n}\n\n/**\n * Use this method in your functions to assert that a mandatory parameter is passed\n * to the function. Throws an error when value is not set.\n *\n * @param {string} parameterName\n * @param {object} [value]\n * @param {function} [type] if this optional parameter is set, the given value must be of this type (instanceof check)\n * @return {object} the value\n */\nexport function assertParameter(parameterName, value, type) {\n  if (objects.isNullOrUndefined(value)) {\n    throw new Error('Missing required parameter \\'' + parameterName + '\\'');\n  }\n  if (type && !(value instanceof type)) {\n    throw new Error('Parameter \\'' + parameterName + '\\' has wrong type');\n  }\n  return value;\n}\n\n/**\n * Use this method to assert that a mandatory property is set. Throws an error when value is not set.\n *\n * @param type (optional) if this parameter is set, the value must be of this type (instanceof check)\n * @return the value (for direct assignment)\n */\nexport function assertProperty(object, propertyName, type) {\n  var value = object[propertyName];\n  if (objects.isNullOrUndefined(value)) {\n    throw new Error('Missing required property \\'' + propertyName + '\\'');\n  }\n  if (type && !(value instanceof type)) {\n    throw new Error('Property \\'' + propertyName + '\\' has wrong type');\n  }\n  return value;\n}\n\n/**\n * Checks if one of the arguments from 1-n is equal to the first argument.\n * @param value\n * @param arguments to check against the value, may be an array or a variable argument list.\n */\nexport function isOneOf(value) {\n  if (arguments.length < 2) {\n    return false;\n  }\n  var argsToCheck;\n  if (arguments.length === 2 && Array.isArray(arguments[1])) {\n    argsToCheck = arguments[1];\n  } else {\n    argsToCheck = Array.prototype.slice.call(arguments, 1);\n  }\n  return argsToCheck.indexOf(value) !== -1;\n}\n\n/**\n * Creates a new object instance.<p> Delegates the create call to scout.ObjectFactory#create.\n * @returns {object}\n */\nexport function create(objectType, model, options) {\n  return ObjectFactory.get().create(objectType, model, options);\n}\n\n/**\n * Prepares the DOM for scout in the given document. This should be called once while initializing scout.\n * If the target document is not specified, the global \"document\" variable is used instead.\n *\n * This is used by apps (App, LoginApp, LogoutApp)\n *\n * Currently it does the following:\n * - Remove the <noscript> tag (obviously there is no need for it).\n * - Remove <scout-text> tags (they must have been processed before, see texts.readFromDOM())\n * - Remove <scout-version> tag (it must have been processed before, see scout.App._initVersion())\n * - Add a device / browser class to the body tag to allow for device specific CSS rules.\n * - If the browser is Google Chrome, add a special meta header to prevent automatic translation.\n */\nexport function prepareDOM(targetDocument) {\n  targetDocument = targetDocument || document;\n  // Cleanup DOM\n  $('noscript', targetDocument).remove();\n  $('scout-text', targetDocument).remove();\n  $('scout-version', targetDocument).remove();\n  $('body', targetDocument).addDeviceClass();\n\n  // Prevent \"Do you want to translate this page?\" in Google Chrome\n  if (Device.get().browser === Device.Browser.CHROME) {\n    var metaNoTranslate = '<meta name=\"google\" content=\"notranslate\" />';\n    var $title = $('head > title', targetDocument);\n    if ($title.length === 0) {\n      // Add to end of head\n      $('head', targetDocument).append(metaNoTranslate);\n    } else {\n      $title.after(metaNoTranslate);\n    }\n  }\n}\n\n/**\n * Installs a global 'mousedown' interceptor to invoke 'aboutToBlurByMouseDown' on value field before anything else gets executed.\n */\nexport function installGlobalMouseDownInterceptor(myDocument) {\n  myDocument.addEventListener('mousedown', function(event) {\n    ValueField.invokeValueFieldAboutToBlurByMouseDown(event.target || event.srcElement);\n  }, true); // true=the event handler is executed in the capturing phase\n}\n\n/**\n * Because Firefox does not set the active state of a DOM element when the mousedown event\n * for that element is prevented, we set an 'active' CSS class instead. This means in the\n * CSS we must deal with :active and with .active, where we need same behavior for the\n * active state across all browsers.\n * <p>\n * Typically you'd write something like this in your CSS:\n *   button:active, button.active { ... }\n */\nexport function installSyntheticActiveStateHandler(myDocument) {\n  if (Device.get().requiresSyntheticActiveState()) {\n    $activeElements = [];\n    $(myDocument)\n      .on('mousedown', function(event) {\n        var $element = $(event.target);\n        while ($element.length) {\n          $activeElements.push($element.addClass('active'));\n          $element = $element.parent();\n        }\n      })\n      .on('mouseup', function() {\n        $activeElements.forEach(function($element) {\n          $element.removeClass('active');\n        });\n        $activeElements = [];\n      });\n  }\n}\n\n/**\n * Resolves the widget using the given widget id or HTML element.\n * <p>\n * If the argument is a string or a number, it will search the widget hierarchy for the given id using Widget#widget(id).\n * If the argument is a HTML or jQuery element, it will use widgets.get() to get the widget which belongs to the given element.\n *\n * @param widgetIdOrElement\n *          a widget ID or a HTML or jQuery element\n * @param [partId]\n *          partId of the session the widget belongs to (optional, only relevant if the\n *          argument is a widget ID). If omitted, the first session is used.\n * @returns\n *          the widget for the given element or id\n */\nexport function widget(widgetIdOrElement, partId) {\n  if (objects.isNullOrUndefined(widgetIdOrElement)) {\n    return null;\n  }\n  var $elem = widgetIdOrElement;\n  if (typeof widgetIdOrElement === 'string' || typeof widgetIdOrElement === 'number') {\n    // Find widget for ID\n    var session = scout.getSession(partId);\n    if (session) {\n      widgetIdOrElement = strings.asString(widgetIdOrElement);\n      return session.root.widget(widgetIdOrElement);\n    }\n  }\n  return widgets.get($elem);\n}\n\n/**\n * Helper function to get the model adapter for a given adapterId. If there is more than one\n * session, e.g. in case of portlets, the second argument specifies the partId of the session\n * to be queried. If not specified explicitly, the first session is used. If the session or\n * the adapter could not be found, null is returned.\n */\nexport function adapter(adapterId, partId) {\n  if (objects.isNullOrUndefined(adapterId)) {\n    return null;\n  }\n  var session = scout.getSession(partId);\n  if (session && session.modelAdapterRegistry) {\n    return session.modelAdapterRegistry[adapterId];\n  }\n  return null;\n}\n\nexport function getSession(partId) {\n  let sessions = App.get().sessions;\n  if (!sessions) {\n    return null;\n  }\n  if (objects.isNullOrUndefined(partId)) {\n    return sessions[0];\n  }\n  for (var i = 0; i < sessions.length; i++) {\n    var session = sessions[i];\n    // noinspection EqualityComparisonWithCoercionJS\n    // eslint-disable-next-line eqeqeq\n    if (session.partId == partId) { // <-- compare with '==' is intentional! (NOSONAR)\n      return session;\n    }\n  }\n  return null;\n}\n\n/**\n * This method exports the adapter with the given ID as JSON, it returns an plain object containing the\n * configuration of the adapter. You can transform that object into JSON by calling <code>JSON.stringify</code>.\n * This method can only be called through the browser JavaScript console.\n * Here's an example of how to call the method:\n *\n * JSON.stringify(scout.exportAdapter(4))\n *\n * @param adapterId\n */\nexport function exportAdapter(adapterId, partId) {\n  var session = scout.getSession(partId);\n  if (session && session.modelAdapterRegistry) {\n    var adapter = session.getModelAdapter(adapterId);\n    if (!adapter) {\n      return null;\n    }\n    var adapterData = cloneAdapterData(adapterId);\n    resolveAdapterReferences(adapter, adapterData);\n    adapterData.type = 'model'; // property 'type' is required for models.js\n    return adapterData;\n  }\n\n  // ----- Helper functions -----\n\n  function cloneAdapterData(adapterId) {\n    var adapterData = session.getAdapterData(adapterId);\n    adapterData = $.extend(true, {}, adapterData);\n    return adapterData;\n  }\n\n  function resolveAdapterReferences(adapter, adapterData) {\n    var tmpAdapter, tmpAdapterData;\n    adapter.widget._widgetProperties.forEach(function(WidgetPropertyName) {\n      var WidgetPropertyValue = adapterData[WidgetPropertyName];\n      if (!WidgetPropertyValue) {\n        return; // nothing to do when property is null\n      }\n      if (Array.isArray(WidgetPropertyValue)) {\n        // value is an array of adapter IDs\n        var adapterDataArray = [];\n        WidgetPropertyValue.forEach(function(adapterId) {\n          tmpAdapter = session.getModelAdapter(adapterId);\n          tmpAdapterData = cloneAdapterData(adapterId);\n          resolveAdapterReferences(tmpAdapter, tmpAdapterData);\n          adapterDataArray.push(tmpAdapterData);\n        });\n        adapterData[WidgetPropertyName] = adapterDataArray;\n      } else {\n        // value is an adapter ID\n        tmpAdapter = session.getModelAdapter(WidgetPropertyValue);\n        tmpAdapterData = cloneAdapterData(WidgetPropertyValue);\n        resolveAdapterReferences(tmpAdapter, tmpAdapterData);\n        adapterData[WidgetPropertyName] = tmpAdapterData;\n      }\n    });\n    adapterData = adapter.exportAdapterData(adapterData);\n  }\n}\n\n/**\n * Reloads the entire browser window.\n *\n * Options:\n *   [schedule]\n *     If true, the page reload is not executed in the current thread but scheduled using setTimeout().\n *     This is useful if the caller wants to execute some other code before the reload. The default is false.\n *   [clearBody]\n *     If true, the body is cleared first before the reload is performed. This is useful to prevent\n *     showing \"old\" content in the browser until the new content arrives. The default is true.\n *   [redirectUrl]\n *      The new URL to load. If not specified, the current location is used (window.location).\n */\nexport function reloadPage(options) {\n  options = options || {};\n  if (options.schedule) {\n    setTimeout(reloadPageImpl);\n  } else {\n    reloadPageImpl();\n  }\n\n  // ----- Helper functions -----\n\n  function reloadPageImpl() {\n    // Hide everything (on entire page, not only $entryPoint)\n    if (nvl(options.clearBody, true)) {\n      $('body').html('');\n    }\n\n    // Reload window (using setTimeout, to overcome drawing issues in IE)\n    setTimeout(function() {\n      if (options.redirectUrl) {\n        window.location.href = options.redirectUrl;\n      } else {\n        window.location.reload();\n      }\n    });\n  }\n}\n\nexport function addObjectFactories(factories) {\n  objectFactories = $.extend(objectFactories, factories);\n}\n\nexport function cloneShallow(template, properties, createUniqueId) {\n  assertParameter('template', template);\n  var clone = Object.create(Object.getPrototypeOf(template));\n  Object.getOwnPropertyNames(template)\n    .forEach(key => {\n      clone[key] = template[key];\n    });\n  if (properties) {\n    for (let key in properties) {\n      clone[key] = properties[key];\n    }\n  }\n  if (nvl(createUniqueId, true)) {\n    clone.id = ObjectFactory.get().createUniqueId();\n  }\n  if (clone.cloneOf === undefined) {\n    clone.cloneOf = template;\n  }\n  return clone;\n}\n\nexport default {\n  nvl,\n  assertParameter,\n  assertProperty,\n  isOneOf,\n  create,\n  prepareDOM,\n  installGlobalMouseDownInterceptor,\n  installSyntheticActiveStateHandler,\n  widget,\n  adapter,\n  getSession,\n  exportAdapter,\n  reloadPage,\n  addObjectFactories,\n  objectFactories,\n  cloneShallow\n};\n"]},"metadata":{},"sourceType":"module"}