{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { defaultValues, icons, objects, scout, styles, texts, Tree } from '../index';\nimport $ from 'jquery';\n/**\n * @class\n */\n\nvar TreeNode = /*#__PURE__*/function () {\n  function TreeNode() {\n    _classCallCheck(this, TreeNode);\n\n    this.$node = null;\n    this.$text = null;\n    this.attached = false;\n    this.checked = false;\n    this.childNodes = [];\n    this.childrenLoaded = false;\n    this.childrenChecked = false;\n    this.cssClass = null;\n    this.destroyed = false;\n    this.enabled = true;\n    this.expanded = false;\n    this.expandedLazy = false;\n    this.filterAccepted = true;\n    this.filterDirty = false;\n    this.htmlEnabled = false;\n    this.iconId = null;\n    this.id = null;\n    this.initialized = false;\n    this.initialExpanded = false;\n    this.lazyExpandingEnabled = false;\n    this.leaf = false;\n    this.level = 0;\n    this.parent = null;\n    this.parentNode = undefined;\n    this.prevSelectionAnimationDone = false;\n    this.rendered = false;\n    this.session = null;\n    this.text = null;\n    /**\n     * This internal variable stores the promise which is used when a loadChildren() operation is in progress.\n     */\n\n    this._loadChildrenPromise = false;\n  }\n\n  _createClass(TreeNode, [{\n    key: \"init\",\n    value: function init(model) {\n      var staticModel = this._jsonModel();\n\n      if (staticModel) {\n        model = $.extend({}, staticModel, model);\n      }\n\n      this._init(model);\n\n      if (model.initialExpanded === undefined) {\n        this.initialExpanded = this.expanded;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.destroyed) {\n        // Already destroyed, do nothing\n        return;\n      }\n\n      this._destroy();\n\n      this.destroyed = true;\n    }\n    /**\n     * Override this method to do something when TreeNode gets destroyed. The default impl. does nothing.\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {// NOP\n    }\n  }, {\n    key: \"getTree\",\n    value: function getTree() {\n      return this.parent;\n    }\n  }, {\n    key: \"_init\",\n    value: function _init(model) {\n      scout.assertParameter('parent', model.parent, Tree);\n      this.session = model.session || model.parent.session;\n      $.extend(this, model);\n      defaultValues.applyTo(this);\n      texts.resolveTextProperty(this, 'text');\n      icons.resolveIconProperty(this, 'iconId'); // make sure all child nodes are TreeNodes too\n\n      if (this.hasChildNodes()) {\n        this.getTree()._ensureTreeNodes(this.childNodes);\n      }\n    }\n  }, {\n    key: \"_jsonModel\",\n    value: function _jsonModel() {}\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.$node) {\n        this.$node.remove();\n        this.$node = null;\n      }\n\n      this.rendered = false;\n      this.attached = false;\n    }\n  }, {\n    key: \"hasChildNodes\",\n    value: function hasChildNodes() {\n      return this.childNodes.length > 0;\n    }\n    /**\n     * @returns {boolean} true, if the node is an ancestor of the given node\n     */\n\n  }, {\n    key: \"isAncestorOf\",\n    value: function isAncestorOf(node) {\n      while (node) {\n        if (node.parentNode === this) {\n          return true;\n        }\n\n        node = node.parentNode;\n      }\n\n      return false;\n    }\n    /**\n     * @returns {boolean} true, if the node is a descendant of the given node\n     */\n\n  }, {\n    key: \"isDescendantOf\",\n    value: function isDescendantOf(node) {\n      if (node === this.parentNode) {\n        return true;\n      }\n\n      if (!this.parentNode) {\n        return false;\n      } // noinspection JSDeprecatedSymbols\n\n\n      return this.parentNode.isDescendantOf(node);\n    }\n    /**\n     * @deprecated use isDescendantOf instead\n     */\n\n  }, {\n    key: \"isChildOf\",\n    value: function isChildOf(node) {\n      return this.isDescendantOf(node);\n    }\n  }, {\n    key: \"isFilterAccepted\",\n    value: function isFilterAccepted(forceFilter) {\n      if (this.filterDirty || forceFilter) {\n        this.getTree()._applyFiltersForNode(this);\n      }\n\n      return this.filterAccepted;\n    }\n    /**\n     * This method loads the child nodes of this node and returns a jQuery.Deferred to register callbacks\n     * when loading is done or has failed. This method should only be called when childrenLoaded is false.\n     *\n     * @return {$.Deferred} or null when TreeNode cannot load children (which is the case for all\n     *     TreeNodes in the remote case). The default impl. return null.\n     */\n\n  }, {\n    key: \"loadChildren\",\n    value: function loadChildren() {\n      return $.resolvedDeferred();\n    }\n    /**\n     * This method calls loadChildren() but does nothing when children are already loaded or when loadChildren()\n     * is already in progress.\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"ensureLoadChildren\",\n    value: function ensureLoadChildren() {\n      // when children are already loaded we return an already resolved promise so the caller can continue immediately\n      if (this.childrenLoaded) {\n        return $.resolvedPromise();\n      } // when load children is already in progress, we return the same promise\n\n\n      if (this._loadChildrenPromise) {\n        return this._loadChildrenPromise;\n      }\n\n      var deferred = this.loadChildren();\n      var promise = deferred.promise(); // check if we can get rid of this state-check in a future release\n\n      if (deferred.state() === 'resolved') {\n        this._loadChildrenPromise = null;\n        return promise;\n      }\n\n      this._loadChildrenPromise = promise;\n      promise.done(this._onLoadChildrenDone.bind(this));\n      return promise; // we must always return a promise, never null - otherwise caller would throw an error\n    }\n  }, {\n    key: \"_onLoadChildrenDone\",\n    value: function _onLoadChildrenDone() {\n      this._loadChildrenPromise = null;\n    }\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      this.text = text;\n    }\n    /**\n     * This functions renders sets the $node and $text properties.\n     *\n     * @param {jQuery} $parent the tree DOM\n     * @param {number} paddingLeft calculated by tree\n     */\n\n  }, {\n    key: \"render\",\n    value: function render($parent, paddingLeft) {\n      this.$node = $parent.makeDiv('tree-node').data('node', this).attr('data-nodeid', this.id).attr('data-level', this.level);\n\n      if (!objects.isNullOrUndefined(paddingLeft)) {\n        this.$node.css('padding-left', paddingLeft);\n      }\n\n      this.$text = this.$node.appendSpan('text');\n\n      this._renderControl();\n\n      if (this.getTree().checkable) {\n        this._renderCheckbox();\n      }\n\n      this._renderText();\n\n      this._renderIcon();\n    }\n  }, {\n    key: \"_renderText\",\n    value: function _renderText() {\n      if (this.htmlEnabled) {\n        this.$text.html(this.text);\n      } else {\n        this.$text.textOrNbsp(this.text);\n      }\n    }\n  }, {\n    key: \"_renderChecked\",\n    value: function _renderChecked() {\n      // if node is not rendered, do nothing\n      if (!this.rendered) {\n        return;\n      }\n\n      this.$node.children('.tree-node-checkbox').children('.check-box').toggleClass('checked', this.checked);\n    }\n  }, {\n    key: \"_renderIcon\",\n    value: function _renderIcon() {\n      this.$node.icon(this.iconId, function ($icon) {\n        $icon.insertBefore(this.$text);\n      }.bind(this));\n    }\n  }, {\n    key: \"$icon\",\n    value: function $icon() {\n      return this.$node.children('.icon');\n    }\n  }, {\n    key: \"_renderControl\",\n    value: function _renderControl() {\n      var $control = this.$node.prependDiv('tree-node-control');\n\n      this._updateControl($control, this.getTree());\n    }\n  }, {\n    key: \"_updateControl\",\n    value: function _updateControl($control, tree) {\n      $control.toggleClass('checkable', tree.checkable);\n      $control.cssPaddingLeft(tree.nodeControlPaddingLeft + this.level * tree.nodePaddingLevel);\n      $control.setVisible(!this.leaf);\n    }\n  }, {\n    key: \"_renderCheckbox\",\n    value: function _renderCheckbox() {\n      var $checkboxContainer = this.$node.prependDiv('tree-node-checkbox');\n      var $checkbox = $checkboxContainer.appendDiv('check-box').toggleClass('checked', this.checked).toggleClass('disabled', !(this.getTree().enabled && this.enabled));\n      $checkbox.toggleClass('children-checked', !!this.childrenChecked);\n    }\n  }, {\n    key: \"_decorate\",\n    value: function _decorate() {\n      // This node is not yet rendered, nothing to do\n      if (!this.$node) {\n        return;\n      }\n\n      var $node = this.$node,\n          tree = this.getTree();\n      $node.attr('class', this._preserveCssClasses($node));\n      $node.addClass(this.cssClass);\n      $node.toggleClass('leaf', !!this.leaf);\n      $node.toggleClass('expanded', !!this.expanded && this.childNodes.length > 0);\n      $node.toggleClass('lazy', $node.hasClass('expanded') && this.expandedLazy);\n      $node.toggleClass('group', !!tree.groupedNodes[this.id]);\n      $node.setEnabled(!!this.enabled);\n      $node.children('.tree-node-control').setVisible(!this.leaf);\n      $node.children('.tree-node-checkbox').children('.check-box').toggleClass('disabled', !(tree.enabled && this.enabled));\n\n      if (!this.parentNode && tree.selectedNodes.length === 0 || // root nodes have class child-of-selected if no node is selected\n      tree._isChildOfSelectedNodes(this)) {\n        $node.addClass('child-of-selected');\n      }\n\n      this._renderText();\n\n      this._renderIcon();\n\n      styles.legacyStyle(this._getStyles(), $node); // If parent node is marked as 'lazy', check if any visible child nodes remain.\n\n      if (this.parentNode && this.parentNode.expandedLazy) {\n        var hasVisibleNodes = this.parentNode.childNodes.some(function (childNode) {\n          return !!tree.visibleNodesMap[childNode.id];\n        });\n\n        if (!hasVisibleNodes && this.parentNode.$node) {\n          // Remove 'lazy' from parent\n          this.parentNode.$node.removeClass('lazy');\n        }\n      }\n    }\n    /**\n     * @return {object} The object that has the properties used for styles (colors, fonts, etc.)\n     *     The default impl. returns \"this\". Override this function to return another object.\n     */\n\n  }, {\n    key: \"_getStyles\",\n    value: function _getStyles() {\n      return this;\n    }\n    /**\n     * This function extracts all CSS classes that are set externally by the tree.\n     * The classes depend on the tree hierarchy or the selection and thus cannot determined\n     * by the node itself.\n     */\n\n  }, {\n    key: \"_preserveCssClasses\",\n    value: function _preserveCssClasses($node) {\n      var cssClass = 'tree-node';\n\n      if ($node.isSelected()) {\n        cssClass += ' selected';\n      }\n\n      if ($node.hasClass('ancestor-of-selected')) {\n        cssClass += ' ancestor-of-selected';\n      }\n\n      if ($node.hasClass('parent-of-selected')) {\n        cssClass += ' parent-of-selected';\n      }\n\n      return cssClass;\n    }\n  }, {\n    key: \"_updateIconWidth\",\n    value: function _updateIconWidth() {\n      var cssWidth = '';\n\n      if (this.iconId) {\n        // always add 1 pixel to the result of outer-width to prevent rendering errors in IE, where\n        // the complete text is replaced by an ellipsis, when the .text element is a bit too large\n        cssWidth = 'calc(100% - ' + (this.$icon().outerWidth() + 1) + 'px)';\n      }\n\n      this.$text.css('max-width', cssWidth);\n    }\n  }]);\n\n  return TreeNode;\n}();\n\nexport { TreeNode as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/tree/TreeNode.js"],"names":["defaultValues","icons","objects","scout","styles","texts","Tree","$","TreeNode","$node","$text","attached","checked","childNodes","childrenLoaded","childrenChecked","cssClass","destroyed","enabled","expanded","expandedLazy","filterAccepted","filterDirty","htmlEnabled","iconId","id","initialized","initialExpanded","lazyExpandingEnabled","leaf","level","parent","parentNode","undefined","prevSelectionAnimationDone","rendered","session","text","_loadChildrenPromise","model","staticModel","_jsonModel","extend","_init","_destroy","assertParameter","applyTo","resolveTextProperty","resolveIconProperty","hasChildNodes","getTree","_ensureTreeNodes","remove","length","node","isDescendantOf","forceFilter","_applyFiltersForNode","resolvedDeferred","resolvedPromise","deferred","loadChildren","promise","state","done","_onLoadChildrenDone","bind","$parent","paddingLeft","makeDiv","data","attr","isNullOrUndefined","css","appendSpan","_renderControl","checkable","_renderCheckbox","_renderText","_renderIcon","html","textOrNbsp","children","toggleClass","icon","$icon","insertBefore","$control","prependDiv","_updateControl","tree","cssPaddingLeft","nodeControlPaddingLeft","nodePaddingLevel","setVisible","$checkboxContainer","$checkbox","appendDiv","_preserveCssClasses","addClass","hasClass","groupedNodes","setEnabled","selectedNodes","_isChildOfSelectedNodes","legacyStyle","_getStyles","hasVisibleNodes","some","childNode","visibleNodesMap","removeClass","isSelected","cssWidth","outerWidth"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {defaultValues, icons, objects, scout, styles, texts, Tree} from '../index';\nimport $ from 'jquery';\n\n/**\n * @class\n */\nexport default class TreeNode {\n\n  constructor() {\n    this.$node = null;\n    this.$text = null;\n    this.attached = false;\n    this.checked = false;\n    this.childNodes = [];\n    this.childrenLoaded = false;\n    this.childrenChecked = false;\n    this.cssClass = null;\n    this.destroyed = false;\n    this.enabled = true;\n    this.expanded = false;\n    this.expandedLazy = false;\n    this.filterAccepted = true;\n    this.filterDirty = false;\n    this.htmlEnabled = false;\n    this.iconId = null;\n    this.id = null;\n    this.initialized = false;\n    this.initialExpanded = false;\n    this.lazyExpandingEnabled = false;\n    this.leaf = false;\n    this.level = 0;\n    this.parent = null;\n    this.parentNode = undefined;\n    this.prevSelectionAnimationDone = false;\n    this.rendered = false;\n    this.session = null;\n    this.text = null;\n\n    /**\n     * This internal variable stores the promise which is used when a loadChildren() operation is in progress.\n     */\n    this._loadChildrenPromise = false;\n  }\n\n  init(model) {\n    var staticModel = this._jsonModel();\n    if (staticModel) {\n      model = $.extend({}, staticModel, model);\n    }\n    this._init(model);\n    if (model.initialExpanded === undefined) {\n      this.initialExpanded = this.expanded;\n    }\n  }\n\n  destroy() {\n    if (this.destroyed) {\n      // Already destroyed, do nothing\n      return;\n    }\n    this._destroy();\n    this.destroyed = true;\n  }\n\n  /**\n   * Override this method to do something when TreeNode gets destroyed. The default impl. does nothing.\n   */\n  _destroy() {\n    // NOP\n  }\n\n  getTree() {\n    return this.parent;\n  }\n\n  _init(model) {\n    scout.assertParameter('parent', model.parent, Tree);\n    this.session = model.session || model.parent.session;\n\n    $.extend(this, model);\n    defaultValues.applyTo(this);\n\n    texts.resolveTextProperty(this, 'text');\n    icons.resolveIconProperty(this, 'iconId');\n\n    // make sure all child nodes are TreeNodes too\n    if (this.hasChildNodes()) {\n      this.getTree()._ensureTreeNodes(this.childNodes);\n    }\n  }\n\n  _jsonModel() {\n  }\n\n  reset() {\n    if (this.$node) {\n      this.$node.remove();\n      this.$node = null;\n    }\n    this.rendered = false;\n    this.attached = false;\n  }\n\n  hasChildNodes() {\n    return this.childNodes.length > 0;\n  }\n\n  /**\n   * @returns {boolean} true, if the node is an ancestor of the given node\n   */\n  isAncestorOf(node) {\n    while (node) {\n      if (node.parentNode === this) {\n        return true;\n      }\n      node = node.parentNode;\n    }\n    return false;\n  }\n\n  /**\n   * @returns {boolean} true, if the node is a descendant of the given node\n   */\n  isDescendantOf(node) {\n    if (node === this.parentNode) {\n      return true;\n    }\n    if (!this.parentNode) {\n      return false;\n    }\n    // noinspection JSDeprecatedSymbols\n    return this.parentNode.isDescendantOf(node);\n  }\n\n  /**\n   * @deprecated use isDescendantOf instead\n   */\n  isChildOf(node) {\n    return this.isDescendantOf(node);\n  }\n\n  isFilterAccepted(forceFilter) {\n    if (this.filterDirty || forceFilter) {\n      this.getTree()._applyFiltersForNode(this);\n    }\n    return this.filterAccepted;\n  }\n\n  /**\n   * This method loads the child nodes of this node and returns a jQuery.Deferred to register callbacks\n   * when loading is done or has failed. This method should only be called when childrenLoaded is false.\n   *\n   * @return {$.Deferred} or null when TreeNode cannot load children (which is the case for all\n   *     TreeNodes in the remote case). The default impl. return null.\n   */\n  loadChildren() {\n    return $.resolvedDeferred();\n  }\n\n  /**\n   * This method calls loadChildren() but does nothing when children are already loaded or when loadChildren()\n   * is already in progress.\n   * @returns {Promise}\n   */\n  ensureLoadChildren() {\n    // when children are already loaded we return an already resolved promise so the caller can continue immediately\n    if (this.childrenLoaded) {\n      return $.resolvedPromise();\n    }\n    // when load children is already in progress, we return the same promise\n    if (this._loadChildrenPromise) {\n      return this._loadChildrenPromise;\n    }\n    var deferred = this.loadChildren();\n    var promise = deferred.promise();\n    // check if we can get rid of this state-check in a future release\n    if (deferred.state() === 'resolved') {\n      this._loadChildrenPromise = null;\n      return promise;\n    }\n\n    this._loadChildrenPromise = promise;\n    promise.done(this._onLoadChildrenDone.bind(this));\n    return promise; // we must always return a promise, never null - otherwise caller would throw an error\n  }\n\n  _onLoadChildrenDone() {\n    this._loadChildrenPromise = null;\n  }\n\n  setText(text) {\n    this.text = text;\n  }\n\n  /**\n   * This functions renders sets the $node and $text properties.\n   *\n   * @param {jQuery} $parent the tree DOM\n   * @param {number} paddingLeft calculated by tree\n   */\n  render($parent, paddingLeft) {\n    this.$node = $parent.makeDiv('tree-node')\n      .data('node', this)\n      .attr('data-nodeid', this.id)\n      .attr('data-level', this.level);\n    if (!objects.isNullOrUndefined(paddingLeft)) {\n      this.$node.css('padding-left', paddingLeft);\n    }\n    this.$text = this.$node.appendSpan('text');\n\n    this._renderControl();\n    if (this.getTree().checkable) {\n      this._renderCheckbox();\n    }\n    this._renderText();\n    this._renderIcon();\n  }\n\n  _renderText() {\n    if (this.htmlEnabled) {\n      this.$text.html(this.text);\n    } else {\n      this.$text.textOrNbsp(this.text);\n    }\n  }\n\n  _renderChecked() {\n    // if node is not rendered, do nothing\n    if (!this.rendered) {\n      return;\n    }\n\n    this.$node\n      .children('.tree-node-checkbox')\n      .children('.check-box')\n      .toggleClass('checked', this.checked);\n  }\n\n  _renderIcon() {\n    this.$node.icon(this.iconId, function($icon) {\n      $icon.insertBefore(this.$text);\n    }.bind(this));\n  }\n\n  $icon() {\n    return this.$node.children('.icon');\n  }\n\n  _renderControl() {\n    var $control = this.$node.prependDiv('tree-node-control');\n    this._updateControl($control, this.getTree());\n  }\n\n  _updateControl($control, tree) {\n    $control.toggleClass('checkable', tree.checkable);\n    $control.cssPaddingLeft(tree.nodeControlPaddingLeft + this.level * tree.nodePaddingLevel);\n    $control.setVisible(!this.leaf);\n  }\n\n  _renderCheckbox() {\n    var $checkboxContainer = this.$node.prependDiv('tree-node-checkbox');\n    var $checkbox = $checkboxContainer\n      .appendDiv('check-box')\n      .toggleClass('checked', this.checked)\n      .toggleClass('disabled', !(this.getTree().enabled && this.enabled));\n    $checkbox.toggleClass('children-checked', !!this.childrenChecked);\n  }\n\n  _decorate() {\n    // This node is not yet rendered, nothing to do\n    if (!this.$node) {\n      return;\n    }\n\n    var $node = this.$node,\n      tree = this.getTree();\n\n    $node.attr('class', this._preserveCssClasses($node));\n    $node.addClass(this.cssClass);\n    $node.toggleClass('leaf', !!this.leaf);\n    $node.toggleClass('expanded', (!!this.expanded && this.childNodes.length > 0));\n    $node.toggleClass('lazy', $node.hasClass('expanded') && this.expandedLazy);\n    $node.toggleClass('group', !!tree.groupedNodes[this.id]);\n    $node.setEnabled(!!this.enabled);\n    $node.children('.tree-node-control').setVisible(!this.leaf);\n    $node\n      .children('.tree-node-checkbox')\n      .children('.check-box')\n      .toggleClass('disabled', !(tree.enabled && this.enabled));\n\n    if (!this.parentNode && tree.selectedNodes.length === 0 || // root nodes have class child-of-selected if no node is selected\n      tree._isChildOfSelectedNodes(this)) {\n      $node.addClass('child-of-selected');\n    }\n\n    this._renderText();\n    this._renderIcon();\n    styles.legacyStyle(this._getStyles(), $node);\n\n    // If parent node is marked as 'lazy', check if any visible child nodes remain.\n    if (this.parentNode && this.parentNode.expandedLazy) {\n      var hasVisibleNodes = this.parentNode.childNodes.some(function(childNode) {\n        return !!tree.visibleNodesMap[childNode.id];\n      });\n      if (!hasVisibleNodes && this.parentNode.$node) {\n        // Remove 'lazy' from parent\n        this.parentNode.$node.removeClass('lazy');\n      }\n    }\n  }\n\n  /**\n   * @return {object} The object that has the properties used for styles (colors, fonts, etc.)\n   *     The default impl. returns \"this\". Override this function to return another object.\n   */\n  _getStyles() {\n    return this;\n  }\n\n  /**\n   * This function extracts all CSS classes that are set externally by the tree.\n   * The classes depend on the tree hierarchy or the selection and thus cannot determined\n   * by the node itself.\n   */\n  _preserveCssClasses($node) {\n    var cssClass = 'tree-node';\n    if ($node.isSelected()) {\n      cssClass += ' selected';\n    }\n    if ($node.hasClass('ancestor-of-selected')) {\n      cssClass += ' ancestor-of-selected';\n    }\n    if ($node.hasClass('parent-of-selected')) {\n      cssClass += ' parent-of-selected';\n    }\n    return cssClass;\n  }\n\n  _updateIconWidth() {\n    var cssWidth = '';\n    if (this.iconId) {\n      // always add 1 pixel to the result of outer-width to prevent rendering errors in IE, where\n      // the complete text is replaced by an ellipsis, when the .text element is a bit too large\n      cssWidth = 'calc(100% - ' + (this.$icon().outerWidth() + 1) + 'px)';\n    }\n    this.$text.css('max-width', cssWidth);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}