{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { graphics, scout, strings } from '../index';\nimport $ from 'jquery';\n\nvar _deferred = $.Deferred();\n/**\n * Indicates whether all fonts have been loaded successfully. Check this variable before\n * waiting for the promise object returned by preloader().\n */\n\n\nvar loadingComplete = true;\n/**\n * Start preloading the specified fonts. If no fonts are specified, the list of fonts\n * to preload is automatically calculated from the available CSS \"@font-face\" definitions.\n * To disable preloading entirely, pass an empty array to this function.\n *\n * @param fonts (optional) array of fonts\n * @return promise that is resolved when all fonts are loaded\n */\n\nexport function bootstrap(fonts) {\n  fonts = fonts || autoDetectFonts();\n\n  if (fonts.length === 0) {\n    loadingComplete = true;\n    return $.resolvedPromise();\n  } // Start preloading\n\n\n  loadingComplete = false;\n  preload({\n    fonts: fonts,\n    onComplete: function onComplete(success, badFonts) {\n      if (!success && badFonts && badFonts.length) {\n        $.log.warn('Timeout ocurred while pre-loading the following fonts:\\n\\n- ' + badFonts.join('\\n- ') + '\\n\\n' + 'Rendering will now continue, but font measurements may be inaccurate. ' + 'To prevent unnecessary startup delays and layout problems, check the @font-face ' + 'definitions and the referenced \"src\" URLs or programmatically add additional font-specific ' + 'characters to TEST_STRING before calling app.init().');\n      }\n\n      loadingComplete = true;\n\n      _deferred.resolve();\n    }\n  });\n  return $.resolvedPromise();\n}\n/**\n * @return  a promise object that is notified when the font preloading was completed.\n *          Important: Before waiting for this promise, always check that value of\n *          loadingComplete first! Do not wait for the promise when loadingComplete\n *          is true, because the promise will never be resolved.\n */\n\nexport function preloader() {\n  return _deferred.promise();\n}\nvar TEST_FONTS = 'monospace';\n/**\n * Test string used for font measurements. Used to detect when a font is fully loaded\n * and available in the browser.\n *\n * Custom characters may be added to this test string if a font is not detected correctly\n * because it does not contain any of the default characters.\n *\n * U+E000 = Start of Unicode private use zone (e.g. scoutIcons)\n * U+F118 = Font Awesome: \"smile\"\n */\n\nvar TEST_STRING = \"ABC abc 123 .,_ LlIi1 oO0 !#@ \\uE000\\uE001\\uE002 \\uF118\";\n/**\n * Time in milliseconds to wait for the fonts to be loaded.\n */\n\nvar TEST_TIMEOUT = 12 * 1000; // 12 sec\n\n/**\n * Loads the specified fonts in a hidden div, forcing the browser to load them.\n *\n * Options:\n *   [fonts]\n *     A single string or object (or an array of them) specifying which fonts should\n *     be preloaded. A string is interpreted as font-family. If the style is relevant,\n *     too, an object with the properties 'family' and 'style' should be provided.\n *     Alternatively, the style can be specified in the string after the font name,\n *     separated by a pipe character ('|').\n *     The property 'testString' (or a third component in a '|' separated string) may\n *     be specified to set the characters to measure for this specific font (can be\n *     useful for icon fonts).\n *   [onComplete]\n *     Mandatory function to be called when all of the specified fonts have been\n *     loaded or if a timeout occurs. An argument 'success' is given to indicate\n *     whether loading was completed successfully or execution was interrupted by\n *     a timeout. If this option is omitted, the call to this method returns immediately.\n *   [timeout]\n *     Optional timeout in milliseconds. If fonts could not be loaded within this time,\n *     loading is stopped and the onComplete method is called with argument 'false'.\n *     Defaults to TEST_TIMEOUT.\n *   [testFonts]\n *     Optional. Test fonts (string separated by commas) to used as baseline when checking\n *     if the specified fonts have been loaded. Defaults to TEST_FONTS.\n *   [testString]\n *     Optional. The test string to use when checking if the specified fonts have been\n *     loaded. Should not be empty, because the empty string has always the width 0.\n *     The default is TEST_STRING. The test string may also be specified\n *     individually per font.\n *\n * Examples:\n *   preload({fonts: 'Sauna Pro'});\n *   preload({fonts: 'Sauna Pro|font-style:italic'});\n *   preload({fonts: 'Sauna Pro|font-style:italic|The quick brown fox jumps over the lazy dog'});\n *   preload({fonts: 'Sauna Pro | font-style: italic; font-weight: 700'});\n *   preload({fonts: 'Sauna Pro', onComplete: handleLoadFinished});\n *   preload({fonts: ['Sauna Pro', 'Dolly Pro']});\n *   preload({fonts: {family:'Sauna', style: 'font-style:italic; font-weight:700', testString: 'MyString012345'}, timeout: 999});\n *   preload({fonts: ['Fakir-Black', {family:'Fakir-Italic', style:'font-style:italic'}], timeout: 2500, onComplete: function() { setCookie('fakir','loaded') }});\n *\n * Inspired by Zenfonts (https://github.com/zengabor/zenfonts, public domain).\n */\n\nexport function preload(options) {\n  options = options || {};\n  var fonts = options.fonts || [];\n\n  if (!Array.isArray(fonts)) {\n    fonts = [fonts];\n  }\n\n  if (!options.onComplete) {\n    // preloading is not useful, because there is no callback on success\n    return;\n  } // Create a DIV for each font\n\n\n  var divs = [];\n  fonts.forEach(function (font) {\n    // Convert to object\n    if (typeof font === 'string') {\n      var fontParts = strings.splitMax(font, '|', 3).map(function (s) {\n        return s.trim();\n      });\n      font = {\n        family: fontParts[0],\n        style: fontParts[1],\n        testString: fontParts[2]\n      };\n    }\n\n    font.family = font.family || '';\n    font.style = font.style || '';\n    font.testString = font.testString || options.testString || TEST_STRING; // these fonts are compared to the custom fonts, strings separated by comma\n\n    var testFonts = font.testFonts || options.testFonts || TEST_FONTS; // Create DIV with default fonts\n    // (Because preloader functionality should not depend on a CSS style sheet we set the required properties programmatically.)\n\n    var $div = $('body').appendDiv('font-preloader').text(font.testString).css('display', 'block').css('visibility', 'hidden').css('position', 'absolute').css('top', 0).css('left', 0).css('width', 'auto').css('height', 'auto').css('margin', 0).css('padding', 0).css('white-space', 'nowrap').css('line-height', 'normal').css('font-variant', 'normal').css('font-size', '20em').css('font-family', testFonts); // Remember size, set new font, and then measure again\n\n    var originalSize = measureSize($div);\n    $div.data('original-size', originalSize);\n    $div.data('font-family', font.family);\n    $div.css('font-family', '\\'' + font.family + '\\',' + testFonts);\n\n    if (font.style) {\n      var style = ($div.attr('style') || '').trim();\n      var sep = (style.substr(-1) === ';' ? '' : ';') + (style ? ' ' : '');\n      $div.attr('style', style + sep + font.style);\n    }\n\n    if (measureSize($div) !== originalSize) {\n      // Font already loaded, nothing to do\n      $div.remove();\n    } else {\n      // Remember DIV\n      divs.push($div);\n    }\n  });\n\n  if (divs.length === 0) {\n    // No fonts need to be watched, everything is loaded already\n    complete(true);\n    return;\n  }\n\n  var onFinished = complete;\n  var timeout = scout.nvl(options.timeout, TEST_TIMEOUT);\n  var watchTimerId, timeoutTimerId;\n\n  if (timeout && timeout >= 0) {\n    // Add timeout\n    timeoutTimerId = setTimeout(function () {\n      clearTimeout(watchTimerId);\n      complete(false);\n    }, timeout);\n\n    onFinished = function onFinished() {\n      clearTimeout(timeoutTimerId);\n      complete(true);\n    };\n  } // Start watching (initially 50ms delay)\n\n\n  watchWidthChange(50, onFinished); // ----- Helper functions -----\n\n  function watchWidthChange(delay, onFinished) {\n    // Check each DIV\n    var i = divs.length;\n\n    while (i--) {\n      var $div = divs[i];\n\n      if (measureSize($div) !== $div.data('original-size')) {\n        divs.splice(i, 1);\n        $div.remove();\n      }\n    }\n\n    if (divs.length === 0) {\n      // All completed\n      onFinished(true);\n      return;\n    } // Watch again after a small delay\n\n\n    watchTimerId = setTimeout(function () {\n      // Slowly increase delay up to 1 second\n      if (delay < 1000) {\n        delay = delay * 1.2;\n      }\n\n      watchWidthChange(delay, onFinished);\n    }, delay);\n  }\n\n  function complete(success) {\n    options.onComplete(success, divs.map(function ($div) {\n      return $div.data('font-family');\n    }));\n  }\n}\nexport function measureSize($div) {\n  var size = graphics.size($div, {\n    exact: true\n  });\n  return size.width + 'x' + size.height;\n}\n/**\n * Reads all \"@font-face\" CSS rules from the current document and returns an array of\n * font definition objects, suitable for passing to the preload() function (see above).\n */\n\nexport function autoDetectFonts() {\n  var fonts = []; // Implementation note: \"styleSheets\" and \"cssRules\" are not arrays (they only look like arrays)\n\n  var styleSheets = document.styleSheets;\n\n  for (var i = 0; i < styleSheets.length; i++) {\n    var styleSheet = styleSheets[i];\n    var cssRules;\n\n    try {\n      cssRules = styleSheet.cssRules;\n    } catch (error) {\n      // In some browsers, access to style sheets of other origins is blocked:\n      // https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet#Notes\n      $.log.info('Skipped automatic font detection for style sheet ' + styleSheet.href + ' (access blocked by browser). Use the bootstrap argument \"fonts\" to manually list fonts to pre-load.');\n      continue;\n    }\n\n    for (var j = 0; j < styleSheet.cssRules.length; j++) {\n      var cssRule = styleSheet.cssRules[j];\n\n      if (cssRule.type === window.CSSRule.FONT_FACE_RULE) {\n        var style = cssRule.style;\n        var ff = style.getPropertyValue('font-family');\n        var fw = style.getPropertyValue('font-weight');\n        var fs = style.getPropertyValue('font-style');\n        var fv = style.getPropertyValue('font-variant');\n        var ft = style.getPropertyValue('font-stretch');\n\n        if (ff) {\n          ff = ff.replace(/^[\"']|[\"']$/g, ''); // Unquote strings, they will be quoted again automatically\n\n          var s = [];\n\n          if (fw && fw !== 'normal') {\n            s.push('font-weight:' + fw);\n          }\n\n          if (fs && fs !== 'normal') {\n            s.push('font-style:' + fs);\n          }\n\n          if (fv && fv !== 'normal') {\n            s.push('font-variant:' + fv);\n          }\n\n          if (ft && ft !== 'normal') {\n            s.push('font-stretch:' + ft);\n          }\n\n          var font = {\n            family: ff\n          };\n\n          if (s.length) {\n            font.style = s.join(';');\n          }\n\n          fonts.push(font);\n        }\n      }\n    }\n  }\n\n  return fonts;\n}\nexport default {\n  TEST_FONTS: TEST_FONTS,\n  TEST_STRING: TEST_STRING,\n  TEST_TIMEOUT: TEST_TIMEOUT,\n  autoDetectFonts: autoDetectFonts,\n  bootstrap: bootstrap,\n  loadingComplete: loadingComplete,\n  measureSize: measureSize,\n  preload: preload,\n  preloader: preloader\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/util/fonts.js"],"names":["graphics","scout","strings","$","_deferred","Deferred","loadingComplete","bootstrap","fonts","autoDetectFonts","length","resolvedPromise","preload","onComplete","success","badFonts","log","warn","join","resolve","preloader","promise","TEST_FONTS","TEST_STRING","TEST_TIMEOUT","options","Array","isArray","divs","forEach","font","fontParts","splitMax","map","s","trim","family","style","testString","testFonts","$div","appendDiv","text","css","originalSize","measureSize","data","attr","sep","substr","remove","push","complete","onFinished","timeout","nvl","watchTimerId","timeoutTimerId","setTimeout","clearTimeout","watchWidthChange","delay","i","splice","size","exact","width","height","styleSheets","document","styleSheet","cssRules","error","info","href","j","cssRule","type","window","CSSRule","FONT_FACE_RULE","ff","getPropertyValue","fw","fs","fv","ft","replace"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {graphics, scout, strings} from '../index';\nimport $ from 'jquery';\n\nlet _deferred = $.Deferred();\n\n/**\n * Indicates whether all fonts have been loaded successfully. Check this variable before\n * waiting for the promise object returned by preloader().\n */\nlet loadingComplete = true;\n\n/**\n * Start preloading the specified fonts. If no fonts are specified, the list of fonts\n * to preload is automatically calculated from the available CSS \"@font-face\" definitions.\n * To disable preloading entirely, pass an empty array to this function.\n *\n * @param fonts (optional) array of fonts\n * @return promise that is resolved when all fonts are loaded\n */\nexport function bootstrap(fonts) {\n  fonts = fonts || autoDetectFonts();\n\n  if (fonts.length === 0) {\n    loadingComplete = true;\n    return $.resolvedPromise();\n  }\n\n  // Start preloading\n  loadingComplete = false;\n  preload({\n    fonts: fonts,\n    onComplete: function(success, badFonts) {\n      if (!success && badFonts && badFonts.length) {\n        $.log.warn('Timeout ocurred while pre-loading the following fonts:\\n\\n- ' + badFonts.join('\\n- ') + '\\n\\n' +\n          'Rendering will now continue, but font measurements may be inaccurate. ' +\n          'To prevent unnecessary startup delays and layout problems, check the @font-face ' +\n          'definitions and the referenced \"src\" URLs or programmatically add additional font-specific ' +\n          'characters to TEST_STRING before calling app.init().');\n      }\n      loadingComplete = true;\n      _deferred.resolve();\n    }\n  });\n\n  return $.resolvedPromise();\n}\n\n/**\n * @return  a promise object that is notified when the font preloading was completed.\n *          Important: Before waiting for this promise, always check that value of\n *          loadingComplete first! Do not wait for the promise when loadingComplete\n *          is true, because the promise will never be resolved.\n */\nexport function preloader() {\n  return _deferred.promise();\n}\n\nconst TEST_FONTS = 'monospace';\n\n/**\n * Test string used for font measurements. Used to detect when a font is fully loaded\n * and available in the browser.\n *\n * Custom characters may be added to this test string if a font is not detected correctly\n * because it does not contain any of the default characters.\n *\n * U+E000 = Start of Unicode private use zone (e.g. scoutIcons)\n * U+F118 = Font Awesome: \"smile\"\n */\nconst TEST_STRING = 'ABC abc 123 .,_ LlIi1 oO0 !#@ \\uE000\\uE001\\uE002 \\uF118';\n\n/**\n * Time in milliseconds to wait for the fonts to be loaded.\n */\nconst TEST_TIMEOUT = 12 * 1000; // 12 sec\n\n/**\n * Loads the specified fonts in a hidden div, forcing the browser to load them.\n *\n * Options:\n *   [fonts]\n *     A single string or object (or an array of them) specifying which fonts should\n *     be preloaded. A string is interpreted as font-family. If the style is relevant,\n *     too, an object with the properties 'family' and 'style' should be provided.\n *     Alternatively, the style can be specified in the string after the font name,\n *     separated by a pipe character ('|').\n *     The property 'testString' (or a third component in a '|' separated string) may\n *     be specified to set the characters to measure for this specific font (can be\n *     useful for icon fonts).\n *   [onComplete]\n *     Mandatory function to be called when all of the specified fonts have been\n *     loaded or if a timeout occurs. An argument 'success' is given to indicate\n *     whether loading was completed successfully or execution was interrupted by\n *     a timeout. If this option is omitted, the call to this method returns immediately.\n *   [timeout]\n *     Optional timeout in milliseconds. If fonts could not be loaded within this time,\n *     loading is stopped and the onComplete method is called with argument 'false'.\n *     Defaults to TEST_TIMEOUT.\n *   [testFonts]\n *     Optional. Test fonts (string separated by commas) to used as baseline when checking\n *     if the specified fonts have been loaded. Defaults to TEST_FONTS.\n *   [testString]\n *     Optional. The test string to use when checking if the specified fonts have been\n *     loaded. Should not be empty, because the empty string has always the width 0.\n *     The default is TEST_STRING. The test string may also be specified\n *     individually per font.\n *\n * Examples:\n *   preload({fonts: 'Sauna Pro'});\n *   preload({fonts: 'Sauna Pro|font-style:italic'});\n *   preload({fonts: 'Sauna Pro|font-style:italic|The quick brown fox jumps over the lazy dog'});\n *   preload({fonts: 'Sauna Pro | font-style: italic; font-weight: 700'});\n *   preload({fonts: 'Sauna Pro', onComplete: handleLoadFinished});\n *   preload({fonts: ['Sauna Pro', 'Dolly Pro']});\n *   preload({fonts: {family:'Sauna', style: 'font-style:italic; font-weight:700', testString: 'MyString012345'}, timeout: 999});\n *   preload({fonts: ['Fakir-Black', {family:'Fakir-Italic', style:'font-style:italic'}], timeout: 2500, onComplete: function() { setCookie('fakir','loaded') }});\n *\n * Inspired by Zenfonts (https://github.com/zengabor/zenfonts, public domain).\n */\nexport function preload(options) {\n  options = options || {};\n  var fonts = options.fonts || [];\n  if (!Array.isArray(fonts)) {\n    fonts = [fonts];\n  }\n  if (!options.onComplete) {\n    // preloading is not useful, because there is no callback on success\n    return;\n  }\n\n  // Create a DIV for each font\n  var divs = [];\n  fonts.forEach(function(font) {\n    // Convert to object\n    if (typeof font === 'string') {\n      var fontParts = strings.splitMax(font, '|', 3).map(function(s) {\n        return s.trim();\n      });\n      font = {\n        family: fontParts[0],\n        style: fontParts[1],\n        testString: fontParts[2]\n      };\n    }\n    font.family = font.family || '';\n    font.style = font.style || '';\n    font.testString = font.testString || options.testString || TEST_STRING;\n\n    // these fonts are compared to the custom fonts, strings separated by comma\n    var testFonts = font.testFonts || options.testFonts || TEST_FONTS;\n\n    // Create DIV with default fonts\n    // (Because preloader functionality should not depend on a CSS style sheet we set the required properties programmatically.)\n    var $div = $('body').appendDiv('font-preloader')\n      .text(font.testString)\n      .css('display', 'block')\n      .css('visibility', 'hidden')\n      .css('position', 'absolute')\n      .css('top', 0)\n      .css('left', 0)\n      .css('width', 'auto')\n      .css('height', 'auto')\n      .css('margin', 0)\n      .css('padding', 0)\n      .css('white-space', 'nowrap')\n      .css('line-height', 'normal')\n      .css('font-variant', 'normal')\n      .css('font-size', '20em')\n      .css('font-family', testFonts);\n\n    // Remember size, set new font, and then measure again\n    var originalSize = measureSize($div);\n    $div.data('original-size', originalSize);\n    $div.data('font-family', font.family);\n    $div.css('font-family', '\\'' + font.family + '\\',' + testFonts);\n    if (font.style) {\n      var style = ($div.attr('style') || '').trim();\n      var sep = (style.substr(-1) === ';' ? '' : ';') + (style ? ' ' : '');\n      $div.attr('style', style + sep + font.style);\n    }\n\n    if (measureSize($div) !== originalSize) {\n      // Font already loaded, nothing to do\n      $div.remove();\n    } else {\n      // Remember DIV\n      divs.push($div);\n    }\n  });\n  if (divs.length === 0) {\n    // No fonts need to be watched, everything is loaded already\n    complete(true);\n    return;\n  }\n\n  var onFinished = complete;\n  var timeout = scout.nvl(options.timeout, TEST_TIMEOUT);\n  var watchTimerId, timeoutTimerId;\n  if (timeout && timeout >= 0) {\n    // Add timeout\n    timeoutTimerId = setTimeout(function() {\n      clearTimeout(watchTimerId);\n      complete(false);\n    }, timeout);\n    onFinished = function() {\n      clearTimeout(timeoutTimerId);\n      complete(true);\n    };\n  }\n\n  // Start watching (initially 50ms delay)\n  watchWidthChange(50, onFinished);\n\n  // ----- Helper functions -----\n\n  function watchWidthChange(delay, onFinished) {\n    // Check each DIV\n    var i = divs.length;\n    while (i--) {\n      var $div = divs[i];\n      if (measureSize($div) !== $div.data('original-size')) {\n        divs.splice(i, 1);\n        $div.remove();\n      }\n    }\n    if (divs.length === 0) {\n      // All completed\n      onFinished(true);\n      return;\n    }\n\n    // Watch again after a small delay\n    watchTimerId = setTimeout(function() {\n      // Slowly increase delay up to 1 second\n      if (delay < 1000) {\n        delay = delay * 1.2;\n      }\n      watchWidthChange(delay, onFinished);\n    }, delay);\n  }\n\n  function complete(success) {\n    options.onComplete(success, divs.map(function($div) {\n      return $div.data('font-family');\n    }));\n  }\n}\n\nexport function measureSize($div) {\n  var size = graphics.size($div, {\n    exact: true\n  });\n  return size.width + 'x' + size.height;\n}\n\n/**\n * Reads all \"@font-face\" CSS rules from the current document and returns an array of\n * font definition objects, suitable for passing to the preload() function (see above).\n */\nexport function autoDetectFonts() {\n  var fonts = [];\n  // Implementation note: \"styleSheets\" and \"cssRules\" are not arrays (they only look like arrays)\n  var styleSheets = document.styleSheets;\n  for (var i = 0; i < styleSheets.length; i++) {\n    var styleSheet = styleSheets[i];\n    var cssRules;\n    try {\n      cssRules = styleSheet.cssRules;\n    } catch (error) {\n      // In some browsers, access to style sheets of other origins is blocked:\n      // https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet#Notes\n      $.log.info('Skipped automatic font detection for style sheet ' + styleSheet.href +\n        ' (access blocked by browser). Use the bootstrap argument \"fonts\" to manually list fonts to pre-load.');\n      continue;\n    }\n    for (var j = 0; j < styleSheet.cssRules.length; j++) {\n      var cssRule = styleSheet.cssRules[j];\n      if (cssRule.type === window.CSSRule.FONT_FACE_RULE) {\n        var style = cssRule.style;\n        var ff = style.getPropertyValue('font-family');\n        var fw = style.getPropertyValue('font-weight');\n        var fs = style.getPropertyValue('font-style');\n        var fv = style.getPropertyValue('font-variant');\n        var ft = style.getPropertyValue('font-stretch');\n        if (ff) {\n          ff = ff.replace(/^[\"']|[\"']$/g, ''); // Unquote strings, they will be quoted again automatically\n          var s = [];\n          if (fw && fw !== 'normal') {\n            s.push('font-weight:' + fw);\n          }\n          if (fs && fs !== 'normal') {\n            s.push('font-style:' + fs);\n          }\n          if (fv && fv !== 'normal') {\n            s.push('font-variant:' + fv);\n          }\n          if (ft && ft !== 'normal') {\n            s.push('font-stretch:' + ft);\n          }\n          var font = {\n            family: ff\n          };\n          if (s.length) {\n            font.style = s.join(';');\n          }\n          fonts.push(font);\n        }\n      }\n    }\n  }\n  return fonts;\n}\n\nexport default {\n  TEST_FONTS,\n  TEST_STRING,\n  TEST_TIMEOUT,\n  autoDetectFonts,\n  bootstrap,\n  loadingComplete,\n  measureSize,\n  preload,\n  preloader\n};\n"]},"metadata":{},"sourceType":"module"}