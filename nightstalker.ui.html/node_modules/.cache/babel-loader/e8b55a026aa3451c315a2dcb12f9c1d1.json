{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects, strings } from '../index';\n/**\n * A NullLogger instance is installed when Log4Javascript is not active (the popup\n * is not opened). In that case we write WARN, ERROR and FATAL to the console output\n * because otherwise some errors are hard to track. This is true especially for errors\n * that occur in a Promise. A developer should at least log these errors.\n */\n\nvar NullLogger = /*#__PURE__*/function () {\n  function NullLogger() {\n    _classCallCheck(this, NullLogger);\n  }\n\n  _createClass(NullLogger, [{\n    key: \"trace\",\n    value: function trace() {// NOP - don't log trace, we don't want to spam the browser console\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {// NOP - don't log debug, we don't want to spam the browser console\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      this._log('info', objects.argumentsToArray(arguments));\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      this._log('warn', objects.argumentsToArray(arguments));\n    }\n  }, {\n    key: \"error\",\n    value: function error(logArgs) {\n      this._log('error', objects.argumentsToArray(arguments));\n    }\n  }, {\n    key: \"fatal\",\n    value: function fatal(logArgs) {\n      this._log('fatal', objects.argumentsToArray(arguments));\n    }\n  }, {\n    key: \"isEnabledFor\",\n    value: function isEnabledFor() {\n      return false;\n    }\n  }, {\n    key: \"isTraceEnabled\",\n    value: function isTraceEnabled() {\n      return false;\n    }\n  }, {\n    key: \"isDebugEnabled\",\n    value: function isDebugEnabled() {\n      return false;\n    }\n  }, {\n    key: \"isInfoEnabled\",\n    value: function isInfoEnabled() {\n      return false;\n    }\n  }, {\n    key: \"isWarnEnabled\",\n    value: function isWarnEnabled() {\n      return false;\n    }\n  }, {\n    key: \"isErrorEnabled\",\n    value: function isErrorEnabled() {\n      return false;\n    }\n  }, {\n    key: \"isFatalEnabled\",\n    value: function isFatalEnabled() {\n      return false;\n    }\n  }, {\n    key: \"_log\",\n    value: function _log(level, logArgs) {\n      // check if console is available\n      var myConsole = objects.optProperty(window, 'console');\n\n      if (!myConsole) {\n        return;\n      } // map level to log function\n\n\n      var funcName;\n\n      if ('fatal' === level) {\n        funcName = 'error';\n      } else {\n        funcName = level;\n      } // check if log function exists on console\n\n\n      var logFunc = myConsole[funcName];\n\n      if (!logFunc) {\n        return;\n      } // log the message\n\n\n      if (logArgs.length > 0) {\n        logArgs[0] = this._formatTime() + ' [' + level.toUpperCase() + '] ' + logArgs[0];\n      }\n\n      try {\n        logFunc.apply(myConsole, logArgs);\n      } catch (e) {// NOP - this seems a bit paranoid, because we've already checked that the error function exists,\n        // but some restrictive security settings in Internet Explorer may cause an Error when the function\n        // is called. Our logger should not produce additional errors #249626.\n      }\n    }\n  }, {\n    key: \"_formatTime\",\n    value: function _formatTime() {\n      var date = new Date();\n      return strings.padZeroLeft(date.getHours(), 2) + ':' + strings.padZeroLeft(date.getMinutes(), 2) + ':' + strings.padZeroLeft(date.getSeconds(), 2) + '.' + strings.padZeroLeft(date.getMilliseconds(), 3);\n    }\n  }]);\n\n  return NullLogger;\n}();\n\nexport { NullLogger as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/logging/NullLogger.js"],"names":["objects","strings","NullLogger","_log","argumentsToArray","arguments","logArgs","level","myConsole","optProperty","window","funcName","logFunc","length","_formatTime","toUpperCase","apply","e","date","Date","padZeroLeft","getHours","getMinutes","getSeconds","getMilliseconds"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,OAAR,EAAiBC,OAAjB,QAA+B,UAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;;IACqBC,U;AAEnB,wBAAc;AAAA;AACb;;;;4BAEO,CACN;AACD;;;4BAEO,CACN;AACD;;;2BAEM;AACL,WAAKC,IAAL,CAAU,MAAV,EAAkBH,OAAO,CAACI,gBAAR,CAAyBC,SAAzB,CAAlB;AACD;;;2BAEM;AACL,WAAKF,IAAL,CAAU,MAAV,EAAkBH,OAAO,CAACI,gBAAR,CAAyBC,SAAzB,CAAlB;AACD;;;0BAEKC,O,EAAS;AACb,WAAKH,IAAL,CAAU,OAAV,EAAmBH,OAAO,CAACI,gBAAR,CAAyBC,SAAzB,CAAnB;AACD;;;0BAEKC,O,EAAS;AACb,WAAKH,IAAL,CAAU,OAAV,EAAmBH,OAAO,CAACI,gBAAR,CAAyBC,SAAzB,CAAnB;AACD;;;mCAEc;AACb,aAAO,KAAP;AACD;;;qCAEgB;AACf,aAAO,KAAP;AACD;;;qCAEgB;AACf,aAAO,KAAP;AACD;;;oCAEe;AACd,aAAO,KAAP;AACD;;;oCAEe;AACd,aAAO,KAAP;AACD;;;qCAEgB;AACf,aAAO,KAAP;AACD;;;qCAEgB;AACf,aAAO,KAAP;AACD;;;yBAEIE,K,EAAOD,O,EAAS;AACnB;AACA,UAAIE,SAAS,GAAGR,OAAO,CAACS,WAAR,CAAoBC,MAApB,EAA4B,SAA5B,CAAhB;;AACA,UAAI,CAACF,SAAL,EAAgB;AACd;AACD,OALkB,CAOnB;;;AACA,UAAIG,QAAJ;;AACA,UAAI,YAAYJ,KAAhB,EAAuB;AACrBI,QAAAA,QAAQ,GAAG,OAAX;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ,GAAGJ,KAAX;AACD,OAbkB,CAenB;;;AACA,UAAIK,OAAO,GAAGJ,SAAS,CAACG,QAAD,CAAvB;;AACA,UAAI,CAACC,OAAL,EAAc;AACZ;AACD,OAnBkB,CAqBnB;;;AACA,UAAIN,OAAO,CAACO,MAAR,GAAiB,CAArB,EAAwB;AACtBP,QAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,KAAKQ,WAAL,KAAqB,IAArB,GAA4BP,KAAK,CAACQ,WAAN,EAA5B,GAAkD,IAAlD,GAAyDT,OAAO,CAAC,CAAD,CAA7E;AACD;;AACD,UAAI;AACFM,QAAAA,OAAO,CAACI,KAAR,CAAcR,SAAd,EAAyBF,OAAzB;AACD,OAFD,CAEE,OAAOW,CAAP,EAAU,CACV;AACA;AACA;AACD;AACF;;;kCAEa;AACZ,UAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACA,aAAOlB,OAAO,CAACmB,WAAR,CAAoBF,IAAI,CAACG,QAAL,EAApB,EAAqC,CAArC,IAA0C,GAA1C,GACLpB,OAAO,CAACmB,WAAR,CAAoBF,IAAI,CAACI,UAAL,EAApB,EAAuC,CAAvC,CADK,GACuC,GADvC,GAELrB,OAAO,CAACmB,WAAR,CAAoBF,IAAI,CAACK,UAAL,EAApB,EAAuC,CAAvC,CAFK,GAEuC,GAFvC,GAGLtB,OAAO,CAACmB,WAAR,CAAoBF,IAAI,CAACM,eAAL,EAApB,EAA4C,CAA5C,CAHF;AAID;;;;;;SAjGkBtB,U","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects, strings} from '../index';\n\n/**\n * A NullLogger instance is installed when Log4Javascript is not active (the popup\n * is not opened). In that case we write WARN, ERROR and FATAL to the console output\n * because otherwise some errors are hard to track. This is true especially for errors\n * that occur in a Promise. A developer should at least log these errors.\n */\nexport default class NullLogger {\n\n  constructor() {\n  }\n\n  trace() {\n    // NOP - don't log trace, we don't want to spam the browser console\n  }\n\n  debug() {\n    // NOP - don't log debug, we don't want to spam the browser console\n  }\n\n  info() {\n    this._log('info', objects.argumentsToArray(arguments));\n  }\n\n  warn() {\n    this._log('warn', objects.argumentsToArray(arguments));\n  }\n\n  error(logArgs) {\n    this._log('error', objects.argumentsToArray(arguments));\n  }\n\n  fatal(logArgs) {\n    this._log('fatal', objects.argumentsToArray(arguments));\n  }\n\n  isEnabledFor() {\n    return false;\n  }\n\n  isTraceEnabled() {\n    return false;\n  }\n\n  isDebugEnabled() {\n    return false;\n  }\n\n  isInfoEnabled() {\n    return false;\n  }\n\n  isWarnEnabled() {\n    return false;\n  }\n\n  isErrorEnabled() {\n    return false;\n  }\n\n  isFatalEnabled() {\n    return false;\n  }\n\n  _log(level, logArgs) {\n    // check if console is available\n    var myConsole = objects.optProperty(window, 'console');\n    if (!myConsole) {\n      return;\n    }\n\n    // map level to log function\n    var funcName;\n    if ('fatal' === level) {\n      funcName = 'error';\n    } else {\n      funcName = level;\n    }\n\n    // check if log function exists on console\n    var logFunc = myConsole[funcName];\n    if (!logFunc) {\n      return;\n    }\n\n    // log the message\n    if (logArgs.length > 0) {\n      logArgs[0] = this._formatTime() + ' [' + level.toUpperCase() + '] ' + logArgs[0];\n    }\n    try {\n      logFunc.apply(myConsole, logArgs);\n    } catch (e) {\n      // NOP - this seems a bit paranoid, because we've already checked that the error function exists,\n      // but some restrictive security settings in Internet Explorer may cause an Error when the function\n      // is called. Our logger should not produce additional errors #249626.\n    }\n  }\n\n  _formatTime() {\n    var date = new Date();\n    return strings.padZeroLeft(date.getHours(), 2) + ':' +\n      strings.padZeroLeft(date.getMinutes(), 2) + ':' +\n      strings.padZeroLeft(date.getSeconds(), 2) + '.' +\n      strings.padZeroLeft(date.getMilliseconds(), 3);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}