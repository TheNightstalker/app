{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { icons } from '../index';\n\nvar IconDesc = /*#__PURE__*/function () {\n  function IconDesc() {\n    _classCallCheck(this, IconDesc);\n\n    this.iconType;\n    this.font;\n    this.iconCharacter;\n    this.iconUrl;\n  }\n\n  _createClass(IconDesc, [{\n    key: \"cssClass\",\n\n    /**\n     * Returns a CSS class based on the used font-name.\n     */\n    value: function cssClass() {\n      if (this.isFontIcon() && this.font !== IconDesc.DEFAULT_FONT) {\n        return 'font-' + this.font;\n      }\n\n      return '';\n    }\n    /**\n     * Returns a CSS class string to be used with JQuery.add/removeClass().\n     */\n\n  }, {\n    key: \"appendCssClass\",\n    value: function appendCssClass(cssClass) {\n      var additionalCssClass = this.cssClass();\n\n      if (additionalCssClass.length > 0) {\n        return cssClass + ' ' + additionalCssClass;\n      }\n\n      return cssClass;\n    }\n  }, {\n    key: \"isFontIcon\",\n    value: function isFontIcon() {\n      return this.iconType === IconDesc.IconType.FONT_ICON;\n    }\n  }, {\n    key: \"isBitmap\",\n    value: function isBitmap() {\n      return this.iconType === IconDesc.IconType.BITMAP;\n    }\n    /**\n     * Ensures that the given icon is of type {@link scout.iconDesc}. It a string is provided it is assumed that the string is the iconId which may be parsed to create the {@link IconDesc}.\n     * @param {(string|IconDesc)} icon\n     */\n\n  }], [{\n    key: \"ensure\",\n    value: function ensure(icon) {\n      if (!icon) {\n        return icon;\n      }\n\n      if (icon instanceof IconDesc) {\n        return icon;\n      }\n\n      return icons.parseIconId(icon);\n    }\n  }]);\n\n  return IconDesc;\n}();\n\n_defineProperty(IconDesc, \"IconType\", {\n  FONT_ICON: 0,\n  BITMAP: 1\n});\n\n_defineProperty(IconDesc, \"DEFAULT_FONT\", 'scoutIcons');\n\nexport { IconDesc as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/image/IconDesc.js"],"names":["icons","IconDesc","iconType","font","iconCharacter","iconUrl","isFontIcon","DEFAULT_FONT","cssClass","additionalCssClass","length","IconType","FONT_ICON","BITMAP","icon","parseIconId"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,KAAR,QAAoB,UAApB;;IAEqBC,Q;AAEnB,sBAAc;AAAA;;AACZ,SAAKC,QAAL;AACA,SAAKC,IAAL;AACA,SAAKC,aAAL;AACA,SAAKC,OAAL;AACD;;;;;AASD;AACF;AACA;+BACa;AACT,UAAI,KAAKC,UAAL,MAAqB,KAAKH,IAAL,KAAcF,QAAQ,CAACM,YAAhD,EAA8D;AAC5D,eAAO,UAAU,KAAKJ,IAAtB;AACD;;AACD,aAAO,EAAP;AACD;AAED;AACF;AACA;;;;mCACiBK,Q,EAAU;AACvB,UAAIC,kBAAkB,GAAG,KAAKD,QAAL,EAAzB;;AACA,UAAIC,kBAAkB,CAACC,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,eAAOF,QAAQ,GAAG,GAAX,GAAiBC,kBAAxB;AACD;;AACD,aAAOD,QAAP;AACD;;;iCAEY;AACX,aAAO,KAAKN,QAAL,KAAkBD,QAAQ,CAACU,QAAT,CAAkBC,SAA3C;AACD;;;+BAEU;AACT,aAAO,KAAKV,QAAL,KAAkBD,QAAQ,CAACU,QAAT,CAAkBE,MAA3C;AACD;AAED;AACF;AACA;AACA;;;;2BACgBC,I,EAAM;AAClB,UAAI,CAACA,IAAL,EAAW;AACT,eAAOA,IAAP;AACD;;AACD,UAAIA,IAAI,YAAYb,QAApB,EAA8B;AAC5B,eAAOa,IAAP;AACD;;AACD,aAAOd,KAAK,CAACe,WAAN,CAAkBD,IAAlB,CAAP;AACD;;;;;;gBAzDkBb,Q,cASD;AAChBW,EAAAA,SAAS,EAAE,CADK;AAEhBC,EAAAA,MAAM,EAAE;AAFQ,C;;gBATCZ,Q,kBAcG,Y;;SAdHA,Q","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {icons} from '../index';\n\nexport default class IconDesc {\n\n  constructor() {\n    this.iconType;\n    this.font;\n    this.iconCharacter;\n    this.iconUrl;\n  }\n\n  static IconType = {\n    FONT_ICON: 0,\n    BITMAP: 1\n  };\n\n  static DEFAULT_FONT = 'scoutIcons';\n\n  /**\n   * Returns a CSS class based on the used font-name.\n   */\n  cssClass() {\n    if (this.isFontIcon() && this.font !== IconDesc.DEFAULT_FONT) {\n      return 'font-' + this.font;\n    }\n    return '';\n  }\n\n  /**\n   * Returns a CSS class string to be used with JQuery.add/removeClass().\n   */\n  appendCssClass(cssClass) {\n    var additionalCssClass = this.cssClass();\n    if (additionalCssClass.length > 0) {\n      return cssClass + ' ' + additionalCssClass;\n    }\n    return cssClass;\n  }\n\n  isFontIcon() {\n    return this.iconType === IconDesc.IconType.FONT_ICON;\n  }\n\n  isBitmap() {\n    return this.iconType === IconDesc.IconType.BITMAP;\n  }\n\n  /**\n   * Ensures that the given icon is of type {@link scout.iconDesc}. It a string is provided it is assumed that the string is the iconId which may be parsed to create the {@link IconDesc}.\n   * @param {(string|IconDesc)} icon\n   */\n  static ensure(icon) {\n    if (!icon) {\n      return icon;\n    }\n    if (icon instanceof IconDesc) {\n      return icon;\n    }\n    return icons.parseIconId(icon);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}