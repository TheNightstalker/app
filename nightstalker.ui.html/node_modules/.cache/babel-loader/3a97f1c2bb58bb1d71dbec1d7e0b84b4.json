{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Form, scout } from '../index';\n/**\n * Controller with functionality to register and render message boxes.\n *\n * The message boxes are put into the list 'messageBoxes' contained in 'displayParent'.\n */\n\nvar MessageBoxController = /*#__PURE__*/function () {\n  function MessageBoxController(displayParent, session) {\n    _classCallCheck(this, MessageBoxController);\n\n    this.displayParent = displayParent;\n    this.session = session;\n  }\n  /**\n   * Adds the given message box to this controller and renders it.\n   */\n\n\n  _createClass(MessageBoxController, [{\n    key: \"registerAndRender\",\n    value: function registerAndRender(messageBox) {\n      scout.assertProperty(messageBox, 'displayParent');\n      this.displayParent.messageBoxes.push(messageBox);\n\n      this._render(messageBox);\n    }\n    /**\n     * Removes the given message box from this controller and DOM. However, the message box's adapter is not destroyed. That only happens once the message box is closed.\n     */\n\n  }, {\n    key: \"unregisterAndRemove\",\n    value: function unregisterAndRemove(messageBox) {\n      if (messageBox) {\n        arrays.remove(this.displayParent.messageBoxes, messageBox);\n\n        this._remove(messageBox);\n      }\n    }\n    /**\n     * Removes all message boxes registered with this controller from DOM.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.displayParent.messageBoxes.forEach(this._remove.bind(this));\n    }\n    /**\n     * Renders all message boxes registered with this controller.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.displayParent.messageBoxes.forEach(function (msgBox) {\n        msgBox.setDisplayParent(this.displayParent);\n\n        this._render(msgBox);\n      }.bind(this));\n    }\n  }, {\n    key: \"_render\",\n    value: function _render(messageBox) {\n      // missing displayParent (when render is called by reload), use displayParent of MessageBoxController\n      if (!messageBox.displayParent) {\n        messageBox._setProperty('displayParent', this.displayParent);\n      } // Use parent's function or (if not implemented) our own.\n\n\n      if (this.displayParent.acceptView) {\n        if (!this.displayParent.acceptView(messageBox)) {\n          return;\n        }\n      } else if (!this.acceptView(messageBox)) {\n        return;\n      } // Prevent \"Already rendered\" errors --> TODO [7.0] bsh: Remove this hack! Fix it on model if possible. See #162954.\n\n\n      if (messageBox.rendered) {\n        return;\n      } // Open all message boxes in the center of the desktop, except message-boxes that belong to a popup-window\n      // Since the message box doesn't have a DOM element as parent when render is called, we must find the\n      // entryPoint by using the model.\n\n\n      var $mbParent;\n\n      if (this.displayParent instanceof Form && this.displayParent.isPopupWindow()) {\n        $mbParent = this.displayParent.popupWindow.$container;\n      } else {\n        $mbParent = this.session.desktop.$container;\n      } // start focus tracking if not already started.\n\n\n      messageBox.setTrackFocus(true);\n      messageBox.render($mbParent); // Only display the message box if its 'displayParent' is visible to the user.\n\n      if (!this.displayParent.inFront()) {\n        messageBox.detach();\n      }\n    }\n  }, {\n    key: \"_remove\",\n    value: function _remove(messageBox) {\n      messageBox.remove();\n    }\n    /**\n     * Attaches all message boxes to their original DOM parents.\n     * In contrast to 'render', this method uses 'JQuery detach mechanism' to retain CSS properties, so that the model must not be interpreted anew.\n     *\n     * This method has no effect if already attached.\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach() {\n      this.displayParent.messageBoxes.forEach(function (messageBox) {\n        messageBox.attach();\n      }, this);\n    }\n    /**\n     * Detaches all message boxes from their DOM parents. Thereby, modality glassPanes are not detached.\n     * In contrast to 'remove', this method uses 'JQuery detach mechanism' to retain CSS properties, so that the model must not be interpreted anew.\n     *\n     * This method has no effect if already detached.\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.displayParent.messageBoxes.forEach(function (messageBox) {\n        messageBox.detach();\n      }, this);\n    }\n  }, {\n    key: \"acceptView\",\n    value: function acceptView(view) {\n      return this.displayParent.rendered;\n    }\n  }]);\n\n  return MessageBoxController;\n}();\n\nexport { MessageBoxController as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/messagebox/MessageBoxController.js"],"names":["arrays","Form","scout","MessageBoxController","displayParent","session","messageBox","assertProperty","messageBoxes","push","_render","remove","_remove","forEach","bind","msgBox","setDisplayParent","_setProperty","acceptView","rendered","$mbParent","isPopupWindow","popupWindow","$container","desktop","setTrackFocus","render","inFront","detach","attach","view"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Form, scout} from '../index';\n\n/**\n * Controller with functionality to register and render message boxes.\n *\n * The message boxes are put into the list 'messageBoxes' contained in 'displayParent'.\n */\nexport default class MessageBoxController {\n\n  constructor(displayParent, session) {\n    this.displayParent = displayParent;\n    this.session = session;\n  }\n\n  /**\n   * Adds the given message box to this controller and renders it.\n   */\n  registerAndRender(messageBox) {\n    scout.assertProperty(messageBox, 'displayParent');\n    this.displayParent.messageBoxes.push(messageBox);\n    this._render(messageBox);\n  }\n\n  /**\n   * Removes the given message box from this controller and DOM. However, the message box's adapter is not destroyed. That only happens once the message box is closed.\n   */\n  unregisterAndRemove(messageBox) {\n    if (messageBox) {\n      arrays.remove(this.displayParent.messageBoxes, messageBox);\n      this._remove(messageBox);\n    }\n  }\n\n  /**\n   * Removes all message boxes registered with this controller from DOM.\n   */\n  remove() {\n    this.displayParent.messageBoxes.forEach(this._remove.bind(this));\n  }\n\n  /**\n   * Renders all message boxes registered with this controller.\n   */\n  render() {\n    this.displayParent.messageBoxes.forEach(function(msgBox) {\n      msgBox.setDisplayParent(this.displayParent);\n      this._render(msgBox);\n    }.bind(this));\n  }\n\n  _render(messageBox) {\n    // missing displayParent (when render is called by reload), use displayParent of MessageBoxController\n    if (!messageBox.displayParent) {\n      messageBox._setProperty('displayParent', this.displayParent);\n    }\n    // Use parent's function or (if not implemented) our own.\n    if (this.displayParent.acceptView) {\n      if (!this.displayParent.acceptView(messageBox)) {\n        return;\n      }\n    } else if (!this.acceptView(messageBox)) {\n      return;\n    }\n\n    // Prevent \"Already rendered\" errors --> TODO [7.0] bsh: Remove this hack! Fix it on model if possible. See #162954.\n    if (messageBox.rendered) {\n      return;\n    }\n    // Open all message boxes in the center of the desktop, except message-boxes that belong to a popup-window\n    // Since the message box doesn't have a DOM element as parent when render is called, we must find the\n    // entryPoint by using the model.\n    var $mbParent;\n    if (this.displayParent instanceof Form && this.displayParent.isPopupWindow()) {\n      $mbParent = this.displayParent.popupWindow.$container;\n    } else {\n      $mbParent = this.session.desktop.$container;\n    }\n    // start focus tracking if not already started.\n    messageBox.setTrackFocus(true);\n    messageBox.render($mbParent);\n\n    // Only display the message box if its 'displayParent' is visible to the user.\n    if (!this.displayParent.inFront()) {\n      messageBox.detach();\n    }\n  }\n\n  _remove(messageBox) {\n    messageBox.remove();\n  }\n\n  /**\n   * Attaches all message boxes to their original DOM parents.\n   * In contrast to 'render', this method uses 'JQuery detach mechanism' to retain CSS properties, so that the model must not be interpreted anew.\n   *\n   * This method has no effect if already attached.\n   */\n  attach() {\n    this.displayParent.messageBoxes.forEach(function(messageBox) {\n      messageBox.attach();\n    }, this);\n  }\n\n  /**\n   * Detaches all message boxes from their DOM parents. Thereby, modality glassPanes are not detached.\n   * In contrast to 'remove', this method uses 'JQuery detach mechanism' to retain CSS properties, so that the model must not be interpreted anew.\n   *\n   * This method has no effect if already detached.\n   */\n  detach() {\n    this.displayParent.messageBoxes.forEach(function(messageBox) {\n      messageBox.detach();\n    }, this);\n  }\n\n  acceptView(view) {\n    return this.displayParent.rendered;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}