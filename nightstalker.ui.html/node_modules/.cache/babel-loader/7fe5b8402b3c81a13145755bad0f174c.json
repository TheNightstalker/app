{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, graphics, MenuBarLayout, scrollbars } from '../index';\n\nvar TreeLayout = /*#__PURE__*/function (_AbstractLayout) {\n  _inherits(TreeLayout, _AbstractLayout);\n\n  var _super = _createSuper(TreeLayout);\n\n  function TreeLayout(tree) {\n    var _this;\n\n    _classCallCheck(this, TreeLayout);\n\n    _this = _super.call(this);\n    _this.tree = tree;\n    _this.nodeDimensionsDirty = false;\n    return _this;\n  }\n\n  _createClass(TreeLayout, [{\n    key: \"layout\",\n    value: function layout($container) {\n      this._layout($container);\n\n      scrollbars.update(this.tree.$data);\n    }\n  }, {\n    key: \"_layout\",\n    value: function _layout($container) {\n      var menuBarSize,\n          containerSize,\n          heightOffset,\n          menuBar = this.tree.menuBar,\n          htmlMenuBar = menuBar.htmlComp,\n          htmlContainer = this.tree.htmlComp;\n      containerSize = htmlContainer.availableSize({\n        exact: true\n      }).subtract(htmlContainer.insets());\n\n      if (this.tree.toggleBreadcrumbStyleEnabled) {\n        this.tree.setBreadcrumbStyleActive(Math.floor(containerSize.width) <= this.tree.breadcrumbTogglingThreshold);\n      }\n\n      heightOffset = 0;\n\n      if (menuBar.$container.isVisible()) {\n        menuBarSize = MenuBarLayout.size(htmlMenuBar, containerSize);\n        htmlMenuBar.setSize(menuBarSize);\n        heightOffset += menuBarSize.height;\n      }\n\n      this._setDataHeight(heightOffset); // recalculate ViewRangeSize before any rendering is done\n\n\n      this.tree.setViewRangeSize(this.tree.calculateViewRangeSize()); // Check if width has changed\n\n      this.nodeDimensionsDirty = this.nodeDimensionsDirty || this._sizeChanged(htmlContainer);\n\n      if (this.nodeDimensionsDirty) {\n        this.nodeDimensionsDirty = false;\n\n        if (this.tree.isHorizontalScrollingEnabled()) {\n          // Width is only relevant if horizontal scrolling is enabled -> mark as dirty\n          this.tree.nodeWidthDirty = true;\n          this.tree.maxNodeWidth = 0;\n        } else {\n          // Nodes may contain wrapped text (with breadcrumb style-or if nodes contain html) -> update heights\n          this.tree.updateNodeHeights();\n\n          this.tree._renderViewport(); // Ensure viewRangeRendered is up to date and matches visibleNodesFlat (can diverge after filtering)\n\n\n          this.tree._renderFiller();\n        }\n      }\n\n      if (!htmlContainer.layouted) {\n        this.tree._renderScrollTop();\n      } // Always render viewport (not only when viewRangeSize changes), because view range depends on scroll position and data height\n\n\n      this.tree._renderViewport(); // Render scroll top again to make sure the data is really at the correct position after rendering viewport, see tree.setScrollTop for details\n\n\n      if (!htmlContainer.layouted) {\n        this.tree._renderScrollTop();\n      }\n    }\n  }, {\n    key: \"_sizeChanged\",\n    value: function _sizeChanged(htmlContainer) {\n      // Ceil because sizeCached is exact but .size() is not)\n      return htmlContainer.sizeCached && Math.ceil(htmlContainer.sizeCached.width) !== Math.ceil(htmlContainer.size().width);\n    }\n  }, {\n    key: \"_setDataHeight\",\n    value: function _setDataHeight(heightOffset) {\n      var $data = this.tree.$data;\n      heightOffset += $data.cssMarginTop() + $data.cssMarginBottom();\n      $data.css('height', heightOffset === 0 ? '100%' : 'calc(100% - ' + heightOffset + 'px)');\n    }\n  }, {\n    key: \"preferredLayoutSize\",\n    value: function preferredLayoutSize($container, options) {\n      // Make sure viewport is up to date before calculating pref size.\n      // This is necessary because the tree does not render the view port on any change (like insert or delete nodes). Instead it just invalidates the layout.\n      this.tree._renderViewport(); // Node dimensions were fixed when calling _renderViewport using the current size, but that size might change during layout\n      // Only necessary the first time it is layouted, afterwards htmlContainer.sizeCached will be set\n\n\n      if (!this.tree.htmlComp.layouted) {\n        this.nodeDimensionsDirty = true;\n      }\n\n      return graphics.prefSize($container, options);\n    }\n  }]);\n\n  return TreeLayout;\n}(AbstractLayout);\n\nexport { TreeLayout as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/tree/TreeLayout.js"],"names":["AbstractLayout","graphics","MenuBarLayout","scrollbars","TreeLayout","tree","nodeDimensionsDirty","$container","_layout","update","$data","menuBarSize","containerSize","heightOffset","menuBar","htmlMenuBar","htmlComp","htmlContainer","availableSize","exact","subtract","insets","toggleBreadcrumbStyleEnabled","setBreadcrumbStyleActive","Math","floor","width","breadcrumbTogglingThreshold","isVisible","size","setSize","height","_setDataHeight","setViewRangeSize","calculateViewRangeSize","_sizeChanged","isHorizontalScrollingEnabled","nodeWidthDirty","maxNodeWidth","updateNodeHeights","_renderViewport","_renderFiller","layouted","_renderScrollTop","sizeCached","ceil","cssMarginTop","cssMarginBottom","css","options","prefSize"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, graphics, MenuBarLayout, scrollbars} from '../index';\n\nexport default class TreeLayout extends AbstractLayout {\n\n  constructor(tree) {\n    super();\n    this.tree = tree;\n    this.nodeDimensionsDirty = false;\n  }\n\n  layout($container) {\n    this._layout($container);\n    scrollbars.update(this.tree.$data);\n  }\n\n  _layout($container) {\n    var menuBarSize, containerSize, heightOffset,\n      menuBar = this.tree.menuBar,\n      htmlMenuBar = menuBar.htmlComp,\n      htmlContainer = this.tree.htmlComp;\n\n    containerSize = htmlContainer.availableSize({\n      exact: true\n    })\n      .subtract(htmlContainer.insets());\n\n    if (this.tree.toggleBreadcrumbStyleEnabled) {\n      this.tree.setBreadcrumbStyleActive(Math.floor(containerSize.width) <= this.tree.breadcrumbTogglingThreshold);\n    }\n\n    heightOffset = 0;\n    if (menuBar.$container.isVisible()) {\n      menuBarSize = MenuBarLayout.size(htmlMenuBar, containerSize);\n      htmlMenuBar.setSize(menuBarSize);\n      heightOffset += menuBarSize.height;\n    }\n\n    this._setDataHeight(heightOffset);\n\n    // recalculate ViewRangeSize before any rendering is done\n    this.tree.setViewRangeSize(this.tree.calculateViewRangeSize());\n\n    // Check if width has changed\n    this.nodeDimensionsDirty = this.nodeDimensionsDirty || this._sizeChanged(htmlContainer);\n    if (this.nodeDimensionsDirty) {\n      this.nodeDimensionsDirty = false;\n      if (this.tree.isHorizontalScrollingEnabled()) {\n        // Width is only relevant if horizontal scrolling is enabled -> mark as dirty\n        this.tree.nodeWidthDirty = true;\n        this.tree.maxNodeWidth = 0;\n      } else {\n        // Nodes may contain wrapped text (with breadcrumb style-or if nodes contain html) -> update heights\n        this.tree.updateNodeHeights();\n        this.tree._renderViewport(); // Ensure viewRangeRendered is up to date and matches visibleNodesFlat (can diverge after filtering)\n        this.tree._renderFiller();\n      }\n    }\n\n    if (!htmlContainer.layouted) {\n      this.tree._renderScrollTop();\n    }\n\n    // Always render viewport (not only when viewRangeSize changes), because view range depends on scroll position and data height\n    this.tree._renderViewport();\n\n    // Render scroll top again to make sure the data is really at the correct position after rendering viewport, see tree.setScrollTop for details\n    if (!htmlContainer.layouted) {\n      this.tree._renderScrollTop();\n    }\n  }\n\n  _sizeChanged(htmlContainer) {\n    // Ceil because sizeCached is exact but .size() is not)\n    return htmlContainer.sizeCached && Math.ceil(htmlContainer.sizeCached.width) !== Math.ceil(htmlContainer.size().width);\n  }\n\n  _setDataHeight(heightOffset) {\n    var $data = this.tree.$data;\n\n    heightOffset += $data.cssMarginTop() + $data.cssMarginBottom();\n\n    $data.css('height', (heightOffset === 0 ? '100%' : 'calc(100% - ' + heightOffset + 'px)'));\n  }\n\n  preferredLayoutSize($container, options) {\n    // Make sure viewport is up to date before calculating pref size.\n    // This is necessary because the tree does not render the view port on any change (like insert or delete nodes). Instead it just invalidates the layout.\n    this.tree._renderViewport();\n\n    // Node dimensions were fixed when calling _renderViewport using the current size, but that size might change during layout\n    // Only necessary the first time it is layouted, afterwards htmlContainer.sizeCached will be set\n    if (!this.tree.htmlComp.layouted) {\n      this.nodeDimensionsDirty = true;\n    }\n    return graphics.prefSize($container, options);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}