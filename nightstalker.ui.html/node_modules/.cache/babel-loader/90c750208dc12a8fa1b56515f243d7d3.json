{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractGrid, VerticalGridMatrix } from '../../index';\n\nvar VerticalSmartGrid = /*#__PURE__*/function (_AbstractGrid) {\n  _inherits(VerticalSmartGrid, _AbstractGrid);\n\n  var _super = _createSuper(VerticalSmartGrid);\n\n  function VerticalSmartGrid(options) {\n    _classCallCheck(this, VerticalSmartGrid);\n\n    return _super.call(this, options);\n  }\n\n  _createClass(VerticalSmartGrid, [{\n    key: \"layoutAllDynamic\",\n    value: function layoutAllDynamic(widgets) {\n      var cellCount = 0;\n      widgets.forEach(function (f) {\n        var hints = AbstractGrid.getGridDataFromHints(f, this.getGridColumnCount());\n        cellCount += hints.w * hints.h;\n      }.bind(this)); // do the calc\n\n      var rowCount = Math.floor((cellCount + this.getGridColumnCount() - 1) / this.getGridColumnCount());\n      var matrix = new VerticalGridMatrix(this.getGridColumnCount(), rowCount);\n\n      while (!matrix.computeGridData(widgets)) {\n        matrix.resetAll(this.getGridColumnCount(), ++rowCount);\n      } // set gridData\n\n\n      widgets.forEach(function (f) {\n        f.gridData = matrix.getGridData(f);\n      });\n      this.gridRows = matrix.getRowCount();\n    }\n  }]);\n\n  return VerticalSmartGrid;\n}(AbstractGrid);\n\nexport { VerticalSmartGrid as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/layout/logicalgrid/VerticalSmartGrid.js"],"names":["AbstractGrid","VerticalGridMatrix","VerticalSmartGrid","options","widgets","cellCount","forEach","f","hints","getGridDataFromHints","getGridColumnCount","w","h","bind","rowCount","Math","floor","matrix","computeGridData","resetAll","gridData","getGridData","gridRows","getRowCount"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAR,EAAsBC,kBAAtB,QAA+C,aAA/C;;IAEqBC,iB;;;;;AAEnB,6BAAYC,OAAZ,EAAqB;AAAA;;AAAA,6BACbA,OADa;AAEpB;;;;qCAEgBC,O,EAAS;AACxB,UAAIC,SAAS,GAAG,CAAhB;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgB,UAASC,CAAT,EAAY;AAC1B,YAAIC,KAAK,GAAGR,YAAY,CAACS,oBAAb,CAAkCF,CAAlC,EAAqC,KAAKG,kBAAL,EAArC,CAAZ;AACAL,QAAAA,SAAS,IAAIG,KAAK,CAACG,CAAN,GAAUH,KAAK,CAACI,CAA7B;AACD,OAHe,CAGdC,IAHc,CAGT,IAHS,CAAhB,EAFwB,CAOxB;;AACA,UAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACX,SAAS,GAAG,KAAKK,kBAAL,EAAZ,GAAwC,CAAzC,IAA8C,KAAKA,kBAAL,EAAzD,CAAf;AACA,UAAIO,MAAM,GAAG,IAAIhB,kBAAJ,CAAuB,KAAKS,kBAAL,EAAvB,EAAkDI,QAAlD,CAAb;;AACA,aAAO,CAACG,MAAM,CAACC,eAAP,CAAuBd,OAAvB,CAAR,EAAyC;AACvCa,QAAAA,MAAM,CAACE,QAAP,CAAgB,KAAKT,kBAAL,EAAhB,EAA2C,EAAEI,QAA7C;AACD,OAZuB,CAcxB;;;AACAV,MAAAA,OAAO,CAACE,OAAR,CAAgB,UAASC,CAAT,EAAY;AAC1BA,QAAAA,CAAC,CAACa,QAAF,GAAaH,MAAM,CAACI,WAAP,CAAmBd,CAAnB,CAAb;AACD,OAFD;AAGA,WAAKe,QAAL,GAAgBL,MAAM,CAACM,WAAP,EAAhB;AACD;;;;EAzB4CvB,Y;;SAA1BE,iB","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractGrid, VerticalGridMatrix} from '../../index';\n\nexport default class VerticalSmartGrid extends AbstractGrid {\n\n  constructor(options) {\n    super(options);\n  }\n\n  layoutAllDynamic(widgets) {\n    var cellCount = 0;\n    widgets.forEach(function(f) {\n      var hints = AbstractGrid.getGridDataFromHints(f, this.getGridColumnCount());\n      cellCount += hints.w * hints.h;\n    }.bind(this));\n\n    // do the calc\n    var rowCount = Math.floor((cellCount + this.getGridColumnCount() - 1) / this.getGridColumnCount());\n    var matrix = new VerticalGridMatrix(this.getGridColumnCount(), rowCount);\n    while (!matrix.computeGridData(widgets)) {\n      matrix.resetAll(this.getGridColumnCount(), ++rowCount);\n    }\n\n    // set gridData\n    widgets.forEach(function(f) {\n      f.gridData = matrix.getGridData(f);\n    });\n    this.gridRows = matrix.getRowCount();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}