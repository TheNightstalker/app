{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, HtmlComponent, LoadingSupport, objects, RowLayout, Widget, widgets } from '../index';\n\nvar Accordion = /*#__PURE__*/function (_Widget) {\n  _inherits(Accordion, _Widget);\n\n  var _super = _createSuper(Accordion);\n\n  function Accordion() {\n    var _this;\n\n    _classCallCheck(this, Accordion);\n\n    _this = _super.call(this);\n    _this.comparator = null;\n    _this.collapseStyle = null;\n    _this.exclusiveExpand = true;\n    _this.groups = [];\n    _this.scrollable = true;\n    _this.$container = null;\n    _this.htmlComp = null;\n\n    _this._addWidgetProperties(['groups']);\n\n    _this._groupPropertyChangeHandler = _this._onGroupPropertyChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Accordion, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(Accordion.prototype), \"_init\", this).call(this, model);\n\n      this._initGroups(this.groups);\n\n      this._setExclusiveExpand(this.exclusiveExpand);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_createLoadingSupport\",\n    value: function _createLoadingSupport() {\n      return new LoadingSupport({\n        widget: this\n      });\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.$container = this.$parent.appendDiv('accordion');\n      this.htmlComp = HtmlComponent.install(this.$container, this.session);\n      this.htmlComp.setLayout(this._createLayout());\n    }\n  }, {\n    key: \"_createLayout\",\n    value: function _createLayout() {\n      return new RowLayout();\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(Accordion.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderScrollable();\n\n      this._renderGroups();\n    }\n  }, {\n    key: \"insertGroup\",\n    value: function insertGroup(group) {\n      this.insertGroups([group]);\n    }\n  }, {\n    key: \"insertGroups\",\n    value: function insertGroups(groupsToInsert) {\n      groupsToInsert = arrays.ensure(groupsToInsert);\n      this.setGroups(this.groups.concat(groupsToInsert));\n    }\n  }, {\n    key: \"deleteGroup\",\n    value: function deleteGroup(group) {\n      this.deleteGroups([group]);\n    }\n  }, {\n    key: \"deleteGroups\",\n    value: function deleteGroups(groupsToDelete) {\n      groupsToDelete = arrays.ensure(groupsToDelete);\n      var groups = this.groups.slice();\n      arrays.removeAll(groups, groupsToDelete);\n      this.setGroups(groups);\n    }\n  }, {\n    key: \"deleteAllGroups\",\n    value: function deleteAllGroups() {\n      this.setGroups([]);\n    }\n  }, {\n    key: \"_initGroups\",\n    value: function _initGroups(groups) {\n      this.groups.forEach(function (group) {\n        this._initGroup(group);\n      }, this);\n    }\n  }, {\n    key: \"setGroups\",\n    value: function setGroups(groups) {\n      groups = arrays.ensure(groups);\n\n      if (objects.equals(this.groups, groups)) {\n        return;\n      } // Ensure given groups are real groups (of type Group)\n\n\n      groups = this._createChildren(groups); // Only delete those which are not in the new array\n      // Only insert those which are not already there\n\n      var groupsToDelete = arrays.diff(this.groups, groups);\n      var groupsToInsert = arrays.diff(groups, this.groups);\n\n      this._deleteGroups(groupsToDelete);\n\n      this._insertGroups(groupsToInsert);\n\n      this._sort(groups);\n\n      this._updateGroupOrder(groups);\n\n      this._setProperty('groups', groups);\n\n      if (groupsToInsert.length > 0) {\n        this._updateExclusiveExpand();\n      }\n\n      if (this.rendered) {\n        this._updateFirstLastMarker();\n\n        this.invalidateLayoutTree();\n      }\n    }\n  }, {\n    key: \"_insertGroups\",\n    value: function _insertGroups(groups) {\n      groups.forEach(function (group) {\n        this._insertGroup(group);\n      }, this);\n    }\n  }, {\n    key: \"_insertGroup\",\n    value: function _insertGroup(group) {\n      this._initGroup(group);\n\n      if (this.rendered) {\n        this._renderGroup(group);\n      }\n    }\n  }, {\n    key: \"_initGroup\",\n    value: function _initGroup(group) {\n      group.setParent(this);\n      group.on('propertyChange', this._groupPropertyChangeHandler); // Copy properties from accordion to new group. If the properties are not set yet, copy them from the group to the accordion\n      // This gives the possibility to either define the properties on the accordion or on the group initially\n\n      if (this.collapseStyle !== null) {\n        group.setCollapseStyle(this.collapseStyle);\n      }\n\n      this.setProperty('collapseStyle', group.collapseStyle);\n    }\n  }, {\n    key: \"_renderGroup\",\n    value: function _renderGroup(group) {\n      group.render();\n    }\n  }, {\n    key: \"_deleteGroups\",\n    value: function _deleteGroups(groups) {\n      groups.forEach(function (group) {\n        this._deleteGroup(group);\n      }, this);\n    }\n  }, {\n    key: \"_deleteGroup\",\n    value: function _deleteGroup(group) {\n      group.off('propertyChange', this._groupPropertyChangeHandler);\n\n      if (group.owner === this) {\n        group.destroy();\n      } else if (this.rendered) {\n        group.remove();\n      }\n    }\n  }, {\n    key: \"_renderGroups\",\n    value: function _renderGroups() {\n      this.groups.forEach(function (group) {\n        this._renderGroup(group);\n      }, this);\n\n      this._updateFirstLastMarker();\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"setComparator\",\n    value: function setComparator(comparator) {\n      if (this.comparator === comparator) {\n        return;\n      }\n\n      this.comparator = comparator;\n    }\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      var groups = this.groups.slice();\n\n      this._sort(groups);\n\n      this._updateGroupOrder(groups);\n\n      this._setProperty('groups', groups);\n    }\n  }, {\n    key: \"_sort\",\n    value: function _sort(groups) {\n      if (this.comparator === null) {\n        return;\n      }\n\n      groups.sort(this.comparator);\n    }\n  }, {\n    key: \"_updateGroupOrder\",\n    value: function _updateGroupOrder(groups) {\n      if (!this.rendered) {\n        return;\n      } // Loop through the the groups and move every html element to the end of the container\n      // Only move if the order is different to the old order\n\n\n      var different = false;\n      groups.forEach(function (group, i) {\n        if (this.groups[i] !== group || different) {\n          // Start ordering as soon as the order of the array starts to differ\n          different = true;\n          group.$container.appendTo(this.$container);\n        }\n      }, this);\n    }\n  }, {\n    key: \"_updateFirstLastMarker\",\n    value: function _updateFirstLastMarker() {\n      widgets.updateFirstLastMarker(this.groups);\n    }\n  }, {\n    key: \"setScrollable\",\n    value: function setScrollable(scrollable) {\n      this.setProperty('scrollable', scrollable);\n    }\n  }, {\n    key: \"_renderScrollable\",\n    value: function _renderScrollable() {\n      if (this.scrollable) {\n        this._installScrollbars({\n          axis: 'y'\n        });\n      } else {\n        this._uninstallScrollbars();\n      }\n\n      this.$container.toggleClass('scrollable', this.scrollable);\n      this.invalidateLayoutTree();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getFocusableElement\",\n    value: function getFocusableElement() {\n      var group = widgets.findFirstFocusableWidget(this.groups, this);\n\n      if (group) {\n        return group.getFocusableElement();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"setExclusiveExpand\",\n    value: function setExclusiveExpand(exclusiveExpand) {\n      this.setProperty('exclusiveExpand', exclusiveExpand);\n    }\n  }, {\n    key: \"_setExclusiveExpand\",\n    value: function _setExclusiveExpand(exclusiveExpand) {\n      this._setProperty('exclusiveExpand', exclusiveExpand);\n\n      this._updateExclusiveExpand();\n    }\n  }, {\n    key: \"_updateExclusiveExpand\",\n    value: function _updateExclusiveExpand() {\n      if (!this.exclusiveExpand) {\n        return;\n      }\n\n      var expandedGroup = arrays.find(this.groups, function (group) {\n        return group.visible && !group.collapsed;\n      });\n\n      this._collapseOthers(expandedGroup);\n    }\n  }, {\n    key: \"setCollapseStyle\",\n    value: function setCollapseStyle(collapseStyle) {\n      this.groups.forEach(function (group) {\n        group.setCollapseStyle(collapseStyle);\n      });\n      this.setProperty('collapseStyle', collapseStyle);\n    }\n  }, {\n    key: \"_collapseOthers\",\n    value: function _collapseOthers(expandedGroup) {\n      if (!expandedGroup || !expandedGroup.collapsible) {\n        return;\n      }\n\n      this.groups.forEach(function (group) {\n        if (group !== expandedGroup && group.collapsible) {\n          group.setCollapsed(true);\n        }\n      });\n    }\n  }, {\n    key: \"_onGroupPropertyChange\",\n    value: function _onGroupPropertyChange(event) {\n      if (event.propertyName === 'collapsed') {\n        this._onGroupCollapsedChange(event);\n      } else if (event.propertyName === 'visible') {\n        this._updateFirstLastMarker();\n      }\n    }\n  }, {\n    key: \"_onGroupCollapsedChange\",\n    value: function _onGroupCollapsedChange(event) {\n      if (!event.newValue && this.exclusiveExpand) {\n        this._collapseOthers(event.source);\n      }\n    }\n  }]);\n\n  return Accordion;\n}(Widget);\n\nexport { Accordion as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/accordion/Accordion.js"],"names":["arrays","HtmlComponent","LoadingSupport","objects","RowLayout","Widget","widgets","Accordion","comparator","collapseStyle","exclusiveExpand","groups","scrollable","$container","htmlComp","_addWidgetProperties","_groupPropertyChangeHandler","_onGroupPropertyChange","bind","model","_initGroups","_setExclusiveExpand","widget","$parent","appendDiv","install","session","setLayout","_createLayout","_renderScrollable","_renderGroups","group","insertGroups","groupsToInsert","ensure","setGroups","concat","deleteGroups","groupsToDelete","slice","removeAll","forEach","_initGroup","equals","_createChildren","diff","_deleteGroups","_insertGroups","_sort","_updateGroupOrder","_setProperty","length","_updateExclusiveExpand","rendered","_updateFirstLastMarker","invalidateLayoutTree","_insertGroup","_renderGroup","setParent","on","setCollapseStyle","setProperty","render","_deleteGroup","off","owner","destroy","remove","sort","different","i","appendTo","updateFirstLastMarker","_installScrollbars","axis","_uninstallScrollbars","toggleClass","findFirstFocusableWidget","getFocusableElement","expandedGroup","find","visible","collapsed","_collapseOthers","collapsible","setCollapsed","event","propertyName","_onGroupCollapsedChange","newValue","source"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, HtmlComponent, LoadingSupport, objects, RowLayout, Widget, widgets} from '../index';\n\nexport default class Accordion extends Widget {\n  constructor() {\n    super();\n    this.comparator = null;\n    this.collapseStyle = null;\n    this.exclusiveExpand = true;\n    this.groups = [];\n    this.scrollable = true;\n\n    this.$container = null;\n    this.htmlComp = null;\n    this._addWidgetProperties(['groups']);\n    this._groupPropertyChangeHandler = this._onGroupPropertyChange.bind(this);\n  }\n\n  _init(model) {\n    super._init(model);\n    this._initGroups(this.groups);\n    this._setExclusiveExpand(this.exclusiveExpand);\n  }\n\n  /**\n   * @override\n   */\n  _createLoadingSupport() {\n    return new LoadingSupport({\n      widget: this\n    });\n  }\n\n  _render() {\n    this.$container = this.$parent.appendDiv('accordion');\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(this._createLayout());\n  }\n\n  _createLayout() {\n    return new RowLayout();\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderScrollable();\n    this._renderGroups();\n  }\n\n  insertGroup(group) {\n    this.insertGroups([group]);\n  }\n\n  insertGroups(groupsToInsert) {\n    groupsToInsert = arrays.ensure(groupsToInsert);\n    this.setGroups(this.groups.concat(groupsToInsert));\n  }\n\n  deleteGroup(group) {\n    this.deleteGroups([group]);\n  }\n\n  deleteGroups(groupsToDelete) {\n    groupsToDelete = arrays.ensure(groupsToDelete);\n    var groups = this.groups.slice();\n    arrays.removeAll(groups, groupsToDelete);\n    this.setGroups(groups);\n  }\n\n  deleteAllGroups() {\n    this.setGroups([]);\n  }\n\n  _initGroups(groups) {\n    this.groups.forEach(function(group) {\n      this._initGroup(group);\n    }, this);\n  }\n\n  setGroups(groups) {\n    groups = arrays.ensure(groups);\n    if (objects.equals(this.groups, groups)) {\n      return;\n    }\n\n    // Ensure given groups are real groups (of type Group)\n    groups = this._createChildren(groups);\n\n    // Only delete those which are not in the new array\n    // Only insert those which are not already there\n    var groupsToDelete = arrays.diff(this.groups, groups);\n    var groupsToInsert = arrays.diff(groups, this.groups);\n    this._deleteGroups(groupsToDelete);\n    this._insertGroups(groupsToInsert);\n    this._sort(groups);\n    this._updateGroupOrder(groups);\n    this._setProperty('groups', groups);\n\n    if (groupsToInsert.length > 0) {\n      this._updateExclusiveExpand();\n    }\n    if (this.rendered) {\n      this._updateFirstLastMarker();\n      this.invalidateLayoutTree();\n    }\n  }\n\n  _insertGroups(groups) {\n    groups.forEach(function(group) {\n      this._insertGroup(group);\n    }, this);\n  }\n\n  _insertGroup(group) {\n    this._initGroup(group);\n    if (this.rendered) {\n      this._renderGroup(group);\n    }\n  }\n\n  _initGroup(group) {\n    group.setParent(this);\n    group.on('propertyChange', this._groupPropertyChangeHandler);\n\n    // Copy properties from accordion to new group. If the properties are not set yet, copy them from the group to the accordion\n    // This gives the possibility to either define the properties on the accordion or on the group initially\n    if (this.collapseStyle !== null) {\n      group.setCollapseStyle(this.collapseStyle);\n    }\n    this.setProperty('collapseStyle', group.collapseStyle);\n  }\n\n  _renderGroup(group) {\n    group.render();\n  }\n\n  _deleteGroups(groups) {\n    groups.forEach(function(group) {\n      this._deleteGroup(group);\n    }, this);\n  }\n\n  _deleteGroup(group) {\n    group.off('propertyChange', this._groupPropertyChangeHandler);\n    if (group.owner === this) {\n      group.destroy();\n    } else if (this.rendered) {\n      group.remove();\n    }\n  }\n\n  _renderGroups() {\n    this.groups.forEach(function(group) {\n      this._renderGroup(group);\n    }, this);\n    this._updateFirstLastMarker();\n    this.invalidateLayoutTree();\n  }\n\n  setComparator(comparator) {\n    if (this.comparator === comparator) {\n      return;\n    }\n    this.comparator = comparator;\n  }\n\n  sort() {\n    var groups = this.groups.slice();\n    this._sort(groups);\n    this._updateGroupOrder(groups);\n    this._setProperty('groups', groups);\n  }\n\n  _sort(groups) {\n    if (this.comparator === null) {\n      return;\n    }\n    groups.sort(this.comparator);\n  }\n\n  _updateGroupOrder(groups) {\n    if (!this.rendered) {\n      return;\n    }\n    // Loop through the the groups and move every html element to the end of the container\n    // Only move if the order is different to the old order\n    var different = false;\n    groups.forEach(function(group, i) {\n      if (this.groups[i] !== group || different) {\n        // Start ordering as soon as the order of the array starts to differ\n        different = true;\n        group.$container.appendTo(this.$container);\n      }\n    }, this);\n  }\n\n  _updateFirstLastMarker() {\n    widgets.updateFirstLastMarker(this.groups);\n  }\n\n  setScrollable(scrollable) {\n    this.setProperty('scrollable', scrollable);\n  }\n\n  _renderScrollable() {\n    if (this.scrollable) {\n      this._installScrollbars({\n        axis: 'y'\n      });\n    } else {\n      this._uninstallScrollbars();\n    }\n    this.$container.toggleClass('scrollable', this.scrollable);\n    this.invalidateLayoutTree();\n  }\n\n  /**\n   * @override\n   */\n  getFocusableElement() {\n    var group = widgets.findFirstFocusableWidget(this.groups, this);\n    if (group) {\n      return group.getFocusableElement();\n    }\n    return null;\n  }\n\n  setExclusiveExpand(exclusiveExpand) {\n    this.setProperty('exclusiveExpand', exclusiveExpand);\n  }\n\n  _setExclusiveExpand(exclusiveExpand) {\n    this._setProperty('exclusiveExpand', exclusiveExpand);\n    this._updateExclusiveExpand();\n  }\n\n  _updateExclusiveExpand() {\n    if (!this.exclusiveExpand) {\n      return;\n    }\n    var expandedGroup = arrays.find(this.groups, function(group) {\n      return group.visible && !group.collapsed;\n    });\n    this._collapseOthers(expandedGroup);\n  }\n\n  setCollapseStyle(collapseStyle) {\n    this.groups.forEach(function(group) {\n      group.setCollapseStyle(collapseStyle);\n    });\n    this.setProperty('collapseStyle', collapseStyle);\n  }\n\n  _collapseOthers(expandedGroup) {\n    if (!expandedGroup || !expandedGroup.collapsible) {\n      return;\n    }\n    this.groups.forEach(function(group) {\n      if (group !== expandedGroup && group.collapsible) {\n        group.setCollapsed(true);\n      }\n    });\n  }\n\n  _onGroupPropertyChange(event) {\n    if (event.propertyName === 'collapsed') {\n      this._onGroupCollapsedChange(event);\n    } else if (event.propertyName === 'visible') {\n      this._updateFirstLastMarker();\n    }\n  }\n\n  _onGroupCollapsedChange(event) {\n    if (!event.newValue && this.exclusiveExpand) {\n      this._collapseOthers(event.source);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}