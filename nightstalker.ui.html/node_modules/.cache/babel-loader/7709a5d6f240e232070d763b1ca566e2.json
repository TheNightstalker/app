{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Page, scout, Status } from '../../../index';\nimport $ from 'jquery';\n/**\n * @class\n * @extends Page\n */\n\nvar PageWithTable = /*#__PURE__*/function (_Page) {\n  _inherits(PageWithTable, _Page);\n\n  var _super = _createSuper(PageWithTable);\n\n  function PageWithTable() {\n    var _this;\n\n    _classCallCheck(this, PageWithTable);\n\n    _this = _super.call(this);\n    _this.nodeType = Page.NodeType.TABLE;\n    _this.alwaysCreateChildPage = false;\n    return _this;\n  }\n  /**\n   * @override Page\n   */\n\n\n  _createClass(PageWithTable, [{\n    key: \"_initTable\",\n    value: function _initTable(table) {\n      _get(_getPrototypeOf(PageWithTable.prototype), \"_initTable\", this).call(this, table);\n\n      table.on('rowsDeleted allRowsDeleted', this._onTableRowsDeleted.bind(this));\n      table.on('rowsInserted', this._onTableRowsInserted.bind(this));\n      table.on('rowsUpdated', this._onTableRowsUpdated.bind(this));\n      table.on('rowAction', this._onTableRowAction.bind(this));\n      table.on('rowOrderChanged', this._onTableRowOrderChanged.bind(this));\n      table.on('reload', this.loadTableData.bind(this));\n      table.hasReloadHandler = true;\n    }\n  }, {\n    key: \"_onTableRowsDeleted\",\n    value: function _onTableRowsDeleted(event) {\n      if (this.leaf) {\n        // when page is a leaf we do nothing at all\n        return;\n      }\n\n      var rows = arrays.ensure(event.rows),\n          childPages = rows.map(function (row) {\n        var childPage = row.page;\n        childPage.unlinkWithRow(row);\n        return childPage;\n      }, this);\n      this.getOutline().mediator.onTableRowsDeleted(rows, childPages, this);\n    }\n    /**\n     * We must set childNodeIndex on each created childPage because it is required to\n     * determine the order of nodes in the tree.\n     */\n\n  }, {\n    key: \"_onTableRowsInserted\",\n    value: function _onTableRowsInserted(event) {\n      if (this.leaf) {\n        // when page is a leaf we do nothing at all\n        return;\n      }\n\n      var rows = arrays.ensure(event.rows),\n          childPages = rows.map(function (row) {\n        return this._createChildPageInternal(row);\n      }, this);\n      this.getOutline().mediator.onTableRowsInserted(rows, childPages, this);\n    }\n  }, {\n    key: \"_onTableRowsUpdated\",\n    value: function _onTableRowsUpdated(event) {\n      this.getOutline().mediator.onTableRowsUpdated(event, this);\n    }\n  }, {\n    key: \"_onTableRowAction\",\n    value: function _onTableRowAction(event) {\n      this.getOutline().mediator.onTableRowAction(event, this);\n    }\n  }, {\n    key: \"_onTableRowOrderChanged\",\n    value: function _onTableRowOrderChanged(event) {\n      if (event.animating) {\n        // do nothing while row order animation is in progress\n        return;\n      }\n\n      this.getOutline().mediator.onTableRowOrderChanged(event, this);\n    }\n  }, {\n    key: \"_createChildPageInternal\",\n    value: function _createChildPageInternal(row) {\n      var childPage = this.createChildPage(row);\n\n      if (childPage === null && this.alwaysCreateChildPage) {\n        childPage = this.createDefaultChildPage(row);\n      }\n\n      childPage.linkWithRow(row);\n      childPage = childPage.updatePageFromTableRow(row);\n      return childPage;\n    }\n    /**\n     * Override this method to return a specific Page instance for the given table-row.\n     * The default impl. returns null, which means a AutoLeaftPageWithNodes instance will be created for the table-row.\n     */\n\n  }, {\n    key: \"createChildPage\",\n    value: function createChildPage(row) {\n      return null;\n    }\n  }, {\n    key: \"createDefaultChildPage\",\n    value: function createDefaultChildPage(row) {\n      return scout.create('AutoLeafPageWithNodes', {\n        parent: this.getOutline(),\n        row: row\n      });\n    }\n    /**\n     * @override TreeNode.js\n     */\n\n  }, {\n    key: \"loadChildren\",\n    value: function loadChildren() {\n      // It's allowed to have no table - but we don't have to load data in that case\n      if (!this.detailTable) {\n        return $.resolvedDeferred();\n      }\n\n      return this.loadTableData();\n    }\n  }, {\n    key: \"_createSearchFilter\",\n    value: function _createSearchFilter() {\n      var firstFormTableControl = arrays.find(this.detailTable.tableControls, function (tableControl) {\n        return tableControl.form;\n      });\n\n      if (firstFormTableControl) {\n        return firstFormTableControl.form.exportData();\n      }\n\n      return null;\n    }\n    /**\n     * see Java: AbstractPageWithTable#loadChildren that's where the table is reloaded and the tree is rebuilt, called by AbstractTree#P_UIFacade\n     * @returns {$.Deferred}\n     */\n\n  }, {\n    key: \"loadTableData\",\n    value: function loadTableData() {\n      this.detailTable.deleteAllRows();\n      this.detailTable.setLoading(true);\n      return this._loadTableData(this._createSearchFilter()).then(this._onLoadTableDataDone.bind(this)).catch(this._onLoadTableDataFail.bind(this)).then(this._onLoadTableDataAlways.bind(this));\n    }\n    /**\n     * Override this method to load table data (rows to be added to table).\n     * This is an asynchronous operation working with a Deferred. When table data load is successful\n     * <code>_onLoadTableDataDone(data)</code> will be called. When a failure occurs while loading table\n     * data <code>_onLoadTableDataFail(data)</code> will be called.\n     * <p>\n     * When you want to return static data you still need a deferred. But you can resolve it\n     * immediately. Example code:\n     * <code>\n     *   var deferred = $.Deferred();\n     *   deferred.resolve([{...},{...}]);\n     *   return deferred;\n     * </code>\n     *\n     * @param searchFilter The search filter as exported by the search form or null.\n     *\n     * @return {$.Deferred}\n     */\n\n  }, {\n    key: \"_loadTableData\",\n    value: function _loadTableData(searchFilter) {\n      return $.resolvedDeferred();\n    }\n    /**\n     * This method is called when table data load is successful. It should transform the table data\n     * object to table rows.\n     *\n     * @param tableData data loaded by <code>_loadTableData</code>\n     */\n\n  }, {\n    key: \"_onLoadTableDataDone\",\n    value: function _onLoadTableDataDone(tableData) {\n      var rows = this._transformTableDataToTableRows(tableData);\n\n      if (rows && rows.length > 0) {\n        this.detailTable.insertRows(rows);\n      }\n    }\n  }, {\n    key: \"_onLoadTableDataFail\",\n    value: function _onLoadTableDataFail(error) {\n      this.detailTable.setTableStatus(Status.error({\n        message: this.session.text('ErrorWhileLoadingData')\n      }));\n      $.log.error('Failed to load tableData. error=', error);\n    }\n  }, {\n    key: \"_onLoadTableDataAlways\",\n    value: function _onLoadTableDataAlways() {\n      this.childrenLoaded = true;\n      this.detailTable.setLoading(false);\n    }\n    /**\n     * This method converts the loaded table data, which can be any object, into table rows.\n     * You must override this method unless tableData is already an array of table rows.\n     *\n     * @param tableData\n     * @returns\n     */\n\n  }, {\n    key: \"_transformTableDataToTableRows\",\n    value: function _transformTableDataToTableRows(tableData) {\n      return tableData;\n    }\n  }]);\n\n  return PageWithTable;\n}(Page);\n\nexport { PageWithTable as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/outline/pages/PageWithTable.js"],"names":["arrays","Page","scout","Status","$","PageWithTable","nodeType","NodeType","TABLE","alwaysCreateChildPage","table","on","_onTableRowsDeleted","bind","_onTableRowsInserted","_onTableRowsUpdated","_onTableRowAction","_onTableRowOrderChanged","loadTableData","hasReloadHandler","event","leaf","rows","ensure","childPages","map","row","childPage","page","unlinkWithRow","getOutline","mediator","onTableRowsDeleted","_createChildPageInternal","onTableRowsInserted","onTableRowsUpdated","onTableRowAction","animating","onTableRowOrderChanged","createChildPage","createDefaultChildPage","linkWithRow","updatePageFromTableRow","create","parent","detailTable","resolvedDeferred","firstFormTableControl","find","tableControls","tableControl","form","exportData","deleteAllRows","setLoading","_loadTableData","_createSearchFilter","then","_onLoadTableDataDone","catch","_onLoadTableDataFail","_onLoadTableDataAlways","searchFilter","tableData","_transformTableDataToTableRows","length","insertRows","error","setTableStatus","message","session","text","log","childrenLoaded"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAR,EAAgBC,IAAhB,EAAsBC,KAAtB,EAA6BC,MAA7B,QAA0C,gBAA1C;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA;AACA;AACA;AACA;;IACqBC,a;;;;;AAEnB,2BAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,QAAL,GAAgBL,IAAI,CAACM,QAAL,CAAcC,KAA9B;AACA,UAAKC,qBAAL,GAA6B,KAA7B;AAJY;AAKb;AAED;AACF;AACA;;;;;+BACaC,K,EAAO;AAChB,oFAAiBA,KAAjB;;AACAA,MAAAA,KAAK,CAACC,EAAN,CAAS,4BAAT,EAAuC,KAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAAvC;AACAH,MAAAA,KAAK,CAACC,EAAN,CAAS,cAAT,EAAyB,KAAKG,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAAzB;AACAH,MAAAA,KAAK,CAACC,EAAN,CAAS,aAAT,EAAwB,KAAKI,mBAAL,CAAyBF,IAAzB,CAA8B,IAA9B,CAAxB;AACAH,MAAAA,KAAK,CAACC,EAAN,CAAS,WAAT,EAAsB,KAAKK,iBAAL,CAAuBH,IAAvB,CAA4B,IAA5B,CAAtB;AACAH,MAAAA,KAAK,CAACC,EAAN,CAAS,iBAAT,EAA4B,KAAKM,uBAAL,CAA6BJ,IAA7B,CAAkC,IAAlC,CAA5B;AACAH,MAAAA,KAAK,CAACC,EAAN,CAAS,QAAT,EAAmB,KAAKO,aAAL,CAAmBL,IAAnB,CAAwB,IAAxB,CAAnB;AACAH,MAAAA,KAAK,CAACS,gBAAN,GAAyB,IAAzB;AACD;;;wCAEmBC,K,EAAO;AACzB,UAAI,KAAKC,IAAT,EAAe;AAAE;AACf;AACD;;AACD,UAAIC,IAAI,GAAGtB,MAAM,CAACuB,MAAP,CAAcH,KAAK,CAACE,IAApB,CAAX;AAAA,UACEE,UAAU,GAAGF,IAAI,CAACG,GAAL,CAAS,UAASC,GAAT,EAAc;AAClC,YAAIC,SAAS,GAAGD,GAAG,CAACE,IAApB;AACAD,QAAAA,SAAS,CAACE,aAAV,CAAwBH,GAAxB;AACA,eAAOC,SAAP;AACD,OAJY,EAIV,IAJU,CADf;AAOA,WAAKG,UAAL,GAAkBC,QAAlB,CAA2BC,kBAA3B,CAA8CV,IAA9C,EAAoDE,UAApD,EAAgE,IAAhE;AACD;AAED;AACF;AACA;AACA;;;;yCACuBJ,K,EAAO;AAC1B,UAAI,KAAKC,IAAT,EAAe;AAAE;AACf;AACD;;AAED,UAAIC,IAAI,GAAGtB,MAAM,CAACuB,MAAP,CAAcH,KAAK,CAACE,IAApB,CAAX;AAAA,UACEE,UAAU,GAAGF,IAAI,CAACG,GAAL,CAAS,UAASC,GAAT,EAAc;AAClC,eAAO,KAAKO,wBAAL,CAA8BP,GAA9B,CAAP;AACD,OAFY,EAEV,IAFU,CADf;AAKA,WAAKI,UAAL,GAAkBC,QAAlB,CAA2BG,mBAA3B,CAA+CZ,IAA/C,EAAqDE,UAArD,EAAiE,IAAjE;AACD;;;wCAEmBJ,K,EAAO;AACzB,WAAKU,UAAL,GAAkBC,QAAlB,CAA2BI,kBAA3B,CAA8Cf,KAA9C,EAAqD,IAArD;AACD;;;sCAEiBA,K,EAAO;AACvB,WAAKU,UAAL,GAAkBC,QAAlB,CAA2BK,gBAA3B,CAA4ChB,KAA5C,EAAmD,IAAnD;AACD;;;4CAEuBA,K,EAAO;AAC7B,UAAIA,KAAK,CAACiB,SAAV,EAAqB;AAAE;AACrB;AACD;;AACD,WAAKP,UAAL,GAAkBC,QAAlB,CAA2BO,sBAA3B,CAAkDlB,KAAlD,EAAyD,IAAzD;AACD;;;6CAEwBM,G,EAAK;AAC5B,UAAIC,SAAS,GAAG,KAAKY,eAAL,CAAqBb,GAArB,CAAhB;;AACA,UAAIC,SAAS,KAAK,IAAd,IAAsB,KAAKlB,qBAA/B,EAAsD;AACpDkB,QAAAA,SAAS,GAAG,KAAKa,sBAAL,CAA4Bd,GAA5B,CAAZ;AACD;;AACDC,MAAAA,SAAS,CAACc,WAAV,CAAsBf,GAAtB;AACAC,MAAAA,SAAS,GAAGA,SAAS,CAACe,sBAAV,CAAiChB,GAAjC,CAAZ;AACA,aAAOC,SAAP;AACD;AAED;AACF;AACA;AACA;;;;oCACkBD,G,EAAK;AACnB,aAAO,IAAP;AACD;;;2CAEsBA,G,EAAK;AAC1B,aAAOxB,KAAK,CAACyC,MAAN,CAAa,uBAAb,EAAsC;AAC3CC,QAAAA,MAAM,EAAE,KAAKd,UAAL,EADmC;AAE3CJ,QAAAA,GAAG,EAAEA;AAFsC,OAAtC,CAAP;AAID;AAED;AACF;AACA;;;;mCACiB;AACb;AACA,UAAI,CAAC,KAAKmB,WAAV,EAAuB;AACrB,eAAOzC,CAAC,CAAC0C,gBAAF,EAAP;AACD;;AACD,aAAO,KAAK5B,aAAL,EAAP;AACD;;;0CAEqB;AACpB,UAAI6B,qBAAqB,GAAG/C,MAAM,CAACgD,IAAP,CAAY,KAAKH,WAAL,CAAiBI,aAA7B,EAA4C,UAASC,YAAT,EAAuB;AAC7F,eAAOA,YAAY,CAACC,IAApB;AACD,OAF2B,CAA5B;;AAGA,UAAIJ,qBAAJ,EAA2B;AACzB,eAAOA,qBAAqB,CAACI,IAAtB,CAA2BC,UAA3B,EAAP;AACD;;AACD,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;;;;oCACkB;AACd,WAAKP,WAAL,CAAiBQ,aAAjB;AACA,WAAKR,WAAL,CAAiBS,UAAjB,CAA4B,IAA5B;AACA,aAAO,KAAKC,cAAL,CAAoB,KAAKC,mBAAL,EAApB,EACJC,IADI,CACC,KAAKC,oBAAL,CAA0B7C,IAA1B,CAA+B,IAA/B,CADD,EAEJ8C,KAFI,CAEE,KAAKC,oBAAL,CAA0B/C,IAA1B,CAA+B,IAA/B,CAFF,EAGJ4C,IAHI,CAGC,KAAKI,sBAAL,CAA4BhD,IAA5B,CAAiC,IAAjC,CAHD,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;mCACiBiD,Y,EAAc;AAC3B,aAAO1D,CAAC,CAAC0C,gBAAF,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;yCACuBiB,S,EAAW;AAC9B,UAAIzC,IAAI,GAAG,KAAK0C,8BAAL,CAAoCD,SAApC,CAAX;;AACA,UAAIzC,IAAI,IAAIA,IAAI,CAAC2C,MAAL,GAAc,CAA1B,EAA6B;AAC3B,aAAKpB,WAAL,CAAiBqB,UAAjB,CAA4B5C,IAA5B;AACD;AACF;;;yCAEoB6C,K,EAAO;AAC1B,WAAKtB,WAAL,CAAiBuB,cAAjB,CAAgCjE,MAAM,CAACgE,KAAP,CAAa;AAC3CE,QAAAA,OAAO,EAAE,KAAKC,OAAL,CAAaC,IAAb,CAAkB,uBAAlB;AADkC,OAAb,CAAhC;AAGAnE,MAAAA,CAAC,CAACoE,GAAF,CAAML,KAAN,CAAY,kCAAZ,EAAgDA,KAAhD;AACD;;;6CAEwB;AACvB,WAAKM,cAAL,GAAsB,IAAtB;AACA,WAAK5B,WAAL,CAAiBS,UAAjB,CAA4B,KAA5B;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;mDACiCS,S,EAAW;AACxC,aAAOA,SAAP;AACD;;;;EAxLwC9D,I;;SAAtBI,a","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Page, scout, Status} from '../../../index';\nimport $ from 'jquery';\n\n/**\n * @class\n * @extends Page\n */\nexport default class PageWithTable extends Page {\n\n  constructor() {\n    super();\n\n    this.nodeType = Page.NodeType.TABLE;\n    this.alwaysCreateChildPage = false;\n  }\n\n  /**\n   * @override Page\n   */\n  _initTable(table) {\n    super._initTable(table);\n    table.on('rowsDeleted allRowsDeleted', this._onTableRowsDeleted.bind(this));\n    table.on('rowsInserted', this._onTableRowsInserted.bind(this));\n    table.on('rowsUpdated', this._onTableRowsUpdated.bind(this));\n    table.on('rowAction', this._onTableRowAction.bind(this));\n    table.on('rowOrderChanged', this._onTableRowOrderChanged.bind(this));\n    table.on('reload', this.loadTableData.bind(this));\n    table.hasReloadHandler = true;\n  }\n\n  _onTableRowsDeleted(event) {\n    if (this.leaf) { // when page is a leaf we do nothing at all\n      return;\n    }\n    var rows = arrays.ensure(event.rows),\n      childPages = rows.map(function(row) {\n        var childPage = row.page;\n        childPage.unlinkWithRow(row);\n        return childPage;\n      }, this);\n\n    this.getOutline().mediator.onTableRowsDeleted(rows, childPages, this);\n  }\n\n  /**\n   * We must set childNodeIndex on each created childPage because it is required to\n   * determine the order of nodes in the tree.\n   */\n  _onTableRowsInserted(event) {\n    if (this.leaf) { // when page is a leaf we do nothing at all\n      return;\n    }\n\n    var rows = arrays.ensure(event.rows),\n      childPages = rows.map(function(row) {\n        return this._createChildPageInternal(row);\n      }, this);\n\n    this.getOutline().mediator.onTableRowsInserted(rows, childPages, this);\n  }\n\n  _onTableRowsUpdated(event) {\n    this.getOutline().mediator.onTableRowsUpdated(event, this);\n  }\n\n  _onTableRowAction(event) {\n    this.getOutline().mediator.onTableRowAction(event, this);\n  }\n\n  _onTableRowOrderChanged(event) {\n    if (event.animating) { // do nothing while row order animation is in progress\n      return;\n    }\n    this.getOutline().mediator.onTableRowOrderChanged(event, this);\n  }\n\n  _createChildPageInternal(row) {\n    var childPage = this.createChildPage(row);\n    if (childPage === null && this.alwaysCreateChildPage) {\n      childPage = this.createDefaultChildPage(row);\n    }\n    childPage.linkWithRow(row);\n    childPage = childPage.updatePageFromTableRow(row);\n    return childPage;\n  }\n\n  /**\n   * Override this method to return a specific Page instance for the given table-row.\n   * The default impl. returns null, which means a AutoLeaftPageWithNodes instance will be created for the table-row.\n   */\n  createChildPage(row) {\n    return null;\n  }\n\n  createDefaultChildPage(row) {\n    return scout.create('AutoLeafPageWithNodes', {\n      parent: this.getOutline(),\n      row: row\n    });\n  }\n\n  /**\n   * @override TreeNode.js\n   */\n  loadChildren() {\n    // It's allowed to have no table - but we don't have to load data in that case\n    if (!this.detailTable) {\n      return $.resolvedDeferred();\n    }\n    return this.loadTableData();\n  }\n\n  _createSearchFilter() {\n    var firstFormTableControl = arrays.find(this.detailTable.tableControls, function(tableControl) {\n      return tableControl.form;\n    });\n    if (firstFormTableControl) {\n      return firstFormTableControl.form.exportData();\n    }\n    return null;\n  }\n\n  /**\n   * see Java: AbstractPageWithTable#loadChildren that's where the table is reloaded and the tree is rebuilt, called by AbstractTree#P_UIFacade\n   * @returns {$.Deferred}\n   */\n  loadTableData() {\n    this.detailTable.deleteAllRows();\n    this.detailTable.setLoading(true);\n    return this._loadTableData(this._createSearchFilter())\n      .then(this._onLoadTableDataDone.bind(this))\n      .catch(this._onLoadTableDataFail.bind(this))\n      .then(this._onLoadTableDataAlways.bind(this));\n  }\n\n  /**\n   * Override this method to load table data (rows to be added to table).\n   * This is an asynchronous operation working with a Deferred. When table data load is successful\n   * <code>_onLoadTableDataDone(data)</code> will be called. When a failure occurs while loading table\n   * data <code>_onLoadTableDataFail(data)</code> will be called.\n   * <p>\n   * When you want to return static data you still need a deferred. But you can resolve it\n   * immediately. Example code:\n   * <code>\n   *   var deferred = $.Deferred();\n   *   deferred.resolve([{...},{...}]);\n   *   return deferred;\n   * </code>\n   *\n   * @param searchFilter The search filter as exported by the search form or null.\n   *\n   * @return {$.Deferred}\n   */\n  _loadTableData(searchFilter) {\n    return $.resolvedDeferred();\n  }\n\n  /**\n   * This method is called when table data load is successful. It should transform the table data\n   * object to table rows.\n   *\n   * @param tableData data loaded by <code>_loadTableData</code>\n   */\n  _onLoadTableDataDone(tableData) {\n    var rows = this._transformTableDataToTableRows(tableData);\n    if (rows && rows.length > 0) {\n      this.detailTable.insertRows(rows);\n    }\n  }\n\n  _onLoadTableDataFail(error) {\n    this.detailTable.setTableStatus(Status.error({\n      message: this.session.text('ErrorWhileLoadingData')\n    }));\n    $.log.error('Failed to load tableData. error=', error);\n  }\n\n  _onLoadTableDataAlways() {\n    this.childrenLoaded = true;\n    this.detailTable.setLoading(false);\n  }\n\n  /**\n   * This method converts the loaded table data, which can be any object, into table rows.\n   * You must override this method unless tableData is already an array of table rows.\n   *\n   * @param tableData\n   * @returns\n   */\n  _transformTableDataToTableRows(tableData) {\n    return tableData;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}