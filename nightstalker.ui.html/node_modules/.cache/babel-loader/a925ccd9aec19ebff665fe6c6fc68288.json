{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { numbers, RoundingMode, scout, strings } from '../index';\n/**\n * Provides formatting of numbers using java format pattern.\n * <p>\n * Compared to the java DecimalFormat the following pattern characters are not considered:\n * <ul>\n *   <li>prefix and suffix</li>\n *   <li>E</li>\n *   <li>%</li>\n * </ul>\n */\n\nvar DecimalFormat = /*#__PURE__*/function () {\n  function DecimalFormat(locale, options) {\n    _classCallCheck(this, DecimalFormat);\n\n    // format function will use these (defaults)\n    this.positivePrefix = '';\n    this.positiveSuffix = '';\n    this.negativePrefix = locale.decimalFormatSymbols.minusSign;\n    this.negativeSuffix = '';\n    this.groupingChar = locale.decimalFormatSymbols.groupingSeparator; // we want to be lenient when it comes to grouping separators, try the locale default plus a few others\n\n    this.lenientGroupingChars = '\\'´`’' + // apostrophe and variations\n    \"\\xB7\" + // middle dot\n    \" \" + // space\n    \"\\xA0\" + // no-break space\n    \"\\u2009\" + // thin space\n    \"\\u202F\"; // narrow no-break space\n\n    this.groupLength = 0;\n    this.decimalSeparatorChar = locale.decimalFormatSymbols.decimalSeparator;\n    this.zeroBefore = 1;\n    this.zeroAfter = 0;\n    this.allAfter = 0;\n\n    if (typeof options === 'string') {\n      this.pattern = options;\n    }\n\n    options = options || {};\n    this.pattern = this.pattern || options.pattern || locale.decimalFormatPatternDefault;\n    this.multiplier = options.multiplier || 1;\n    this.roundingMode = options.roundingMode || RoundingMode.HALF_UP;\n    var SYMBOLS = DecimalFormat.PATTERN_SYMBOLS; // Check if there are separate subpatterns for positive and negative numbers (\"PositivePattern;NegativePattern\")\n\n    var split = this.pattern.split(SYMBOLS.patternSeparator); // Use the first subpattern as positive prefix/suffix\n\n    var positivePrefixAndSuffix = findPrefixAndSuffix(split[0]);\n    this.positivePrefix = positivePrefixAndSuffix.prefix;\n    this.positiveSuffix = positivePrefixAndSuffix.suffix;\n\n    if (split.length > 1) {\n      // Yes, there is a negative subpattern\n      var negativePrefixAndSuffix = findPrefixAndSuffix(split[1]);\n      this.negativePrefix = negativePrefixAndSuffix.prefix;\n      this.negativeSuffix = negativePrefixAndSuffix.suffix; // from now on, only look at the positive subpattern\n\n      this.pattern = split[0];\n    } else {\n      // No, there is no negative subpattern, so the positive prefix/suffix are used for both positive and negative numbers.\n      // Check if there is a minus sign in the prefix/suffix.\n      if (this.positivePrefix.indexOf(SYMBOLS.minusSign) !== -1 || this.positiveSuffix.indexOf(SYMBOLS.minusSign) !== -1) {\n        // Yes, there is a minus sign in the prefix/suffix. Use this a negativePrefix/Suffix and remove the minus sign from the posistivePrefix/Suffix.\n        this.negativePrefix = this.positivePrefix.replace(SYMBOLS.minusSign, locale.decimalFormatSymbols.minusSign);\n        this.negativeSuffix = this.positiveSuffix.replace(SYMBOLS.minusSign, locale.decimalFormatSymbols.minusSign);\n        this.positivePrefix = this.positivePrefix.replace(SYMBOLS.minusSign, '');\n        this.positiveSuffix = this.positiveSuffix.replace(SYMBOLS.minusSign, '');\n      } else {\n        // No, there is no minus sign in the prefix/suffix. Therefore, use the default negativePrefix/Suffix, but append the positivePrefix/Suffix\n        this.negativePrefix = this.positivePrefix + this.negativePrefix;\n        this.negativeSuffix = this.negativeSuffix + this.positiveSuffix;\n      }\n    } // find group length\n\n\n    var posDecimalSeparator = this.pattern.indexOf(SYMBOLS.decimalSeparator);\n\n    if (posDecimalSeparator === -1) {\n      posDecimalSeparator = this.pattern.length; // assume decimal separator at end\n    }\n\n    var posGroupingSeparator = this.pattern.lastIndexOf(SYMBOLS.groupingSeparator, posDecimalSeparator); // only search before decimal separator\n\n    if (posGroupingSeparator > 0) {\n      this.groupLength = posDecimalSeparator - posGroupingSeparator - 1;\n    }\n\n    this.pattern = this.pattern.replace(new RegExp('[' + SYMBOLS.groupingSeparator + ']', 'g'), ''); // split on decimal point\n\n    split = this.pattern.split(SYMBOLS.decimalSeparator); // find digits before and after decimal point\n\n    this.zeroBefore = strings.count(split[0], SYMBOLS.zeroDigit);\n\n    if (split.length > 1) {\n      // has decimal point?\n      this.zeroAfter = strings.count(split[1], SYMBOLS.zeroDigit);\n      this.allAfter = this.zeroAfter + strings.count(split[1], SYMBOLS.digit);\n    } // Returns an object with the properties 'prefix' and 'suffix', which contain all characters\n    // before or after any 'digit-like' character in the given pattern string.\n\n\n    function findPrefixAndSuffix(pattern) {\n      var result = {\n        prefix: '',\n        suffix: ''\n      }; // Find prefix (anything before the first 'digit-like' character)\n\n      var digitLikeCharacters = SYMBOLS.digit + SYMBOLS.zeroDigit + SYMBOLS.decimalSeparator + SYMBOLS.groupingSeparator;\n      var r = new RegExp('^(.*?)[' + digitLikeCharacters + '].*$');\n      var matches = r.exec(pattern);\n\n      if (matches !== null) {\n        // Ignore single quotes (for special, quoted characters - e.g. Java quotes percentage sign like '%')\n        result.prefix = matches[1].replace(new RegExp('\\'([^\\']+)\\'', 'g'), '$1');\n      } // Find suffix (anything before the first 'digit-like' character)\n\n\n      r = new RegExp('^.*[' + digitLikeCharacters + '](.*?)$');\n      matches = r.exec(pattern);\n\n      if (matches !== null) {\n        // Ignore single quotes (for special, quoted characters - e.g. Java quotes percentage sign like '%')\n        result.suffix = matches[1].replace(new RegExp('\\'([^\\']+)\\'', 'g'), '$1');\n      }\n\n      return result;\n    }\n  }\n  /**\n   * Converts the numberString into a number and applies the multiplier.\n   * @param numberString\n   * @param evaluateNumberFunction optional function for custom evaluation. The function gets a normalized string and has to return a Number\n   * @return Returns a number for the given numberString, if the string can be converted into a number. Throws an Error otherwise\n   */\n\n\n  _createClass(DecimalFormat, [{\n    key: \"parse\",\n    value: function parse(numberString, evaluateNumberFunction) {\n      if (strings.empty(numberString)) {\n        return null;\n      }\n\n      var normalizedNumberString = this.normalize(numberString);\n      evaluateNumberFunction = evaluateNumberFunction || Number;\n      var number = evaluateNumberFunction(normalizedNumberString);\n\n      if (isNaN(number)) {\n        throw new Error(numberString + ' is not a number (NaN)');\n      }\n\n      if (this.multiplier !== 1) {\n        number /= this.multiplier;\n      }\n\n      return number;\n    }\n  }, {\n    key: \"format\",\n    value: function format(number, applyMultiplier) {\n      applyMultiplier = scout.nvl(applyMultiplier, true);\n\n      if (number === null || number === undefined) {\n        return null;\n      }\n\n      var prefix = this.positivePrefix;\n      var suffix = this.positiveSuffix; // apply multiplier\n\n      if (applyMultiplier && this.multiplier !== 1) {\n        number *= this.multiplier;\n      } // round\n\n\n      number = this.round(number); // after decimal point\n\n      var after = '';\n\n      if (this.allAfter) {\n        after = number.toFixed(this.allAfter).split('.')[1];\n\n        for (var j = after.length - 1; j > this.zeroAfter - 1; j--) {\n          if (after[j] !== '0') {\n            break;\n          }\n\n          after = after.slice(0, -1);\n        }\n\n        if (after) {\n          // did we find any non-zero characters?\n          after = this.decimalSeparatorChar + after;\n        }\n      } // absolute value\n\n\n      if (number < 0) {\n        prefix = this.negativePrefix;\n        suffix = this.negativeSuffix;\n        number = -number;\n      } // before decimal point\n\n\n      var before = Math.floor(number);\n      before = before === 0 ? '' : String(before);\n      before = strings.padZeroLeft(before, this.zeroBefore); // group digits\n\n      if (this.groupLength) {\n        for (var i = before.length - this.groupLength; i > 0; i -= this.groupLength) {\n          before = before.substr(0, i) + this.groupingChar + before.substr(i);\n        }\n      } // put together and return\n\n\n      return prefix + before + after + suffix;\n    }\n    /**\n     * Rounds a number according to the properties of the DecimalFormat.\n     */\n\n  }, {\n    key: \"round\",\n    value: function round(number, applyMultiplier) {\n      applyMultiplier = scout.nvl(applyMultiplier, true);\n\n      if (number === null || number === undefined) {\n        return null;\n      } // apply multiplier\n\n\n      if (applyMultiplier && this.multiplier !== 1) {\n        number *= this.multiplier;\n      } // round\n\n\n      number = numbers.round(number, this.roundingMode, this.allAfter); // un-apply multiplier\n\n      if (applyMultiplier && this.multiplier !== 1) {\n        number /= this.multiplier;\n      }\n\n      return number;\n    }\n    /**\n     * Convert to JS number format (remove groupingChar, replace decimalSeparatorChar with '.')\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize(numberString) {\n      if (!numberString) {\n        return numberString;\n      }\n\n      return numberString.replace(new RegExp('[' + this.groupingChar + this.lenientGroupingChars + ']', 'g'), '').replace(new RegExp('[' + this.decimalSeparatorChar + ']', 'g'), '.').replace(/\\s/g, '');\n    }\n    /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n    /**\n     * Literal (not localized!) pattern symbols as defined in http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html\n     */\n\n  }], [{\n    key: \"ensure\",\n    value: function ensure(locale, format) {\n      if (!format) {\n        return format;\n      }\n\n      if (format instanceof DecimalFormat) {\n        return format;\n      }\n\n      return new DecimalFormat(locale, format);\n    }\n  }]);\n\n  return DecimalFormat;\n}();\n\n_defineProperty(DecimalFormat, \"PATTERN_SYMBOLS\", {\n  digit: '#',\n  zeroDigit: '0',\n  decimalSeparator: '.',\n  groupingSeparator: ',',\n  minusSign: '-',\n  patternSeparator: ';'\n});\n\nexport { DecimalFormat as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/text/DecimalFormat.js"],"names":["numbers","RoundingMode","scout","strings","DecimalFormat","locale","options","positivePrefix","positiveSuffix","negativePrefix","decimalFormatSymbols","minusSign","negativeSuffix","groupingChar","groupingSeparator","lenientGroupingChars","groupLength","decimalSeparatorChar","decimalSeparator","zeroBefore","zeroAfter","allAfter","pattern","decimalFormatPatternDefault","multiplier","roundingMode","HALF_UP","SYMBOLS","PATTERN_SYMBOLS","split","patternSeparator","positivePrefixAndSuffix","findPrefixAndSuffix","prefix","suffix","length","negativePrefixAndSuffix","indexOf","replace","posDecimalSeparator","posGroupingSeparator","lastIndexOf","RegExp","count","zeroDigit","digit","result","digitLikeCharacters","r","matches","exec","numberString","evaluateNumberFunction","empty","normalizedNumberString","normalize","Number","number","isNaN","Error","applyMultiplier","nvl","undefined","round","after","toFixed","j","slice","before","Math","floor","String","padZeroLeft","i","substr","format"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {numbers, RoundingMode, scout, strings} from '../index';\n\n/**\n * Provides formatting of numbers using java format pattern.\n * <p>\n * Compared to the java DecimalFormat the following pattern characters are not considered:\n * <ul>\n *   <li>prefix and suffix</li>\n *   <li>E</li>\n *   <li>%</li>\n * </ul>\n */\nexport default class DecimalFormat {\n\n  constructor(locale, options) {\n    // format function will use these (defaults)\n    this.positivePrefix = '';\n    this.positiveSuffix = '';\n    this.negativePrefix = locale.decimalFormatSymbols.minusSign;\n    this.negativeSuffix = '';\n    this.groupingChar = locale.decimalFormatSymbols.groupingSeparator;\n    // we want to be lenient when it comes to grouping separators, try the locale default plus a few others\n    this.lenientGroupingChars = '\\'´`’' + // apostrophe and variations\n      '\\u00B7' + // middle dot\n      '\\u0020' + // space\n      '\\u00A0' + // no-break space\n      '\\u2009' + // thin space\n      '\\u202F'; // narrow no-break space\n    this.groupLength = 0;\n    this.decimalSeparatorChar = locale.decimalFormatSymbols.decimalSeparator;\n    this.zeroBefore = 1;\n    this.zeroAfter = 0;\n    this.allAfter = 0;\n\n    if (typeof options === 'string') {\n      this.pattern = options;\n    }\n    options = options || {};\n    this.pattern = this.pattern || options.pattern || locale.decimalFormatPatternDefault;\n    this.multiplier = options.multiplier || 1;\n    this.roundingMode = options.roundingMode || RoundingMode.HALF_UP;\n\n    var SYMBOLS = DecimalFormat.PATTERN_SYMBOLS;\n    // Check if there are separate subpatterns for positive and negative numbers (\"PositivePattern;NegativePattern\")\n    var split = this.pattern.split(SYMBOLS.patternSeparator);\n    // Use the first subpattern as positive prefix/suffix\n    var positivePrefixAndSuffix = findPrefixAndSuffix(split[0]);\n    this.positivePrefix = positivePrefixAndSuffix.prefix;\n    this.positiveSuffix = positivePrefixAndSuffix.suffix;\n    if (split.length > 1) {\n      // Yes, there is a negative subpattern\n      var negativePrefixAndSuffix = findPrefixAndSuffix(split[1]);\n      this.negativePrefix = negativePrefixAndSuffix.prefix;\n      this.negativeSuffix = negativePrefixAndSuffix.suffix;\n      // from now on, only look at the positive subpattern\n      this.pattern = split[0];\n    } else {\n      // No, there is no negative subpattern, so the positive prefix/suffix are used for both positive and negative numbers.\n      // Check if there is a minus sign in the prefix/suffix.\n      if (this.positivePrefix.indexOf(SYMBOLS.minusSign) !== -1 || this.positiveSuffix.indexOf(SYMBOLS.minusSign) !== -1) {\n        // Yes, there is a minus sign in the prefix/suffix. Use this a negativePrefix/Suffix and remove the minus sign from the posistivePrefix/Suffix.\n        this.negativePrefix = this.positivePrefix.replace(SYMBOLS.minusSign, locale.decimalFormatSymbols.minusSign);\n        this.negativeSuffix = this.positiveSuffix.replace(SYMBOLS.minusSign, locale.decimalFormatSymbols.minusSign);\n        this.positivePrefix = this.positivePrefix.replace(SYMBOLS.minusSign, '');\n        this.positiveSuffix = this.positiveSuffix.replace(SYMBOLS.minusSign, '');\n      } else {\n        // No, there is no minus sign in the prefix/suffix. Therefore, use the default negativePrefix/Suffix, but append the positivePrefix/Suffix\n        this.negativePrefix = this.positivePrefix + this.negativePrefix;\n        this.negativeSuffix = this.negativeSuffix + this.positiveSuffix;\n      }\n    }\n\n    // find group length\n    var posDecimalSeparator = this.pattern.indexOf(SYMBOLS.decimalSeparator);\n    if (posDecimalSeparator === -1) {\n      posDecimalSeparator = this.pattern.length; // assume decimal separator at end\n    }\n    var posGroupingSeparator = this.pattern.lastIndexOf(SYMBOLS.groupingSeparator, posDecimalSeparator); // only search before decimal separator\n    if (posGroupingSeparator > 0) {\n      this.groupLength = posDecimalSeparator - posGroupingSeparator - 1;\n    }\n    this.pattern = this.pattern.replace(new RegExp('[' + SYMBOLS.groupingSeparator + ']', 'g'), '');\n\n    // split on decimal point\n    split = this.pattern.split(SYMBOLS.decimalSeparator);\n\n    // find digits before and after decimal point\n    this.zeroBefore = strings.count(split[0], SYMBOLS.zeroDigit);\n    if (split.length > 1) { // has decimal point?\n      this.zeroAfter = strings.count(split[1], SYMBOLS.zeroDigit);\n      this.allAfter = this.zeroAfter + strings.count(split[1], SYMBOLS.digit);\n    }\n\n    // Returns an object with the properties 'prefix' and 'suffix', which contain all characters\n    // before or after any 'digit-like' character in the given pattern string.\n    function findPrefixAndSuffix(pattern) {\n      var result = {\n        prefix: '',\n        suffix: ''\n      };\n      // Find prefix (anything before the first 'digit-like' character)\n      var digitLikeCharacters = SYMBOLS.digit + SYMBOLS.zeroDigit + SYMBOLS.decimalSeparator + SYMBOLS.groupingSeparator;\n      var r = new RegExp('^(.*?)[' + digitLikeCharacters + '].*$');\n      var matches = r.exec(pattern);\n      if (matches !== null) {\n        // Ignore single quotes (for special, quoted characters - e.g. Java quotes percentage sign like '%')\n        result.prefix = matches[1].replace(new RegExp('\\'([^\\']+)\\'', 'g'), '$1');\n      }\n      // Find suffix (anything before the first 'digit-like' character)\n      r = new RegExp('^.*[' + digitLikeCharacters + '](.*?)$');\n      matches = r.exec(pattern);\n      if (matches !== null) {\n        // Ignore single quotes (for special, quoted characters - e.g. Java quotes percentage sign like '%')\n        result.suffix = matches[1].replace(new RegExp('\\'([^\\']+)\\'', 'g'), '$1');\n      }\n      return result;\n    }\n  }\n\n  /**\n   * Converts the numberString into a number and applies the multiplier.\n   * @param numberString\n   * @param evaluateNumberFunction optional function for custom evaluation. The function gets a normalized string and has to return a Number\n   * @return Returns a number for the given numberString, if the string can be converted into a number. Throws an Error otherwise\n   */\n  parse(numberString, evaluateNumberFunction) {\n    if (strings.empty(numberString)) {\n      return null;\n    }\n    var normalizedNumberString = this.normalize(numberString);\n    evaluateNumberFunction = evaluateNumberFunction || Number;\n    var number = evaluateNumberFunction(normalizedNumberString);\n\n    if (isNaN(number)) {\n      throw new Error(numberString + ' is not a number (NaN)');\n    }\n    if (this.multiplier !== 1) {\n      number /= this.multiplier;\n    }\n    return number;\n  }\n\n  format(number, applyMultiplier) {\n    applyMultiplier = scout.nvl(applyMultiplier, true);\n    if (number === null || number === undefined) {\n      return null;\n    }\n\n    var prefix = this.positivePrefix;\n    var suffix = this.positiveSuffix;\n\n    // apply multiplier\n    if (applyMultiplier && this.multiplier !== 1) {\n      number *= this.multiplier;\n    }\n\n    // round\n    number = this.round(number);\n\n    // after decimal point\n    var after = '';\n    if (this.allAfter) {\n      after = number.toFixed(this.allAfter).split('.')[1];\n      for (var j = after.length - 1; j > this.zeroAfter - 1; j--) {\n        if (after[j] !== '0') {\n          break;\n        }\n        after = after.slice(0, -1);\n      }\n      if (after) { // did we find any non-zero characters?\n        after = this.decimalSeparatorChar + after;\n      }\n    }\n\n    // absolute value\n    if (number < 0) {\n      prefix = this.negativePrefix;\n      suffix = this.negativeSuffix;\n      number = -number;\n    }\n\n    // before decimal point\n    var before = Math.floor(number);\n    before = (before === 0) ? '' : String(before);\n    before = strings.padZeroLeft(before, this.zeroBefore);\n\n    // group digits\n    if (this.groupLength) {\n      for (var i = before.length - this.groupLength; i > 0; i -= this.groupLength) {\n        before = before.substr(0, i) + this.groupingChar + before.substr(i);\n      }\n    }\n\n    // put together and return\n    return prefix + before + after + suffix;\n  }\n\n  /**\n   * Rounds a number according to the properties of the DecimalFormat.\n   */\n  round(number, applyMultiplier) {\n    applyMultiplier = scout.nvl(applyMultiplier, true);\n    if (number === null || number === undefined) {\n      return null;\n    }\n\n    // apply multiplier\n    if (applyMultiplier && this.multiplier !== 1) {\n      number *= this.multiplier;\n    }\n    // round\n    number = numbers.round(number, this.roundingMode, this.allAfter);\n    // un-apply multiplier\n    if (applyMultiplier && this.multiplier !== 1) {\n      number /= this.multiplier;\n    }\n    return number;\n  }\n\n  /**\n   * Convert to JS number format (remove groupingChar, replace decimalSeparatorChar with '.')\n   */\n  normalize(numberString) {\n    if (!numberString) {\n      return numberString;\n    }\n    return numberString\n      .replace(new RegExp('[' + this.groupingChar + this.lenientGroupingChars + ']', 'g'), '')\n      .replace(new RegExp('[' + this.decimalSeparatorChar + ']', 'g'), '.')\n      .replace(/\\s/g, '');\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  /**\n   * Literal (not localized!) pattern symbols as defined in http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html\n   */\n  static PATTERN_SYMBOLS = {\n    digit: '#',\n    zeroDigit: '0',\n    decimalSeparator: '.',\n    groupingSeparator: ',',\n    minusSign: '-',\n    patternSeparator: ';'\n  };\n\n  static ensure(locale, format) {\n    if (!format) {\n      return format;\n    }\n    if (format instanceof DecimalFormat) {\n      return format;\n    }\n    return new DecimalFormat(locale, format);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}