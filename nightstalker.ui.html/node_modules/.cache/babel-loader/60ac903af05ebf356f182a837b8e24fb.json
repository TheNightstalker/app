{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, fields, FormField, graphics, HtmlComponent, SmartField, SmartFieldLayout, SmartFieldMultilineLayout } from '../../../index';\n\nvar SmartFieldMultiline = /*#__PURE__*/function (_SmartField) {\n  _inherits(SmartFieldMultiline, _SmartField);\n\n  var _super = _createSuper(SmartFieldMultiline);\n\n  function SmartFieldMultiline() {\n    var _this;\n\n    _classCallCheck(this, SmartFieldMultiline);\n\n    _this = _super.call(this);\n    _this._$multilineLines = null;\n    return _this;\n  }\n\n  _createClass(SmartFieldMultiline, [{\n    key: \"_render\",\n    value: function _render() {\n      var $input, htmlComp;\n      this.addContainer(this.$parent, 'smart-field has-icon', new SmartFieldLayout(this));\n      this.addLabel();\n      this.addFieldContainer(this.$parent.makeDiv('multiline'));\n      htmlComp = HtmlComponent.install(this.$fieldContainer, this.session);\n      htmlComp.setLayout(new SmartFieldMultilineLayout(this));\n      $input = fields.makeInputOrDiv(this, 'multiline-input').on('mousedown', this._onFieldMouseDown.bind(this)).appendTo(this.$fieldContainer);\n\n      if (!this.touchMode) {\n        $input.keyup(this._onFieldKeyUp.bind(this)).keydown(this._onFieldKeyDown.bind(this)).on('input', this._onFieldInput.bind(this));\n      }\n\n      this.addField($input);\n      this._$multilineLines = this.$fieldContainer.appendDiv('multiline-lines').on('click', this._onMultilineLinesClick.bind(this));\n\n      if (!this.embedded) {\n        this.addMandatoryIndicator();\n      }\n\n      this.addIcon();\n      this.$icon.addClass('needsclick');\n      this.addStatus();\n    }\n  }, {\n    key: \"_renderEnabled\",\n    value: function _renderEnabled() {\n      _get(_getPrototypeOf(SmartFieldMultiline.prototype), \"_renderEnabled\", this).call(this);\n\n      this._$multilineLines.setEnabled(this.enabledComputed);\n    }\n    /**\n     * Sets the focus to the input field when user clicks on text lines, but only if nothing is selected.\n     * Otherwise it would be impossible for the user to select the text. That's why we cannot use the\n     * mousedown event here too.\n     */\n\n  }, {\n    key: \"_onMultilineLinesClick\",\n    value: function _onMultilineLinesClick(event) {\n      if (this.enabledComputed) {\n        var selection = this.$field.window(true).getSelection();\n\n        if (!selection.toString()) {\n          this.$field.focus();\n        }\n      }\n    }\n  }, {\n    key: \"_renderDisplayText\",\n    value: function _renderDisplayText() {\n      _get(_getPrototypeOf(SmartFieldMultiline.prototype), \"_renderDisplayText\", this).call(this);\n\n      var additionalLines = this.additionalLines();\n\n      if (additionalLines) {\n        this._$multilineLines.html(arrays.formatEncoded(additionalLines, '<br/>'));\n      } else {\n        this._$multilineLines.empty();\n      }\n    }\n  }, {\n    key: \"_getInputBounds\",\n    value: function _getInputBounds() {\n      var fieldBounds = graphics.offsetBounds(this.$fieldContainer),\n          textFieldBounds = graphics.offsetBounds(this.$field);\n      fieldBounds.height = textFieldBounds.height;\n      return fieldBounds;\n    }\n  }, {\n    key: \"_renderFocused\",\n    value: function _renderFocused() {\n      _get(_getPrototypeOf(SmartFieldMultiline.prototype), \"_renderFocused\", this).call(this);\n\n      this._$multilineLines.toggleClass('focused', this.focused);\n    }\n  }, {\n    key: \"_updateErrorStatusClasses\",\n    value: function _updateErrorStatusClasses(statusClass, hasStatus) {\n      _get(_getPrototypeOf(SmartFieldMultiline.prototype), \"_updateErrorStatusClasses\", this).call(this, statusClass, hasStatus);\n\n      this._$multilineLines.removeClass(FormField.SEVERITY_CSS_CLASSES);\n\n      this._$multilineLines.addClass(statusClass, hasStatus);\n    }\n  }]);\n\n  return SmartFieldMultiline;\n}(SmartField);\n\nexport { SmartFieldMultiline as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/smartfield/SmartFieldMultiline.js"],"names":["arrays","fields","FormField","graphics","HtmlComponent","SmartField","SmartFieldLayout","SmartFieldMultilineLayout","SmartFieldMultiline","_$multilineLines","$input","htmlComp","addContainer","$parent","addLabel","addFieldContainer","makeDiv","install","$fieldContainer","session","setLayout","makeInputOrDiv","on","_onFieldMouseDown","bind","appendTo","touchMode","keyup","_onFieldKeyUp","keydown","_onFieldKeyDown","_onFieldInput","addField","appendDiv","_onMultilineLinesClick","embedded","addMandatoryIndicator","addIcon","$icon","addClass","addStatus","setEnabled","enabledComputed","event","selection","$field","window","getSelection","toString","focus","additionalLines","html","formatEncoded","empty","fieldBounds","offsetBounds","textFieldBounds","height","toggleClass","focused","statusClass","hasStatus","removeClass","SEVERITY_CSS_CLASSES"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAR,EAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,aAA7C,EAA4DC,UAA5D,EAAwEC,gBAAxE,EAA0FC,yBAA1F,QAA0H,gBAA1H;;IAEqBC,mB;;;;;AAEnB,iCAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,gBAAL,GAAwB,IAAxB;AAFY;AAGb;;;;8BAES;AACR,UAAIC,MAAJ,EAAYC,QAAZ;AAEA,WAAKC,YAAL,CAAkB,KAAKC,OAAvB,EAAgC,sBAAhC,EAAwD,IAAIP,gBAAJ,CAAqB,IAArB,CAAxD;AACA,WAAKQ,QAAL;AACA,WAAKC,iBAAL,CAAuB,KAAKF,OAAL,CAAaG,OAAb,CAAqB,WAArB,CAAvB;AACAL,MAAAA,QAAQ,GAAGP,aAAa,CAACa,OAAd,CAAsB,KAAKC,eAA3B,EAA4C,KAAKC,OAAjD,CAAX;AACAR,MAAAA,QAAQ,CAACS,SAAT,CAAmB,IAAIb,yBAAJ,CAA8B,IAA9B,CAAnB;AAEAG,MAAAA,MAAM,GAAGT,MAAM,CAACoB,cAAP,CAAsB,IAAtB,EAA4B,iBAA5B,EACNC,EADM,CACH,WADG,EACU,KAAKC,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CADV,EAENC,QAFM,CAEG,KAAKP,eAFR,CAAT;;AAIA,UAAI,CAAC,KAAKQ,SAAV,EAAqB;AACnBhB,QAAAA,MAAM,CACHiB,KADH,CACS,KAAKC,aAAL,CAAmBJ,IAAnB,CAAwB,IAAxB,CADT,EAEGK,OAFH,CAEW,KAAKC,eAAL,CAAqBN,IAArB,CAA0B,IAA1B,CAFX,EAGGF,EAHH,CAGM,OAHN,EAGe,KAAKS,aAAL,CAAmBP,IAAnB,CAAwB,IAAxB,CAHf;AAID;;AACD,WAAKQ,QAAL,CAActB,MAAd;AAEA,WAAKD,gBAAL,GAAwB,KAAKS,eAAL,CACrBe,SADqB,CACX,iBADW,EAErBX,EAFqB,CAElB,OAFkB,EAET,KAAKY,sBAAL,CAA4BV,IAA5B,CAAiC,IAAjC,CAFS,CAAxB;;AAGA,UAAI,CAAC,KAAKW,QAAV,EAAoB;AAClB,aAAKC,qBAAL;AACD;;AACD,WAAKC,OAAL;AACA,WAAKC,KAAL,CAAWC,QAAX,CAAoB,YAApB;AACA,WAAKC,SAAL;AACD;;;qCAEgB;AACf;;AACA,WAAK/B,gBAAL,CAAsBgC,UAAtB,CAAiC,KAAKC,eAAtC;AACD;AAED;AACF;AACA;AACA;AACA;;;;2CACyBC,K,EAAO;AAC5B,UAAI,KAAKD,eAAT,EAA0B;AACxB,YAAIE,SAAS,GAAG,KAAKC,MAAL,CAAYC,MAAZ,CAAmB,IAAnB,EAAyBC,YAAzB,EAAhB;;AACA,YAAI,CAACH,SAAS,CAACI,QAAV,EAAL,EAA2B;AACzB,eAAKH,MAAL,CAAYI,KAAZ;AACD;AACF;AACF;;;yCAEoB;AACnB;;AACA,UAAIC,eAAe,GAAG,KAAKA,eAAL,EAAtB;;AACA,UAAIA,eAAJ,EAAqB;AACnB,aAAKzC,gBAAL,CAAsB0C,IAAtB,CAA2BnD,MAAM,CAACoD,aAAP,CAAqBF,eAArB,EAAsC,OAAtC,CAA3B;AACD,OAFD,MAEO;AACL,aAAKzC,gBAAL,CAAsB4C,KAAtB;AACD;AACF;;;sCAEiB;AAChB,UAAIC,WAAW,GAAGnD,QAAQ,CAACoD,YAAT,CAAsB,KAAKrC,eAA3B,CAAlB;AAAA,UACEsC,eAAe,GAAGrD,QAAQ,CAACoD,YAAT,CAAsB,KAAKV,MAA3B,CADpB;AAEAS,MAAAA,WAAW,CAACG,MAAZ,GAAqBD,eAAe,CAACC,MAArC;AACA,aAAOH,WAAP;AACD;;;qCAEgB;AACf;;AACA,WAAK7C,gBAAL,CAAsBiD,WAAtB,CAAkC,SAAlC,EAA6C,KAAKC,OAAlD;AACD;;;8CAEyBC,W,EAAaC,S,EAAW;AAChD,yGAAgCD,WAAhC,EAA6CC,SAA7C;;AACA,WAAKpD,gBAAL,CAAsBqD,WAAtB,CAAkC5D,SAAS,CAAC6D,oBAA5C;;AACA,WAAKtD,gBAAL,CAAsB8B,QAAtB,CAA+BqB,WAA/B,EAA4CC,SAA5C;AACD;;;;EApF8CxD,U;;SAA5BG,mB","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, fields, FormField, graphics, HtmlComponent, SmartField, SmartFieldLayout, SmartFieldMultilineLayout} from '../../../index';\n\nexport default class SmartFieldMultiline extends SmartField {\n\n  constructor() {\n    super();\n    this._$multilineLines = null;\n  }\n\n  _render() {\n    var $input, htmlComp;\n\n    this.addContainer(this.$parent, 'smart-field has-icon', new SmartFieldLayout(this));\n    this.addLabel();\n    this.addFieldContainer(this.$parent.makeDiv('multiline'));\n    htmlComp = HtmlComponent.install(this.$fieldContainer, this.session);\n    htmlComp.setLayout(new SmartFieldMultilineLayout(this));\n\n    $input = fields.makeInputOrDiv(this, 'multiline-input')\n      .on('mousedown', this._onFieldMouseDown.bind(this))\n      .appendTo(this.$fieldContainer);\n\n    if (!this.touchMode) {\n      $input\n        .keyup(this._onFieldKeyUp.bind(this))\n        .keydown(this._onFieldKeyDown.bind(this))\n        .on('input', this._onFieldInput.bind(this));\n    }\n    this.addField($input);\n\n    this._$multilineLines = this.$fieldContainer\n      .appendDiv('multiline-lines')\n      .on('click', this._onMultilineLinesClick.bind(this));\n    if (!this.embedded) {\n      this.addMandatoryIndicator();\n    }\n    this.addIcon();\n    this.$icon.addClass('needsclick');\n    this.addStatus();\n  }\n\n  _renderEnabled() {\n    super._renderEnabled();\n    this._$multilineLines.setEnabled(this.enabledComputed);\n  }\n\n  /**\n   * Sets the focus to the input field when user clicks on text lines, but only if nothing is selected.\n   * Otherwise it would be impossible for the user to select the text. That's why we cannot use the\n   * mousedown event here too.\n   */\n  _onMultilineLinesClick(event) {\n    if (this.enabledComputed) {\n      var selection = this.$field.window(true).getSelection();\n      if (!selection.toString()) {\n        this.$field.focus();\n      }\n    }\n  }\n\n  _renderDisplayText() {\n    super._renderDisplayText();\n    var additionalLines = this.additionalLines();\n    if (additionalLines) {\n      this._$multilineLines.html(arrays.formatEncoded(additionalLines, '<br/>'));\n    } else {\n      this._$multilineLines.empty();\n    }\n  }\n\n  _getInputBounds() {\n    var fieldBounds = graphics.offsetBounds(this.$fieldContainer),\n      textFieldBounds = graphics.offsetBounds(this.$field);\n    fieldBounds.height = textFieldBounds.height;\n    return fieldBounds;\n  }\n\n  _renderFocused() {\n    super._renderFocused();\n    this._$multilineLines.toggleClass('focused', this.focused);\n  }\n\n  _updateErrorStatusClasses(statusClass, hasStatus) {\n    super._updateErrorStatusClasses(statusClass, hasStatus);\n    this._$multilineLines.removeClass(FormField.SEVERITY_CSS_CLASSES);\n    this._$multilineLines.addClass(statusClass, hasStatus);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}