{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { DesktopNotification, Status } from '../../index';\n\nvar OfflineDesktopNotification = /*#__PURE__*/function (_DesktopNotification) {\n  _inherits(OfflineDesktopNotification, _DesktopNotification);\n\n  var _super = _createSuper(OfflineDesktopNotification);\n\n  function OfflineDesktopNotification() {\n    var _this;\n\n    _classCallCheck(this, OfflineDesktopNotification);\n\n    _this = _super.call(this);\n    _this.connectFailedReset = null;\n    return _this;\n  }\n\n  _createClass(OfflineDesktopNotification, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(OfflineDesktopNotification.prototype), \"_init\", this).call(this, model);\n\n      this.closable = false;\n      this.duration = DesktopNotification.INFINITE;\n      this.status = new Status({\n        message: this.session.text('ui.ConnectionInterrupted'),\n        severity: Status.Severity.ERROR\n      });\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(OfflineDesktopNotification.prototype), \"_render\", this).call(this);\n\n      this.$content.addClass('offline-message');\n      this.$messageText.addClass('offline-message-text');\n      this.$loader.text(this.session.text('ui.Reconnecting_'));\n    }\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      this.setLoading(true);\n\n      if (this.connectFailedReset) {\n        clearTimeout(this.connectFailedReset);\n      }\n\n      this.$messageText.hide();\n    }\n  }, {\n    key: \"reconnectFailed\",\n    value: function reconnectFailed() {\n      /* remove the connecting state with a small delay. otherwise it cannot be read because its only shown very shortly */\n      this.connectFailedReset = setTimeout(function () {\n        this.connectFailedReset = null;\n        this.setLoading(false);\n        this.$messageText.show();\n      }.bind(this), 1100\n      /* this delay must be < Reconnector.interval */\n      );\n    }\n  }, {\n    key: \"reconnectSucceeded\",\n    value: function reconnectSucceeded() {\n      this.setLoading(false);\n\n      if (this.connectFailedReset) {\n        clearTimeout(this.connectFailedReset);\n      }\n\n      this.setStatus({\n        message: this.session.text('ui.ConnectionReestablished'),\n        severity: Status.Severity.OK\n      });\n      this.$messageText.show();\n    }\n  }]);\n\n  return OfflineDesktopNotification;\n}(DesktopNotification);\n\nexport { OfflineDesktopNotification as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/notification/OfflineDesktopNotification.js"],"names":["DesktopNotification","Status","OfflineDesktopNotification","connectFailedReset","model","closable","duration","INFINITE","status","message","session","text","severity","Severity","ERROR","$content","addClass","$messageText","$loader","setLoading","clearTimeout","hide","setTimeout","show","bind","setStatus","OK"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,mBAAR,EAA6BC,MAA7B,QAA0C,aAA1C;;IAEqBC,0B;;;;;AAEnB,wCAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,kBAAL,GAA0B,IAA1B;AAHY;AAIb;;;;0BAEKC,K,EAAO;AACX,4FAAYA,KAAZ;;AACA,WAAKC,QAAL,GAAgB,KAAhB;AACA,WAAKC,QAAL,GAAgBN,mBAAmB,CAACO,QAApC;AACA,WAAKC,MAAL,GAAc,IAAIP,MAAJ,CAAW;AACvBQ,QAAAA,OAAO,EAAE,KAAKC,OAAL,CAAaC,IAAb,CAAkB,0BAAlB,CADc;AAEvBC,QAAAA,QAAQ,EAAEX,MAAM,CAACY,QAAP,CAAgBC;AAFH,OAAX,CAAd;AAID;;;8BAES;AACR;;AACA,WAAKC,QAAL,CAAcC,QAAd,CAAuB,iBAAvB;AACA,WAAKC,YAAL,CAAkBD,QAAlB,CAA2B,sBAA3B;AACA,WAAKE,OAAL,CAAaP,IAAb,CAAkB,KAAKD,OAAL,CAAaC,IAAb,CAAkB,kBAAlB,CAAlB;AACD;;;gCAEW;AACV,WAAKQ,UAAL,CAAgB,IAAhB;;AACA,UAAI,KAAKhB,kBAAT,EAA6B;AAC3BiB,QAAAA,YAAY,CAAC,KAAKjB,kBAAN,CAAZ;AACD;;AACD,WAAKc,YAAL,CAAkBI,IAAlB;AACD;;;sCAEiB;AAChB;AACA,WAAKlB,kBAAL,GAA0BmB,UAAU,CAAC,YAAW;AAC9C,aAAKnB,kBAAL,GAA0B,IAA1B;AACA,aAAKgB,UAAL,CAAgB,KAAhB;AACA,aAAKF,YAAL,CAAkBM,IAAlB;AACD,OAJoC,CAInCC,IAJmC,CAI9B,IAJ8B,CAAD,EAItB;AAAK;AAJiB,OAApC;AAKD;;;yCAEoB;AACnB,WAAKL,UAAL,CAAgB,KAAhB;;AACA,UAAI,KAAKhB,kBAAT,EAA6B;AAC3BiB,QAAAA,YAAY,CAAC,KAAKjB,kBAAN,CAAZ;AACD;;AACD,WAAKsB,SAAL,CAAe;AACbhB,QAAAA,OAAO,EAAE,KAAKC,OAAL,CAAaC,IAAb,CAAkB,4BAAlB,CADI;AAEbC,QAAAA,QAAQ,EAAEX,MAAM,CAACY,QAAP,CAAgBa;AAFb,OAAf;AAIA,WAAKT,YAAL,CAAkBM,IAAlB;AACD;;;;EApDqDvB,mB;;SAAnCE,0B","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {DesktopNotification, Status} from '../../index';\n\nexport default class OfflineDesktopNotification extends DesktopNotification {\n\n  constructor() {\n    super();\n\n    this.connectFailedReset = null;\n  }\n\n  _init(model) {\n    super._init(model);\n    this.closable = false;\n    this.duration = DesktopNotification.INFINITE;\n    this.status = new Status({\n      message: this.session.text('ui.ConnectionInterrupted'),\n      severity: Status.Severity.ERROR\n    });\n  }\n\n  _render() {\n    super._render();\n    this.$content.addClass('offline-message');\n    this.$messageText.addClass('offline-message-text');\n    this.$loader.text(this.session.text('ui.Reconnecting_'));\n  }\n\n  reconnect() {\n    this.setLoading(true);\n    if (this.connectFailedReset) {\n      clearTimeout(this.connectFailedReset);\n    }\n    this.$messageText.hide();\n  }\n\n  reconnectFailed() {\n    /* remove the connecting state with a small delay. otherwise it cannot be read because its only shown very shortly */\n    this.connectFailedReset = setTimeout(function() {\n      this.connectFailedReset = null;\n      this.setLoading(false);\n      this.$messageText.show();\n    }.bind(this), 1100 /* this delay must be < Reconnector.interval */);\n  }\n\n  reconnectSucceeded() {\n    this.setLoading(false);\n    if (this.connectFailedReset) {\n      clearTimeout(this.connectFailedReset);\n    }\n    this.setStatus({\n      message: this.session.text('ui.ConnectionReestablished'),\n      severity: Status.Severity.OK\n    });\n    this.$messageText.show();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}