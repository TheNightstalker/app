{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Desktop, DesktopHeaderLayout, Form, HtmlComponent, scout, Widget } from '../../index';\n\nvar DesktopHeader = /*#__PURE__*/function (_Widget) {\n  _inherits(DesktopHeader, _Widget);\n\n  var _super = _createSuper(DesktopHeader);\n\n  function DesktopHeader() {\n    var _this;\n\n    _classCallCheck(this, DesktopHeader);\n\n    _this = _super.call(this);\n    _this.tabArea = null;\n    _this.toolBoxVisible = true;\n    _this.viewButtonBox = null;\n    _this.viewButtonBoxVisible = false;\n    _this._desktopPropertyChangeHandler = _this._onDesktopPropertyChange.bind(_assertThisInitialized(_this));\n    _this._desktopAnimationEndHandler = _this._onDesktopAnimationEnd.bind(_assertThisInitialized(_this));\n    _this._outlineContentMenuBarPropertyChangeHandler = _this._onOutlineContentMenuBarPropertyChange.bind(_assertThisInitialized(_this));\n    _this._viewButtonBoxPropertyChangeHandler = _this._onViewButtonBoxPropertyChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DesktopHeader, [{\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(DesktopHeader.prototype), \"_init\", this).call(this, model);\n\n      this.desktop = this.session.desktop;\n      this.updateViewButtonBoxVisibility(); // create view tab box\n\n      this.tabArea = scout.create('SimpleTabArea', {\n        parent: this\n      });\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.$container = this.$parent.appendDiv('desktop-header');\n      this.htmlComp = HtmlComponent.install(this.$container, this.session);\n      this.htmlComp.setLayout(new DesktopHeaderLayout(this));\n\n      this._renderViewButtonBoxVisible();\n\n      this._renderViewTabs();\n\n      this._renderToolBoxVisible();\n\n      this._renderLogoUrl();\n\n      this._renderInBackground();\n\n      this.desktop.on('propertyChange', this._desktopPropertyChangeHandler);\n      this.desktop.on('animationEnd', this._desktopAnimationEndHandler);\n\n      if (this.desktop.bench) {\n        this.outlineContent = this.desktop.bench.outlineContent;\n      }\n\n      this._attachOutlineContentMenuBarHandler();\n    }\n  }, {\n    key: \"_remove\",\n    value: function _remove() {\n      this.desktop.off('propertyChange', this._desktopPropertyChangeHandler);\n      this.desktop.off('animationEnd', this._desktopAnimationEndHandler);\n\n      this._detachOutlineContentMenuBarHandler();\n\n      this.outlineContent = null;\n\n      _get(_getPrototypeOf(DesktopHeader.prototype), \"_remove\", this).call(this);\n    }\n  }, {\n    key: \"_renderViewTabs\",\n    value: function _renderViewTabs() {\n      this.tabArea.render();\n    }\n  }, {\n    key: \"_renderToolBox\",\n    value: function _renderToolBox() {\n      if (this.toolBox) {\n        return;\n      }\n\n      this.toolBox = scout.create('DesktopToolBox', {\n        parent: this,\n        menus: this.desktop.menus\n      });\n      this.toolBox.render();\n    }\n  }, {\n    key: \"_removeToolBox\",\n    value: function _removeToolBox() {\n      if (!this.toolBox) {\n        return;\n      }\n\n      this.toolBox.destroy();\n      this.toolBox = null;\n    }\n  }, {\n    key: \"_renderToolBoxVisible\",\n    value: function _renderToolBoxVisible() {\n      if (this.toolBoxVisible) {\n        this._renderToolBox();\n      } else {\n        this._removeToolBox();\n      }\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"_renderLogoUrl\",\n    value: function _renderLogoUrl() {\n      if (this.logoUrl) {\n        this._renderLogo();\n      } else {\n        this._removeLogo();\n      }\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"_renderLogo\",\n    value: function _renderLogo() {\n      if (this.desktop.displayStyle === Desktop.DisplayStyle.COMPACT) {\n        // Do not render logo in compact mode (wastes space)\n        return;\n      }\n\n      if (!this.logo) {\n        this.logo = scout.create('DesktopLogo', {\n          parent: this,\n          url: this.logoUrl\n        });\n        this.logo.render();\n      } else {\n        this.logo.setUrl(this.logoUrl);\n      }\n    }\n  }, {\n    key: \"_removeLogo\",\n    value: function _removeLogo() {\n      if (!this.logo) {\n        return;\n      }\n\n      this.logo.destroy();\n      this.logo = null;\n    }\n  }, {\n    key: \"_renderViewButtonBox\",\n    value: function _renderViewButtonBox() {\n      if (this.viewButtonBox) {\n        return;\n      }\n\n      this.viewButtonBox = scout.create('ViewButtonBox', {\n        parent: this,\n        viewButtons: this.desktop.viewButtons\n      });\n      this.viewButtonBox.on('propertyChange', this._viewButtonBoxPropertyChangeHandler);\n      this.viewButtonBox.render();\n      this.viewButtonBox.$container.prependTo(this.$container);\n\n      if (this.desktop.inBackground) {\n        this.viewButtonBox.sendToBack();\n      }\n\n      this.updateViewButtonStyling();\n    }\n  }, {\n    key: \"_removeViewButtonBox\",\n    value: function _removeViewButtonBox() {\n      if (!this.viewButtonBox) {\n        return;\n      }\n\n      this.viewButtonBox.off('propertyChange', this._viewButtonBoxPropertyChangeHandler);\n      this.viewButtonBox.destroy();\n      this.viewButtonBox = null;\n    }\n  }, {\n    key: \"_renderViewButtonBoxVisible\",\n    value: function _renderViewButtonBoxVisible() {\n      if (this.viewButtonBoxVisible) {\n        this._renderViewButtonBox();\n      } else {\n        this._removeViewButtonBox();\n      }\n\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"sendToBack\",\n    value: function sendToBack() {\n      if (this.viewButtonBox) {\n        this.viewButtonBox.sendToBack();\n      }\n\n      if (this.rendered) {\n        this._renderInBackground();\n      }\n    }\n  }, {\n    key: \"bringToFront\",\n    value: function bringToFront() {\n      if (this.viewButtonBox) {\n        this.viewButtonBox.bringToFront();\n      }\n\n      if (this.rendered) {\n        this._renderInBackground();\n      }\n    }\n  }, {\n    key: \"_renderInBackground\",\n    value: function _renderInBackground() {\n      this.$container.toggleClass('in-background', this.desktop.inBackground);\n    }\n  }, {\n    key: \"setLogoUrl\",\n    value: function setLogoUrl(logoUrl) {\n      this.setProperty('logoUrl', logoUrl);\n    }\n  }, {\n    key: \"setToolBoxVisible\",\n    value: function setToolBoxVisible(visible) {\n      this.setProperty('toolBoxVisible', visible);\n    }\n  }, {\n    key: \"setViewButtonBoxVisible\",\n    value: function setViewButtonBoxVisible(visible) {\n      this.setProperty('viewButtonBoxVisible', visible);\n    }\n  }, {\n    key: \"setMenus\",\n    value: function setMenus(menus) {\n      if (this.toolBox) {\n        this.toolBox.setMenus(menus);\n      }\n    }\n  }, {\n    key: \"updateViewButtonBoxVisibility\",\n    value: function updateViewButtonBoxVisibility() {\n      // View buttons are visible in the header if the navigation is not visible\n      // If there are no view buttons at all, don't show the box\n      // With displayStyle is set to compact, the view buttons should never be visible in the header\n      this.setViewButtonBoxVisible(this.desktop.viewButtons.length > 0 && !this.desktop.navigationVisible && this.desktop.displayStyle !== Desktop.DisplayStyle.COMPACT);\n    }\n  }, {\n    key: \"_attachOutlineContentMenuBarHandler\",\n    value: function _attachOutlineContentMenuBarHandler() {\n      if (!this.outlineContent) {\n        return;\n      }\n\n      var menuBar = this._outlineContentMenuBar(this.outlineContent);\n\n      if (menuBar) {\n        menuBar.on('propertyChange', this._outlineContentMenuBarPropertyChangeHandler);\n      }\n    }\n  }, {\n    key: \"_detachOutlineContentMenuBarHandler\",\n    value: function _detachOutlineContentMenuBarHandler() {\n      if (!this.outlineContent) {\n        return;\n      }\n\n      var menuBar = this._outlineContentMenuBar(this.outlineContent);\n\n      if (menuBar) {\n        menuBar.off('propertyChange', this._outlineContentMenuBarPropertyChangeHandler);\n      }\n    }\n  }, {\n    key: \"_outlineContentMenuBar\",\n    value: function _outlineContentMenuBar(outlineContent) {\n      if (outlineContent instanceof Form) {\n        return outlineContent.rootGroupBox.menuBar;\n      }\n\n      return outlineContent.menuBar;\n    }\n  }, {\n    key: \"updateViewButtonStyling\",\n    value: function updateViewButtonStyling() {\n      if (!this.viewButtonBoxVisible || !this.desktop.bench || !this.desktop.bench.outlineContentVisible) {\n        return;\n      }\n\n      var outlineContent = this.desktop.bench.outlineContent;\n\n      if (!outlineContent) {\n        // Outline content not available yet (-> needs to be loaded first)\n        return;\n      }\n\n      var hasMenuBar = false;\n\n      if (outlineContent instanceof Form && outlineContent.detailForm) {\n        var rootGroupBox = outlineContent.rootGroupBox;\n        hasMenuBar = rootGroupBox.menuBar && rootGroupBox.menuBarVisible && rootGroupBox.menuBar.visible;\n      } else {\n        hasMenuBar = outlineContent.menuBar && outlineContent.menuBar.visible;\n      }\n\n      this.$container.toggleClass('outline-content-has-menubar', !!hasMenuBar);\n    }\n  }, {\n    key: \"_onDesktopNavigationVisibleChange\",\n    value: function _onDesktopNavigationVisibleChange(event) {\n      // If navigation gets visible: Hide view buttons immediately\n      // If navigation gets hidden using animation: Show view buttons when animation ends\n      if (this.desktop.navigationVisible) {\n        this.updateViewButtonBoxVisibility();\n      }\n    }\n  }, {\n    key: \"_onDesktopAnimationEnd\",\n    value: function _onDesktopAnimationEnd(event) {\n      this.updateViewButtonBoxVisibility();\n    }\n  }, {\n    key: \"onBenchOutlineContentChange\",\n    value: function onBenchOutlineContentChange(content) {\n      this._detachOutlineContentMenuBarHandler();\n\n      this.outlineContent = content;\n      this.updateViewButtonStyling();\n\n      this._attachOutlineContentMenuBarHandler();\n    }\n  }, {\n    key: \"_onDesktopPropertyChange\",\n    value: function _onDesktopPropertyChange(event) {\n      if (event.propertyName === 'navigationVisible') {\n        this._onDesktopNavigationVisibleChange();\n      }\n    }\n  }, {\n    key: \"_onOutlineContentMenuBarPropertyChange\",\n    value: function _onOutlineContentMenuBarPropertyChange(event) {\n      if (event.propertyName === 'visible') {\n        this.updateViewButtonStyling();\n      }\n    }\n  }, {\n    key: \"_onViewButtonBoxPropertyChange\",\n    value: function _onViewButtonBoxPropertyChange(event) {\n      if (event.propertyName === 'menuButtons' || event.propertyName === 'tabButtons') {\n        this.invalidateLayoutTree();\n      }\n    }\n  }]);\n\n  return DesktopHeader;\n}(Widget);\n\nexport { DesktopHeader as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/header/DesktopHeader.js"],"names":["Desktop","DesktopHeaderLayout","Form","HtmlComponent","scout","Widget","DesktopHeader","tabArea","toolBoxVisible","viewButtonBox","viewButtonBoxVisible","_desktopPropertyChangeHandler","_onDesktopPropertyChange","bind","_desktopAnimationEndHandler","_onDesktopAnimationEnd","_outlineContentMenuBarPropertyChangeHandler","_onOutlineContentMenuBarPropertyChange","_viewButtonBoxPropertyChangeHandler","_onViewButtonBoxPropertyChange","model","desktop","session","updateViewButtonBoxVisibility","create","parent","$container","$parent","appendDiv","htmlComp","install","setLayout","_renderViewButtonBoxVisible","_renderViewTabs","_renderToolBoxVisible","_renderLogoUrl","_renderInBackground","on","bench","outlineContent","_attachOutlineContentMenuBarHandler","off","_detachOutlineContentMenuBarHandler","render","toolBox","menus","destroy","_renderToolBox","_removeToolBox","invalidateLayoutTree","logoUrl","_renderLogo","_removeLogo","displayStyle","DisplayStyle","COMPACT","logo","url","setUrl","viewButtons","prependTo","inBackground","sendToBack","updateViewButtonStyling","_renderViewButtonBox","_removeViewButtonBox","rendered","bringToFront","toggleClass","setProperty","visible","setMenus","setViewButtonBoxVisible","length","navigationVisible","menuBar","_outlineContentMenuBar","rootGroupBox","outlineContentVisible","hasMenuBar","detailForm","menuBarVisible","event","content","propertyName","_onDesktopNavigationVisibleChange"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Desktop, DesktopHeaderLayout, Form, HtmlComponent, scout, Widget} from '../../index';\n\nexport default class DesktopHeader extends Widget {\n\n  constructor() {\n    super();\n    this.tabArea = null;\n    this.toolBoxVisible = true;\n    this.viewButtonBox = null;\n    this.viewButtonBoxVisible = false;\n    this._desktopPropertyChangeHandler = this._onDesktopPropertyChange.bind(this);\n    this._desktopAnimationEndHandler = this._onDesktopAnimationEnd.bind(this);\n    this._outlineContentMenuBarPropertyChangeHandler = this._onOutlineContentMenuBarPropertyChange.bind(this);\n    this._viewButtonBoxPropertyChangeHandler = this._onViewButtonBoxPropertyChange.bind(this);\n  }\n\n  _init(model) {\n    super._init(model);\n    this.desktop = this.session.desktop;\n    this.updateViewButtonBoxVisibility();\n    // create view tab box\n    this.tabArea = scout.create('SimpleTabArea', {\n      parent: this\n    });\n  }\n\n  _render() {\n    this.$container = this.$parent.appendDiv('desktop-header');\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(new DesktopHeaderLayout(this));\n    this._renderViewButtonBoxVisible();\n    this._renderViewTabs();\n    this._renderToolBoxVisible();\n    this._renderLogoUrl();\n    this._renderInBackground();\n    this.desktop.on('propertyChange', this._desktopPropertyChangeHandler);\n    this.desktop.on('animationEnd', this._desktopAnimationEndHandler);\n    if (this.desktop.bench) {\n      this.outlineContent = this.desktop.bench.outlineContent;\n    }\n    this._attachOutlineContentMenuBarHandler();\n  }\n\n  _remove() {\n    this.desktop.off('propertyChange', this._desktopPropertyChangeHandler);\n    this.desktop.off('animationEnd', this._desktopAnimationEndHandler);\n    this._detachOutlineContentMenuBarHandler();\n    this.outlineContent = null;\n    super._remove();\n  }\n\n  _renderViewTabs() {\n    this.tabArea.render();\n  }\n\n  _renderToolBox() {\n    if (this.toolBox) {\n      return;\n    }\n    this.toolBox = scout.create('DesktopToolBox', {\n      parent: this,\n      menus: this.desktop.menus\n    });\n    this.toolBox.render();\n  }\n\n  _removeToolBox() {\n    if (!this.toolBox) {\n      return;\n    }\n    this.toolBox.destroy();\n    this.toolBox = null;\n  }\n\n  _renderToolBoxVisible() {\n    if (this.toolBoxVisible) {\n      this._renderToolBox();\n    } else {\n      this._removeToolBox();\n    }\n    this.invalidateLayoutTree();\n  }\n\n  _renderLogoUrl() {\n    if (this.logoUrl) {\n      this._renderLogo();\n    } else {\n      this._removeLogo();\n    }\n    this.invalidateLayoutTree();\n  }\n\n  _renderLogo() {\n    if (this.desktop.displayStyle === Desktop.DisplayStyle.COMPACT) {\n      // Do not render logo in compact mode (wastes space)\n      return;\n    }\n    if (!this.logo) {\n      this.logo = scout.create('DesktopLogo', {\n        parent: this,\n        url: this.logoUrl\n      });\n      this.logo.render();\n    } else {\n      this.logo.setUrl(this.logoUrl);\n    }\n  }\n\n  _removeLogo() {\n    if (!this.logo) {\n      return;\n    }\n    this.logo.destroy();\n    this.logo = null;\n  }\n\n  _renderViewButtonBox() {\n    if (this.viewButtonBox) {\n      return;\n    }\n    this.viewButtonBox = scout.create('ViewButtonBox', {\n      parent: this,\n      viewButtons: this.desktop.viewButtons\n    });\n    this.viewButtonBox.on('propertyChange', this._viewButtonBoxPropertyChangeHandler);\n    this.viewButtonBox.render();\n    this.viewButtonBox.$container.prependTo(this.$container);\n    if (this.desktop.inBackground) {\n      this.viewButtonBox.sendToBack();\n    }\n    this.updateViewButtonStyling();\n  }\n\n  _removeViewButtonBox() {\n    if (!this.viewButtonBox) {\n      return;\n    }\n    this.viewButtonBox.off('propertyChange', this._viewButtonBoxPropertyChangeHandler);\n    this.viewButtonBox.destroy();\n    this.viewButtonBox = null;\n  }\n\n  _renderViewButtonBoxVisible() {\n    if (this.viewButtonBoxVisible) {\n      this._renderViewButtonBox();\n    } else {\n      this._removeViewButtonBox();\n    }\n    this.invalidateLayoutTree();\n  }\n\n  sendToBack() {\n    if (this.viewButtonBox) {\n      this.viewButtonBox.sendToBack();\n    }\n    if (this.rendered) {\n      this._renderInBackground();\n    }\n  }\n\n  bringToFront() {\n    if (this.viewButtonBox) {\n      this.viewButtonBox.bringToFront();\n    }\n    if (this.rendered) {\n      this._renderInBackground();\n    }\n  }\n\n  _renderInBackground() {\n    this.$container.toggleClass('in-background', this.desktop.inBackground);\n  }\n\n  setLogoUrl(logoUrl) {\n    this.setProperty('logoUrl', logoUrl);\n  }\n\n  setToolBoxVisible(visible) {\n    this.setProperty('toolBoxVisible', visible);\n  }\n\n  setViewButtonBoxVisible(visible) {\n    this.setProperty('viewButtonBoxVisible', visible);\n  }\n\n  setMenus(menus) {\n    if (this.toolBox) {\n      this.toolBox.setMenus(menus);\n    }\n  }\n\n  updateViewButtonBoxVisibility() {\n    // View buttons are visible in the header if the navigation is not visible\n    // If there are no view buttons at all, don't show the box\n    // With displayStyle is set to compact, the view buttons should never be visible in the header\n    this.setViewButtonBoxVisible(this.desktop.viewButtons.length > 0 && !this.desktop.navigationVisible && this.desktop.displayStyle !== Desktop.DisplayStyle.COMPACT);\n  }\n\n  _attachOutlineContentMenuBarHandler() {\n    if (!this.outlineContent) {\n      return;\n    }\n    var menuBar = this._outlineContentMenuBar(this.outlineContent);\n    if (menuBar) {\n      menuBar.on('propertyChange', this._outlineContentMenuBarPropertyChangeHandler);\n    }\n  }\n\n  _detachOutlineContentMenuBarHandler() {\n    if (!this.outlineContent) {\n      return;\n    }\n    var menuBar = this._outlineContentMenuBar(this.outlineContent);\n    if (menuBar) {\n      menuBar.off('propertyChange', this._outlineContentMenuBarPropertyChangeHandler);\n    }\n  }\n\n  _outlineContentMenuBar(outlineContent) {\n    if (outlineContent instanceof Form) {\n      return outlineContent.rootGroupBox.menuBar;\n    }\n    return outlineContent.menuBar;\n  }\n\n  updateViewButtonStyling() {\n    if (!this.viewButtonBoxVisible || !this.desktop.bench || !this.desktop.bench.outlineContentVisible) {\n      return;\n    }\n    var outlineContent = this.desktop.bench.outlineContent;\n    if (!outlineContent) {\n      // Outline content not available yet (-> needs to be loaded first)\n      return;\n    }\n    var hasMenuBar = false;\n    if (outlineContent instanceof Form && outlineContent.detailForm) {\n      var rootGroupBox = outlineContent.rootGroupBox;\n      hasMenuBar = rootGroupBox.menuBar && rootGroupBox.menuBarVisible && rootGroupBox.menuBar.visible;\n    } else {\n      hasMenuBar = outlineContent.menuBar && outlineContent.menuBar.visible;\n    }\n    this.$container.toggleClass('outline-content-has-menubar', !!hasMenuBar);\n  }\n\n  _onDesktopNavigationVisibleChange(event) {\n    // If navigation gets visible: Hide view buttons immediately\n    // If navigation gets hidden using animation: Show view buttons when animation ends\n    if (this.desktop.navigationVisible) {\n      this.updateViewButtonBoxVisibility();\n    }\n  }\n\n  _onDesktopAnimationEnd(event) {\n    this.updateViewButtonBoxVisibility();\n  }\n\n  onBenchOutlineContentChange(content) {\n    this._detachOutlineContentMenuBarHandler();\n    this.outlineContent = content;\n    this.updateViewButtonStyling();\n    this._attachOutlineContentMenuBarHandler();\n  }\n\n  _onDesktopPropertyChange(event) {\n    if (event.propertyName === 'navigationVisible') {\n      this._onDesktopNavigationVisibleChange();\n    }\n  }\n\n  _onOutlineContentMenuBarPropertyChange(event) {\n    if (event.propertyName === 'visible') {\n      this.updateViewButtonStyling();\n    }\n  }\n\n  _onViewButtonBoxPropertyChange(event) {\n    if (event.propertyName === 'menuButtons' || event.propertyName === 'tabButtons') {\n      this.invalidateLayoutTree();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}