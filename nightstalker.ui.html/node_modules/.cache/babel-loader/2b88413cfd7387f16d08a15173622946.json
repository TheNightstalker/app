{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { HorizontalGrid, TileGridSelectionHandler } from '../../index';\n\nvar TileAccordionSelectionHandler = /*#__PURE__*/function (_TileGridSelectionHan) {\n  _inherits(TileAccordionSelectionHandler, _TileGridSelectionHan);\n\n  var _super = _createSuper(TileAccordionSelectionHandler);\n\n  function TileAccordionSelectionHandler(tileAccordion) {\n    var _this;\n\n    _classCallCheck(this, TileAccordionSelectionHandler);\n\n    _this = _super.call(this, tileAccordion); // The difference to the main selectionHandler is that this one works on the TileAccordion rather than on the TileGrid\n\n    _this.tileAccordion = _this.tileGrid;\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  _createClass(TileAccordionSelectionHandler, [{\n    key: \"getFilteredTiles\",\n    value: function getFilteredTiles() {\n      return this.tileAccordion.getFilteredTiles();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getFilteredTileCount\",\n    value: function getFilteredTileCount() {\n      return this.tileAccordion.getFilteredTileCount();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getVisibleTiles\",\n    value: function getVisibleTiles() {\n      return this.tileAccordion.getVisibleTiles();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getVisibleTileCount\",\n    value: function getVisibleTileCount() {\n      return this.tileAccordion.getVisibleTileCount();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getSelectedTiles\",\n    value: function getSelectedTiles(event) {\n      return this.tileAccordion.getSelectedTiles();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getFocusedTile\",\n    value: function getFocusedTile() {\n      return this.tileAccordion.getFocusedTile();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getVisibleGridRowCount\",\n    value: function getVisibleGridRowCount() {\n      return this.tileAccordion.getVisibleGridRowCount();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getVisibleGridX\",\n    value: function getVisibleGridX(tile) {\n      return this.tileAccordion.getVisibleGridX(tile);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getVisibleGridY\",\n    value: function getVisibleGridY(tile) {\n      return this.tileAccordion.getVisibleGridY(tile);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(tile) {\n      var group = this.tileAccordion.getGroupByTile(tile);\n      group.body.scrollTo(tile);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getTileGridByRow\",\n    value: function getTileGridByRow(rowIndex) {\n      var group = this.tileAccordion.getGroupByVisibleRow(rowIndex);\n\n      if (group) {\n        return group.body;\n      }\n\n      return null;\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"findVisibleTileIndexAt\",\n    value: function findVisibleTileIndexAt(x, y, startIndex, reverse) {\n      return this.tileAccordion.findVisibleTileIndexAt(x, y, startIndex, reverse);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"isHorizontalGridActive\",\n    value: function isHorizontalGridActive() {\n      if (this.tileAccordion.groups.length === 0) {\n        return false;\n      }\n\n      return this.tileAccordion.groups[0].body.logicalGrid instanceof HorizontalGrid;\n    }\n  }]);\n\n  return TileAccordionSelectionHandler;\n}(TileGridSelectionHandler);\n\nexport { TileAccordionSelectionHandler as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/tile/accordion/TileAccordionSelectionHandler.js"],"names":["HorizontalGrid","TileGridSelectionHandler","TileAccordionSelectionHandler","tileAccordion","tileGrid","getFilteredTiles","getFilteredTileCount","getVisibleTiles","getVisibleTileCount","event","getSelectedTiles","getFocusedTile","getVisibleGridRowCount","tile","getVisibleGridX","getVisibleGridY","group","getGroupByTile","body","scrollTo","rowIndex","getGroupByVisibleRow","x","y","startIndex","reverse","findVisibleTileIndexAt","groups","length","logicalGrid"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,cAAR,EAAwBC,wBAAxB,QAAuD,aAAvD;;IAEqBC,6B;;;;;AAEnB,yCAAYC,aAAZ,EAA2B;AAAA;;AAAA;;AACzB,8BAAMA,aAAN,EADyB,CAEzB;;AACA,UAAKA,aAAL,GAAqB,MAAKC,QAA1B;AAHyB;AAI1B;AAED;AACF;AACA;;;;;uCACqB;AACjB,aAAO,KAAKD,aAAL,CAAmBE,gBAAnB,EAAP;AACD;AAED;AACF;AACA;;;;2CACyB;AACrB,aAAO,KAAKF,aAAL,CAAmBG,oBAAnB,EAAP;AACD;AAED;AACF;AACA;;;;sCACoB;AAChB,aAAO,KAAKH,aAAL,CAAmBI,eAAnB,EAAP;AACD;AAED;AACF;AACA;;;;0CACwB;AACpB,aAAO,KAAKJ,aAAL,CAAmBK,mBAAnB,EAAP;AACD;AAED;AACF;AACA;;;;qCACmBC,K,EAAO;AACtB,aAAO,KAAKN,aAAL,CAAmBO,gBAAnB,EAAP;AACD;AAED;AACF;AACA;;;;qCACmB;AACf,aAAO,KAAKP,aAAL,CAAmBQ,cAAnB,EAAP;AACD;AAED;AACF;AACA;;;;6CAC2B;AACvB,aAAO,KAAKR,aAAL,CAAmBS,sBAAnB,EAAP;AACD;AAED;AACF;AACA;;;;oCACkBC,I,EAAM;AACpB,aAAO,KAAKV,aAAL,CAAmBW,eAAnB,CAAmCD,IAAnC,CAAP;AACD;AAED;AACF;AACA;;;;oCACkBA,I,EAAM;AACpB,aAAO,KAAKV,aAAL,CAAmBY,eAAnB,CAAmCF,IAAnC,CAAP;AACD;AAED;AACF;AACA;;;;6BACWA,I,EAAM;AACb,UAAIG,KAAK,GAAG,KAAKb,aAAL,CAAmBc,cAAnB,CAAkCJ,IAAlC,CAAZ;AACAG,MAAAA,KAAK,CAACE,IAAN,CAAWC,QAAX,CAAoBN,IAApB;AACD;AAED;AACF;AACA;;;;qCACmBO,Q,EAAU;AACzB,UAAIJ,KAAK,GAAG,KAAKb,aAAL,CAAmBkB,oBAAnB,CAAwCD,QAAxC,CAAZ;;AACA,UAAIJ,KAAJ,EAAW;AACT,eAAOA,KAAK,CAACE,IAAb;AACD;;AACD,aAAO,IAAP;AACD;AAED;AACF;AACA;;;;2CACyBI,C,EAAGC,C,EAAGC,U,EAAYC,O,EAAS;AAChD,aAAO,KAAKtB,aAAL,CAAmBuB,sBAAnB,CAA0CJ,CAA1C,EAA6CC,CAA7C,EAAgDC,UAAhD,EAA4DC,OAA5D,CAAP;AACD;AAED;AACF;AACA;;;;6CAC2B;AACvB,UAAI,KAAKtB,aAAL,CAAmBwB,MAAnB,CAA0BC,MAA1B,KAAqC,CAAzC,EAA4C;AAC1C,eAAO,KAAP;AACD;;AACD,aAAO,KAAKzB,aAAL,CAAmBwB,MAAnB,CAA0B,CAA1B,EAA6BT,IAA7B,CAAkCW,WAAlC,YAAyD7B,cAAhE;AACD;;;;EAzGwDC,wB;;SAAtCC,6B","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {HorizontalGrid, TileGridSelectionHandler} from '../../index';\n\nexport default class TileAccordionSelectionHandler extends TileGridSelectionHandler {\n\n  constructor(tileAccordion) {\n    super(tileAccordion);\n    // The difference to the main selectionHandler is that this one works on the TileAccordion rather than on the TileGrid\n    this.tileAccordion = this.tileGrid;\n  }\n\n  /**\n   * @override\n   */\n  getFilteredTiles() {\n    return this.tileAccordion.getFilteredTiles();\n  }\n\n  /**\n   * @override\n   */\n  getFilteredTileCount() {\n    return this.tileAccordion.getFilteredTileCount();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleTiles() {\n    return this.tileAccordion.getVisibleTiles();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleTileCount() {\n    return this.tileAccordion.getVisibleTileCount();\n  }\n\n  /**\n   * @override\n   */\n  getSelectedTiles(event) {\n    return this.tileAccordion.getSelectedTiles();\n  }\n\n  /**\n   * @override\n   */\n  getFocusedTile() {\n    return this.tileAccordion.getFocusedTile();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleGridRowCount() {\n    return this.tileAccordion.getVisibleGridRowCount();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleGridX(tile) {\n    return this.tileAccordion.getVisibleGridX(tile);\n  }\n\n  /**\n   * @override\n   */\n  getVisibleGridY(tile) {\n    return this.tileAccordion.getVisibleGridY(tile);\n  }\n\n  /**\n   * @override\n   */\n  scrollTo(tile) {\n    var group = this.tileAccordion.getGroupByTile(tile);\n    group.body.scrollTo(tile);\n  }\n\n  /**\n   * @override\n   */\n  getTileGridByRow(rowIndex) {\n    var group = this.tileAccordion.getGroupByVisibleRow(rowIndex);\n    if (group) {\n      return group.body;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  findVisibleTileIndexAt(x, y, startIndex, reverse) {\n    return this.tileAccordion.findVisibleTileIndexAt(x, y, startIndex, reverse);\n  }\n\n  /**\n   * @override\n   */\n  isHorizontalGridActive() {\n    if (this.tileAccordion.groups.length === 0) {\n      return false;\n    }\n    return this.tileAccordion.groups[0].body.logicalGrid instanceof HorizontalGrid;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}