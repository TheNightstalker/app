{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { App, EventSupport, scout, styles } from '../index';\nvar instance;\n/**\n * @singleton\n */\n\nvar HtmlEnvironment = /*#__PURE__*/function () {\n  function HtmlEnvironment() {\n    _classCallCheck(this, HtmlEnvironment);\n\n    // -------------------------------\n    // The values for these properties are defined using CSS (sizes.less).\n    // The following values are default values in case the CSS values are not available.\n    // -------------------------------\n    this.formRowHeight = 30;\n    this.formRowGap = 10;\n    this.formColumnWidth = 420;\n    this.formColumnGap = 32; // 40 pixel actual form gap - fieldMandatoryIndicatorWidth\n\n    this.smallColumnGap = 4;\n    this.fieldLabelWidth = 140;\n    this.fieldMandatoryIndicatorWidth = 8;\n    this.fieldStatusWidth = 20;\n    this.events = new EventSupport();\n  }\n\n  _createClass(HtmlEnvironment, [{\n    key: \"init\",\n    value: function init(additionalClass) {\n      this.formRowHeight = styles.getSize('html-env-logical-grid-row', 'height', 'height', this.formRowHeight, additionalClass);\n      this.formRowGap = styles.getSize('html-env-logical-grid-row', 'margin-bottom', 'marginBottom', this.formRowGap, additionalClass);\n      this.formColumnWidth = styles.getSize('html-env-logical-grid-column', 'width', 'width', this.formColumnWidth, additionalClass);\n      this.formColumnGap = styles.getSize('html-env-logical-grid-column', 'margin-right', 'marginRight', this.formColumnGap, additionalClass);\n      this.smallColumnGap = styles.getSize('html-env-logical-grid-column', 'margin-left', 'marginLeft', this.smallColumnGap, additionalClass);\n      this.fieldLabelWidth = styles.getSize('html-env-field-label', 'width', 'width', this.fieldLabelWidth, additionalClass);\n      this.fieldMandatoryIndicatorWidth = styles.getSize('html-env-field-mandatory-indicator', 'width', 'width', this.fieldMandatoryIndicatorWidth, additionalClass);\n      this.fieldStatusWidth = styles.getSize('html-env-field-status', 'width', 'width', this.fieldStatusWidth, additionalClass);\n      var event = {\n        source: this\n      };\n      this.events.trigger('propertyChange', event);\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, func) {\n      return this.events.on(type, func);\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, func) {\n      return this.events.off(type, func);\n    }\n  }], [{\n    key: \"get\",\n    value: function get() {\n      return instance;\n    }\n  }]);\n\n  return HtmlEnvironment;\n}();\n\nexport { HtmlEnvironment as default };\nApp.addListener('prepare', function () {\n  if (instance) {\n    // if the environment was created before the app itself, use it instead of creating a new one\n    return;\n  }\n\n  instance = scout.create('HtmlEnvironment');\n  instance.init();\n});","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/layout/HtmlEnvironment.js"],"names":["App","EventSupport","scout","styles","instance","HtmlEnvironment","formRowHeight","formRowGap","formColumnWidth","formColumnGap","smallColumnGap","fieldLabelWidth","fieldMandatoryIndicatorWidth","fieldStatusWidth","events","additionalClass","getSize","event","source","trigger","type","func","on","off","addListener","create","init"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,GAAR,EAAaC,YAAb,EAA2BC,KAA3B,EAAkCC,MAAlC,QAA+C,UAA/C;AAEA,IAAIC,QAAJ;AACA;AACA;AACA;;IACqBC,e;AAEnB,6BAAc;AAAA;;AACZ;AACA;AACA;AACA;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,eAAL,GAAuB,GAAvB;AACA,SAAKC,aAAL,GAAqB,EAArB,CARY,CAQa;;AACzB,SAAKC,cAAL,GAAsB,CAAtB;AACA,SAAKC,eAAL,GAAuB,GAAvB;AACA,SAAKC,4BAAL,GAAoC,CAApC;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,MAAL,GAAc,IAAIb,YAAJ,EAAd;AACD;;;;yBAEIc,e,EAAiB;AACpB,WAAKT,aAAL,GAAqBH,MAAM,CAACa,OAAP,CAAe,2BAAf,EAA4C,QAA5C,EAAsD,QAAtD,EAAgE,KAAKV,aAArE,EAAoFS,eAApF,CAArB;AACA,WAAKR,UAAL,GAAkBJ,MAAM,CAACa,OAAP,CAAe,2BAAf,EAA4C,eAA5C,EAA6D,cAA7D,EAA6E,KAAKT,UAAlF,EAA8FQ,eAA9F,CAAlB;AACA,WAAKP,eAAL,GAAuBL,MAAM,CAACa,OAAP,CAAe,8BAAf,EAA+C,OAA/C,EAAwD,OAAxD,EAAiE,KAAKR,eAAtE,EAAuFO,eAAvF,CAAvB;AACA,WAAKN,aAAL,GAAqBN,MAAM,CAACa,OAAP,CAAe,8BAAf,EAA+C,cAA/C,EAA+D,aAA/D,EAA8E,KAAKP,aAAnF,EAAkGM,eAAlG,CAArB;AACA,WAAKL,cAAL,GAAsBP,MAAM,CAACa,OAAP,CAAe,8BAAf,EAA+C,aAA/C,EAA8D,YAA9D,EAA4E,KAAKN,cAAjF,EAAiGK,eAAjG,CAAtB;AACA,WAAKJ,eAAL,GAAuBR,MAAM,CAACa,OAAP,CAAe,sBAAf,EAAuC,OAAvC,EAAgD,OAAhD,EAAyD,KAAKL,eAA9D,EAA+EI,eAA/E,CAAvB;AACA,WAAKH,4BAAL,GAAoCT,MAAM,CAACa,OAAP,CAAe,oCAAf,EAAqD,OAArD,EAA8D,OAA9D,EAAuE,KAAKJ,4BAA5E,EAA0GG,eAA1G,CAApC;AACA,WAAKF,gBAAL,GAAwBV,MAAM,CAACa,OAAP,CAAe,uBAAf,EAAwC,OAAxC,EAAiD,OAAjD,EAA0D,KAAKH,gBAA/D,EAAiFE,eAAjF,CAAxB;AAEA,UAAIE,KAAK,GAAG;AACVC,QAAAA,MAAM,EAAE;AADE,OAAZ;AAGA,WAAKJ,MAAL,CAAYK,OAAZ,CAAoB,gBAApB,EAAsCF,KAAtC;AACD;;;uBAEEG,I,EAAMC,I,EAAM;AACb,aAAO,KAAKP,MAAL,CAAYQ,EAAZ,CAAeF,IAAf,EAAqBC,IAArB,CAAP;AACD;;;wBAEGD,I,EAAMC,I,EAAM;AACd,aAAO,KAAKP,MAAL,CAAYS,GAAZ,CAAgBH,IAAhB,EAAsBC,IAAtB,CAAP;AACD;;;0BAEY;AACX,aAAOjB,QAAP;AACD;;;;;;SA5CkBC,e;AA+CrBL,GAAG,CAACwB,WAAJ,CAAgB,SAAhB,EAA2B,YAAW;AACpC,MAAIpB,QAAJ,EAAc;AACZ;AACA;AACD;;AACDA,EAAAA,QAAQ,GAAGF,KAAK,CAACuB,MAAN,CAAa,iBAAb,CAAX;AACArB,EAAAA,QAAQ,CAACsB,IAAT;AACD,CAPD","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {App, EventSupport, scout, styles} from '../index';\n\nlet instance;\n/**\n * @singleton\n */\nexport default class HtmlEnvironment {\n\n  constructor() {\n    // -------------------------------\n    // The values for these properties are defined using CSS (sizes.less).\n    // The following values are default values in case the CSS values are not available.\n    // -------------------------------\n    this.formRowHeight = 30;\n    this.formRowGap = 10;\n    this.formColumnWidth = 420;\n    this.formColumnGap = 32; // 40 pixel actual form gap - fieldMandatoryIndicatorWidth\n    this.smallColumnGap = 4;\n    this.fieldLabelWidth = 140;\n    this.fieldMandatoryIndicatorWidth = 8;\n    this.fieldStatusWidth = 20;\n    this.events = new EventSupport();\n  }\n\n  init(additionalClass) {\n    this.formRowHeight = styles.getSize('html-env-logical-grid-row', 'height', 'height', this.formRowHeight, additionalClass);\n    this.formRowGap = styles.getSize('html-env-logical-grid-row', 'margin-bottom', 'marginBottom', this.formRowGap, additionalClass);\n    this.formColumnWidth = styles.getSize('html-env-logical-grid-column', 'width', 'width', this.formColumnWidth, additionalClass);\n    this.formColumnGap = styles.getSize('html-env-logical-grid-column', 'margin-right', 'marginRight', this.formColumnGap, additionalClass);\n    this.smallColumnGap = styles.getSize('html-env-logical-grid-column', 'margin-left', 'marginLeft', this.smallColumnGap, additionalClass);\n    this.fieldLabelWidth = styles.getSize('html-env-field-label', 'width', 'width', this.fieldLabelWidth, additionalClass);\n    this.fieldMandatoryIndicatorWidth = styles.getSize('html-env-field-mandatory-indicator', 'width', 'width', this.fieldMandatoryIndicatorWidth, additionalClass);\n    this.fieldStatusWidth = styles.getSize('html-env-field-status', 'width', 'width', this.fieldStatusWidth, additionalClass);\n\n    var event = {\n      source: this\n    };\n    this.events.trigger('propertyChange', event);\n  }\n\n  on(type, func) {\n    return this.events.on(type, func);\n  }\n\n  off(type, func) {\n    return this.events.off(type, func);\n  }\n\n  static get() {\n    return instance;\n  }\n}\n\nApp.addListener('prepare', function() {\n  if (instance) {\n    // if the environment was created before the app itself, use it instead of creating a new one\n    return;\n  }\n  instance = scout.create('HtmlEnvironment');\n  instance.init();\n});\n"]},"metadata":{},"sourceType":"module"}