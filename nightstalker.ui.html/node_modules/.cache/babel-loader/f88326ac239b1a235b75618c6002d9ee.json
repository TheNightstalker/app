{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nvar LazyNodeFilter = /*#__PURE__*/function () {\n  function LazyNodeFilter(tree) {\n    _classCallCheck(this, LazyNodeFilter);\n\n    //\n    this.tree = tree;\n  }\n\n  _createClass(LazyNodeFilter, [{\n    key: \"accept\",\n    value: function accept(node) {\n      if (!node.expanded && node.parentNode && node.parentNode.expandedLazy && node.parentNode.lazyExpandingEnabled && this.tree.lazyExpandingEnabled) {\n        // if this node is not expanded and parent is lazyExpanding.\n        for (var i = 0; i < this.tree.selectedNodes.length; i++) {\n          var selectedNode = this.tree.selectedNodes[i]; // not initialized selected nodes\n\n          if (typeof selectedNode === 'string') {\n            break;\n          }\n\n          if (selectedNode === node || selectedNode.isDescendantOf(node)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return LazyNodeFilter;\n}();\n\nexport { LazyNodeFilter as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/tree/LazyNodeFilter.js"],"names":["LazyNodeFilter","tree","node","expanded","parentNode","expandedLazy","lazyExpandingEnabled","i","selectedNodes","length","selectedNode","isDescendantOf"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,c;AAEnB,0BAAYC,IAAZ,EAAkB;AAAA;;AAAE;AAClB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;;;2BAEMC,I,EAAM;AACX,UAAI,CAACA,IAAI,CAACC,QAAN,IAAkBD,IAAI,CAACE,UAAvB,IAAqCF,IAAI,CAACE,UAAL,CAAgBC,YAArD,IAAqEH,IAAI,CAACE,UAAL,CAAgBE,oBAArF,IAA6G,KAAKL,IAAL,CAAUK,oBAA3H,EAAiJ;AAC/I;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,IAAL,CAAUO,aAAV,CAAwBC,MAA5C,EAAoDF,CAAC,EAArD,EAAyD;AACvD,cAAIG,YAAY,GAAG,KAAKT,IAAL,CAAUO,aAAV,CAAwBD,CAAxB,CAAnB,CADuD,CAEvD;;AACA,cAAI,OAAOG,YAAP,KAAwB,QAA5B,EAAsC;AACpC;AACD;;AACD,cAAIA,YAAY,KAAKR,IAAjB,IAAyBQ,YAAY,CAACC,cAAb,CAA4BT,IAA5B,CAA7B,EAAgE;AAC9D,mBAAO,IAAP;AACD;AACF;;AACD,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD;;;;;;SAtBkBF,c","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nexport default class LazyNodeFilter {\n\n  constructor(tree) { //\n    this.tree = tree;\n  }\n\n  accept(node) {\n    if (!node.expanded && node.parentNode && node.parentNode.expandedLazy && node.parentNode.lazyExpandingEnabled && this.tree.lazyExpandingEnabled) {\n      // if this node is not expanded and parent is lazyExpanding.\n      for (var i = 0; i < this.tree.selectedNodes.length; i++) {\n        var selectedNode = this.tree.selectedNodes[i];\n        // not initialized selected nodes\n        if (typeof selectedNode === 'string') {\n          break;\n        }\n        if (selectedNode === node || selectedNode.isDescendantOf(node)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}