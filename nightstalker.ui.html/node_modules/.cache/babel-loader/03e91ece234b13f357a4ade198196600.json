{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2010-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\n/**\n * JavaScript port from java.awt.Dimension.\n * @param vararg width (number) or otherDimension (Dimension)\n * @param height number or undefined (when vararg is Dimension)\n */\nvar Dimension = /*#__PURE__*/function () {\n  function Dimension(vararg, height) {\n    _classCallCheck(this, Dimension);\n\n    if (vararg instanceof Dimension) {\n      this.width = vararg.width;\n      this.height = vararg.height;\n    } else {\n      this.width = vararg || 0;\n      this.height = height || 0;\n    }\n  }\n\n  _createClass(Dimension, [{\n    key: \"toString\",\n    value: function toString() {\n      return 'Dimension[width=' + this.width + ' height=' + this.height + ']';\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(o) {\n      if (!o) {\n        return false;\n      }\n\n      return this.width === o.width && this.height === o.height;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Dimension(this.width, this.height);\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(insets) {\n      return new Dimension(this.width - insets.horizontal(), this.height - insets.vertical());\n    }\n  }, {\n    key: \"add\",\n    value: function add(insets) {\n      return new Dimension(this.width + insets.horizontal(), this.height + insets.vertical());\n    }\n  }, {\n    key: \"floor\",\n    value: function floor() {\n      return new Dimension(Math.floor(this.width), Math.floor(this.height));\n    }\n  }, {\n    key: \"ceil\",\n    value: function ceil() {\n      return new Dimension(Math.ceil(this.width), Math.ceil(this.height));\n    }\n  }]);\n\n  return Dimension;\n}();\n\nexport { Dimension as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/layout/Dimension.js"],"names":["Dimension","vararg","height","width","o","insets","horizontal","vertical","Math","floor","ceil"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;IACqBA,S;AAEnB,qBAAYC,MAAZ,EAAoBC,MAApB,EAA4B;AAAA;;AAC1B,QAAID,MAAM,YAAYD,SAAtB,EAAiC;AAC/B,WAAKG,KAAL,GAAaF,MAAM,CAACE,KAApB;AACA,WAAKD,MAAL,GAAcD,MAAM,CAACC,MAArB;AACD,KAHD,MAGO;AACL,WAAKC,KAAL,GAAaF,MAAM,IAAI,CAAvB;AACA,WAAKC,MAAL,GAAcA,MAAM,IAAI,CAAxB;AACD;AACF;;;;+BAEU;AACT,aAAO,qBAAqB,KAAKC,KAA1B,GAAkC,UAAlC,GAA+C,KAAKD,MAApD,GAA6D,GAApE;AACD;;;2BAEME,C,EAAG;AACR,UAAI,CAACA,CAAL,EAAQ;AACN,eAAO,KAAP;AACD;;AACD,aAAQ,KAAKD,KAAL,KAAeC,CAAC,CAACD,KAAjB,IAA0B,KAAKD,MAAL,KAAgBE,CAAC,CAACF,MAApD;AACD;;;4BAEO;AACN,aAAO,IAAIF,SAAJ,CAAc,KAAKG,KAAnB,EAA0B,KAAKD,MAA/B,CAAP;AACD;;;6BAEQG,M,EAAQ;AACf,aAAO,IAAIL,SAAJ,CACL,KAAKG,KAAL,GAAaE,MAAM,CAACC,UAAP,EADR,EAEL,KAAKJ,MAAL,GAAcG,MAAM,CAACE,QAAP,EAFT,CAAP;AAGD;;;wBAEGF,M,EAAQ;AACV,aAAO,IAAIL,SAAJ,CACL,KAAKG,KAAL,GAAaE,MAAM,CAACC,UAAP,EADR,EAEL,KAAKJ,MAAL,GAAcG,MAAM,CAACE,QAAP,EAFT,CAAP;AAGD;;;4BAEO;AACN,aAAO,IAAIP,SAAJ,CAAcQ,IAAI,CAACC,KAAL,CAAW,KAAKN,KAAhB,CAAd,EAAsCK,IAAI,CAACC,KAAL,CAAW,KAAKP,MAAhB,CAAtC,CAAP;AACD;;;2BAEM;AACL,aAAO,IAAIF,SAAJ,CAAcQ,IAAI,CAACE,IAAL,CAAU,KAAKP,KAAf,CAAd,EAAqCK,IAAI,CAACE,IAAL,CAAU,KAAKR,MAAf,CAArC,CAAP;AACD;;;;;;SA7CkBF,S","sourcesContent":["/*\n * Copyright (c) 2010-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\n/**\n * JavaScript port from java.awt.Dimension.\n * @param vararg width (number) or otherDimension (Dimension)\n * @param height number or undefined (when vararg is Dimension)\n */\nexport default class Dimension {\n\n  constructor(vararg, height) {\n    if (vararg instanceof Dimension) {\n      this.width = vararg.width;\n      this.height = vararg.height;\n    } else {\n      this.width = vararg || 0;\n      this.height = height || 0;\n    }\n  }\n\n  toString() {\n    return 'Dimension[width=' + this.width + ' height=' + this.height + ']';\n  }\n\n  equals(o) {\n    if (!o) {\n      return false;\n    }\n    return (this.width === o.width && this.height === o.height);\n  }\n\n  clone() {\n    return new Dimension(this.width, this.height);\n  }\n\n  subtract(insets) {\n    return new Dimension(\n      this.width - insets.horizontal(),\n      this.height - insets.vertical());\n  }\n\n  add(insets) {\n    return new Dimension(\n      this.width + insets.horizontal(),\n      this.height + insets.vertical());\n  }\n\n  floor() {\n    return new Dimension(Math.floor(this.width), Math.floor(this.height));\n  }\n\n  ceil() {\n    return new Dimension(Math.ceil(this.width), Math.ceil(this.height));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}