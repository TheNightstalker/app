{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Column, comparators, scout } from '../../index';\n/**\n * May be an ordinary boolean column or the table's checkable column (table.checkableColumn)\n * Difference: the table's checkable column represents the row.checked state, other boolean columns represent their own value.\n */\n\nvar BooleanColumn = /*#__PURE__*/function (_Column) {\n  _inherits(BooleanColumn, _Column);\n\n  var _super = _createSuper(BooleanColumn);\n\n  function BooleanColumn() {\n    var _this;\n\n    _classCallCheck(this, BooleanColumn);\n\n    _this = _super.call(this);\n    _this.comparator = comparators.NUMERIC;\n    _this.filterType = 'ColumnUserFilter';\n    _this.horizontalAlignment = 0;\n    _this.minWidth = Column.NARROW_MIN_WIDTH;\n    _this.triStateEnabled = false;\n    _this.textBased = false;\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  _createClass(BooleanColumn, [{\n    key: \"_formatValue\",\n    value: function _formatValue(value) {\n      // cell renders a checkbox, text is not visible\n      return null;\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"buildCell\",\n    value: function buildCell(cell, row) {\n      var style,\n          content = '',\n          cssClass,\n          checkBoxCssClass,\n          enabled = row.enabled,\n          tableNodeColumn = this.table.isTableNodeColumn(this),\n          rowPadding = 0;\n\n      if (tableNodeColumn) {\n        rowPadding = this.table._calcRowLevelPadding(row);\n      }\n\n      if (cell.empty) {\n        // if cell wants to be really empty (e.g. no checkbox icon, use logic of base class)\n        return _get(_getPrototypeOf(BooleanColumn.prototype), \"buildCell\", this).call(this, cell, row);\n      }\n\n      enabled = enabled && cell.editable;\n      cssClass = this._cellCssClass(cell, tableNodeColumn);\n      style = this._cellStyle(cell, tableNodeColumn, rowPadding);\n\n      if (!enabled) {\n        cssClass += ' disabled';\n      }\n\n      checkBoxCssClass = 'check-box';\n\n      if (cell.value === true) {\n        checkBoxCssClass += ' checked';\n      }\n\n      if (this.triStateEnabled && cell.value !== true && cell.value !== false) {\n        checkBoxCssClass += ' undefined';\n      }\n\n      if (!enabled) {\n        checkBoxCssClass += ' disabled';\n      }\n\n      if (tableNodeColumn && row._expandable) {\n        this.tableNodeColumn = true;\n        content = this._expandIcon(row.expanded, rowPadding) + content;\n\n        if (row.expanded) {\n          cssClass += ' expanded';\n        }\n      }\n\n      content = content + '<div class=\"' + checkBoxCssClass + '\"/>';\n      return '<div class=\"' + cssClass + '\" style=\"' + style + '\">' + content + '</div>';\n    }\n  }, {\n    key: \"$checkBox\",\n    value: function $checkBox($row) {\n      var $cell = this.table.$cell(this, $row);\n      return $cell.children('.check-box');\n    }\n  }, {\n    key: \"_cellCssClass\",\n    value: function _cellCssClass(cell, tableNode) {\n      var cssClass = _get(_getPrototypeOf(BooleanColumn.prototype), \"_cellCssClass\", this).call(this, cell);\n\n      cssClass = cssClass.replace(' editable', '');\n      cssClass += ' checkable';\n\n      if (tableNode) {\n        cssClass += ' table-node';\n      }\n\n      return cssClass;\n    }\n    /**\n     * This function does intentionally _not_ call the super function (prepareCellEdit) because we don't want to\n     * show an editor for BooleanColumns when user clicks on a cell.\n     */\n\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(event, $row) {\n      var row = $row.data('row'),\n          cell = this.cell(row);\n\n      if (this.table.checkableColumn === this) {\n        this.table.checkRow(row, !row.checked);\n      } else if (this.isCellEditable(row, cell, event)) {\n        this._toggleCellValue(row, cell);\n      }\n    }\n    /**\n     * In a remote app this function is overridden by RemoteApp.js, the default implementation is the local case.\n     * @see TableAdapter.js\n     */\n\n  }, {\n    key: \"_toggleCellValue\",\n    value: function _toggleCellValue(row, cell) {\n      if (!this.triStateEnabled) {\n        this.setCellValue(row, !cell.value);\n      } else {\n        if (cell.value === false) {\n          this.setCellValue(row, true);\n        } else if (cell.value === true) {\n          this.setCellValue(row, null);\n        } else if (cell.value === null) {\n          this.setCellValue(row, false);\n        }\n      }\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_createEditor\",\n    value: function _createEditor(row) {\n      return scout.create('CheckBoxField', {\n        parent: this.table\n      });\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"cellTextForGrouping\",\n    value: function cellTextForGrouping(row) {\n      var cell = this.cell(row);\n\n      if (this.triStateEnabled && cell.value === null) {\n        return this.session.text('ui.BooleanColumnGroupingMixed');\n      } else if (cell.value === true) {\n        return this.session.text('ui.BooleanColumnGroupingTrue');\n      }\n\n      return this.session.text('ui.BooleanColumnGroupingFalse');\n    }\n  }]);\n\n  return BooleanColumn;\n}(Column);\n\nexport { BooleanColumn as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/table/columns/BooleanColumn.js"],"names":["Column","comparators","scout","BooleanColumn","comparator","NUMERIC","filterType","horizontalAlignment","minWidth","NARROW_MIN_WIDTH","triStateEnabled","textBased","value","cell","row","style","content","cssClass","checkBoxCssClass","enabled","tableNodeColumn","table","isTableNodeColumn","rowPadding","_calcRowLevelPadding","empty","editable","_cellCssClass","_cellStyle","_expandable","_expandIcon","expanded","$row","$cell","children","tableNode","replace","event","data","checkableColumn","checkRow","checked","isCellEditable","_toggleCellValue","setCellValue","create","parent","session","text"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Column, comparators, scout} from '../../index';\n\n/**\n * May be an ordinary boolean column or the table's checkable column (table.checkableColumn)\n * Difference: the table's checkable column represents the row.checked state, other boolean columns represent their own value.\n */\nexport default class BooleanColumn extends Column {\n\n  constructor() {\n    super();\n    this.comparator = comparators.NUMERIC;\n    this.filterType = 'ColumnUserFilter';\n    this.horizontalAlignment = 0;\n    this.minWidth = Column.NARROW_MIN_WIDTH;\n    this.triStateEnabled = false;\n    this.textBased = false;\n  }\n\n  /**\n   * @override\n   */\n  _formatValue(value) {\n    // cell renders a checkbox, text is not visible\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  buildCell(cell, row) {\n    var style,\n      content = '',\n      cssClass,\n      checkBoxCssClass,\n      enabled = row.enabled,\n      tableNodeColumn = this.table.isTableNodeColumn(this),\n      rowPadding = 0;\n\n    if (tableNodeColumn) {\n      rowPadding = this.table._calcRowLevelPadding(row);\n    }\n\n    if (cell.empty) {\n      // if cell wants to be really empty (e.g. no checkbox icon, use logic of base class)\n      return super.buildCell(cell, row);\n    }\n\n    enabled = enabled && cell.editable;\n    cssClass = this._cellCssClass(cell, tableNodeColumn);\n    style = this._cellStyle(cell, tableNodeColumn, rowPadding);\n    if (!enabled) {\n      cssClass += ' disabled';\n    }\n\n    checkBoxCssClass = 'check-box';\n    if (cell.value === true) {\n      checkBoxCssClass += ' checked';\n    }\n    if (this.triStateEnabled && cell.value !== true && cell.value !== false) {\n      checkBoxCssClass += ' undefined';\n    }\n    if (!enabled) {\n      checkBoxCssClass += ' disabled';\n    }\n\n    if (tableNodeColumn && row._expandable) {\n      this.tableNodeColumn = true;\n      content = this._expandIcon(row.expanded, rowPadding) + content;\n      if (row.expanded) {\n        cssClass += ' expanded';\n      }\n    }\n    content = content + '<div class=\"' + checkBoxCssClass + '\"/>';\n\n    return '<div class=\"' + cssClass + '\" style=\"' + style + '\">' + content + '</div>';\n  }\n\n  $checkBox($row) {\n    var $cell = this.table.$cell(this, $row);\n    return $cell.children('.check-box');\n  }\n\n  _cellCssClass(cell, tableNode) {\n    var cssClass = super._cellCssClass(cell);\n    cssClass = cssClass.replace(' editable', '');\n    cssClass += ' checkable';\n    if (tableNode) {\n      cssClass += ' table-node';\n    }\n\n    return cssClass;\n  }\n\n  /**\n   * This function does intentionally _not_ call the super function (prepareCellEdit) because we don't want to\n   * show an editor for BooleanColumns when user clicks on a cell.\n   */\n  onMouseUp(event, $row) {\n    var row = $row.data('row'),\n      cell = this.cell(row);\n    if (this.table.checkableColumn === this) {\n      this.table.checkRow(row, !row.checked);\n    } else if (this.isCellEditable(row, cell, event)) {\n      this._toggleCellValue(row, cell);\n    }\n  }\n\n  /**\n   * In a remote app this function is overridden by RemoteApp.js, the default implementation is the local case.\n   * @see TableAdapter.js\n   */\n  _toggleCellValue(row, cell) {\n    if (!this.triStateEnabled) {\n      this.setCellValue(row, !cell.value);\n    } else {\n      if (cell.value === false) {\n        this.setCellValue(row, true);\n      } else if (cell.value === true) {\n        this.setCellValue(row, null);\n      } else if (cell.value === null) {\n        this.setCellValue(row, false);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  _createEditor(row) {\n    return scout.create('CheckBoxField', {\n      parent: this.table\n    });\n  }\n\n  /**\n   * @override\n   */\n  cellTextForGrouping(row) {\n    var cell = this.cell(row);\n    if (this.triStateEnabled && cell.value === null) {\n      return this.session.text('ui.BooleanColumnGroupingMixed');\n    } else if (cell.value === true) {\n      return this.session.text('ui.BooleanColumnGroupingTrue');\n    }\n    return this.session.text('ui.BooleanColumnGroupingFalse');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}