{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { MessageBoxes, scout, Status } from '../../index';\nimport $ from 'jquery';\n\nvar PopupBlockerHandler = /*#__PURE__*/function () {\n  /**\n   * @param {boolean} [preserveOpener] A boolean indicating if the popup-window should have a back reference to the origin window. By default this parameter is false because of security reasons. Only trusted sites may be allowed to access the opener window and potentially modify the origin web application! See https://mathiasbynens.github.io/rel-noopener/ for more details.\n   */\n  function PopupBlockerHandler(session, preserveOpener) {\n    _classCallCheck(this, PopupBlockerHandler);\n\n    this.session = session;\n    this.preserveOpener = preserveOpener;\n  }\n  /**\n   * @param {String} uri The URI for the window to open\n   * @param {String} [windowName] An optional string name for the new window. The name can be used as the target of links and forms using the target attribute of an 'a' or 'form' element. The name should not contain any blank space.\n   *         Note that the window name does not specify the title of the new window.\n   * @param {String} [windowSpecs] Optional parameter listing the features (size, position, scrollbars, etc.) of the new window.\n   *         The string must not contain any blank space, each feature name and value must be separated by a comma.\n   * @param {function} [onWindowOpened] Optional function to call when the window has been successfully opened.\n   *         Due to popup-blockers this may not necessarily be directly after the call to this method but may be later when the popup-blocker-notification-link is manually activated by the user.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/open\n   */\n\n\n  _createClass(PopupBlockerHandler, [{\n    key: \"openWindow\",\n    value: function openWindow(uri, windowName, windowSpecs, onWindowOpened) {\n      windowName = windowName || 'scout_' + new Date().getTime();\n      var popup = window.open('', windowName, windowSpecs);\n\n      if (popup) {\n        if (!this.preserveOpener) {\n          popup.opener = null;\n        }\n\n        try {\n          popup.window.location.href = uri;\n        } catch (err) {\n          this._handleInvalidUri(uri, popup, err);\n\n          return;\n        }\n\n        if (onWindowOpened) {\n          onWindowOpened(popup);\n        }\n      } else {\n        $.log.warn('Popup-blocker detected! Show link to open window manually');\n        this.showNotification(function () {\n          this.openWindow(uri, windowName, windowSpecs, onWindowOpened);\n        }.bind(this));\n      }\n    } // Shows a notification when popup-blocker has been detected\n\n  }, {\n    key: \"showNotification\",\n    value: function showNotification(vararg) {\n      var notification,\n          linkUrl,\n          desktop = this.session.desktop;\n\n      if (typeof vararg === 'string') {\n        linkUrl = vararg;\n      }\n\n      notification = scout.create('DesktopNotification:PopupBlocker', {\n        parent: desktop,\n        linkUrl: linkUrl,\n        preserveOpener: this.preserveOpener\n      });\n\n      if (!linkUrl && $.isFunction(vararg)) {\n        notification.on('linkClick', vararg);\n      }\n\n      notification.show();\n    }\n  }, {\n    key: \"_handleInvalidUri\",\n    value: function _handleInvalidUri(uri, popup, err) {\n      // Log\n      scout.create('ErrorHandler', {\n        logError: true,\n        displayError: false,\n        sendError: false\n      }).handle(err); // Close popup\n\n      popup.close(); // Show message\n\n      MessageBoxes.createOk(this.session.desktop).withHeader(this.session.text('ui.UnexpectedProblem')).withBody(this.session.text('ui.InvalidUriMsg')).withSeverity(Status.Severity.ERROR).buildAndOpen();\n    }\n  }]);\n\n  return PopupBlockerHandler;\n}();\n\nexport { PopupBlockerHandler as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/popupblocker/PopupBlockerHandler.js"],"names":["MessageBoxes","scout","Status","$","PopupBlockerHandler","session","preserveOpener","uri","windowName","windowSpecs","onWindowOpened","Date","getTime","popup","window","open","opener","location","href","err","_handleInvalidUri","log","warn","showNotification","openWindow","bind","vararg","notification","linkUrl","desktop","create","parent","isFunction","on","show","logError","displayError","sendError","handle","close","createOk","withHeader","text","withBody","withSeverity","Severity","ERROR","buildAndOpen"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {MessageBoxes, scout, Status} from '../../index';\nimport $ from 'jquery';\n\nexport default class PopupBlockerHandler {\n  /**\n   * @param {boolean} [preserveOpener] A boolean indicating if the popup-window should have a back reference to the origin window. By default this parameter is false because of security reasons. Only trusted sites may be allowed to access the opener window and potentially modify the origin web application! See https://mathiasbynens.github.io/rel-noopener/ for more details.\n   */\n  constructor(session, preserveOpener) {\n    this.session = session;\n    this.preserveOpener = preserveOpener;\n  }\n\n  /**\n   * @param {String} uri The URI for the window to open\n   * @param {String} [windowName] An optional string name for the new window. The name can be used as the target of links and forms using the target attribute of an 'a' or 'form' element. The name should not contain any blank space.\n   *         Note that the window name does not specify the title of the new window.\n   * @param {String} [windowSpecs] Optional parameter listing the features (size, position, scrollbars, etc.) of the new window.\n   *         The string must not contain any blank space, each feature name and value must be separated by a comma.\n   * @param {function} [onWindowOpened] Optional function to call when the window has been successfully opened.\n   *         Due to popup-blockers this may not necessarily be directly after the call to this method but may be later when the popup-blocker-notification-link is manually activated by the user.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/open\n   */\n  openWindow(uri, windowName, windowSpecs, onWindowOpened) {\n    windowName = windowName || 'scout_' + new Date().getTime();\n\n    var popup = window.open('', windowName, windowSpecs);\n    if (popup) {\n      if (!this.preserveOpener) {\n        popup.opener = null;\n      }\n      try {\n        popup.window.location.href = uri;\n      } catch (err) {\n        this._handleInvalidUri(uri, popup, err);\n        return;\n      }\n      if (onWindowOpened) {\n        onWindowOpened(popup);\n      }\n    } else {\n      $.log.warn('Popup-blocker detected! Show link to open window manually');\n      this.showNotification(function() {\n        this.openWindow(uri, windowName, windowSpecs, onWindowOpened);\n      }.bind(this));\n    }\n  }\n\n  // Shows a notification when popup-blocker has been detected\n  showNotification(vararg) {\n    var notification, linkUrl,\n      desktop = this.session.desktop;\n\n    if (typeof vararg === 'string') {\n      linkUrl = vararg;\n    }\n\n    notification = scout.create('DesktopNotification:PopupBlocker', {\n      parent: desktop,\n      linkUrl: linkUrl,\n      preserveOpener: this.preserveOpener\n    });\n\n    if (!linkUrl && $.isFunction(vararg)) {\n      notification.on('linkClick', vararg);\n    }\n    notification.show();\n  }\n\n  _handleInvalidUri(uri, popup, err) {\n    // Log\n    scout.create('ErrorHandler', {\n      logError: true,\n      displayError: false,\n      sendError: false\n    }).handle(err);\n\n    // Close popup\n    popup.close();\n\n    // Show message\n    MessageBoxes.createOk(this.session.desktop)\n      .withHeader(this.session.text('ui.UnexpectedProblem'))\n      .withBody(this.session.text('ui.InvalidUriMsg'))\n      .withSeverity(Status.Severity.ERROR)\n      .buildAndOpen();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}