{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { icons, MenuBar, Outline, TableRow, TreeNode } from '../../../index';\nimport $ from 'jquery';\n/**\n * This class is used differently in online and JS-only case. In the online case we only have instances\n * of Page in an outline. The server sets the property <code>nodeType</code> which is used to distinct\n * between pages with tables and pages with nodes in some cases. In the JS only case, Page is an abstract\n * class and is never instantiated directly, instead we always use subclasses of PageWithTable or PageWithNodes.\n * Implementations of these classes contain code which loads table data or child nodes.\n *\n * @class\n * @extends TreeNode\n */\n\nvar Page = /*#__PURE__*/function (_TreeNode) {\n  _inherits(Page, _TreeNode);\n\n  var _super = _createSuper(Page);\n\n  function Page() {\n    var _this;\n\n    _classCallCheck(this, Page);\n\n    _this = _super.call(this);\n    /**\n     * This property is set by the server, see: JsonOutline#putNodeType.\n     */\n\n    _this.nodeType = null;\n    _this.detailTable = null;\n    _this.detailTableVisible = true;\n    _this.detailForm = null;\n    _this.detailFormVisible = true;\n    _this.detailFormVisibleByUi = true;\n    _this.navigateButtonsVisible = true;\n    /**\n     * This property contains the class-name of the form to be instantiated, when createDetailForm() is called.\n     */\n\n    _this.detailFormType = null;\n    _this.tableStatusVisible = true;\n    /**\n     * True to select the page linked with the selected row when the row was selected. May be useful on touch devices.\n     */\n\n    _this.drillDownOnRowClick = false;\n    /**\n     * The icon id which is used for icons in the tile outline overview.\n     */\n\n    _this.overviewIconId = null;\n    return _this;\n  }\n  /**\n   * This enum defines a node-type. This is basically used for the online case where we only have instances\n   * of Page, but never instances of PageWithTable or PageWithNodes. The server simply sets a nodeType\n   * instead.\n   *\n   * @type {{NODES: string, TABLE: string}}\n   */\n\n\n  _createClass(Page, [{\n    key: \"createDetailForm\",\n\n    /**\n     * Override this function to return a detail form which is displayed in the outline when this page is selected.\n     * The default impl. returns null.\n     */\n    value: function createDetailForm() {\n      return null;\n    }\n    /**\n     * @override TreeNode.js\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(Page.prototype), \"_init\", this).call(this, model);\n\n      icons.resolveIconProperty(this, 'overviewIconId');\n\n      this._internalInitTable();\n\n      this._internalInitDetailForm();\n    }\n    /**\n     * @override TreeNode.js\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      _get(_getPrototypeOf(Page.prototype), \"_destroy\", this).call(this);\n\n      if (this.detailTable) {\n        this.detailTable.destroy();\n      }\n\n      if (this.detailForm) {\n        this.detailForm.destroy();\n      }\n    }\n  }, {\n    key: \"_internalInitTable\",\n    value: function _internalInitTable() {\n      var table = this.detailTable;\n\n      if (table) {\n        // this case is used for Scout classic\n        table = this.getOutline()._createChild(table);\n      } else {\n        table = this._createTable();\n      }\n\n      this.setDetailTable(table);\n    }\n  }, {\n    key: \"_internalInitDetailForm\",\n    value: function _internalInitDetailForm() {\n      var detailForm = this.detailForm;\n\n      if (detailForm) {\n        detailForm = this.getOutline()._createChild(detailForm);\n      }\n\n      this.setDetailForm(detailForm);\n    }\n    /**\n     * Override this function to create the internal table. Default impl. returns null.\n     */\n\n  }, {\n    key: \"_createTable\",\n    value: function _createTable() {\n      return null;\n    }\n    /**\n     * Override this function to initialize the internal (detail) table. Default impl. delegates\n     * <code>filter</code> events to the outline mediator.\n     */\n\n  }, {\n    key: \"_initTable\",\n    value: function _initTable(table) {\n      table.menuBar.setPosition(MenuBar.Position.TOP);\n      table.on('filter', this._onTableFilter.bind(this));\n\n      if (this.drillDownOnRowClick) {\n        table.on('rowClick', this._onTableRowClick.bind(this));\n        table.setMultiSelect(false);\n      }\n    }\n  }, {\n    key: \"_ensureDetailForm\",\n    value: function _ensureDetailForm() {\n      if (this.detailForm) {\n        return;\n      }\n\n      var form = this.createDetailForm();\n\n      if (form && !form.displayParent) {\n        form.setDisplayParent(this.getOutline());\n      }\n\n      this.setDetailForm(form);\n    } // see Java: AbstractPage#pageActivatedNotify\n\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      this._ensureDetailForm();\n    } // see Java: AbstractPage#pageDeactivatedNotify\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {}\n    /**\n     * @returns {Outline} the tree / outline / parent instance. it's all the same,\n     *     but it's more intuitive to work with the 'outline' when we deal with pages.\n     */\n\n  }, {\n    key: \"getOutline\",\n    value: function getOutline() {\n      return this.parent;\n    }\n    /**\n     * @returns {Array.<Page>} an array of pages linked with the given rows.\n     *   The order of the returned pages will be the same as the order of the rows.\n     */\n\n  }, {\n    key: \"pagesForTableRows\",\n    value: function pagesForTableRows(rows) {\n      return rows.map(this.pageForTableRow);\n    }\n  }, {\n    key: \"pageForTableRow\",\n    value: function pageForTableRow(row) {\n      if (!row.page) {\n        throw new Error('Table-row is not linked to a page');\n      }\n\n      return row.page;\n    }\n  }, {\n    key: \"setDetailForm\",\n    value: function setDetailForm(form) {\n      this.detailForm = form;\n\n      if (this.detailForm) {\n        this.detailForm.setModal(false);\n      }\n\n      if (this.detailForm instanceof scout.TileOverviewForm) {\n        this.detailForm.setPage(this);\n      }\n    }\n  }, {\n    key: \"setDetailTable\",\n    value: function setDetailTable(table) {\n      if (table) {\n        this._initTable(table);\n\n        table.setTableStatusVisible(this.tableStatusVisible);\n      }\n\n      this.detailTable = table;\n    }\n    /**\n     * Updates relevant properties from the pages linked with the given rows using the method updatePageFromTableRow and returns the pages.\n     *\n     * @returns {Array.<Page>} pages linked with the given rows.\n     */\n\n  }, {\n    key: \"updatePagesFromTableRows\",\n    value: function updatePagesFromTableRows(rows) {\n      return rows.map(function (row) {\n        var page = row.page;\n        page.updatePageFromTableRow(row);\n        return page;\n      });\n    }\n    /**\n     * Updates relevant properties (text, enabled, htmlEnabled) from the page linked with the given row.\n     *\n     * @returns {Page} page linked with the given row.\n     */\n\n  }, {\n    key: \"updatePageFromTableRow\",\n    value: function updatePageFromTableRow(row) {\n      var page = row.page;\n      page.enabled = row.enabled;\n      page.text = page.computeTextForRow(row);\n\n      if (row.cells.length >= 1) {\n        page.htmlEnabled = row.cells[0].htmlEnabled;\n        page.cssClass = row.cells[0].cssClass;\n      }\n\n      return page;\n    }\n    /**\n     * This function creates the text property of this page. The default implementation returns the\n     * text from the first cell of the given row. It's allowed to ignore the given row entirely, when you override\n     * this function.\n     *\n     * @param {TableRow} row\n     */\n\n  }, {\n    key: \"computeTextForRow\",\n    value: function computeTextForRow(row) {\n      var text = '';\n\n      if (row.cells.length >= 1) {\n        text = row.cells[0].text;\n      }\n\n      return text;\n    }\n    /**\n     * @returns {object} a page parameter object used to pass to newly created child pages. Sets the parent\n     *     to our outline instance and adds optional other properties. Typically you'll pass an\n     *     object (entity-key or arbitrary data) to a child page.\n     */\n\n  }, {\n    key: \"_pageParam\",\n    value: function _pageParam(paramProperties) {\n      var param = {\n        parent: this.getOutline()\n      };\n      $.extend(param, paramProperties);\n      return param;\n    }\n  }, {\n    key: \"reloadPage\",\n    value: function reloadPage() {\n      var outline = this.getOutline();\n\n      if (outline) {\n        this.loadChildren();\n      }\n    }\n  }, {\n    key: \"linkWithRow\",\n    value: function linkWithRow(row) {\n      this.row = row;\n      row.page = this;\n      this.getOutline().trigger('pageRowLink', {\n        page: this,\n        row: row\n      });\n    }\n  }, {\n    key: \"unlinkWithRow\",\n    value: function unlinkWithRow(row) {\n      delete this.row;\n      delete row.page;\n    }\n  }, {\n    key: \"_onTableFilter\",\n    value: function _onTableFilter(event) {\n      this.getOutline().mediator.onTableFilter(event, this);\n    }\n  }, {\n    key: \"_onTableRowClick\",\n    value: function _onTableRowClick(event) {\n      if (!this.drillDownOnRowClick) {\n        return;\n      }\n\n      var row = event.row;\n      var drillNode = this.pageForTableRow(row);\n      this.getOutline().selectNode(drillNode);\n      this.detailTable.deselectRow(row);\n    }\n  }]);\n\n  return Page;\n}(TreeNode);\n\n_defineProperty(Page, \"NodeType\", {\n  NODES: 'nodes',\n  TABLE: 'table'\n});\n\nexport { Page as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/desktop/outline/pages/Page.js"],"names":["icons","MenuBar","Outline","TableRow","TreeNode","$","Page","nodeType","detailTable","detailTableVisible","detailForm","detailFormVisible","detailFormVisibleByUi","navigateButtonsVisible","detailFormType","tableStatusVisible","drillDownOnRowClick","overviewIconId","model","resolveIconProperty","_internalInitTable","_internalInitDetailForm","destroy","table","getOutline","_createChild","_createTable","setDetailTable","setDetailForm","menuBar","setPosition","Position","TOP","on","_onTableFilter","bind","_onTableRowClick","setMultiSelect","form","createDetailForm","displayParent","setDisplayParent","_ensureDetailForm","parent","rows","map","pageForTableRow","row","page","Error","setModal","scout","TileOverviewForm","setPage","_initTable","setTableStatusVisible","updatePageFromTableRow","enabled","text","computeTextForRow","cells","length","htmlEnabled","cssClass","paramProperties","param","extend","outline","loadChildren","trigger","event","mediator","onTableFilter","drillNode","selectNode","deselectRow","NODES","TABLE"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {icons, MenuBar, Outline, TableRow, TreeNode} from '../../../index';\nimport $ from 'jquery';\n\n/**\n * This class is used differently in online and JS-only case. In the online case we only have instances\n * of Page in an outline. The server sets the property <code>nodeType</code> which is used to distinct\n * between pages with tables and pages with nodes in some cases. In the JS only case, Page is an abstract\n * class and is never instantiated directly, instead we always use subclasses of PageWithTable or PageWithNodes.\n * Implementations of these classes contain code which loads table data or child nodes.\n *\n * @class\n * @extends TreeNode\n */\nexport default class Page extends TreeNode {\n\n  constructor() {\n    super();\n\n    /**\n     * This property is set by the server, see: JsonOutline#putNodeType.\n     */\n    this.nodeType = null;\n    this.detailTable = null;\n    this.detailTableVisible = true;\n    this.detailForm = null;\n    this.detailFormVisible = true;\n    this.detailFormVisibleByUi = true;\n    this.navigateButtonsVisible = true;\n\n    /**\n     * This property contains the class-name of the form to be instantiated, when createDetailForm() is called.\n     */\n    this.detailFormType = null;\n    this.tableStatusVisible = true;\n    /**\n     * True to select the page linked with the selected row when the row was selected. May be useful on touch devices.\n     */\n    this.drillDownOnRowClick = false;\n    /**\n     * The icon id which is used for icons in the tile outline overview.\n     */\n    this.overviewIconId = null;\n  }\n\n  /**\n   * This enum defines a node-type. This is basically used for the online case where we only have instances\n   * of Page, but never instances of PageWithTable or PageWithNodes. The server simply sets a nodeType\n   * instead.\n   *\n   * @type {{NODES: string, TABLE: string}}\n   */\n  static NodeType = {\n    NODES: 'nodes',\n    TABLE: 'table'\n  };\n\n  /**\n   * Override this function to return a detail form which is displayed in the outline when this page is selected.\n   * The default impl. returns null.\n   */\n  createDetailForm() {\n    return null;\n  }\n\n  /**\n   * @override TreeNode.js\n   */\n  _init(model) {\n    super._init(model);\n    icons.resolveIconProperty(this, 'overviewIconId');\n    this._internalInitTable();\n    this._internalInitDetailForm();\n  }\n\n  /**\n   * @override TreeNode.js\n   */\n  _destroy() {\n    super._destroy();\n    if (this.detailTable) {\n      this.detailTable.destroy();\n    }\n    if (this.detailForm) {\n      this.detailForm.destroy();\n    }\n  }\n\n  _internalInitTable() {\n    var table = this.detailTable;\n    if (table) {\n      // this case is used for Scout classic\n      table = this.getOutline()._createChild(table);\n    } else {\n      table = this._createTable();\n    }\n\n    this.setDetailTable(table);\n  }\n\n  _internalInitDetailForm() {\n    var detailForm = this.detailForm;\n    if (detailForm) {\n      detailForm = this.getOutline()._createChild(detailForm);\n    }\n\n    this.setDetailForm(detailForm);\n  }\n\n  /**\n   * Override this function to create the internal table. Default impl. returns null.\n   */\n  _createTable() {\n    return null;\n  }\n\n  /**\n   * Override this function to initialize the internal (detail) table. Default impl. delegates\n   * <code>filter</code> events to the outline mediator.\n   */\n  _initTable(table) {\n    table.menuBar.setPosition(MenuBar.Position.TOP);\n    table.on('filter', this._onTableFilter.bind(this));\n    if (this.drillDownOnRowClick) {\n      table.on('rowClick', this._onTableRowClick.bind(this));\n      table.setMultiSelect(false);\n    }\n  }\n\n  _ensureDetailForm() {\n    if (this.detailForm) {\n      return;\n    }\n    var form = this.createDetailForm();\n    if (form && !form.displayParent) {\n      form.setDisplayParent(this.getOutline());\n    }\n    this.setDetailForm(form);\n  }\n\n  // see Java: AbstractPage#pageActivatedNotify\n  activate() {\n    this._ensureDetailForm();\n  }\n\n  // see Java: AbstractPage#pageDeactivatedNotify\n  deactivate() {\n  }\n\n  /**\n   * @returns {Outline} the tree / outline / parent instance. it's all the same,\n   *     but it's more intuitive to work with the 'outline' when we deal with pages.\n   */\n  getOutline() {\n    return this.parent;\n  }\n\n  /**\n   * @returns {Array.<Page>} an array of pages linked with the given rows.\n   *   The order of the returned pages will be the same as the order of the rows.\n   */\n  pagesForTableRows(rows) {\n    return rows.map(this.pageForTableRow);\n  }\n\n  pageForTableRow(row) {\n    if (!row.page) {\n      throw new Error('Table-row is not linked to a page');\n    }\n    return row.page;\n  }\n\n  setDetailForm(form) {\n    this.detailForm = form;\n    if (this.detailForm) {\n      this.detailForm.setModal(false);\n    }\n    if (this.detailForm instanceof scout.TileOverviewForm) {\n      this.detailForm.setPage(this);\n    }\n  }\n\n  setDetailTable(table) {\n    if (table) {\n      this._initTable(table);\n      table.setTableStatusVisible(this.tableStatusVisible);\n    }\n    this.detailTable = table;\n  }\n\n  /**\n   * Updates relevant properties from the pages linked with the given rows using the method updatePageFromTableRow and returns the pages.\n   *\n   * @returns {Array.<Page>} pages linked with the given rows.\n   */\n  updatePagesFromTableRows(rows) {\n    return rows.map(function(row) {\n      var page = row.page;\n      page.updatePageFromTableRow(row);\n      return page;\n    });\n  }\n\n  /**\n   * Updates relevant properties (text, enabled, htmlEnabled) from the page linked with the given row.\n   *\n   * @returns {Page} page linked with the given row.\n   */\n  updatePageFromTableRow(row) {\n    var page = row.page;\n    page.enabled = row.enabled;\n    page.text = page.computeTextForRow(row);\n    if (row.cells.length >= 1) {\n      page.htmlEnabled = row.cells[0].htmlEnabled;\n      page.cssClass = row.cells[0].cssClass;\n    }\n    return page;\n  }\n\n  /**\n   * This function creates the text property of this page. The default implementation returns the\n   * text from the first cell of the given row. It's allowed to ignore the given row entirely, when you override\n   * this function.\n   *\n   * @param {TableRow} row\n   */\n  computeTextForRow(row) {\n    var text = '';\n    if (row.cells.length >= 1) {\n      text = row.cells[0].text;\n    }\n    return text;\n  }\n\n  /**\n   * @returns {object} a page parameter object used to pass to newly created child pages. Sets the parent\n   *     to our outline instance and adds optional other properties. Typically you'll pass an\n   *     object (entity-key or arbitrary data) to a child page.\n   */\n  _pageParam(paramProperties) {\n    var param = {\n      parent: this.getOutline()\n    };\n    $.extend(param, paramProperties);\n    return param;\n  }\n\n  reloadPage() {\n    var outline = this.getOutline();\n    if (outline) {\n      this.loadChildren();\n    }\n  }\n\n  linkWithRow(row) {\n    this.row = row;\n    row.page = this;\n    this.getOutline().trigger('pageRowLink', {\n      page: this,\n      row: row\n    });\n  }\n\n  unlinkWithRow(row) {\n    delete this.row;\n    delete row.page;\n  }\n\n  _onTableFilter(event) {\n    this.getOutline().mediator.onTableFilter(event, this);\n  }\n\n  _onTableRowClick(event) {\n    if (!this.drillDownOnRowClick) {\n      return;\n    }\n    var row = event.row;\n    var drillNode = this.pageForTableRow(row);\n    this.getOutline().selectNode(drillNode);\n    this.detailTable.deselectRow(row);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}