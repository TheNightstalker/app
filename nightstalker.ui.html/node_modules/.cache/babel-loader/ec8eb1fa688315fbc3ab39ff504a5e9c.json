{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects, RoundingMode, strings } from '../index';\n/**\n * Converts the given decimal number to base-62 (i.e. the same value, but\n * represented by [a-zA-Z0-9] instead of only [0-9].\n */\n\nexport function toBase62(number) {\n  if (number === undefined) {\n    return undefined;\n  }\n\n  var symbols = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.split('');\n  var base = 62;\n  var s = '';\n  var n;\n\n  while (number >= 1) {\n    n = Math.floor(number / base);\n    s = symbols[number - base * n] + s;\n    number = n;\n  }\n\n  return s;\n}\n/**\n * Returns a random sequence of characters out of the set [a-zA-Z0-9] with the\n * given length. The default length is 8.\n */\n\nexport function randomId(length) {\n  length = length || 8;\n  var alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  var result = '';\n\n  for (var i = 0; i < length; i++) {\n    result += alphabet[Math.floor(Math.random() * alphabet.length)];\n  }\n\n  return result;\n}\nvar _correlationCounter = 1;\n/**\n * Generates a random ID suitable for use as correlation ID.\n *\n * Example:\n *\n *   Hq5JY2kz3n/27\n *\n * The ID is generated from two different alphabets: 1. only letter, 2. only digits. By\n * always selecting a random digit after two random characters, accidental \"rude words\"\n * can be prevented.\n *\n * The characters[01olOL] are not used at all because they are easily confused.\n *\n * For a length of 11 (default), this method can theoretically generate over 200 trillion\n * different IDs:\n *\n *   46^7 * 8^3 = 223'138'640'494'592\n *\n * To further reduce the risk of collisions, a monotonically increasing counter is added\n * at the end of the result string (separated by \"/\").\n */\n\nexport function correlationId(length) {\n  length = length || 11;\n  var letters = 'abcdefghjkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ';\n  var digits = '23456789';\n  var result = '';\n\n  for (var i = 0; i < length; i++) {\n    if ((i + 1) % 3 === 0) {\n      result += digits[Math.floor(Math.random() * digits.length)];\n    } else {\n      result += letters[Math.floor(Math.random() * letters.length)];\n    }\n  }\n\n  return result + '/' + _correlationCounter++;\n}\n/**\n * Rounds a number to the given number of decimal places.\n *\n * Numbers should not be rounded with the built-in Number.toFixed() method, since it\n * behaves differently on different browsers. However, it is safe to apply toFixed()\n * to the result of this method to ensure a fixed number of decimal places (filled up\n * with 0's) because this operation does not involve any rounding anymore.\n * <p>\n * If decimalPlaces is omitted, the number will be rounded to integer by default.\n * Rounding mode {@link RoundingMode.HALF_UP} is used as default.\n */\n\nexport function round(number, roundingMode, decimalPlaces) {\n  if (number === null || number === undefined) {\n    return number;\n  }\n\n  decimalPlaces = decimalPlaces || 0; // Do _not_ multiply with powers of 10 here, because that might cause rounding errors!\n  // Example: 1.005 with 2 decimal places would result in 100.49999999999999\n\n  number = shiftDecimalPoint(number, decimalPlaces);\n\n  switch (roundingMode) {\n    case RoundingMode.UP:\n      if (number < 0) {\n        number = -Math.ceil(Math.abs(number));\n      } else {\n        number = Math.ceil(number);\n      }\n\n      break;\n\n    case RoundingMode.DOWN:\n      if (number < 0) {\n        number = -Math.floor(Math.abs(number));\n      } else {\n        number = Math.floor(number);\n      }\n\n      break;\n\n    case RoundingMode.CEILING:\n      number = Math.ceil(number);\n      break;\n\n    case RoundingMode.FLOOR:\n      number = Math.floor(number);\n      break;\n\n    case RoundingMode.HALF_DOWN:\n      if (number < 0) {\n        number = Math.round(number);\n      } else {\n        number = -Math.round(-number);\n      }\n\n      break;\n    // case RoundingMode.HALF_EVEN:\n    // case RoundingMode.UNNECESSARY:\n    // not implemented, default is used.\n\n    default:\n      // RoundingMode.HALF_UP is used as default\n      if (number < 0) {\n        number = -Math.round(Math.abs(number));\n      } else {\n        number = Math.round(number);\n      }\n\n  }\n\n  return shiftDecimalPoint(number, -decimalPlaces);\n}\n/**\n * Shifts the decimal point in the given number by a certain distance. While the result is also\n * number, the method uses string operations to move the decimal point. This prevents rounding\n * errors as long as the number does not exceed JavaScript's Number precision.\n *\n * The argument 'move' describes the distance how far the decimal point should be moved:\n *     0 = do no move      (1.57 --> 1.57)\n *   > 0 = move to right   (1.57 --> 15.7)\n *   < 0 = move to left    (1.57 --> 0.157)\n */\n\nexport function shiftDecimalPoint(number, move) {\n  if (number === null || number === undefined || !move) {\n    return number;\n  }\n\n  var sign = number ? number < 0 ? -1 : 1 : 0;\n  var distance = Math.abs(move);\n  number = Math.abs(number);\n  var s = strings.asString(number);\n\n  if (s.indexOf('e') !== -1) {\n    s = number.toFixed(20);\n  }\n\n  var a;\n\n  if (move < 0) {\n    // move to left\n    s = strings.repeat('0', distance) + s;\n    a = s.split('.', 2);\n\n    if (a.length === 1) {\n      s = s.substr(0, s.length - distance) + '.' + s.substr(s.length - distance);\n    } else {\n      s = a[0].substr(0, a[0].length - distance) + '.' + a[0].substr(a[0].length - distance) + a[1];\n    }\n  } else if (move > 0) {\n    // move to right\n    s += strings.repeat('0', distance);\n    a = s.split('.', 2);\n\n    if (a.length === 2) {\n      s = a[0] + a[1].substr(0, distance) + '.' + a[1].substr(distance);\n    }\n  } // Remove multiple leading zeros to prevent interpretation as octal number\n\n\n  s = s.replace(/^0*(\\d)/g, '$1');\n  return Number(s) * sign;\n}\n/**\n * Ensures that the given number is really a number.\n * <p>\n * If it already is a number, the number will be returned.\n * Otherwise a Number is created.\n *\n * @param number may be of type number or string.\n */\n\nexport function ensure(number) {\n  if (objects.isNullOrUndefined(number)) {\n    return number;\n  }\n\n  return Number(number);\n}\n/**\n * Returns true if the given number is of type number but not NaN.\n */\n\nexport function isNumber(number) {\n  return typeof number === 'number' && !isNaN(number);\n}\nexport function _setCorrelationCounter(val) {\n  _correlationCounter = val;\n}\nexport default {\n  correlationId: correlationId,\n  ensure: ensure,\n  isNumber: isNumber,\n  randomId: randomId,\n  round: round,\n  shiftDecimalPoint: shiftDecimalPoint,\n  toBase62: toBase62\n};","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/util/numbers.js"],"names":["objects","RoundingMode","strings","toBase62","number","undefined","symbols","split","base","s","n","Math","floor","randomId","length","alphabet","result","i","random","_correlationCounter","correlationId","letters","digits","round","roundingMode","decimalPlaces","shiftDecimalPoint","UP","ceil","abs","DOWN","CEILING","FLOOR","HALF_DOWN","move","sign","distance","asString","indexOf","toFixed","a","repeat","substr","replace","Number","ensure","isNullOrUndefined","isNumber","isNaN","_setCorrelationCounter","val"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects, RoundingMode, strings} from '../index';\n\n/**\n * Converts the given decimal number to base-62 (i.e. the same value, but\n * represented by [a-zA-Z0-9] instead of only [0-9].\n */\nexport function toBase62(number) {\n  if (number === undefined) {\n    return undefined;\n  }\n  var symbols = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.split('');\n  var base = 62;\n  var s = '';\n  var n;\n  while (number >= 1) {\n    n = Math.floor(number / base);\n    s = symbols[(number - (base * n))] + s;\n    number = n;\n  }\n  return s;\n}\n\n/**\n * Returns a random sequence of characters out of the set [a-zA-Z0-9] with the\n * given length. The default length is 8.\n */\nexport function randomId(length) {\n  length = length || 8;\n  var alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  var result = '';\n  for (var i = 0; i < length; i++) {\n    result += alphabet[Math.floor(Math.random() * alphabet.length)];\n  }\n  return result;\n}\n\nlet _correlationCounter = 1;\n\n/**\n * Generates a random ID suitable for use as correlation ID.\n *\n * Example:\n *\n *   Hq5JY2kz3n/27\n *\n * The ID is generated from two different alphabets: 1. only letter, 2. only digits. By\n * always selecting a random digit after two random characters, accidental \"rude words\"\n * can be prevented.\n *\n * The characters[01olOL] are not used at all because they are easily confused.\n *\n * For a length of 11 (default), this method can theoretically generate over 200 trillion\n * different IDs:\n *\n *   46^7 * 8^3 = 223'138'640'494'592\n *\n * To further reduce the risk of collisions, a monotonically increasing counter is added\n * at the end of the result string (separated by \"/\").\n */\nexport function correlationId(length) {\n  length = length || 11;\n  var letters = 'abcdefghjkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ';\n  var digits = '23456789';\n  var result = '';\n  for (var i = 0; i < length; i++) {\n    if ((i + 1) % 3 === 0) {\n      result += digits[Math.floor(Math.random() * digits.length)];\n    } else {\n      result += letters[Math.floor(Math.random() * letters.length)];\n    }\n  }\n  return result + '/' + (_correlationCounter++);\n}\n\n/**\n * Rounds a number to the given number of decimal places.\n *\n * Numbers should not be rounded with the built-in Number.toFixed() method, since it\n * behaves differently on different browsers. However, it is safe to apply toFixed()\n * to the result of this method to ensure a fixed number of decimal places (filled up\n * with 0's) because this operation does not involve any rounding anymore.\n * <p>\n * If decimalPlaces is omitted, the number will be rounded to integer by default.\n * Rounding mode {@link RoundingMode.HALF_UP} is used as default.\n */\nexport function round(number, roundingMode, decimalPlaces) {\n  if (number === null || number === undefined) {\n    return number;\n  }\n  decimalPlaces = decimalPlaces || 0;\n\n  // Do _not_ multiply with powers of 10 here, because that might cause rounding errors!\n  // Example: 1.005 with 2 decimal places would result in 100.49999999999999\n  number = shiftDecimalPoint(number, decimalPlaces);\n\n  switch (roundingMode) {\n    case RoundingMode.UP:\n      if (number < 0) {\n        number = -Math.ceil(Math.abs(number));\n      } else {\n        number = Math.ceil(number);\n      }\n      break;\n    case RoundingMode.DOWN:\n      if (number < 0) {\n        number = -Math.floor(Math.abs(number));\n      } else {\n        number = Math.floor(number);\n      }\n      break;\n    case RoundingMode.CEILING:\n      number = Math.ceil(number);\n      break;\n    case RoundingMode.FLOOR:\n      number = Math.floor(number);\n      break;\n    case RoundingMode.HALF_DOWN:\n      if (number < 0) {\n        number = Math.round(number);\n      } else {\n        number = -Math.round(-number);\n      }\n      break;\n    // case RoundingMode.HALF_EVEN:\n    // case RoundingMode.UNNECESSARY:\n    // not implemented, default is used.\n    default:\n      // RoundingMode.HALF_UP is used as default\n      if (number < 0) {\n        number = -Math.round(Math.abs(number));\n      } else {\n        number = Math.round(number);\n      }\n  }\n\n  return shiftDecimalPoint(number, -decimalPlaces);\n}\n\n/**\n * Shifts the decimal point in the given number by a certain distance. While the result is also\n * number, the method uses string operations to move the decimal point. This prevents rounding\n * errors as long as the number does not exceed JavaScript's Number precision.\n *\n * The argument 'move' describes the distance how far the decimal point should be moved:\n *     0 = do no move      (1.57 --> 1.57)\n *   > 0 = move to right   (1.57 --> 15.7)\n *   < 0 = move to left    (1.57 --> 0.157)\n */\nexport function shiftDecimalPoint(number, move) {\n  if (number === null || number === undefined || !move) {\n    return number;\n  }\n\n  var sign = (number ? (number < 0 ? -1 : 1) : 0);\n  var distance = Math.abs(move);\n\n  number = Math.abs(number);\n  var s = strings.asString(number);\n  if (s.indexOf('e') !== -1) {\n    s = number.toFixed(20);\n  }\n  var a;\n  if (move < 0) {\n    // move to left\n    s = strings.repeat('0', distance) + s;\n    a = s.split('.', 2);\n    if (a.length === 1) {\n      s = s.substr(0, s.length - distance) + '.' + s.substr(s.length - distance);\n    } else {\n      s = a[0].substr(0, a[0].length - distance) + '.' + a[0].substr(a[0].length - distance) + a[1];\n    }\n  } else if (move > 0) {\n    // move to right\n    s += strings.repeat('0', distance);\n    a = s.split('.', 2);\n    if (a.length === 2) {\n      s = a[0] + a[1].substr(0, distance) + '.' + a[1].substr(distance);\n    }\n  }\n  // Remove multiple leading zeros to prevent interpretation as octal number\n  s = s.replace(/^0*(\\d)/g, '$1');\n  return Number(s) * sign;\n}\n\n/**\n * Ensures that the given number is really a number.\n * <p>\n * If it already is a number, the number will be returned.\n * Otherwise a Number is created.\n *\n * @param number may be of type number or string.\n */\nexport function ensure(number) {\n  if (objects.isNullOrUndefined(number)) {\n    return number;\n  }\n  return Number(number);\n}\n\n/**\n * Returns true if the given number is of type number but not NaN.\n */\nexport function isNumber(number) {\n  return typeof number === 'number' && !isNaN(number);\n}\n\nexport function _setCorrelationCounter(val) {\n  _correlationCounter = val;\n}\n\nexport default {\n  correlationId,\n  ensure,\n  isNumber,\n  randomId,\n  round,\n  shiftDecimalPoint,\n  toBase62\n};\n"]},"metadata":{},"sourceType":"module"}