{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Dimension, HtmlComponent, LayoutConstants, LogicalGridData, Rectangle, TreeSet } from '../../index';\nimport $ from 'jquery';\n/**\n * JavaScript port of org.eclipse.scout.rt.ui.swing.LogicalGridLayoutInfo.\n */\n\nvar LogicalGridLayoutInfo = /*#__PURE__*/function () {\n  function LogicalGridLayoutInfo(model) {\n    _classCallCheck(this, LogicalGridLayoutInfo);\n\n    this.gridDatas = [];\n    this.$components = null;\n    this.cols = 0;\n    this.compSize = [];\n    this.rows = 0;\n    this.width = [];\n    this.widthHints = [];\n    this.height = [];\n    this.weightX = [];\n    this.weightY = [];\n    this.hgap = 0;\n    this.vgap = 0;\n    this.rowHeight = 0;\n    this.columnWidth = 0;\n    this.cellBounds = [];\n    this.widthHint = null;\n    this.widthOnly = false;\n    $.extend(this, model); // create a modifiable copy of the grid datas\n\n    var i, gd, x, y;\n\n    for (i = 0; i < this.cons.length; i++) {\n      this.gridDatas[i] = new LogicalGridData(this.cons[i]);\n    }\n\n    if (this.$components.length === 0) {\n      return;\n    } // eliminate unused rows and columns\n\n\n    var usedCols = new TreeSet();\n    var usedRows = new TreeSet(); // ticket 86645 use member gridDatas instead of param cons\n\n    for (i = 0; i < this.gridDatas.length; i++) {\n      gd = this.gridDatas[i];\n\n      if (gd.gridx < 0) {\n        gd.gridx = 0;\n      }\n\n      if (gd.gridy < 0) {\n        gd.gridy = 0;\n      }\n\n      if (gd.gridw < 1) {\n        gd.gridw = 1;\n      }\n\n      if (gd.gridh < 1) {\n        gd.gridh = 1;\n      }\n\n      for (x = gd.gridx; x < gd.gridx + gd.gridw; x++) {\n        usedCols.add(x);\n      }\n\n      for (y = gd.gridy; y < gd.gridy + gd.gridh; y++) {\n        usedRows.add(y);\n      }\n    }\n\n    var maxCol = usedCols.last();\n\n    for (x = maxCol; x >= 0; x--) {\n      if (!usedCols.contains(x)) {\n        // eliminate column\n        // ticket 86645 use member gridDatas instead of param cons\n        for (i = 0; i < this.gridDatas.length; i++) {\n          gd = this.gridDatas[i];\n\n          if (gd.gridx > x) {\n            gd.gridx--;\n          }\n        }\n      }\n    }\n\n    var maxRow = usedRows.last();\n\n    for (y = maxRow; y >= 0; y--) {\n      if (!usedRows.contains(y)) {\n        // eliminate row\n        // ticket 86645 use member gridDatas instead of param cons\n        for (i = 0; i < this.gridDatas.length; i++) {\n          gd = this.gridDatas[i];\n\n          if (gd.gridy > y) {\n            // ticket 86645\n            gd.gridy--;\n          }\n        }\n      }\n    } //\n\n\n    this.cols = usedCols.size();\n    this.rows = usedRows.size();\n    $.log.isTraceEnabled() && $.log.trace('(LogicalGridLayoutInfo#CTOR) $components.length=' + this.$components.length + ' usedCols=' + this.cols + ' usedRows=' + this.rows);\n\n    this._initializeInfo();\n  }\n\n  _createClass(LogicalGridLayoutInfo, [{\n    key: \"_initializeInfo\",\n    value: function _initializeInfo() {\n      var compCount = this.$components.length;\n      var uiHeightElements = [];\n\n      for (var i = 0; i < compCount; i++) {\n        // cleanup constraints\n        var $comp = this.$components[i];\n        var cons = this.gridDatas[i];\n\n        if (cons.gridx < 0) {\n          cons.gridx = 0;\n        }\n\n        if (cons.gridy < 0) {\n          cons.gridy = 0;\n        }\n\n        if (cons.gridw < 1) {\n          cons.gridw = 1;\n        }\n\n        if (cons.gridh < 1) {\n          cons.gridh = 1;\n        }\n\n        if (cons.gridx >= this.cols) {\n          cons.gridx = this.cols - 1;\n        }\n\n        if (cons.gridy >= this.rows) {\n          cons.gridy = this.rows - 1;\n        }\n\n        if (cons.gridx + cons.gridw - 1 >= this.cols) {\n          cons.gridw = this.cols - cons.gridx;\n        }\n\n        if (cons.gridy + cons.gridh >= this.rows) {\n          cons.gridh = this.rows - cons.gridy;\n        } // Calculate and cache component size\n\n\n        var size = new Dimension(0, 0);\n\n        if (cons.widthHint > 0) {\n          // Use explicit width hint, if set\n          size.width = cons.widthHint; // eslint-disable-next-line brace-style\n        } else if (cons.useUiWidth || !cons.fillHorizontal) {\n          // Calculate preferred width otherwise\n          // This size is needed by _initializeColumns\n          // But only if really needed by the logical grid layout (because it is expensive)\n          size = this.uiSizeInPixel($comp, cons);\n        }\n\n        if (cons.heightHint > 0) {\n          // Use explicit height hint, if set\n          size.height = cons.heightHint;\n        } else if (cons.useUiHeight || !cons.fillVertical) {\n          // Otherwise check if preferred height should be calculated.\n          // Don't do it now because because weightX need to be calculated first to get the correct width hints\n          uiHeightElements.push({\n            cons: cons,\n            $comp: $comp,\n            index: i\n          });\n        }\n\n        this.compSize[i] = size;\n      } // Calculate this.width and this.weightX\n\n\n      this._initializeColumns();\n\n      if (this.widthOnly) {\n        // Abort here if only width is of interest\n        this.height = arrays.init(this.rows, [0, 0, 0]);\n        return;\n      } // Calculate preferred heights using the width hints\n\n\n      if (this.widthHint && uiHeightElements.length > 0) {\n        var totalHGap = Math.max(0, (this.cols - 1) * this.hgap);\n        this.widthHints = this.layoutSizes(this.widthHint - totalHGap, this.width, this.weightX);\n      }\n\n      uiHeightElements.forEach(function (elem) {\n        var $comp = elem.$comp;\n        var cons = elem.cons;\n        var widthHint = this.widthHintForGridData(cons);\n\n        if (!cons.fillHorizontal) {\n          widthHint = Math.min(widthHint, this.compSize[elem.index].width);\n        }\n\n        this.compSize[elem.index] = this.uiSizeInPixel($comp, cons, {\n          widthHint: widthHint\n        });\n      }, this); // Calculate this.height and this.weightY\n\n      this._initializeRows();\n    }\n  }, {\n    key: \"_initializeColumns\",\n    value: function _initializeColumns() {\n      var compSize = this.compSize;\n      var compCount = compSize.length;\n      var prefWidths = arrays.init(this.cols, 0);\n      var fixedWidths = arrays.init(this.cols, false);\n      var i, j, k, prefw, cons;\n\n      for (i = 0; i < compCount; i++) {\n        cons = this.gridDatas[i];\n\n        if (cons.gridw === 1) {\n          if (cons.widthHint > 0) {\n            prefw = cons.widthHint;\n          } else if (cons.useUiWidth) {\n            prefw = compSize[i].width;\n          } else {\n            prefw = this.logicalWidthInPixel(cons);\n          }\n\n          prefw = Math.floor(prefw);\n\n          for (j = cons.gridx; j < cons.gridx + cons.gridw && j < this.cols; j++) {\n            prefWidths[j] = Math.max(prefWidths[j], prefw);\n\n            if (cons.weightx === 0) {\n              fixedWidths[j] = true;\n            }\n          }\n        }\n      }\n\n      for (i = 0; i < compCount; i++) {\n        cons = this.gridDatas[i];\n\n        if (cons.gridw > 1) {\n          var hSpan = cons.gridw;\n          var spanWidth = 0;\n          var distWidth; // pref\n\n          for (j = cons.gridx; j < cons.gridx + cons.gridw && j < this.cols; j++) {\n            if (!fixedWidths[j]) {\n              spanWidth += prefWidths[j];\n            }\n          }\n\n          if (cons.widthHint > 0) {\n            distWidth = cons.widthHint - spanWidth - (hSpan - 1) * this.hgap;\n          } else if (cons.useUiWidth) {\n            distWidth = compSize[i].width - spanWidth - (hSpan - 1) * this.hgap;\n          } else {\n            distWidth = this.logicalWidthInPixel(cons) - spanWidth - (hSpan - 1) * this.hgap;\n          }\n\n          if (distWidth > 0) {\n            var equalWidth = Math.floor((distWidth + spanWidth) / hSpan);\n            var remainder = (distWidth + spanWidth) % hSpan;\n            var last = -1;\n\n            for (j = cons.gridx; j < cons.gridx + cons.gridw && j < this.cols; j++) {\n              last = j;\n\n              if (!fixedWidths[j]) {\n                prefWidths[j] = Math.max(equalWidth, prefWidths[j]);\n              }\n\n              if (cons.weightx === 0) {\n                fixedWidths[j] = true;\n              }\n            }\n\n            if (last > -1) {\n              prefWidths[last] += remainder;\n            }\n          }\n        }\n      }\n\n      var lc = LayoutConstants;\n\n      for (i = 0; i < this.cols; i++) {\n        this.width[i] = [];\n\n        if (fixedWidths[i]) {\n          this.width[i][lc.MIN] = prefWidths[i];\n          this.width[i][lc.PREF] = prefWidths[i];\n          this.width[i][lc.MAX] = prefWidths[i];\n        } else {\n          this.width[i][lc.MIN] = 0; // must be exactly 0!\n\n          this.width[i][lc.PREF] = prefWidths[i];\n          this.width[i][lc.MAX] = 10240;\n        }\n      } // averaged column weights, normalized so that sum of weights is equal to\n      // 1.0\n\n\n      for (i = 0; i < this.cols; i++) {\n        if (fixedWidths[i]) {\n          this.weightX[i] = 0;\n        } else {\n          var weightSum = 0;\n          var weightCount = 0;\n\n          for (k = 0; k < compCount; k++) {\n            cons = this.gridDatas[k];\n\n            if (cons.weightx > 0 && cons.gridx <= i && i <= cons.gridx + cons.gridw - 1) {\n              weightSum += cons.weightx / cons.gridw;\n              weightCount++;\n            }\n          }\n\n          this.weightX[i] = weightCount > 0 ? weightSum / weightCount : 0;\n        }\n      }\n\n      var sumWeightX = 0;\n\n      for (i = 0; i < this.cols; i++) {\n        sumWeightX += this.weightX[i];\n      }\n\n      if (sumWeightX >= 1e-6) {\n        var f = 1.0 / sumWeightX;\n\n        for (i = 0; i < this.cols; i++) {\n          this.weightX[i] = this.weightX[i] * f;\n        }\n      }\n    }\n  }, {\n    key: \"_initializeRows\",\n    value: function _initializeRows() {\n      var compSize = this.compSize;\n      var compCount = compSize.length;\n      var prefHeights = arrays.init(this.rows, 0);\n      var fixedHeights = arrays.init(this.rows, false);\n      var i, j, k, prefh, cons;\n\n      for (i = 0; i < compCount; i++) {\n        cons = this.gridDatas[i];\n\n        if (cons.gridh === 1) {\n          if (cons.heightHint > 0) {\n            prefh = cons.heightHint;\n          } else if (cons.useUiHeight) {\n            prefh = compSize[i].height;\n          } else {\n            prefh = this.logicalHeightInPixel(cons);\n          }\n\n          prefh = Math.floor(prefh);\n\n          for (j = cons.gridy; j < cons.gridy + cons.gridh && j < this.rows; j++) {\n            prefHeights[j] = Math.max(prefHeights[j], prefh);\n\n            if (cons.weighty === 0) {\n              fixedHeights[j] = true;\n            }\n          }\n        }\n      }\n\n      for (i = 0; i < compCount; i++) {\n        cons = this.gridDatas[i];\n\n        if (cons.gridh > 1) {\n          var vSpan = cons.gridh;\n          var spanHeight = 0;\n          var distHeight; // pref\n\n          for (j = cons.gridy; j < cons.gridy + cons.gridh && j < this.rows; j++) {\n            if (!fixedHeights[j]) {\n              spanHeight += prefHeights[j];\n            }\n          }\n\n          if (cons.heightHint > 0) {\n            distHeight = cons.heightHint - spanHeight - (vSpan - 1) * this.vgap;\n          } else if (cons.useUiHeight) {\n            distHeight = compSize[i].height - spanHeight - (vSpan - 1) * this.vgap;\n          } else {\n            distHeight = this.logicalHeightInPixel(cons) - spanHeight - (vSpan - 1) * this.vgap;\n          }\n\n          if (distHeight > 0) {\n            var equalHeight = Math.floor((distHeight + spanHeight) / vSpan);\n            var remainder = (distHeight + spanHeight) % vSpan;\n            var last = -1;\n\n            for (j = cons.gridy; j < cons.gridy + cons.gridh && j < this.rows; j++) {\n              last = j;\n\n              if (!fixedHeights[j]) {\n                prefHeights[j] = Math.max(equalHeight, prefHeights[j]);\n              }\n\n              if (cons.weighty === 0) {\n                fixedHeights[j] = true;\n              }\n            }\n\n            if (last > -1) {\n              prefHeights[last] += remainder;\n            }\n          }\n        }\n      }\n\n      var lc = LayoutConstants;\n\n      for (i = 0; i < this.rows; i++) {\n        this.height[i] = [];\n\n        if (fixedHeights[i]) {\n          this.height[i][lc.MIN] = prefHeights[i];\n          this.height[i][lc.PREF] = prefHeights[i];\n          this.height[i][lc.MAX] = prefHeights[i];\n        } else {\n          this.height[i][lc.MIN] = 0; // must be exactly 0!\n\n          this.height[i][lc.PREF] = prefHeights[i];\n          this.height[i][lc.MAX] = 10240;\n        }\n      } // averaged row weights, normalized so that sum of weights is equal to 1.0\n\n\n      for (i = 0; i < this.rows; i++) {\n        if (fixedHeights[i]) {\n          this.weightY[i] = 0;\n        } else {\n          var weightSum = 0;\n          var weightCount = 0;\n\n          for (k = 0; k < compCount; k++) {\n            cons = this.gridDatas[k];\n\n            if (cons.weighty > 0 && cons.gridy <= i && i <= cons.gridy + cons.gridh - 1) {\n              weightSum += cons.weighty / cons.gridh;\n              weightCount++;\n            }\n          }\n\n          this.weightY[i] = weightCount > 0 ? weightSum / weightCount : 0;\n        }\n      }\n\n      var sumWeightY = 0;\n\n      for (i = 0; i < this.rows; i++) {\n        sumWeightY += this.weightY[i];\n      }\n\n      if (sumWeightY >= 1e-6) {\n        var f = 1.0 / sumWeightY;\n\n        for (i = 0; i < this.rows; i++) {\n          this.weightY[i] = this.weightY[i] * f;\n        }\n      }\n    }\n  }, {\n    key: \"layoutCellBounds\",\n    value: function layoutCellBounds(size, insets) {\n      var w = this.layoutSizes(size.width - insets.horizontal() - Math.max(0, (this.cols - 1) * this.hgap), this.width, this.weightX);\n      var h = this.layoutSizes(size.height - insets.vertical() - Math.max(0, (this.rows - 1) * this.vgap), this.height, this.weightY);\n      this.cellBounds = arrays.init(this.rows, null);\n      var y = insets.top,\n          r,\n          x,\n          c;\n\n      for (r = 0; r < this.rows; r++) {\n        x = insets.left;\n        this.cellBounds[r] = arrays.init(this.cols, null);\n\n        for (c = 0; c < this.cols; c++) {\n          this.cellBounds[r][c] = new Rectangle(x, y, w[c], h[r]);\n          x += w[c];\n          x += this.hgap;\n        }\n\n        y += h[r];\n        y += this.vgap;\n      }\n\n      return this.cellBounds;\n    }\n  }, {\n    key: \"layoutSizes\",\n    value: function layoutSizes(targetSize, sizes, weights) {\n      var i;\n      var outSizes = arrays.init(sizes.length, 0);\n\n      if (targetSize <= 0) {\n        for (i = 0; i < sizes.length; i++) {\n          outSizes[i] = sizes[i][LayoutConstants.MIN];\n        }\n\n        return outSizes;\n      }\n\n      var sumSize = 0;\n      var tmpWeight = arrays.init(weights.length, 0.0);\n      var sumWeight = 0;\n\n      for (i = 0; i < sizes.length; i++) {\n        outSizes[i] = sizes[i][LayoutConstants.PREF];\n        sumSize += outSizes[i];\n        tmpWeight[i] = weights[i];\n        /**\n         * auto correction: if weight is 0 and min / max sizes are NOT equal then\n         * set weight to 1; if weight<eps set it to 0\n         */\n\n        if (tmpWeight[i] < LayoutConstants.EPS) {\n          if (sizes[i][LayoutConstants.MAX] > sizes[i][LayoutConstants.MIN]) {\n            tmpWeight[i] = 1;\n          } else {\n            tmpWeight[i] = 0;\n          }\n        }\n\n        sumWeight += tmpWeight[i];\n      } // normalize weights\n\n\n      if (sumWeight > 0) {\n        for (i = 0; i < tmpWeight.length; i++) {\n          tmpWeight[i] = tmpWeight[i] / sumWeight;\n        }\n      }\n\n      var deltaInt = targetSize - sumSize; // expand or shrink\n\n      if (Math.abs(deltaInt) > 0) {\n        // setup accumulators\n\n        /* float[] */\n        var accWeight = arrays.init(tmpWeight.length, 0.0);\n        var hasTargets;\n\n        if (deltaInt > 0) {\n          // expand, if delta is > 0\n          hasTargets = true;\n\n          while (deltaInt > 0 && hasTargets) {\n            hasTargets = false;\n\n            for (i = 0; i < outSizes.length && deltaInt > 0; i++) {\n              if (tmpWeight[i] > 0 && outSizes[i] < sizes[i][LayoutConstants.MAX]) {\n                hasTargets = true;\n                accWeight[i] += tmpWeight[i];\n\n                if (accWeight[i] > 0) {\n                  accWeight[i] -= 1;\n                  outSizes[i] += 1;\n                  deltaInt -= 1;\n                }\n              }\n            }\n          }\n        } else {\n          // shrink, if delta is <= 0\n          hasTargets = true;\n\n          while (deltaInt < 0 && hasTargets) {\n            hasTargets = false;\n\n            for (i = 0; i < outSizes.length && deltaInt < 0; i++) {\n              if (tmpWeight[i] > 0 && outSizes[i] > sizes[i][LayoutConstants.MIN]) {\n                hasTargets = true;\n                accWeight[i] += tmpWeight[i];\n\n                if (accWeight[i] > 0) {\n                  accWeight[i] -= 1;\n                  outSizes[i] -= 1;\n                  deltaInt += 1;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return outSizes;\n    }\n  }, {\n    key: \"logicalWidthInPixel\",\n    value: function logicalWidthInPixel(cons) {\n      var gridW = cons.gridw;\n      return this.columnWidth * gridW + this.hgap * Math.max(0, gridW - 1);\n    }\n  }, {\n    key: \"logicalHeightInPixel\",\n    value: function logicalHeightInPixel(cons) {\n      var gridH = cons.gridh,\n          addition = cons.logicalRowHeightAddition || 0;\n      return this.rowHeight * gridH + this.vgap * Math.max(0, gridH - 1) + addition;\n    }\n  }, {\n    key: \"uiSizeInPixel\",\n    value: function uiSizeInPixel($comp, cons, options) {\n      var htmlComp = HtmlComponent.get($comp);\n      return htmlComp.prefSize(options).add(htmlComp.margins());\n    }\n    /**\n     * @returns {number|null} the width hint for the given gridData\n     */\n\n  }, {\n    key: \"widthHintForGridData\",\n    value: function widthHintForGridData(gridData) {\n      if (this.widthHints.length === 0) {\n        return null;\n      }\n\n      var widthHint = (gridData.gridw - 1) * this.hgap;\n\n      for (var i = gridData.gridx; i < gridData.gridx + gridData.gridw; i++) {\n        widthHint += this.widthHints[i];\n      }\n\n      return widthHint;\n    }\n  }]);\n\n  return LogicalGridLayoutInfo;\n}();\n\nexport { LogicalGridLayoutInfo as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/layout/logicalgrid/LogicalGridLayoutInfo.js"],"names":["arrays","Dimension","HtmlComponent","LayoutConstants","LogicalGridData","Rectangle","TreeSet","$","LogicalGridLayoutInfo","model","gridDatas","$components","cols","compSize","rows","width","widthHints","height","weightX","weightY","hgap","vgap","rowHeight","columnWidth","cellBounds","widthHint","widthOnly","extend","i","gd","x","y","cons","length","usedCols","usedRows","gridx","gridy","gridw","gridh","add","maxCol","last","contains","maxRow","size","log","isTraceEnabled","trace","_initializeInfo","compCount","uiHeightElements","$comp","useUiWidth","fillHorizontal","uiSizeInPixel","heightHint","useUiHeight","fillVertical","push","index","_initializeColumns","init","totalHGap","Math","max","layoutSizes","forEach","elem","widthHintForGridData","min","_initializeRows","prefWidths","fixedWidths","j","k","prefw","logicalWidthInPixel","floor","weightx","hSpan","spanWidth","distWidth","equalWidth","remainder","lc","MIN","PREF","MAX","weightSum","weightCount","sumWeightX","f","prefHeights","fixedHeights","prefh","logicalHeightInPixel","weighty","vSpan","spanHeight","distHeight","equalHeight","sumWeightY","insets","w","horizontal","h","vertical","top","r","c","left","targetSize","sizes","weights","outSizes","sumSize","tmpWeight","sumWeight","EPS","deltaInt","abs","accWeight","hasTargets","gridW","gridH","addition","logicalRowHeightAddition","options","htmlComp","get","prefSize","margins","gridData"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Dimension, HtmlComponent, LayoutConstants, LogicalGridData, Rectangle, TreeSet} from '../../index';\nimport $ from 'jquery';\n\n/**\n * JavaScript port of org.eclipse.scout.rt.ui.swing.LogicalGridLayoutInfo.\n */\nexport default class LogicalGridLayoutInfo {\n\n  constructor(model) {\n    this.gridDatas = [];\n    this.$components = null;\n    this.cols = 0;\n    this.compSize = [];\n    this.rows = 0;\n    this.width = [];\n    this.widthHints = [];\n    this.height = [];\n    this.weightX = [];\n    this.weightY = [];\n    this.hgap = 0;\n    this.vgap = 0;\n    this.rowHeight = 0;\n    this.columnWidth = 0;\n    this.cellBounds = [];\n    this.widthHint = null;\n    this.widthOnly = false;\n    $.extend(this, model);\n\n    // create a modifiable copy of the grid datas\n    var i, gd, x, y;\n    for (i = 0; i < this.cons.length; i++) {\n      this.gridDatas[i] = new LogicalGridData(this.cons[i]);\n    }\n    if (this.$components.length === 0) {\n      return;\n    }\n    // eliminate unused rows and columns\n    var usedCols = new TreeSet();\n    var usedRows = new TreeSet();\n    // ticket 86645 use member gridDatas instead of param cons\n    for (i = 0; i < this.gridDatas.length; i++) {\n      gd = this.gridDatas[i];\n      if (gd.gridx < 0) {\n        gd.gridx = 0;\n      }\n      if (gd.gridy < 0) {\n        gd.gridy = 0;\n      }\n      if (gd.gridw < 1) {\n        gd.gridw = 1;\n      }\n      if (gd.gridh < 1) {\n        gd.gridh = 1;\n      }\n      for (x = gd.gridx; x < gd.gridx + gd.gridw; x++) {\n        usedCols.add(x);\n      }\n      for (y = gd.gridy; y < gd.gridy + gd.gridh; y++) {\n        usedRows.add(y);\n      }\n    }\n    var maxCol = usedCols.last();\n    for (x = maxCol; x >= 0; x--) {\n      if (!usedCols.contains(x)) {\n        // eliminate column\n        // ticket 86645 use member gridDatas instead of param cons\n        for (i = 0; i < this.gridDatas.length; i++) {\n          gd = this.gridDatas[i];\n          if (gd.gridx > x) {\n            gd.gridx--;\n          }\n        }\n      }\n    }\n    var maxRow = usedRows.last();\n    for (y = maxRow; y >= 0; y--) {\n      if (!usedRows.contains(y)) {\n        // eliminate row\n        // ticket 86645 use member gridDatas instead of param cons\n        for (i = 0; i < this.gridDatas.length; i++) {\n          gd = this.gridDatas[i];\n          if (gd.gridy > y) {\n            // ticket 86645\n            gd.gridy--;\n          }\n        }\n      }\n    }\n    //\n    this.cols = usedCols.size();\n    this.rows = usedRows.size();\n\n    $.log.isTraceEnabled() && $.log.trace('(LogicalGridLayoutInfo#CTOR) $components.length=' + this.$components.length + ' usedCols=' + this.cols + ' usedRows=' + this.rows);\n    this._initializeInfo();\n  }\n\n  _initializeInfo() {\n    var compCount = this.$components.length;\n    var uiHeightElements = [];\n    for (var i = 0; i < compCount; i++) {\n      // cleanup constraints\n      var $comp = this.$components[i];\n      var cons = this.gridDatas[i];\n      if (cons.gridx < 0) {\n        cons.gridx = 0;\n      }\n      if (cons.gridy < 0) {\n        cons.gridy = 0;\n      }\n      if (cons.gridw < 1) {\n        cons.gridw = 1;\n      }\n      if (cons.gridh < 1) {\n        cons.gridh = 1;\n      }\n      if (cons.gridx >= this.cols) {\n        cons.gridx = this.cols - 1;\n      }\n      if (cons.gridy >= this.rows) {\n        cons.gridy = this.rows - 1;\n      }\n      if (cons.gridx + cons.gridw - 1 >= this.cols) {\n        cons.gridw = this.cols - cons.gridx;\n      }\n      if (cons.gridy + cons.gridh >= this.rows) {\n        cons.gridh = this.rows - cons.gridy;\n      }\n\n      // Calculate and cache component size\n      var size = new Dimension(0, 0);\n      if (cons.widthHint > 0) {\n        // Use explicit width hint, if set\n        size.width = cons.widthHint;\n        // eslint-disable-next-line brace-style\n      } else if (cons.useUiWidth || !cons.fillHorizontal) {\n        // Calculate preferred width otherwise\n        // This size is needed by _initializeColumns\n        // But only if really needed by the logical grid layout (because it is expensive)\n        size = this.uiSizeInPixel($comp, cons);\n      }\n      if (cons.heightHint > 0) {\n        // Use explicit height hint, if set\n        size.height = cons.heightHint;\n      } else if (cons.useUiHeight || !cons.fillVertical) {\n        // Otherwise check if preferred height should be calculated.\n        // Don't do it now because because weightX need to be calculated first to get the correct width hints\n        uiHeightElements.push({\n          cons: cons,\n          $comp: $comp,\n          index: i\n        });\n      }\n      this.compSize[i] = size;\n    }\n\n    // Calculate this.width and this.weightX\n    this._initializeColumns();\n\n    if (this.widthOnly) {\n      // Abort here if only width is of interest\n      this.height = arrays.init(this.rows, [0, 0, 0]);\n      return;\n    }\n\n    // Calculate preferred heights using the width hints\n    if (this.widthHint && uiHeightElements.length > 0) {\n      var totalHGap = Math.max(0, (this.cols - 1) * this.hgap);\n      this.widthHints = this.layoutSizes(this.widthHint - totalHGap, this.width, this.weightX);\n    }\n    uiHeightElements.forEach(function(elem) {\n      var $comp = elem.$comp;\n      var cons = elem.cons;\n      var widthHint = this.widthHintForGridData(cons);\n      if (!cons.fillHorizontal) {\n        widthHint = Math.min(widthHint, this.compSize[elem.index].width);\n      }\n      this.compSize[elem.index] = this.uiSizeInPixel($comp, cons, {\n        widthHint: widthHint\n      });\n    }, this);\n\n    // Calculate this.height and this.weightY\n    this._initializeRows();\n  }\n\n  _initializeColumns() {\n    var compSize = this.compSize;\n    var compCount = compSize.length;\n    var prefWidths = arrays.init(this.cols, 0);\n    var fixedWidths = arrays.init(this.cols, false);\n    var i, j, k, prefw, cons;\n    for (i = 0; i < compCount; i++) {\n      cons = this.gridDatas[i];\n      if (cons.gridw === 1) {\n        if (cons.widthHint > 0) {\n          prefw = cons.widthHint;\n        } else if (cons.useUiWidth) {\n          prefw = compSize[i].width;\n        } else {\n          prefw = this.logicalWidthInPixel(cons);\n        }\n        prefw = Math.floor(prefw);\n        for (j = cons.gridx; j < cons.gridx + cons.gridw && j < this.cols; j++) {\n          prefWidths[j] = Math.max(prefWidths[j], prefw);\n          if (cons.weightx === 0) {\n            fixedWidths[j] = true;\n          }\n        }\n      }\n    }\n    for (i = 0; i < compCount; i++) {\n      cons = this.gridDatas[i];\n      if (cons.gridw > 1) {\n        var hSpan = cons.gridw;\n        var spanWidth = 0;\n        var distWidth;\n        // pref\n        for (j = cons.gridx; j < cons.gridx + cons.gridw && j < this.cols; j++) {\n          if (!fixedWidths[j]) {\n            spanWidth += prefWidths[j];\n          }\n        }\n        if (cons.widthHint > 0) {\n          distWidth = cons.widthHint - spanWidth - (hSpan - 1) * this.hgap;\n        } else if (cons.useUiWidth) {\n          distWidth = compSize[i].width - spanWidth - (hSpan - 1) * this.hgap;\n        } else {\n          distWidth = this.logicalWidthInPixel(cons) - spanWidth - (hSpan - 1) * this.hgap;\n        }\n        if (distWidth > 0) {\n          var equalWidth = Math.floor((distWidth + spanWidth) / hSpan);\n          var remainder = (distWidth + spanWidth) % hSpan;\n          var last = -1;\n          for (j = cons.gridx; j < cons.gridx + cons.gridw && j < this.cols; j++) {\n            last = j;\n            if (!fixedWidths[j]) {\n              prefWidths[j] = Math.max(equalWidth, prefWidths[j]);\n            }\n            if (cons.weightx === 0) {\n              fixedWidths[j] = true;\n            }\n          }\n          if (last > -1) {\n            prefWidths[last] += remainder;\n          }\n        }\n      }\n    }\n\n    var lc = LayoutConstants;\n    for (i = 0; i < this.cols; i++) {\n      this.width[i] = [];\n      if (fixedWidths[i]) {\n        this.width[i][lc.MIN] = prefWidths[i];\n        this.width[i][lc.PREF] = prefWidths[i];\n        this.width[i][lc.MAX] = prefWidths[i];\n      } else {\n        this.width[i][lc.MIN] = 0; // must be exactly 0!\n        this.width[i][lc.PREF] = prefWidths[i];\n        this.width[i][lc.MAX] = 10240;\n      }\n    }\n\n    // averaged column weights, normalized so that sum of weights is equal to\n    // 1.0\n    for (i = 0; i < this.cols; i++) {\n      if (fixedWidths[i]) {\n        this.weightX[i] = 0;\n      } else {\n        var weightSum = 0;\n        var weightCount = 0;\n        for (k = 0; k < compCount; k++) {\n          cons = this.gridDatas[k];\n          if (cons.weightx > 0 && cons.gridx <= i && i <= cons.gridx + cons.gridw - 1) {\n            weightSum += (cons.weightx / cons.gridw);\n            weightCount++;\n          }\n        }\n        this.weightX[i] = (weightCount > 0 ? weightSum / weightCount : 0);\n      }\n    }\n    var sumWeightX = 0;\n    for (i = 0; i < this.cols; i++) {\n      sumWeightX += this.weightX[i];\n    }\n    if (sumWeightX >= 1e-6) {\n      var f = 1.0 / sumWeightX;\n      for (i = 0; i < this.cols; i++) {\n        this.weightX[i] = this.weightX[i] * f;\n      }\n    }\n  }\n\n  _initializeRows() {\n    var compSize = this.compSize;\n    var compCount = compSize.length;\n    var prefHeights = arrays.init(this.rows, 0);\n    var fixedHeights = arrays.init(this.rows, false);\n    var i, j, k, prefh, cons;\n    for (i = 0; i < compCount; i++) {\n      cons = this.gridDatas[i];\n      if (cons.gridh === 1) {\n        if (cons.heightHint > 0) {\n          prefh = cons.heightHint;\n        } else if (cons.useUiHeight) {\n          prefh = compSize[i].height;\n        } else {\n          prefh = this.logicalHeightInPixel(cons);\n        }\n        prefh = Math.floor(prefh);\n        for (j = cons.gridy; j < cons.gridy + cons.gridh && j < this.rows; j++) {\n          prefHeights[j] = Math.max(prefHeights[j], prefh);\n          if (cons.weighty === 0) {\n            fixedHeights[j] = true;\n          }\n        }\n      }\n    }\n    for (i = 0; i < compCount; i++) {\n      cons = this.gridDatas[i];\n      if (cons.gridh > 1) {\n        var vSpan = cons.gridh;\n        var spanHeight = 0;\n        var distHeight;\n        // pref\n        for (j = cons.gridy; j < cons.gridy + cons.gridh && j < this.rows; j++) {\n          if (!fixedHeights[j]) {\n            spanHeight += prefHeights[j];\n          }\n        }\n        if (cons.heightHint > 0) {\n          distHeight = cons.heightHint - spanHeight - (vSpan - 1) * this.vgap;\n        } else if (cons.useUiHeight) {\n          distHeight = compSize[i].height - spanHeight - (vSpan - 1) * this.vgap;\n        } else {\n          distHeight = this.logicalHeightInPixel(cons) - spanHeight - (vSpan - 1) * this.vgap;\n        }\n        if (distHeight > 0) {\n          var equalHeight = Math.floor((distHeight + spanHeight) / vSpan);\n          var remainder = (distHeight + spanHeight) % vSpan;\n          var last = -1;\n          for (j = cons.gridy; j < cons.gridy + cons.gridh && j < this.rows; j++) {\n            last = j;\n            if (!fixedHeights[j]) {\n              prefHeights[j] = Math.max(equalHeight, prefHeights[j]);\n            }\n            if (cons.weighty === 0) {\n              fixedHeights[j] = true;\n            }\n          }\n          if (last > -1) {\n            prefHeights[last] += remainder;\n          }\n        }\n      }\n    }\n\n    var lc = LayoutConstants;\n    for (i = 0; i < this.rows; i++) {\n      this.height[i] = [];\n      if (fixedHeights[i]) {\n        this.height[i][lc.MIN] = prefHeights[i];\n        this.height[i][lc.PREF] = prefHeights[i];\n        this.height[i][lc.MAX] = prefHeights[i];\n      } else {\n        this.height[i][lc.MIN] = 0; // must be exactly 0!\n        this.height[i][lc.PREF] = prefHeights[i];\n        this.height[i][lc.MAX] = 10240;\n      }\n    }\n\n    // averaged row weights, normalized so that sum of weights is equal to 1.0\n    for (i = 0; i < this.rows; i++) {\n      if (fixedHeights[i]) {\n        this.weightY[i] = 0;\n      } else {\n        var weightSum = 0;\n        var weightCount = 0;\n        for (k = 0; k < compCount; k++) {\n          cons = this.gridDatas[k];\n          if (cons.weighty > 0 && cons.gridy <= i && i <= cons.gridy + cons.gridh - 1) {\n            weightSum += (cons.weighty / cons.gridh);\n            weightCount++;\n          }\n        }\n        this.weightY[i] = (weightCount > 0 ? weightSum / weightCount : 0);\n      }\n    }\n    var sumWeightY = 0;\n    for (i = 0; i < this.rows; i++) {\n      sumWeightY += this.weightY[i];\n    }\n    if (sumWeightY >= 1e-6) {\n      var f = 1.0 / sumWeightY;\n      for (i = 0; i < this.rows; i++) {\n        this.weightY[i] = this.weightY[i] * f;\n      }\n    }\n  }\n\n  layoutCellBounds(size, insets) {\n    var w = this.layoutSizes(size.width - insets.horizontal() - Math.max(0, (this.cols - 1) * this.hgap), this.width, this.weightX);\n    var h = this.layoutSizes(size.height - insets.vertical() - Math.max(0, (this.rows - 1) * this.vgap), this.height, this.weightY);\n    this.cellBounds = arrays.init(this.rows, null);\n    var y = insets.top,\n      r, x, c;\n    for (r = 0; r < this.rows; r++) {\n      x = insets.left;\n      this.cellBounds[r] = arrays.init(this.cols, null);\n      for (c = 0; c < this.cols; c++) {\n        this.cellBounds[r][c] = new Rectangle(x, y, w[c], h[r]);\n        x += w[c];\n        x += this.hgap;\n      }\n      y += h[r];\n      y += this.vgap;\n    }\n    return this.cellBounds;\n  }\n\n  layoutSizes(targetSize, sizes, weights) {\n    var i;\n    var outSizes = arrays.init(sizes.length, 0);\n    if (targetSize <= 0) {\n      for (i = 0; i < sizes.length; i++) {\n        outSizes[i] = sizes[i][LayoutConstants.MIN];\n      }\n      return outSizes;\n    }\n    var sumSize = 0;\n    var tmpWeight = arrays.init(weights.length, 0.0);\n    var sumWeight = 0;\n    for (i = 0; i < sizes.length; i++) {\n      outSizes[i] = sizes[i][LayoutConstants.PREF];\n      sumSize += outSizes[i];\n      tmpWeight[i] = weights[i];\n      /**\n       * auto correction: if weight is 0 and min / max sizes are NOT equal then\n       * set weight to 1; if weight<eps set it to 0\n       */\n      if (tmpWeight[i] < LayoutConstants.EPS) {\n        if (sizes[i][LayoutConstants.MAX] > sizes[i][LayoutConstants.MIN]) {\n          tmpWeight[i] = 1;\n        } else {\n          tmpWeight[i] = 0;\n        }\n      }\n      sumWeight += tmpWeight[i];\n    }\n    // normalize weights\n    if (sumWeight > 0) {\n      for (i = 0; i < tmpWeight.length; i++) {\n        tmpWeight[i] = tmpWeight[i] / sumWeight;\n      }\n    }\n    var deltaInt = targetSize - sumSize;\n    // expand or shrink\n    if (Math.abs(deltaInt) > 0) {\n      // setup accumulators\n      /* float[] */\n      var accWeight = arrays.init(tmpWeight.length, 0.0);\n      var hasTargets;\n      if (deltaInt > 0) {\n        // expand, if delta is > 0\n        hasTargets = true;\n        while (deltaInt > 0 && hasTargets) {\n          hasTargets = false;\n          for (i = 0; i < outSizes.length && deltaInt > 0; i++) {\n            if (tmpWeight[i] > 0 && outSizes[i] < sizes[i][LayoutConstants.MAX]) {\n              hasTargets = true;\n              accWeight[i] += tmpWeight[i];\n              if (accWeight[i] > 0) {\n                accWeight[i] -= 1;\n                outSizes[i] += 1;\n                deltaInt -= 1;\n              }\n            }\n          }\n        }\n      } else {\n        // shrink, if delta is <= 0\n        hasTargets = true;\n        while (deltaInt < 0 && hasTargets) {\n          hasTargets = false;\n          for (i = 0; i < outSizes.length && deltaInt < 0; i++) {\n            if (tmpWeight[i] > 0 && outSizes[i] > sizes[i][LayoutConstants.MIN]) {\n              hasTargets = true;\n              accWeight[i] += tmpWeight[i];\n              if (accWeight[i] > 0) {\n                accWeight[i] -= 1;\n                outSizes[i] -= 1;\n                deltaInt += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n    return outSizes;\n  }\n\n  logicalWidthInPixel(cons) {\n    var gridW = cons.gridw;\n    return (this.columnWidth * gridW) + (this.hgap * Math.max(0, gridW - 1));\n  }\n\n  logicalHeightInPixel(cons) {\n    var gridH = cons.gridh,\n      addition = cons.logicalRowHeightAddition || 0;\n    return (this.rowHeight * gridH) + (this.vgap * Math.max(0, gridH - 1)) + addition;\n  }\n\n  uiSizeInPixel($comp, cons, options) {\n    var htmlComp = HtmlComponent.get($comp);\n    return htmlComp.prefSize(options).add(htmlComp.margins());\n  }\n\n  /**\n   * @returns {number|null} the width hint for the given gridData\n   */\n  widthHintForGridData(gridData) {\n    if (this.widthHints.length === 0) {\n      return null;\n    }\n    var widthHint = (gridData.gridw - 1) * this.hgap;\n    for (var i = gridData.gridx; i < gridData.gridx + gridData.gridw; i++) {\n      widthHint += this.widthHints[i];\n    }\n    return widthHint;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}