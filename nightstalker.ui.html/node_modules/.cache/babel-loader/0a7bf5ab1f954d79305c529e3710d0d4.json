{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, clipboard, Device, dragAndDrop, Event, fields, FormFieldLayout, GridData, GroupBox, HtmlComponent, KeyStrokeContext, LoadingSupport, objects, scout, Status, strings, styles, tooltips, Widget } from '../../index';\nimport $ from 'jquery';\n/**\n * Abstract class for all form-fields.\n * @abstract\n */\n\nvar FormField = /*#__PURE__*/function (_Widget) {\n  _inherits(FormField, _Widget);\n\n  var _super = _createSuper(FormField);\n\n  function FormField() {\n    var _this;\n\n    _classCallCheck(this, FormField);\n\n    _this = _super.call(this);\n    _this.dropType = 0;\n    _this.dropMaximumSize = dragAndDrop.DEFAULT_DROP_MAXIMUM_SIZE;\n    _this.empty = true;\n    _this.errorStatus = null;\n    _this.fieldStyle = FormField.DEFAULT_FIELD_STYLE;\n    _this.gridData = null;\n    _this.gridDataHints = new GridData();\n    _this.mode = FormField.Mode.DEFAULT;\n    _this.keyStrokes = [];\n    _this.label = null;\n    _this.labelVisible = true;\n    _this.labelPosition = FormField.LabelPosition.DEFAULT;\n    _this.labelWidthInPixel = 0;\n    _this.labelHtmlEnabled = false;\n    _this.mandatory = false;\n    _this.statusMenuMappings = [];\n    _this.menus = [];\n    _this.menusVisible = true;\n    _this.preventInitialFocus = false;\n    _this.requiresSave = false;\n    _this.statusPosition = FormField.StatusPosition.DEFAULT;\n    _this.statusVisible = true;\n    _this.suppressStatus = false;\n    _this.touched = false;\n    _this.tooltipText = null;\n    _this.tooltipAnchor = FormField.TooltipAnchor.DEFAULT;\n    _this.onFieldTooltipOptionsCreator = null;\n    _this.$label = null;\n    /**\n     * Note the difference between $field and $fieldContainer:\n     * - $field points to the input-field (typically a browser-text field)\n     * - $fieldContainer could point to the same input-field or when the field is a composite,\n     *   to the parent DIV of that composite. For instance: the multi-line-smartfield is a\n     *   composite with a input-field and a DIV showing the additional lines. In that case $field\n     *   points to the input-field and $fieldContainer to the parent DIV of the input-field.\n     *   This property should be used primarily for layout-functionality.\n     */\n\n    _this.$field = null;\n    _this.$fieldContainer = null;\n    _this.$icon = null;\n    /**\n     * The status is used for error-status, tooltip-icon and menus.\n     */\n\n    _this.$status = null;\n    /**\n     * Some browsers don't support copying text from disabled input fields. If such a browser is detected\n     * and this flag is true (default is false), an overlay DIV is rendered over disabled fields which\n     * provides a custom copy context menu that opens the ClipboardForm.\n     */\n\n    _this.disabledCopyOverlay = false;\n    _this.$disabledCopyOverlay = null;\n\n    _this._addWidgetProperties(['keyStrokes', 'menus', 'statusMenuMappings']);\n\n    _this._addCloneProperties(['dropType', 'dropMaximumSize', 'errorStatus', 'fieldStyle', 'gridDataHints', 'gridData', 'label', 'labelVisible', 'labelPosition', 'labelWidthInPixel', 'mandatory', 'mode', 'preventInitialFocus', 'requiresSave', 'touched', 'statusVisible', 'statusPosition', 'statusMenuMappings', 'tooltipText', 'tooltipAnchor']);\n\n    _this._menuPropertyChangeHandler = _this._onMenuPropertyChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(FormField, [{\n    key: \"_createKeyStrokeContext\",\n\n    /**\n     * @override\n     * @returns {KeyStrokeContext}\n     */\n    value: function _createKeyStrokeContext() {\n      return new KeyStrokeContext();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_createLoadingSupport\",\n    value: function _createLoadingSupport() {\n      return new LoadingSupport({\n        widget: this\n      });\n    }\n  }, {\n    key: \"_init\",\n    value: function _init(model) {\n      _get(_getPrototypeOf(FormField.prototype), \"_init\", this).call(this, model);\n\n      this.resolveConsts([{\n        property: 'labelPosition',\n        constType: FormField.LabelPosition\n      }]);\n      this.resolveTextKeys(['label', 'tooltipText']);\n\n      this._setKeyStrokes(this.keyStrokes);\n\n      this._setMenus(this.menus);\n\n      this._setErrorStatus(this.errorStatus);\n\n      this._setGridDataHints(this.gridDataHints);\n\n      this._setGridData(this.gridData);\n\n      this._updateEmpty();\n    }\n  }, {\n    key: \"_initProperty\",\n    value: function _initProperty(propertyName, value) {\n      if ('gridDataHints' === propertyName) {\n        this._initGridDataHints(value);\n      } else {\n        _get(_getPrototypeOf(FormField.prototype), \"_initProperty\", this).call(this, propertyName, value);\n      }\n    }\n    /**\n     * This function <strong>extends</strong> the default grid data hints of the form field.\n     * The default values for grid data hints are set in the constructor of the FormField and its subclasses.\n     * When the given gridDataHints is a plain object, we extend our default values. When gridDataHints is\n     * already instanceof GridData we overwrite default values completely.\n     * @param gridDataHints\n     * @private\n     */\n\n  }, {\n    key: \"_initGridDataHints\",\n    value: function _initGridDataHints(gridDataHints) {\n      if (gridDataHints instanceof GridData) {\n        this.gridDataHints = gridDataHints;\n      } else if (objects.isPlainObject(gridDataHints)) {\n        $.extend(this.gridDataHints, gridDataHints);\n      } else {\n        this.gridDataHints = gridDataHints;\n      }\n    }\n    /**\n     * All sub-classes of FormField must implement a _render method. The default implementation\n     * will throw an Error when _render is called. The _render method should call the various add*\n     * methods provided by the FormField class. A possible _render implementation could look like this.\n     *\n     * <pre>\n     * this.addContainer(this.$parent, 'form-field');\n     * this.addLabel();\n     * this.addField(this.$parent.makeDiv('foo', 'bar'));\n     * this.addMandatoryIndicator();\n     * this.addStatus();\n     * </pre>\n     */\n\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      throw new Error('sub-classes of FormField must implement a _render method');\n    }\n  }, {\n    key: \"_renderProperties\",\n    value: function _renderProperties() {\n      _get(_getPrototypeOf(FormField.prototype), \"_renderProperties\", this).call(this);\n\n      this._renderMandatory();\n\n      this._renderTooltipText();\n\n      this._renderErrorStatus();\n\n      this._renderMenus();\n\n      this._renderLabel();\n\n      this._renderLabelVisible();\n\n      this._renderStatusVisible();\n\n      this._renderStatusPosition();\n\n      this._renderFont();\n\n      this._renderForegroundColor();\n\n      this._renderBackgroundColor();\n\n      this._renderLabelFont();\n\n      this._renderLabelForegroundColor();\n\n      this._renderLabelBackgroundColor();\n\n      this._renderGridData();\n\n      this._renderPreventInitialFocus();\n\n      this._renderFieldStyle();\n    }\n  }, {\n    key: \"_remove\",\n    value: function _remove() {\n      _get(_getPrototypeOf(FormField.prototype), \"_remove\", this).call(this);\n\n      this._removeField();\n\n      this._removeStatus();\n\n      this._removeLabel();\n\n      this._removeIcon();\n\n      this.removeMandatoryIndicator();\n\n      this._removeDisabledCopyOverlay();\n\n      this._uninstallDragAndDropHandler();\n    }\n  }, {\n    key: \"setFieldStyle\",\n    value: function setFieldStyle(fieldStyle) {\n      this.setProperty('fieldStyle', fieldStyle);\n    }\n  }, {\n    key: \"_renderFieldStyle\",\n    value: function _renderFieldStyle() {\n      this._renderFieldStyleInternal(this.$container);\n\n      this._renderFieldStyleInternal(this.$fieldContainer);\n\n      this._renderFieldStyleInternal(this.$field);\n\n      if (this.rendered) {\n        // See _renderLabelPosition why it is necessary to invalidate parent as well.\n        var htmlCompParent = this.htmlComp.getParent();\n\n        if (htmlCompParent) {\n          htmlCompParent.invalidateLayoutTree();\n        }\n\n        this.invalidateLayoutTree();\n      }\n    }\n  }, {\n    key: \"_renderFieldStyleInternal\",\n    value: function _renderFieldStyleInternal($element) {\n      if (!$element) {\n        return;\n      }\n\n      $element.toggleClass('alternative', this.fieldStyle === FormField.FieldStyle.ALTERNATIVE);\n    }\n  }, {\n    key: \"setMandatory\",\n    value: function setMandatory(mandatory) {\n      this.setProperty('mandatory', mandatory);\n    }\n  }, {\n    key: \"_renderMandatory\",\n    value: function _renderMandatory() {\n      this.$container.toggleClass('mandatory', this.mandatory);\n    }\n    /**\n     * Override this function to return another error status property.\n     * The default implementation returns the property 'errorStatus'.\n     *\n     * @return {Status}\n     */\n\n  }, {\n    key: \"_errorStatus\",\n    value: function _errorStatus() {\n      return this.errorStatus;\n    }\n  }, {\n    key: \"setErrorStatus\",\n    value: function setErrorStatus(errorStatus) {\n      this.setProperty('errorStatus', errorStatus);\n    }\n  }, {\n    key: \"_setErrorStatus\",\n    value: function _setErrorStatus(errorStatus) {\n      errorStatus = Status.ensure(errorStatus);\n\n      this._setProperty('errorStatus', errorStatus);\n    }\n  }, {\n    key: \"clearErrorStatus\",\n    value: function clearErrorStatus() {\n      this.setErrorStatus(null);\n    }\n  }, {\n    key: \"_renderErrorStatus\",\n    value: function _renderErrorStatus() {\n      var status = this._errorStatus(),\n          hasStatus = !!status,\n          statusClass = hasStatus ? 'has-' + status.cssClass() : '';\n\n      this._updateErrorStatusClasses(statusClass, hasStatus);\n\n      this._updateFieldStatus();\n    }\n  }, {\n    key: \"_updateErrorStatusClasses\",\n    value: function _updateErrorStatusClasses(statusClass, hasStatus) {\n      this.$container.removeClass(FormField.SEVERITY_CSS_CLASSES);\n      this.$container.addClass(statusClass, hasStatus);\n\n      if (this.$field) {\n        this.$field.removeClass(FormField.SEVERITY_CSS_CLASSES);\n        this.$field.addClass(statusClass, hasStatus);\n      }\n    }\n  }, {\n    key: \"setTooltipText\",\n    value: function setTooltipText(tooltipText) {\n      this.setProperty('tooltipText', tooltipText);\n    }\n  }, {\n    key: \"_renderTooltipText\",\n    value: function _renderTooltipText() {\n      this._updateTooltip();\n    }\n  }, {\n    key: \"setTooltipAnchor\",\n    value: function setTooltipAnchor(tooltipAnchor) {\n      this.setProperty('tooltipAnchor', tooltipAnchor);\n    }\n  }, {\n    key: \"_renderTooltipAnchor\",\n    value: function _renderTooltipAnchor() {\n      this._updateTooltip();\n    }\n  }, {\n    key: \"_updateTooltip\",\n    value: function _updateTooltip() {\n      var hasTooltipText = this.hasStatusTooltip();\n      this.$container.toggleClass('has-tooltip', hasTooltipText);\n\n      if (this.$field) {\n        this.$field.toggleClass('has-tooltip', hasTooltipText);\n      }\n\n      this._updateFieldStatus();\n\n      if (this.$fieldContainer) {\n        if (this.hasOnFieldTooltip()) {\n          var creatorFunc = this.onFieldTooltipOptionsCreator || this._createOnFieldTooltipOptions;\n          tooltips.install(this.$fieldContainer, creatorFunc.call(this));\n        } else {\n          tooltips.uninstall(this.$fieldContainer);\n        }\n      }\n    }\n  }, {\n    key: \"hasStatusTooltip\",\n    value: function hasStatusTooltip() {\n      return this.tooltipAnchor === FormField.TooltipAnchor.DEFAULT && strings.hasText(this.tooltipText);\n    }\n  }, {\n    key: \"hasOnFieldTooltip\",\n    value: function hasOnFieldTooltip() {\n      return this.tooltipAnchor === FormField.TooltipAnchor.ON_FIELD && strings.hasText(this.tooltipText);\n    }\n  }, {\n    key: \"setOnFieldTooltipOptionsCreator\",\n    value: function setOnFieldTooltipOptionsCreator(onFieldTooltipOptionsCreator) {\n      this.onFieldTooltipOptionsCreator = onFieldTooltipOptionsCreator;\n    }\n  }, {\n    key: \"_createOnFieldTooltipOptions\",\n    value: function _createOnFieldTooltipOptions() {\n      return {\n        parent: this,\n        text: this.tooltipText,\n        arrowPosition: 50\n      };\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_renderVisible\",\n    value: function _renderVisible() {\n      _get(_getPrototypeOf(FormField.prototype), \"_renderVisible\", this).call(this);\n\n      if (this.rendered) {\n        // Make sure error status is hidden / shown when visibility changes\n        this._renderErrorStatus();\n      }\n    }\n  }, {\n    key: \"setLabel\",\n    value: function setLabel(label) {\n      this.setProperty('label', label);\n    }\n  }, {\n    key: \"_renderLabel\",\n    value: function _renderLabel() {\n      var label = this.label;\n\n      if (this.labelPosition === FormField.LabelPosition.ON_FIELD) {\n        this._renderPlaceholder();\n\n        if (this.$label) {\n          this.$label.text('');\n        }\n      } else if (this.$label) {\n        this._removePlaceholder(); // Make sure an empty label has the same height as the other labels, especially important for top labels\n\n\n        this.$label.contentOrNbsp(this.labelHtmlEnabled, label, 'empty').toggleClass('top', this.labelPosition === FormField.LabelPosition.TOP); // Invalidate layout if label width depends on its content\n\n        if (this.labelUseUiWidth || this.labelWidthInPixel === FormField.LabelWidth.UI) {\n          this.invalidateLayoutTree();\n        }\n      }\n    }\n    /**\n     * Renders an empty label for button-like fields that don't have a regular label but which do want to support the 'labelVisible'\n     * property in order to provide some layout-flexibility. Makes sure the empty label has the same height as the other labels,\n     * which is especially important for top labels.\n     */\n\n  }, {\n    key: \"_renderEmptyLabel\",\n    value: function _renderEmptyLabel() {\n      this.$label.html('&nbsp;').toggleClass('top', this.labelPosition === FormField.LabelPosition.TOP);\n    }\n  }, {\n    key: \"_renderPlaceholder\",\n    value: function _renderPlaceholder($field) {\n      $field = scout.nvl($field, this.$field);\n\n      if ($field) {\n        $field.placeholder(this.label);\n      }\n    }\n    /**\n     * @param $field (optional) argument is required by DateField.js, when not set this.$field is used\n     */\n\n  }, {\n    key: \"_removePlaceholder\",\n    value: function _removePlaceholder($field) {\n      $field = scout.nvl($field, this.$field);\n\n      if ($field) {\n        $field.placeholder('');\n      }\n    }\n  }, {\n    key: \"setLabelVisible\",\n    value: function setLabelVisible(visible) {\n      this.setProperty('labelVisible', visible);\n    }\n  }, {\n    key: \"_renderLabelVisible\",\n    value: function _renderLabelVisible() {\n      var visible = this.labelVisible;\n\n      this._renderChildVisible(this.$label, visible);\n\n      this.$container.toggleClass('label-hidden', !visible);\n\n      if (this.rendered && this.labelPosition === FormField.LabelPosition.TOP) {\n        // See _renderLabelPosition why it is necessary to invalidate parent as well.\n        var htmlCompParent = this.htmlComp.getParent();\n\n        if (htmlCompParent) {\n          htmlCompParent.invalidateLayoutTree();\n        }\n      }\n    }\n  }, {\n    key: \"setLabelWidthInPixel\",\n    value: function setLabelWidthInPixel(labelWidthInPixel) {\n      this.setProperty('labelWidthInPixel', labelWidthInPixel);\n    }\n  }, {\n    key: \"_renderLabelWidthInPixel\",\n    value: function _renderLabelWidthInPixel() {\n      this.invalidateLayoutTree();\n    }\n  }, {\n    key: \"setStatusVisible\",\n    value: function setStatusVisible(visible) {\n      this.setProperty('statusVisible', visible);\n    }\n  }, {\n    key: \"_renderStatusVisible\",\n    value: function _renderStatusVisible() {\n      this._updateFieldStatus();\n    }\n  }, {\n    key: \"setStatusPosition\",\n    value: function setStatusPosition(statusPosition) {\n      this.setProperty('statusPosition', statusPosition);\n    }\n  }, {\n    key: \"_renderStatusPosition\",\n    value: function _renderStatusPosition(statusPosition) {\n      this._updateFieldStatus();\n    }\n  }, {\n    key: \"_tooltip\",\n    value: function _tooltip() {\n      if (this.fieldStatus) {\n        return this.fieldStatus.tooltip;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_updateFieldStatus\",\n    value: function _updateFieldStatus() {\n      if (!this.fieldStatus) {\n        return;\n      } // compute status\n\n\n      var menus,\n          errorStatus = this._errorStatus(),\n          status = null,\n          statusVisible = this._computeStatusVisible(),\n          autoRemove = true;\n\n      this.fieldStatus.setPosition(this.statusPosition);\n      this.fieldStatus.setVisible(statusVisible);\n\n      if (!statusVisible) {\n        return;\n      }\n\n      if (errorStatus) {\n        // If the field is used as a cell editor in a editable table, then no validation errors should be shown.\n        // (parsing and validation will be handled by the cell/column itself)\n        if (this.mode === FormField.Mode.CELLEDITOR) {\n          return;\n        }\n\n        status = errorStatus;\n        autoRemove = !status.isError();\n        menus = this._getMenusForStatus(errorStatus);\n      } else if (this.hasStatusTooltip()) {\n        status = scout.create('Status', {\n          message: this.tooltipText,\n          severity: Status.Severity.OK\n        }); // If there are menus, show them in the tooltip. But only if there is a tooltipText, don't do it if there is an error status.\n        // Menus make most likely no sense if an error status is displayed\n\n        menus = this._getCurrentMenus();\n      } else {\n        // If there are menus, show them in the tooltip. But only if there is a tooltipText, don't do it if there is an error status.\n        // Menus make most likely no sense if an error status is displayed\n        menus = this._getCurrentMenus();\n      }\n\n      this.fieldStatus.update(status, menus, autoRemove, this._isInitialShowStatus());\n    }\n  }, {\n    key: \"_isInitialShowStatus\",\n    value: function _isInitialShowStatus() {\n      return !!this._errorStatus();\n    }\n    /**\n     * Computes whether the $status should be visible based on statusVisible, errorStatus and tooltip.\n     * -> errorStatus and tooltip override statusVisible, so $status may be visible event though statusVisible is set to false\n     */\n\n  }, {\n    key: \"_computeStatusVisible\",\n    value: function _computeStatusVisible() {\n      var status = this._errorStatus(),\n          statusVisible = this.statusVisible,\n          hasStatus = !!status,\n          hasTooltip = this.hasStatusTooltip();\n\n      return !this.suppressStatus && this.visible && (statusVisible || hasStatus || hasTooltip || this._hasMenus() && this.menusVisible);\n    }\n  }, {\n    key: \"_renderChildVisible\",\n    value: function _renderChildVisible($child, visible) {\n      if (!$child) {\n        return;\n      }\n\n      if ($child.isVisible() !== visible) {\n        $child.setVisible(visible);\n        this.invalidateLayoutTree();\n        return true;\n      }\n    }\n  }, {\n    key: \"setLabelPosition\",\n    value: function setLabelPosition(labelPosition) {\n      this.setProperty('labelPosition', labelPosition);\n    } // Don't include in renderProperties, it is not necessary to execute it initially because the positioning is done by _renderLabel\n\n  }, {\n    key: \"_renderLabelPosition\",\n    value: function _renderLabelPosition(position) {\n      this._renderLabel();\n\n      if (this.rendered) {\n        // Necessary to invalidate parent as well if parent uses the logical grid.\n        // LogicalGridData uses another row height depending of the label position\n        var htmlCompParent = this.htmlComp.getParent();\n\n        if (htmlCompParent) {\n          htmlCompParent.invalidateLayoutTree();\n        }\n\n        this.invalidateLayoutTree();\n      }\n    }\n  }, {\n    key: \"setLabelHtmlEnabled\",\n    value: function setLabelHtmlEnabled(labelHtmlEnabled) {\n      this.setProperty('labelHtmlEnabled', labelHtmlEnabled);\n    }\n  }, {\n    key: \"_renderLabelHtmlEnabled\",\n    value: function _renderLabelHtmlEnabled() {\n      // Render the label again when html enabled changes dynamically\n      this._renderLabel();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_renderEnabled\",\n    value: function _renderEnabled() {\n      _get(_getPrototypeOf(FormField.prototype), \"_renderEnabled\", this).call(this);\n\n      if (this.$field) {\n        this.$field.setEnabled(this.enabledComputed);\n      }\n\n      this._updateDisabledCopyOverlay();\n\n      this._updateDropType();\n    }\n    /**\n     * @override Wigdet.js\n     */\n\n  }, {\n    key: \"_renderDisabledStyle\",\n    value: function _renderDisabledStyle() {\n      this._renderDisabledStyleInternal(this.$container);\n\n      this._renderDisabledStyleInternal(this.$fieldContainer);\n\n      this._renderDisabledStyleInternal(this.$field);\n\n      this._renderDisabledStyleInternal(this.$mandatory);\n    }\n  }, {\n    key: \"setFont\",\n    value: function setFont(font) {\n      this.setProperty('font', font);\n    }\n  }, {\n    key: \"_renderFont\",\n    value: function _renderFont() {\n      styles.legacyFont(this, this.$field);\n    }\n  }, {\n    key: \"setForegroundColor\",\n    value: function setForegroundColor(foregroundColor) {\n      this.setProperty('foregroundColor', foregroundColor);\n    }\n  }, {\n    key: \"_renderForegroundColor\",\n    value: function _renderForegroundColor() {\n      styles.legacyForegroundColor(this, this.$field);\n    }\n  }, {\n    key: \"setBackgroundColor\",\n    value: function setBackgroundColor(backgroundColor) {\n      this.setProperty('backgroundColor', backgroundColor);\n    }\n  }, {\n    key: \"_renderBackgroundColor\",\n    value: function _renderBackgroundColor() {\n      styles.legacyBackgroundColor(this, this.$field);\n    }\n  }, {\n    key: \"setLabelFont\",\n    value: function setLabelFont(labelFont) {\n      this.setProperty('labelFont', labelFont);\n    }\n  }, {\n    key: \"_renderLabelFont\",\n    value: function _renderLabelFont() {\n      styles.legacyFont(this, this.$label, 'label');\n    }\n  }, {\n    key: \"setLabelForegroundColor\",\n    value: function setLabelForegroundColor(labelForegroundColor) {\n      this.setProperty('labelForegroundColor', labelForegroundColor);\n    }\n  }, {\n    key: \"_renderLabelForegroundColor\",\n    value: function _renderLabelForegroundColor() {\n      styles.legacyForegroundColor(this, this.$label, 'label');\n    }\n  }, {\n    key: \"setLabelBackgroundColor\",\n    value: function setLabelBackgroundColor(labelBackgroundColor) {\n      this.setProperty('labelBackgroundColor', labelBackgroundColor);\n    }\n  }, {\n    key: \"_renderLabelBackgroundColor\",\n    value: function _renderLabelBackgroundColor() {\n      styles.legacyBackgroundColor(this, this.$label, 'label');\n    }\n  }, {\n    key: \"setGridDataHints\",\n    value: function setGridDataHints(gridData) {\n      this.setProperty('gridDataHints', gridData);\n    }\n  }, {\n    key: \"_setGridDataHints\",\n    value: function _setGridDataHints(gridData) {\n      if (!gridData) {\n        gridData = new GridData();\n      }\n\n      this._setProperty('gridDataHints', GridData.ensure(gridData));\n    }\n  }, {\n    key: \"_renderGridDataHints\",\n    value: function _renderGridDataHints() {\n      this.parent.invalidateLogicalGrid();\n    }\n  }, {\n    key: \"_setGridData\",\n    value: function _setGridData(gridData) {\n      if (!gridData) {\n        gridData = new GridData();\n      }\n\n      this._setProperty('gridData', GridData.ensure(gridData));\n    }\n  }, {\n    key: \"_renderGridData\",\n    value: function _renderGridData() {\n      if (this.rendered) {\n        var htmlCompParent = this.htmlComp.getParent();\n\n        if (htmlCompParent) {\n          // may be null if $container is detached\n          htmlCompParent.invalidateLayoutTree();\n        }\n      }\n    }\n  }, {\n    key: \"setMenus\",\n    value: function setMenus(menus) {\n      this.setProperty('menus', menus);\n    }\n  }, {\n    key: \"_setMenus\",\n    value: function _setMenus(menus) {\n      menus = arrays.ensure(menus);\n      this.menus.forEach(function (menu) {\n        menu.off('propertyChange', this._menuPropertyChangeHandler);\n      }, this);\n      this.updateKeyStrokes(menus, this.menus);\n\n      this._setProperty('menus', menus);\n\n      this.menus.forEach(function (menu) {\n        menu.on('propertyChange', this._menuPropertyChangeHandler);\n      }, this);\n    }\n  }, {\n    key: \"insertMenu\",\n    value: function insertMenu(menuToInsert) {\n      this.insertMenus([menuToInsert]);\n    }\n  }, {\n    key: \"insertMenus\",\n    value: function insertMenus(menusToInsert) {\n      menusToInsert = arrays.ensure(menusToInsert);\n\n      if (menusToInsert.length === 0) {\n        return;\n      }\n\n      this.setMenus(this.menus.concat(menusToInsert));\n    }\n  }, {\n    key: \"deleteMenu\",\n    value: function deleteMenu(menuToDelete) {\n      this.deleteMenus([menuToDelete]);\n    }\n  }, {\n    key: \"deleteMenus\",\n    value: function deleteMenus(menusToDelete) {\n      menusToDelete = arrays.ensure(menusToDelete);\n\n      if (menusToDelete.length === 0) {\n        return;\n      }\n\n      var menus = this.menus.slice();\n      arrays.removeAll(menus, menusToDelete);\n      this.setMenus(menus);\n    }\n  }, {\n    key: \"_onMenuPropertyChange\",\n    value: function _onMenuPropertyChange(event) {\n      if (event.propertyName === 'visible' && this.rendered) {\n        this._updateMenus();\n      }\n    }\n  }, {\n    key: \"_getCurrentMenus\",\n    value: function _getCurrentMenus() {\n      return this.menus.filter(function (menu) {\n        return menu.visible;\n      });\n    }\n  }, {\n    key: \"_getMenusForStatus\",\n    value: function _getMenusForStatus(status) {\n      return this.statusMenuMappings.filter(function (mapping) {\n        if (!mapping.menu || !mapping.menu.visible) {\n          return false;\n        } // Show the menus which are mapped to the status code and severity (if set)\n\n\n        return (mapping.codes.length === 0 || mapping.codes.indexOf(status.code) > -1) && (mapping.severities.length === 0 || mapping.severities.indexOf(status.severity) > -1);\n      }).map(function (mapping) {\n        return mapping.menu;\n      });\n    }\n  }, {\n    key: \"_hasMenus\",\n    value: function _hasMenus() {\n      return !!(this.menus && this._getCurrentMenus().length > 0);\n    }\n  }, {\n    key: \"_updateMenus\",\n    value: function _updateMenus() {\n      this.$container.toggleClass('has-menus', this._hasMenus() && this.menusVisible);\n\n      this._updateFieldStatus();\n    }\n  }, {\n    key: \"_renderMenus\",\n    value: function _renderMenus() {\n      this._updateMenus();\n    }\n  }, {\n    key: \"_renderStatusMenuMappings\",\n    value: function _renderStatusMenuMappings() {\n      this._updateMenus();\n    }\n  }, {\n    key: \"setMenusVisible\",\n    value: function setMenusVisible(menusVisible) {\n      this.setProperty('menusVisible', menusVisible);\n    }\n    /**\n     * override by TabItem\n     **/\n\n  }, {\n    key: \"_setMenusVisible\",\n    value: function _setMenusVisible(menusVisible) {\n      this._setProperty('menusVisible', menusVisible);\n    }\n  }, {\n    key: \"_renderMenusVisible\",\n    value: function _renderMenusVisible() {\n      this._updateMenus();\n    }\n  }, {\n    key: \"_setKeyStrokes\",\n    value: function _setKeyStrokes(keyStrokes) {\n      this.updateKeyStrokes(keyStrokes, this.keyStrokes);\n\n      this._setProperty('keyStrokes', keyStrokes);\n    }\n    /**\n     * May be overridden to explicitly provide a tooltip $parent\n     */\n\n  }, {\n    key: \"_$tooltipParent\",\n    value: function _$tooltipParent() {\n      // Will be determined by the tooltip itself\n      return undefined;\n    }\n  }, {\n    key: \"_hideStatusMessage\",\n    value: function _hideStatusMessage() {\n      if (this.fieldStatus) {\n        this.fieldStatus.hideTooltip();\n      }\n    }\n  }, {\n    key: \"_showContextMenu\",\n    value: function _showContextMenu() {\n      var menus = this._getCurrentMenus();\n\n      if (menus.length === 0) {\n        // at least one menu item must be visible\n        return;\n      } // Make sure tooltip is closed first\n\n\n      this._hideStatusMessage();\n\n      this.contextPopup = scout.create('ContextMenuPopup', {\n        parent: this,\n        $anchor: this.$status,\n        menuItems: menus,\n        cloneMenuItems: false,\n        closeOnAnchorMouseDown: false\n      });\n      this.contextPopup.open();\n    }\n  }, {\n    key: \"_hideContextMenu\",\n    value: function _hideContextMenu() {\n      if (this.contextPopup) {\n        this.contextPopup.close();\n        this.contextPopup = null;\n      }\n    }\n  }, {\n    key: \"_renderPreventInitialFocus\",\n    value: function _renderPreventInitialFocus() {\n      this.$container.toggleClass('prevent-initial-focus', !!this.preventInitialFocus);\n    }\n    /**\n     * Sets the focus on this field. If the field is not rendered, the focus will be set as soon as it is rendered.\n     *\n     * @override\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!this.rendered) {\n        this.session.layoutValidator.schedulePostValidateFunction(this.focus.bind(this));\n        return false;\n      }\n\n      if (!this.enabledComputed) {\n        return false;\n      }\n\n      var focusableElement = this.getFocusableElement();\n\n      if (focusableElement) {\n        return this.session.focusManager.requestFocus(focusableElement);\n      }\n\n      return false;\n    }\n    /**\n     * This method returns the HtmlElement to be used as initial focus element or when {@link #focus()} is called.\n     * It can be overridden, in case the FormField needs to return something other than this.$field[0].\n     *\n     * @override\n     */\n\n  }, {\n    key: \"getFocusableElement\",\n    value: function getFocusableElement() {\n      if (this.rendered && this.$field) {\n        return this.$field[0];\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_onFieldFocus\",\n    value: function _onFieldFocus(event) {\n      this.setFocused(true);\n    }\n  }, {\n    key: \"_onFieldBlur\",\n    value: function _onFieldBlur() {\n      this.setFocused(false);\n    }\n    /**\n     * When calling this function, the same should happen as when clicking into the field. It is used when the label is clicked.<br>\n     * The most basic action is focusing the field but this may differ from field to field.\n     */\n\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      if (!this.enabledComputed || !this.rendered) {\n        return;\n      } // Explicitly don't use this.focus() because this.focus uses the focus manager which may be disabled (e.g. on mobile devices)\n\n\n      var focusableElement = this.getFocusableElement();\n\n      if (focusableElement) {\n        $.ensure(focusableElement).focus();\n      }\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"get$Scrollable\",\n    value: function get$Scrollable() {\n      return this.$field;\n    }\n  }, {\n    key: \"getParentGroupBox\",\n    value: function getParentGroupBox() {\n      var parent = this.parent;\n\n      while (parent && !(parent instanceof GroupBox)) {\n        parent = parent.parent;\n      }\n\n      return parent;\n    }\n  }, {\n    key: \"getParentField\",\n    value: function getParentField() {\n      return this.parent;\n    }\n    /**\n     * Appends a LABEL element to this.$container and sets the this.$label property.\n     */\n\n  }, {\n    key: \"addLabel\",\n    value: function addLabel() {\n      this.$label = this.$container.appendElement('<label>');\n      tooltips.installForEllipsis(this.$label, {\n        parent: this\n      }); // Setting the focus programmatically does not work in a mousedown listener on mobile devices,\n      // that is why a click listener is used instead\n\n      this.$label.on('click', this._onLabelClick.bind(this));\n    }\n  }, {\n    key: \"_onLabelClick\",\n    value: function _onLabelClick(event) {\n      if (!strings.hasText(this.label)) {\n        // Clicking on \"invisible\" labels should not have any effect since it is confusing\n        return;\n      }\n\n      this.activate();\n    }\n  }, {\n    key: \"_removeLabel\",\n    value: function _removeLabel() {\n      if (!this.$label) {\n        return;\n      }\n\n      tooltips.uninstall(this.$label);\n      this.$label.remove();\n      this.$label = null;\n    }\n    /**\n     * Links the given element with the label by setting aria-labelledby.<br>\n     * This allows screen readers to build a catalog of the elements on the screen and their relationships, for example, to read the label when the input is focused.\n     */\n\n  }, {\n    key: \"_linkWithLabel\",\n    value: function _linkWithLabel($element) {\n      if (!this.$label || !$element) {\n        return;\n      }\n\n      fields.linkElementWithLabel($element, this.$label);\n    }\n  }, {\n    key: \"_removeIcon\",\n    value: function _removeIcon() {\n      if (!this.$icon) {\n        return;\n      }\n\n      this.$icon.remove();\n      this.$icon = null;\n    }\n    /**\n     * Appends the given field to the this.$container and sets the property this.$field.\n     * The $field is used as $fieldContainer as long as you don't explicitly call addFieldContainer before calling addField.\n     */\n\n  }, {\n    key: \"addField\",\n    value: function addField($field) {\n      if (!this.$fieldContainer) {\n        this.addFieldContainer($field);\n      }\n\n      this.$field = $field;\n\n      this._linkWithLabel($field);\n\n      this.$field.on('blur', this._onFieldBlur.bind(this)).on('focus', this._onFieldFocus.bind(this));\n    }\n    /**\n     * Call this method before addField if you'd like to have a different field container than $field.\n     */\n\n  }, {\n    key: \"addFieldContainer\",\n    value: function addFieldContainer($fieldContainer) {\n      this.$fieldContainer = $fieldContainer.addClass('field'); // Only append if not already appended or it is not the last element so that append would move it to the end\n      // This can be important for some widgets, e.g. iframe which would cancel and restart the request on every dom insertion\n\n      if (this.$container.has($fieldContainer).length === 0 || $fieldContainer.next().length > 0) {\n        $fieldContainer.appendTo(this.$container);\n      }\n    }\n    /**\n     * Removes this.$field and this.$fieldContainer and sets the properties to null.\n     */\n\n  }, {\n    key: \"_removeField\",\n    value: function _removeField() {\n      if (this.$field) {\n        this.$field.remove();\n        this.$field = null;\n      }\n\n      if (this.$fieldContainer) {\n        this.$fieldContainer.remove();\n        this.$fieldContainer = null;\n      }\n    }\n    /**\n     * Appends a SPAN element for form-field status to this.$container and sets the this.$status property.\n     */\n\n  }, {\n    key: \"addStatus\",\n    value: function addStatus() {\n      if (this.fieldStatus) {\n        return;\n      }\n\n      this.fieldStatus = scout.create('FieldStatus', {\n        parent: this,\n        position: this.statusPosition,\n        // This will be done by _updateFieldStatus again, but doing it here prevents unnecessary layout invalidations later on\n        visible: this._computeStatusVisible()\n      });\n      this.fieldStatus.render();\n      this.$status = this.fieldStatus.$container;\n\n      this._updateFieldStatus();\n    }\n  }, {\n    key: \"_removeStatus\",\n    value: function _removeStatus() {\n      if (!this.fieldStatus) {\n        return;\n      }\n\n      this.fieldStatus.remove();\n      this.$status = null;\n      this.fieldStatus = null;\n    }\n    /**\n     * Appends a SPAN element to this.$container and sets the this.$pseudoStatus property.\n     * The purpose of a pseudo status is to consume the space an ordinary status would.\n     * This makes it possible to make components without a status as width as components with a status.\n     */\n\n  }, {\n    key: \"addPseudoStatus\",\n    value: function addPseudoStatus() {\n      this.$pseudoStatus = this.$container.appendSpan('status');\n    }\n  }, {\n    key: \"addMandatoryIndicator\",\n    value: function addMandatoryIndicator() {\n      this.$mandatory = this.$container.appendSpan('mandatory-indicator');\n    }\n  }, {\n    key: \"removeMandatoryIndicator\",\n    value: function removeMandatoryIndicator() {\n      if (!this.$mandatory) {\n        return;\n      }\n\n      this.$mandatory.remove();\n      this.$mandatory = null;\n    }\n    /**\n     * Adds a SPAN element with class 'icon' the the given optional $parent.\n     * When $parent is not set, the element is added to this.$container.\n     * @param $parent (optional)\n     */\n\n  }, {\n    key: \"addIcon\",\n    value: function addIcon($parent) {\n      if (!$parent) {\n        $parent = this.$container;\n      }\n\n      this.$icon = fields.appendIcon($parent).on('mousedown', this._onIconMouseDown.bind(this));\n    }\n  }, {\n    key: \"_onIconMouseDown\",\n    value: function _onIconMouseDown(event) {\n      if (!this.enabledComputed) {\n        return;\n      }\n\n      this.$field.focus();\n    }\n    /**\n     * Appends a DIV element as form-field container to $parent and sets the this.$container property.\n     * Applies FormFieldLayout to this.$container (if container does not define another layout).\n     * Sets this.htmlComp to the HtmlComponent created for this.$container.\n     *\n     * @param $parent to which container is appended\n     * @param cssClass cssClass to add to the new container DIV\n     * @param layout when layout is undefined, this#_createLayout() is called\n     *\n     */\n\n  }, {\n    key: \"addContainer\",\n    value: function addContainer($parent, cssClass, layout) {\n      this.$container = $parent.appendDiv('form-field');\n\n      if (cssClass) {\n        this.$container.addClass(cssClass);\n      }\n\n      var htmlComp = HtmlComponent.install(this.$container, this.session);\n      htmlComp.setLayout(layout || this._createLayout());\n      this.htmlComp = htmlComp;\n    }\n    /**\n     * @return {FormFieldLayout} the default layout FormFieldLayout. Override this function if your field needs another layout.\n     */\n\n  }, {\n    key: \"_createLayout\",\n    value: function _createLayout() {\n      return new FormFieldLayout(this);\n    }\n    /**\n     * Updates the \"inner alignment\" of a field. Usually, the GridData hints only have influence on the\n     * LogicalGridLayout. However, the properties \"horizontalAlignment\" and \"verticalAlignment\" are\n     * sometimes used differently. Instead of controlling the field alignment in case fillHorizontal/\n     * fillVertical is false, the developer expects the _contents_ of the field to be aligned correspondingly\n     * inside the field. Technically, this is not correct, but is supported for legacy and convenience\n     * reasons for some of the Scout fields. Those who support the behavior may override _renderGridData()\n     * and call this method. Some CSS classes are then added to the field.\n     *\n     * opts:\n     *   useHorizontalAlignment:\n     *     When this option is true, \"halign-\" classes are added according to gridData.horizontalAlignment.\n     *   useVerticalAlignment:\n     *     When this option is true, \"valign-\" classes are added according to gridData.verticalAlignment.\n     *   $fieldContainer:\n     *     Specifies the div where the classes should be added. If omitted, this.$fieldContainer is used.\n     */\n\n  }, {\n    key: \"updateInnerAlignment\",\n    value: function updateInnerAlignment(opts) {\n      opts = opts || {};\n      var $fieldContainer = opts.$fieldContainer || this.$fieldContainer;\n\n      this._updateElementInnerAlignment(opts, $fieldContainer);\n\n      if ($fieldContainer !== this.$container) {\n        // also set the styles to the container\n        this._updateElementInnerAlignment(opts, this.$container);\n      }\n    }\n  }, {\n    key: \"_updateElementInnerAlignment\",\n    value: function _updateElementInnerAlignment(opts, $field) {\n      opts = opts || {};\n      var useHorizontalAlignment = scout.nvl(opts.useHorizontalAlignment, true);\n      var useVerticalAlignment = scout.nvl(opts.useVerticalAlignment, true);\n\n      if (!$field) {\n        return;\n      }\n\n      $field.removeClass('has-inner-alignment halign-left halign-center halign-right valign-top valign-middle valign-bottom');\n\n      if (useHorizontalAlignment || useVerticalAlignment) {\n        // Set horizontal and vertical alignment (from gridData)\n        $field.addClass('has-inner-alignment');\n        var gridData = this.gridData;\n\n        if (this.parent.logicalGrid) {\n          // If the logical grid is calculated by JS, use the hints instead of the calculated grid data\n          gridData = this.gridDataHints;\n        }\n\n        if (useHorizontalAlignment) {\n          var hAlign = gridData.horizontalAlignment;\n          $field.addClass(hAlign < 0 ? 'halign-left' : hAlign > 0 ? 'halign-right' : 'halign-center');\n        }\n\n        if (useVerticalAlignment) {\n          var vAlign = gridData.verticalAlignment;\n          $field.addClass(vAlign < 0 ? 'valign-top' : vAlign > 0 ? 'valign-bottom' : 'valign-middle');\n        } // Alignment might have affected inner elements (e.g. clear icon)\n\n\n        this.invalidateLayout();\n      }\n    }\n  }, {\n    key: \"addCellEditorFieldCssClasses\",\n    value: function addCellEditorFieldCssClasses($field, opts) {\n      $field.addClass('cell-editor-field').addClass(Device.get().cssClassForEdge());\n\n      if (opts.cssClass) {\n        $field.addClass(opts.cssClass);\n      }\n    }\n  }, {\n    key: \"prepareForCellEdit\",\n    value: function prepareForCellEdit(opts) {\n      opts = opts || {}; // remove mandatory and status indicators (popup should 'fill' the whole cell)\n\n      if (this.$mandatory) {\n        this.removeMandatoryIndicator();\n      }\n\n      if (this.$status) {\n        this.$status.remove();\n        this.$status = null;\n      }\n\n      if (this.$container) {\n        this.$container.addClass('cell-editor-form-field');\n      }\n\n      if (this.$field) {\n        this.addCellEditorFieldCssClasses(this.$field, opts);\n      }\n    }\n  }, {\n    key: \"_renderDropType\",\n    value: function _renderDropType() {\n      this._updateDropType();\n    }\n  }, {\n    key: \"_updateDropType\",\n    value: function _updateDropType() {\n      if (this.dropType && this.enabledComputed) {\n        this._installDragAndDropHandler();\n      } else {\n        this._uninstallDragAndDropHandler();\n      }\n    }\n  }, {\n    key: \"_createDragAndDropHandler\",\n    value: function _createDragAndDropHandler() {\n      return dragAndDrop.handler(this, {\n        supportedScoutTypes: dragAndDrop.SCOUT_TYPES.FILE_TRANSFER,\n        dropType: function () {\n          return this.dropType;\n        }.bind(this),\n        dropMaximumSize: function () {\n          return this.dropMaximumSize;\n        }.bind(this)\n      });\n    }\n  }, {\n    key: \"_installDragAndDropHandler\",\n    value: function _installDragAndDropHandler(event) {\n      if (this.dragAndDropHandler) {\n        return;\n      }\n\n      this.dragAndDropHandler = this._createDragAndDropHandler();\n      this.dragAndDropHandler.install(this.$field);\n    }\n  }, {\n    key: \"_uninstallDragAndDropHandler\",\n    value: function _uninstallDragAndDropHandler(event) {\n      if (!this.dragAndDropHandler) {\n        return;\n      }\n\n      this.dragAndDropHandler.uninstall();\n      this.dragAndDropHandler = null;\n    }\n  }, {\n    key: \"_updateDisabledCopyOverlay\",\n    value: function _updateDisabledCopyOverlay() {\n      if (this.disabledCopyOverlay && !Device.get().supportsCopyFromDisabledInputFields()) {\n        if (this.enabledComputed) {\n          this._removeDisabledCopyOverlay();\n        } else {\n          this._renderDisabledCopyOverlay();\n\n          this.revalidateLayout(); // because bounds of overlay is set in FormFieldLayout\n        }\n      }\n    }\n  }, {\n    key: \"_renderDisabledCopyOverlay\",\n    value: function _renderDisabledCopyOverlay() {\n      if (!this.$disabledCopyOverlay) {\n        this.$disabledCopyOverlay = this.$container.appendDiv('disabled-overlay').on('contextmenu', this._createCopyContextMenu.bind(this));\n      }\n    }\n  }, {\n    key: \"_removeDisabledCopyOverlay\",\n    value: function _removeDisabledCopyOverlay() {\n      if (this.$disabledCopyOverlay) {\n        this.$disabledCopyOverlay.remove();\n        this.$disabledCopyOverlay = null;\n      }\n    }\n  }, {\n    key: \"_createCopyContextMenu\",\n    value: function _createCopyContextMenu(event) {\n      if (!this.visible || strings.empty(this.displayText)) {\n        return;\n      }\n\n      var menu = scout.create('Menu', {\n        parent: this,\n        text: this.session.text('ui.Copy'),\n        inheritAccessibility: false\n      });\n      menu.on('action', function (event) {\n        this.exportToClipboard();\n      }.bind(this));\n      var popup = scout.create('ContextMenuPopup', {\n        parent: this,\n        menuItems: [menu],\n        cloneMenuItems: false,\n        location: {\n          x: event.pageX,\n          y: event.pageY\n        }\n      });\n      popup.open();\n    }\n    /**\n     * Visits this field and all child formfields in pre-order (top-down).\n     *\n     * @returns {string} the TreeVisitResult, or nothing to continue.\n     */\n\n  }, {\n    key: \"visitFields\",\n    value: function visitFields(visitor) {\n      return visitor(this);\n    }\n    /**\n     * Visit all parent form fields. The visit stops if the parent is no form field anymore (e.g. a form, desktop or session).\n     */\n\n  }, {\n    key: \"visitParents\",\n    value: function visitParents(visitor) {\n      var curParent = this.parent;\n\n      while (curParent instanceof FormField) {\n        visitor(curParent);\n        curParent = curParent.parent;\n      }\n    }\n  }, {\n    key: \"markAsSaved\",\n    value: function markAsSaved() {\n      this.setProperty('touched', false);\n      this.updateRequiresSave();\n    }\n  }, {\n    key: \"touch\",\n    value: function touch() {\n      this.setProperty('touched', true);\n      this.updateRequiresSave();\n    }\n    /**\n     * Updates the requiresSave property by checking if the field is touched or if computeRequiresSave() returns true.\n     */\n\n  }, {\n    key: \"updateRequiresSave\",\n    value: function updateRequiresSave() {\n      if (!this.initialized) {\n        return;\n      }\n\n      this.requiresSave = this.touched || this.computeRequiresSave();\n    }\n    /**\n     * Override this function in order to return whether or not this field requires to be saved.\n     * The default impl. returns false.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"computeRequiresSave\",\n    value: function computeRequiresSave() {\n      return false;\n    }\n    /**\n     * @returns {object} which contains 3 properties: valid, validByErrorStatus and validByMandatory\n     */\n\n  }, {\n    key: \"getValidationResult\",\n    value: function getValidationResult() {\n      var validByErrorStatus = !this._errorStatus();\n      var validByMandatory = !this.mandatory || !this.empty;\n      var valid = validByErrorStatus && validByMandatory;\n      return {\n        valid: valid,\n        validByErrorStatus: validByErrorStatus,\n        validByMandatory: validByMandatory\n      };\n    }\n  }, {\n    key: \"_updateEmpty\",\n    value: function _updateEmpty() {// NOP\n    }\n  }, {\n    key: \"requestInput\",\n    value: function requestInput() {\n      if (this.enabledComputed && this.rendered) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(model, options) {\n      var clone = _get(_getPrototypeOf(FormField.prototype), \"clone\", this).call(this, model, options);\n\n      this._deepCloneProperties(clone, 'menus', options);\n\n      return clone;\n    }\n  }, {\n    key: \"exportToClipboard\",\n    value: function exportToClipboard() {\n      if (!this.displayText) {\n        return;\n      }\n\n      var event = new Event({\n        text: this.displayText\n      });\n      this.trigger('clipboardExport', event);\n\n      if (!event.defaultPrevented) {\n        this._exportToClipboard(event.text);\n      }\n    }\n  }, {\n    key: \"_exportToClipboard\",\n    value: function _exportToClipboard(text) {\n      clipboard.copyText({\n        parent: this,\n        text: text\n      });\n    }\n  }]);\n\n  return FormField;\n}(Widget);\n\n_defineProperty(FormField, \"FieldStyle\", {\n  CLASSIC: 'classic',\n  ALTERNATIVE: 'alternative'\n});\n\n_defineProperty(FormField, \"DEFAULT_FIELD_STYLE\", FormField.FieldStyle.ALTERNATIVE);\n\n_defineProperty(FormField, \"StatusPosition\", {\n  DEFAULT: 'default',\n  TOP: 'top'\n});\n\n_defineProperty(FormField, \"LabelPosition\", {\n  DEFAULT: 0,\n  LEFT: 1,\n  ON_FIELD: 2,\n  RIGHT: 3,\n  TOP: 4\n});\n\n_defineProperty(FormField, \"TooltipAnchor\", {\n  DEFAULT: 'default',\n  ON_FIELD: 'onField'\n});\n\n_defineProperty(FormField, \"LabelWidth\", {\n  DEFAULT: 0,\n  UI: -1\n});\n\n_defineProperty(FormField, \"FULL_WIDTH\", 0);\n\n_defineProperty(FormField, \"Mode\", {\n  DEFAULT: 'default',\n  CELLEDITOR: 'celleditor'\n});\n\n_defineProperty(FormField, \"SEVERITY_CSS_CLASSES\", 'has-error has-warning has-info has-ok');\n\nexport { FormField as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/form/fields/FormField.js"],"names":["arrays","clipboard","Device","dragAndDrop","Event","fields","FormFieldLayout","GridData","GroupBox","HtmlComponent","KeyStrokeContext","LoadingSupport","objects","scout","Status","strings","styles","tooltips","Widget","$","FormField","dropType","dropMaximumSize","DEFAULT_DROP_MAXIMUM_SIZE","empty","errorStatus","fieldStyle","DEFAULT_FIELD_STYLE","gridData","gridDataHints","mode","Mode","DEFAULT","keyStrokes","label","labelVisible","labelPosition","LabelPosition","labelWidthInPixel","labelHtmlEnabled","mandatory","statusMenuMappings","menus","menusVisible","preventInitialFocus","requiresSave","statusPosition","StatusPosition","statusVisible","suppressStatus","touched","tooltipText","tooltipAnchor","TooltipAnchor","onFieldTooltipOptionsCreator","$label","$field","$fieldContainer","$icon","$status","disabledCopyOverlay","$disabledCopyOverlay","_addWidgetProperties","_addCloneProperties","_menuPropertyChangeHandler","_onMenuPropertyChange","bind","widget","model","resolveConsts","property","constType","resolveTextKeys","_setKeyStrokes","_setMenus","_setErrorStatus","_setGridDataHints","_setGridData","_updateEmpty","propertyName","value","_initGridDataHints","isPlainObject","extend","Error","_renderMandatory","_renderTooltipText","_renderErrorStatus","_renderMenus","_renderLabel","_renderLabelVisible","_renderStatusVisible","_renderStatusPosition","_renderFont","_renderForegroundColor","_renderBackgroundColor","_renderLabelFont","_renderLabelForegroundColor","_renderLabelBackgroundColor","_renderGridData","_renderPreventInitialFocus","_renderFieldStyle","_removeField","_removeStatus","_removeLabel","_removeIcon","removeMandatoryIndicator","_removeDisabledCopyOverlay","_uninstallDragAndDropHandler","setProperty","_renderFieldStyleInternal","$container","rendered","htmlCompParent","htmlComp","getParent","invalidateLayoutTree","$element","toggleClass","FieldStyle","ALTERNATIVE","ensure","_setProperty","setErrorStatus","status","_errorStatus","hasStatus","statusClass","cssClass","_updateErrorStatusClasses","_updateFieldStatus","removeClass","SEVERITY_CSS_CLASSES","addClass","_updateTooltip","hasTooltipText","hasStatusTooltip","hasOnFieldTooltip","creatorFunc","_createOnFieldTooltipOptions","install","call","uninstall","hasText","ON_FIELD","parent","text","arrowPosition","_renderPlaceholder","_removePlaceholder","contentOrNbsp","TOP","labelUseUiWidth","LabelWidth","UI","html","nvl","placeholder","visible","_renderChildVisible","fieldStatus","tooltip","_computeStatusVisible","autoRemove","setPosition","setVisible","CELLEDITOR","isError","_getMenusForStatus","create","message","severity","Severity","OK","_getCurrentMenus","update","_isInitialShowStatus","hasTooltip","_hasMenus","$child","isVisible","position","setEnabled","enabledComputed","_updateDisabledCopyOverlay","_updateDropType","_renderDisabledStyleInternal","$mandatory","font","legacyFont","foregroundColor","legacyForegroundColor","backgroundColor","legacyBackgroundColor","labelFont","labelForegroundColor","labelBackgroundColor","invalidateLogicalGrid","forEach","menu","off","updateKeyStrokes","on","menuToInsert","insertMenus","menusToInsert","length","setMenus","concat","menuToDelete","deleteMenus","menusToDelete","slice","removeAll","event","_updateMenus","filter","mapping","codes","indexOf","code","severities","map","undefined","hideTooltip","_hideStatusMessage","contextPopup","$anchor","menuItems","cloneMenuItems","closeOnAnchorMouseDown","open","close","session","layoutValidator","schedulePostValidateFunction","focus","focusableElement","getFocusableElement","focusManager","requestFocus","setFocused","appendElement","installForEllipsis","_onLabelClick","activate","remove","linkElementWithLabel","addFieldContainer","_linkWithLabel","_onFieldBlur","_onFieldFocus","has","next","appendTo","render","$pseudoStatus","appendSpan","$parent","appendIcon","_onIconMouseDown","layout","appendDiv","setLayout","_createLayout","opts","_updateElementInnerAlignment","useHorizontalAlignment","useVerticalAlignment","logicalGrid","hAlign","horizontalAlignment","vAlign","verticalAlignment","invalidateLayout","get","cssClassForEdge","addCellEditorFieldCssClasses","_installDragAndDropHandler","handler","supportedScoutTypes","SCOUT_TYPES","FILE_TRANSFER","dragAndDropHandler","_createDragAndDropHandler","supportsCopyFromDisabledInputFields","_renderDisabledCopyOverlay","revalidateLayout","_createCopyContextMenu","displayText","inheritAccessibility","exportToClipboard","popup","location","x","pageX","y","pageY","visitor","curParent","updateRequiresSave","initialized","computeRequiresSave","validByErrorStatus","validByMandatory","valid","options","clone","_deepCloneProperties","trigger","defaultPrevented","_exportToClipboard","copyText","CLASSIC","LEFT","RIGHT"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACEA,MADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,WAJF,EAKEC,KALF,EAMEC,MANF,EAOEC,eAPF,EAQEC,QARF,EASEC,QATF,EAUEC,aAVF,EAWEC,gBAXF,EAYEC,cAZF,EAaEC,OAbF,EAcEC,KAdF,EAeEC,MAfF,EAgBEC,OAhBF,EAiBEC,MAjBF,EAkBEC,QAlBF,EAmBEC,MAnBF,QAoBO,aApBP;AAqBA,OAAOC,CAAP,MAAc,QAAd;AAEA;AACA;AACA;AACA;;IACqBC,S;;;;;AACnB,uBAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,QAAL,GAAgB,CAAhB;AACA,UAAKC,eAAL,GAAuBnB,WAAW,CAACoB,yBAAnC;AACA,UAAKC,KAAL,GAAa,IAAb;AACA,UAAKC,WAAL,GAAmB,IAAnB;AACA,UAAKC,UAAL,GAAkBN,SAAS,CAACO,mBAA5B;AACA,UAAKC,QAAL,GAAgB,IAAhB;AACA,UAAKC,aAAL,GAAqB,IAAItB,QAAJ,EAArB;AACA,UAAKuB,IAAL,GAAYV,SAAS,CAACW,IAAV,CAAeC,OAA3B;AACA,UAAKC,UAAL,GAAkB,EAAlB;AACA,UAAKC,KAAL,GAAa,IAAb;AACA,UAAKC,YAAL,GAAoB,IAApB;AACA,UAAKC,aAAL,GAAqBhB,SAAS,CAACiB,aAAV,CAAwBL,OAA7C;AACA,UAAKM,iBAAL,GAAyB,CAAzB;AACA,UAAKC,gBAAL,GAAwB,KAAxB;AACA,UAAKC,SAAL,GAAiB,KAAjB;AACA,UAAKC,kBAAL,GAA0B,EAA1B;AACA,UAAKC,KAAL,GAAa,EAAb;AACA,UAAKC,YAAL,GAAoB,IAApB;AACA,UAAKC,mBAAL,GAA2B,KAA3B;AACA,UAAKC,YAAL,GAAoB,KAApB;AACA,UAAKC,cAAL,GAAsB1B,SAAS,CAAC2B,cAAV,CAAyBf,OAA/C;AACA,UAAKgB,aAAL,GAAqB,IAArB;AACA,UAAKC,cAAL,GAAsB,KAAtB;AACA,UAAKC,OAAL,GAAe,KAAf;AACA,UAAKC,WAAL,GAAmB,IAAnB;AACA,UAAKC,aAAL,GAAqBhC,SAAS,CAACiC,aAAV,CAAwBrB,OAA7C;AACA,UAAKsB,4BAAL,GAAoC,IAApC;AAEA,UAAKC,MAAL,GAAc,IAAd;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKC,eAAL,GAAuB,IAAvB;AACA,UAAKC,KAAL,GAAa,IAAb;AACA;AACJ;AACA;;AACI,UAAKC,OAAL,GAAe,IAAf;AAEA;AACJ;AACA;AACA;AACA;;AACI,UAAKC,mBAAL,GAA2B,KAA3B;AACA,UAAKC,oBAAL,GAA4B,IAA5B;;AAEA,UAAKC,oBAAL,CAA0B,CAAC,YAAD,EAAe,OAAf,EAAwB,oBAAxB,CAA1B;;AACA,UAAKC,mBAAL,CAAyB,CAAC,UAAD,EAAa,iBAAb,EAAgC,aAAhC,EAA+C,YAA/C,EAA6D,eAA7D,EAA8E,UAA9E,EAA0F,OAA1F,EAAmG,cAAnG,EAAmH,eAAnH,EACvB,mBADuB,EACF,WADE,EACW,MADX,EACmB,qBADnB,EAC0C,cAD1C,EAC0D,SAD1D,EACqE,eADrE,EACsF,gBADtF,EACwG,oBADxG,EAEvB,aAFuB,EAER,eAFQ,CAAzB;;AAIA,UAAKC,0BAAL,GAAkC,MAAKC,qBAAL,CAA2BC,IAA3B,+BAAlC;AA9DY;AA+Db;;;;;AA2CD;AACF;AACA;AACA;8CAC4B;AACxB,aAAO,IAAIxD,gBAAJ,EAAP;AACD;AAED;AACF;AACA;;;;4CAC0B;AACtB,aAAO,IAAIC,cAAJ,CAAmB;AACxBwD,QAAAA,MAAM,EAAE;AADgB,OAAnB,CAAP;AAGD;;;0BAEKC,K,EAAO;AACX,2EAAYA,KAAZ;;AACA,WAAKC,aAAL,CAAmB,CAAC;AAClBC,QAAAA,QAAQ,EAAE,eADQ;AAElBC,QAAAA,SAAS,EAAEnD,SAAS,CAACiB;AAFH,OAAD,CAAnB;AAIA,WAAKmC,eAAL,CAAqB,CAAC,OAAD,EAAU,aAAV,CAArB;;AACA,WAAKC,cAAL,CAAoB,KAAKxC,UAAzB;;AACA,WAAKyC,SAAL,CAAe,KAAKhC,KAApB;;AACA,WAAKiC,eAAL,CAAqB,KAAKlD,WAA1B;;AACA,WAAKmD,iBAAL,CAAuB,KAAK/C,aAA5B;;AACA,WAAKgD,YAAL,CAAkB,KAAKjD,QAAvB;;AACA,WAAKkD,YAAL;AACD;;;kCAEaC,Y,EAAcC,K,EAAO;AACjC,UAAI,oBAAoBD,YAAxB,EAAsC;AACpC,aAAKE,kBAAL,CAAwBD,KAAxB;AACD,OAFD,MAEO;AACL,qFAAoBD,YAApB,EAAkCC,KAAlC;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;uCACqBnD,a,EAAe;AAChC,UAAIA,aAAa,YAAYtB,QAA7B,EAAuC;AACrC,aAAKsB,aAAL,GAAqBA,aAArB;AACD,OAFD,MAEO,IAAIjB,OAAO,CAACsE,aAAR,CAAsBrD,aAAtB,CAAJ,EAA0C;AAC/CV,QAAAA,CAAC,CAACgE,MAAF,CAAS,KAAKtD,aAAd,EAA6BA,aAA7B;AACD,OAFM,MAEA;AACL,aAAKA,aAAL,GAAqBA,aAArB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;8BACY;AACR,YAAM,IAAIuD,KAAJ,CAAU,0DAAV,CAAN;AACD;;;wCAEmB;AAClB;;AACA,WAAKC,gBAAL;;AACA,WAAKC,kBAAL;;AACA,WAAKC,kBAAL;;AACA,WAAKC,YAAL;;AACA,WAAKC,YAAL;;AACA,WAAKC,mBAAL;;AACA,WAAKC,oBAAL;;AACA,WAAKC,qBAAL;;AACA,WAAKC,WAAL;;AACA,WAAKC,sBAAL;;AACA,WAAKC,sBAAL;;AACA,WAAKC,gBAAL;;AACA,WAAKC,2BAAL;;AACA,WAAKC,2BAAL;;AACA,WAAKC,eAAL;;AACA,WAAKC,0BAAL;;AACA,WAAKC,iBAAL;AACD;;;8BAES;AACR;;AACA,WAAKC,YAAL;;AACA,WAAKC,aAAL;;AACA,WAAKC,YAAL;;AACA,WAAKC,WAAL;;AACA,WAAKC,wBAAL;;AACA,WAAKC,0BAAL;;AACA,WAAKC,4BAAL;AACD;;;kCAEalF,U,EAAY;AACxB,WAAKmF,WAAL,CAAiB,YAAjB,EAA+BnF,UAA/B;AACD;;;wCAEmB;AAClB,WAAKoF,yBAAL,CAA+B,KAAKC,UAApC;;AACA,WAAKD,yBAAL,CAA+B,KAAKrD,eAApC;;AACA,WAAKqD,yBAAL,CAA+B,KAAKtD,MAApC;;AACA,UAAI,KAAKwD,QAAT,EAAmB;AACjB;AACA,YAAIC,cAAc,GAAG,KAAKC,QAAL,CAAcC,SAAd,EAArB;;AACA,YAAIF,cAAJ,EAAoB;AAClBA,UAAAA,cAAc,CAACG,oBAAf;AACD;;AACD,aAAKA,oBAAL;AACD;AACF;;;8CAEyBC,Q,EAAU;AAClC,UAAI,CAACA,QAAL,EAAe;AACb;AACD;;AACDA,MAAAA,QAAQ,CAACC,WAAT,CAAqB,aAArB,EAAoC,KAAK5F,UAAL,KAAoBN,SAAS,CAACmG,UAAV,CAAqBC,WAA7E;AACD;;;iCAEYhF,S,EAAW;AACtB,WAAKqE,WAAL,CAAiB,WAAjB,EAA8BrE,SAA9B;AACD;;;uCAEkB;AACjB,WAAKuE,UAAL,CAAgBO,WAAhB,CAA4B,WAA5B,EAAyC,KAAK9E,SAA9C;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;mCACiB;AACb,aAAO,KAAKf,WAAZ;AACD;;;mCAEcA,W,EAAa;AAC1B,WAAKoF,WAAL,CAAiB,aAAjB,EAAgCpF,WAAhC;AACD;;;oCAEeA,W,EAAa;AAC3BA,MAAAA,WAAW,GAAGX,MAAM,CAAC2G,MAAP,CAAchG,WAAd,CAAd;;AACA,WAAKiG,YAAL,CAAkB,aAAlB,EAAiCjG,WAAjC;AACD;;;uCAEkB;AACjB,WAAKkG,cAAL,CAAoB,IAApB;AACD;;;yCAEoB;AACnB,UAAIC,MAAM,GAAG,KAAKC,YAAL,EAAb;AAAA,UACEC,SAAS,GAAG,CAAC,CAACF,MADhB;AAAA,UAEEG,WAAW,GAAGD,SAAS,GAAG,SAASF,MAAM,CAACI,QAAP,EAAZ,GAAgC,EAFzD;;AAIA,WAAKC,yBAAL,CAA+BF,WAA/B,EAA4CD,SAA5C;;AACA,WAAKI,kBAAL;AACD;;;8CAEyBH,W,EAAaD,S,EAAW;AAChD,WAAKf,UAAL,CAAgBoB,WAAhB,CAA4B/G,SAAS,CAACgH,oBAAtC;AACA,WAAKrB,UAAL,CAAgBsB,QAAhB,CAAyBN,WAAzB,EAAsCD,SAAtC;;AACA,UAAI,KAAKtE,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAY2E,WAAZ,CAAwB/G,SAAS,CAACgH,oBAAlC;AACA,aAAK5E,MAAL,CAAY6E,QAAZ,CAAqBN,WAArB,EAAkCD,SAAlC;AACD;AACF;;;mCAEc3E,W,EAAa;AAC1B,WAAK0D,WAAL,CAAiB,aAAjB,EAAgC1D,WAAhC;AACD;;;yCAEoB;AACnB,WAAKmF,cAAL;AACD;;;qCAEgBlF,a,EAAe;AAC9B,WAAKyD,WAAL,CAAiB,eAAjB,EAAkCzD,aAAlC;AACD;;;2CAEsB;AACrB,WAAKkF,cAAL;AACD;;;qCAEgB;AACf,UAAIC,cAAc,GAAG,KAAKC,gBAAL,EAArB;AACA,WAAKzB,UAAL,CAAgBO,WAAhB,CAA4B,aAA5B,EAA2CiB,cAA3C;;AACA,UAAI,KAAK/E,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAY8D,WAAZ,CAAwB,aAAxB,EAAuCiB,cAAvC;AACD;;AACD,WAAKL,kBAAL;;AAEA,UAAI,KAAKzE,eAAT,EAA0B;AACxB,YAAI,KAAKgF,iBAAL,EAAJ,EAA8B;AAC5B,cAAIC,WAAW,GAAG,KAAKpF,4BAAL,IAAqC,KAAKqF,4BAA5D;AACA1H,UAAAA,QAAQ,CAAC2H,OAAT,CAAiB,KAAKnF,eAAtB,EAAuCiF,WAAW,CAACG,IAAZ,CAAiB,IAAjB,CAAvC;AACD,SAHD,MAGO;AACL5H,UAAAA,QAAQ,CAAC6H,SAAT,CAAmB,KAAKrF,eAAxB;AACD;AACF;AACF;;;uCAEkB;AACjB,aAAO,KAAKL,aAAL,KAAuBhC,SAAS,CAACiC,aAAV,CAAwBrB,OAA/C,IACLjB,OAAO,CAACgI,OAAR,CAAgB,KAAK5F,WAArB,CADF;AAED;;;wCAEmB;AAClB,aAAO,KAAKC,aAAL,KAAuBhC,SAAS,CAACiC,aAAV,CAAwB2F,QAA/C,IACLjI,OAAO,CAACgI,OAAR,CAAgB,KAAK5F,WAArB,CADF;AAED;;;oDAE+BG,4B,EAA8B;AAC5D,WAAKA,4BAAL,GAAoCA,4BAApC;AACD;;;mDAE8B;AAC7B,aAAO;AACL2F,QAAAA,MAAM,EAAE,IADH;AAELC,QAAAA,IAAI,EAAE,KAAK/F,WAFN;AAGLgG,QAAAA,aAAa,EAAE;AAHV,OAAP;AAKD;AAED;AACF;AACA;;;;qCACmB;AACf;;AACA,UAAI,KAAKnC,QAAT,EAAmB;AACjB;AACA,aAAKzB,kBAAL;AACD;AACF;;;6BAEQrD,K,EAAO;AACd,WAAK2E,WAAL,CAAiB,OAAjB,EAA0B3E,KAA1B;AACD;;;mCAEc;AACb,UAAIA,KAAK,GAAG,KAAKA,KAAjB;;AACA,UAAI,KAAKE,aAAL,KAAuBhB,SAAS,CAACiB,aAAV,CAAwB2G,QAAnD,EAA6D;AAC3D,aAAKI,kBAAL;;AACA,YAAI,KAAK7F,MAAT,EAAiB;AACf,eAAKA,MAAL,CAAY2F,IAAZ,CAAiB,EAAjB;AACD;AACF,OALD,MAKO,IAAI,KAAK3F,MAAT,EAAiB;AACtB,aAAK8F,kBAAL,GADsB,CAEtB;;;AACA,aAAK9F,MAAL,CACG+F,aADH,CACiB,KAAK/G,gBADtB,EACwCL,KADxC,EAC+C,OAD/C,EAEGoF,WAFH,CAEe,KAFf,EAEsB,KAAKlF,aAAL,KAAuBhB,SAAS,CAACiB,aAAV,CAAwBkH,GAFrE,EAHsB,CAOtB;;AACA,YAAI,KAAKC,eAAL,IAAwB,KAAKlH,iBAAL,KAA2BlB,SAAS,CAACqI,UAAV,CAAqBC,EAA5E,EAAgF;AAC9E,eAAKtC,oBAAL;AACD;AACF;AACF;AAED;AACF;AACA;AACA;AACA;;;;wCACsB;AAClB,WAAK7D,MAAL,CACGoG,IADH,CACQ,QADR,EAEGrC,WAFH,CAEe,KAFf,EAEsB,KAAKlF,aAAL,KAAuBhB,SAAS,CAACiB,aAAV,CAAwBkH,GAFrE;AAGD;;;uCAEkB/F,M,EAAQ;AACzBA,MAAAA,MAAM,GAAG3C,KAAK,CAAC+I,GAAN,CAAUpG,MAAV,EAAkB,KAAKA,MAAvB,CAAT;;AACA,UAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACqG,WAAP,CAAmB,KAAK3H,KAAxB;AACD;AACF;AAED;AACF;AACA;;;;uCACqBsB,M,EAAQ;AACzBA,MAAAA,MAAM,GAAG3C,KAAK,CAAC+I,GAAN,CAAUpG,MAAV,EAAkB,KAAKA,MAAvB,CAAT;;AACA,UAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACqG,WAAP,CAAmB,EAAnB;AACD;AACF;;;oCAEeC,O,EAAS;AACvB,WAAKjD,WAAL,CAAiB,cAAjB,EAAiCiD,OAAjC;AACD;;;0CAEqB;AACpB,UAAIA,OAAO,GAAG,KAAK3H,YAAnB;;AACA,WAAK4H,mBAAL,CAAyB,KAAKxG,MAA9B,EAAsCuG,OAAtC;;AACA,WAAK/C,UAAL,CAAgBO,WAAhB,CAA4B,cAA5B,EAA4C,CAACwC,OAA7C;;AACA,UAAI,KAAK9C,QAAL,IAAiB,KAAK5E,aAAL,KAAuBhB,SAAS,CAACiB,aAAV,CAAwBkH,GAApE,EAAyE;AACvE;AACA,YAAItC,cAAc,GAAG,KAAKC,QAAL,CAAcC,SAAd,EAArB;;AACA,YAAIF,cAAJ,EAAoB;AAClBA,UAAAA,cAAc,CAACG,oBAAf;AACD;AACF;AACF;;;yCAEoB9E,iB,EAAmB;AACtC,WAAKuE,WAAL,CAAiB,mBAAjB,EAAsCvE,iBAAtC;AACD;;;+CAE0B;AACzB,WAAK8E,oBAAL;AACD;;;qCAEgB0C,O,EAAS;AACxB,WAAKjD,WAAL,CAAiB,eAAjB,EAAkCiD,OAAlC;AACD;;;2CAEsB;AACrB,WAAK5B,kBAAL;AACD;;;sCAEiBpF,c,EAAgB;AAChC,WAAK+D,WAAL,CAAiB,gBAAjB,EAAmC/D,cAAnC;AACD;;;0CAEqBA,c,EAAgB;AACpC,WAAKoF,kBAAL;AACD;;;+BAEU;AACT,UAAI,KAAK8B,WAAT,EAAsB;AACpB,eAAO,KAAKA,WAAL,CAAiBC,OAAxB;AACD;;AACD,aAAO,IAAP;AACD;;;yCAEoB;AACnB,UAAI,CAAC,KAAKD,WAAV,EAAuB;AACrB;AACD,OAHkB,CAInB;;;AACA,UAAItH,KAAJ;AAAA,UACEjB,WAAW,GAAG,KAAKoG,YAAL,EADhB;AAAA,UAEED,MAAM,GAAG,IAFX;AAAA,UAGE5E,aAAa,GAAG,KAAKkH,qBAAL,EAHlB;AAAA,UAIEC,UAAU,GAAG,IAJf;;AAMA,WAAKH,WAAL,CAAiBI,WAAjB,CAA6B,KAAKtH,cAAlC;AACA,WAAKkH,WAAL,CAAiBK,UAAjB,CAA4BrH,aAA5B;;AACA,UAAI,CAACA,aAAL,EAAoB;AAClB;AACD;;AAED,UAAIvB,WAAJ,EAAiB;AACf;AACA;AACA,YAAI,KAAKK,IAAL,KAAcV,SAAS,CAACW,IAAV,CAAeuI,UAAjC,EAA6C;AAC3C;AACD;;AACD1C,QAAAA,MAAM,GAAGnG,WAAT;AACA0I,QAAAA,UAAU,GAAG,CAACvC,MAAM,CAAC2C,OAAP,EAAd;AACA7H,QAAAA,KAAK,GAAG,KAAK8H,kBAAL,CAAwB/I,WAAxB,CAAR;AACD,OATD,MASO,IAAI,KAAK+G,gBAAL,EAAJ,EAA6B;AAClCZ,QAAAA,MAAM,GAAG/G,KAAK,CAAC4J,MAAN,CAAa,QAAb,EAAuB;AAC9BC,UAAAA,OAAO,EAAE,KAAKvH,WADgB;AAE9BwH,UAAAA,QAAQ,EAAE7J,MAAM,CAAC8J,QAAP,CAAgBC;AAFI,SAAvB,CAAT,CADkC,CAKlC;AACA;;AACAnI,QAAAA,KAAK,GAAG,KAAKoI,gBAAL,EAAR;AACD,OARM,MAQA;AACL;AACA;AACApI,QAAAA,KAAK,GAAG,KAAKoI,gBAAL,EAAR;AACD;;AAED,WAAKd,WAAL,CAAiBe,MAAjB,CAAwBnD,MAAxB,EAAgClF,KAAhC,EAAuCyH,UAAvC,EAAmD,KAAKa,oBAAL,EAAnD;AACD;;;2CAEsB;AACrB,aAAO,CAAC,CAAC,KAAKnD,YAAL,EAAT;AACD;AAED;AACF;AACA;AACA;;;;4CAC0B;AACtB,UAAID,MAAM,GAAG,KAAKC,YAAL,EAAb;AAAA,UACE7E,aAAa,GAAG,KAAKA,aADvB;AAAA,UAEE8E,SAAS,GAAG,CAAC,CAACF,MAFhB;AAAA,UAGEqD,UAAU,GAAG,KAAKzC,gBAAL,EAHf;;AAKA,aAAO,CAAC,KAAKvF,cAAN,IAAwB,KAAK6G,OAA7B,KAAyC9G,aAAa,IAAI8E,SAAjB,IAA8BmD,UAA9B,IAA6C,KAAKC,SAAL,MAAoB,KAAKvI,YAA/G,CAAP;AACD;;;wCAEmBwI,M,EAAQrB,O,EAAS;AACnC,UAAI,CAACqB,MAAL,EAAa;AACX;AACD;;AACD,UAAIA,MAAM,CAACC,SAAP,OAAuBtB,OAA3B,EAAoC;AAClCqB,QAAAA,MAAM,CAACd,UAAP,CAAkBP,OAAlB;AACA,aAAK1C,oBAAL;AACA,eAAO,IAAP;AACD;AACF;;;qCAEgBhF,a,EAAe;AAC9B,WAAKyE,WAAL,CAAiB,eAAjB,EAAkCzE,aAAlC;AACD,K,CAED;;;;yCACqBiJ,Q,EAAU;AAC7B,WAAK5F,YAAL;;AACA,UAAI,KAAKuB,QAAT,EAAmB;AACjB;AACA;AACA,YAAIC,cAAc,GAAG,KAAKC,QAAL,CAAcC,SAAd,EAArB;;AACA,YAAIF,cAAJ,EAAoB;AAClBA,UAAAA,cAAc,CAACG,oBAAf;AACD;;AACD,aAAKA,oBAAL;AACD;AACF;;;wCAEmB7E,gB,EAAkB;AACpC,WAAKsE,WAAL,CAAiB,kBAAjB,EAAqCtE,gBAArC;AACD;;;8CAEyB;AACxB;AACA,WAAKkD,YAAL;AACD;AAED;AACF;AACA;;;;qCACmB;AACf;;AACA,UAAI,KAAKjC,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAY8H,UAAZ,CAAuB,KAAKC,eAA5B;AACD;;AACD,WAAKC,0BAAL;;AACA,WAAKC,eAAL;AACD;AAED;AACF;AACA;;;;2CACyB;AACrB,WAAKC,4BAAL,CAAkC,KAAK3E,UAAvC;;AACA,WAAK2E,4BAAL,CAAkC,KAAKjI,eAAvC;;AACA,WAAKiI,4BAAL,CAAkC,KAAKlI,MAAvC;;AACA,WAAKkI,4BAAL,CAAkC,KAAKC,UAAvC;AACD;;;4BAEOC,I,EAAM;AACZ,WAAK/E,WAAL,CAAiB,MAAjB,EAAyB+E,IAAzB;AACD;;;kCAEa;AACZ5K,MAAAA,MAAM,CAAC6K,UAAP,CAAkB,IAAlB,EAAwB,KAAKrI,MAA7B;AACD;;;uCAEkBsI,e,EAAiB;AAClC,WAAKjF,WAAL,CAAiB,iBAAjB,EAAoCiF,eAApC;AACD;;;6CAEwB;AACvB9K,MAAAA,MAAM,CAAC+K,qBAAP,CAA6B,IAA7B,EAAmC,KAAKvI,MAAxC;AACD;;;uCAEkBwI,e,EAAiB;AAClC,WAAKnF,WAAL,CAAiB,iBAAjB,EAAoCmF,eAApC;AACD;;;6CAEwB;AACvBhL,MAAAA,MAAM,CAACiL,qBAAP,CAA6B,IAA7B,EAAmC,KAAKzI,MAAxC;AACD;;;iCAEY0I,S,EAAW;AACtB,WAAKrF,WAAL,CAAiB,WAAjB,EAA8BqF,SAA9B;AACD;;;uCAEkB;AACjBlL,MAAAA,MAAM,CAAC6K,UAAP,CAAkB,IAAlB,EAAwB,KAAKtI,MAA7B,EAAqC,OAArC;AACD;;;4CAEuB4I,oB,EAAsB;AAC5C,WAAKtF,WAAL,CAAiB,sBAAjB,EAAyCsF,oBAAzC;AACD;;;kDAE6B;AAC5BnL,MAAAA,MAAM,CAAC+K,qBAAP,CAA6B,IAA7B,EAAmC,KAAKxI,MAAxC,EAAgD,OAAhD;AACD;;;4CAEuB6I,oB,EAAsB;AAC5C,WAAKvF,WAAL,CAAiB,sBAAjB,EAAyCuF,oBAAzC;AACD;;;kDAE6B;AAC5BpL,MAAAA,MAAM,CAACiL,qBAAP,CAA6B,IAA7B,EAAmC,KAAK1I,MAAxC,EAAgD,OAAhD;AACD;;;qCAEgB3B,Q,EAAU;AACzB,WAAKiF,WAAL,CAAiB,eAAjB,EAAkCjF,QAAlC;AACD;;;sCAEiBA,Q,EAAU;AAC1B,UAAI,CAACA,QAAL,EAAe;AACbA,QAAAA,QAAQ,GAAG,IAAIrB,QAAJ,EAAX;AACD;;AACD,WAAKmH,YAAL,CAAkB,eAAlB,EAAmCnH,QAAQ,CAACkH,MAAT,CAAgB7F,QAAhB,CAAnC;AACD;;;2CAEsB;AACrB,WAAKqH,MAAL,CAAYoD,qBAAZ;AACD;;;iCAEYzK,Q,EAAU;AACrB,UAAI,CAACA,QAAL,EAAe;AACbA,QAAAA,QAAQ,GAAG,IAAIrB,QAAJ,EAAX;AACD;;AACD,WAAKmH,YAAL,CAAkB,UAAlB,EAA8BnH,QAAQ,CAACkH,MAAT,CAAgB7F,QAAhB,CAA9B;AACD;;;sCAEiB;AAChB,UAAI,KAAKoF,QAAT,EAAmB;AACjB,YAAIC,cAAc,GAAG,KAAKC,QAAL,CAAcC,SAAd,EAArB;;AACA,YAAIF,cAAJ,EAAoB;AAAE;AACpBA,UAAAA,cAAc,CAACG,oBAAf;AACD;AACF;AACF;;;6BAEQ1E,K,EAAO;AACd,WAAKmE,WAAL,CAAiB,OAAjB,EAA0BnE,KAA1B;AACD;;;8BAESA,K,EAAO;AACfA,MAAAA,KAAK,GAAG1C,MAAM,CAACyH,MAAP,CAAc/E,KAAd,CAAR;AACA,WAAKA,KAAL,CAAW4J,OAAX,CAAmB,UAASC,IAAT,EAAe;AAChCA,QAAAA,IAAI,CAACC,GAAL,CAAS,gBAAT,EAA2B,KAAKxI,0BAAhC;AACD,OAFD,EAEG,IAFH;AAIA,WAAKyI,gBAAL,CAAsB/J,KAAtB,EAA6B,KAAKA,KAAlC;;AACA,WAAKgF,YAAL,CAAkB,OAAlB,EAA2BhF,KAA3B;;AAEA,WAAKA,KAAL,CAAW4J,OAAX,CAAmB,UAASC,IAAT,EAAe;AAChCA,QAAAA,IAAI,CAACG,EAAL,CAAQ,gBAAR,EAA0B,KAAK1I,0BAA/B;AACD,OAFD,EAEG,IAFH;AAGD;;;+BAEU2I,Y,EAAc;AACvB,WAAKC,WAAL,CAAiB,CAACD,YAAD,CAAjB;AACD;;;gCAEWE,a,EAAe;AACzBA,MAAAA,aAAa,GAAG7M,MAAM,CAACyH,MAAP,CAAcoF,aAAd,CAAhB;;AACA,UAAIA,aAAa,CAACC,MAAd,KAAyB,CAA7B,EAAgC;AAC9B;AACD;;AACD,WAAKC,QAAL,CAAc,KAAKrK,KAAL,CAAWsK,MAAX,CAAkBH,aAAlB,CAAd;AACD;;;+BAEUI,Y,EAAc;AACvB,WAAKC,WAAL,CAAiB,CAACD,YAAD,CAAjB;AACD;;;gCAEWE,a,EAAe;AACzBA,MAAAA,aAAa,GAAGnN,MAAM,CAACyH,MAAP,CAAc0F,aAAd,CAAhB;;AACA,UAAIA,aAAa,CAACL,MAAd,KAAyB,CAA7B,EAAgC;AAC9B;AACD;;AACD,UAAIpK,KAAK,GAAG,KAAKA,KAAL,CAAW0K,KAAX,EAAZ;AACApN,MAAAA,MAAM,CAACqN,SAAP,CAAiB3K,KAAjB,EAAwByK,aAAxB;AACA,WAAKJ,QAAL,CAAcrK,KAAd;AACD;;;0CAEqB4K,K,EAAO;AAC3B,UAAIA,KAAK,CAACvI,YAAN,KAAuB,SAAvB,IAAoC,KAAKiC,QAA7C,EAAuD;AACrD,aAAKuG,YAAL;AACD;AACF;;;uCAEkB;AACjB,aAAO,KAAK7K,KAAL,CAAW8K,MAAX,CAAkB,UAASjB,IAAT,EAAe;AACtC,eAAOA,IAAI,CAACzC,OAAZ;AACD,OAFM,CAAP;AAGD;;;uCAEkBlC,M,EAAQ;AACzB,aAAO,KAAKnF,kBAAL,CAAwB+K,MAAxB,CAA+B,UAASC,OAAT,EAAkB;AACtD,YAAI,CAACA,OAAO,CAAClB,IAAT,IAAiB,CAACkB,OAAO,CAAClB,IAAR,CAAazC,OAAnC,EAA4C;AAC1C,iBAAO,KAAP;AACD,SAHqD,CAItD;;;AACA,eAAO,CAAC2D,OAAO,CAACC,KAAR,CAAcZ,MAAd,KAAyB,CAAzB,IAA8BW,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsB/F,MAAM,CAACgG,IAA7B,IAAqC,CAAC,CAArE,MACJH,OAAO,CAACI,UAAR,CAAmBf,MAAnB,KAA8B,CAA9B,IAAmCW,OAAO,CAACI,UAAR,CAAmBF,OAAnB,CAA2B/F,MAAM,CAAC+C,QAAlC,IAA8C,CAAC,CAD9E,CAAP;AAED,OAPM,EAOJmD,GAPI,CAOA,UAASL,OAAT,EAAkB;AACvB,eAAOA,OAAO,CAAClB,IAAf;AACD,OATM,CAAP;AAUD;;;gCAEW;AACV,aAAO,CAAC,EAAE,KAAK7J,KAAL,IAAc,KAAKoI,gBAAL,GAAwBgC,MAAxB,GAAiC,CAAjD,CAAR;AACD;;;mCAEc;AACb,WAAK/F,UAAL,CAAgBO,WAAhB,CAA4B,WAA5B,EAAyC,KAAK4D,SAAL,MAAoB,KAAKvI,YAAlE;;AACA,WAAKuF,kBAAL;AACD;;;mCAEc;AACb,WAAKqF,YAAL;AACD;;;gDAE2B;AAC1B,WAAKA,YAAL;AACD;;;oCAEe5K,Y,EAAc;AAC5B,WAAKkE,WAAL,CAAiB,cAAjB,EAAiClE,YAAjC;AACD;AAED;AACF;AACA;;;;qCACmBA,Y,EAAc;AAC7B,WAAK+E,YAAL,CAAkB,cAAlB,EAAkC/E,YAAlC;AACD;;;0CAEqB;AACpB,WAAK4K,YAAL;AACD;;;mCAEctL,U,EAAY;AACzB,WAAKwK,gBAAL,CAAsBxK,UAAtB,EAAkC,KAAKA,UAAvC;;AACA,WAAKyF,YAAL,CAAkB,YAAlB,EAAgCzF,UAAhC;AACD;AAED;AACF;AACA;;;;sCACoB;AAChB;AACA,aAAO8L,SAAP;AACD;;;yCAEoB;AACnB,UAAI,KAAK/D,WAAT,EAAsB;AACpB,aAAKA,WAAL,CAAiBgE,WAAjB;AACD;AACF;;;uCAEkB;AACjB,UAAItL,KAAK,GAAG,KAAKoI,gBAAL,EAAZ;;AACA,UAAIpI,KAAK,CAACoK,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACA;AACD,OALgB,CAOjB;;;AACA,WAAKmB,kBAAL;;AAEA,WAAKC,YAAL,GAAoBrN,KAAK,CAAC4J,MAAN,CAAa,kBAAb,EAAiC;AACnDxB,QAAAA,MAAM,EAAE,IAD2C;AAEnDkF,QAAAA,OAAO,EAAE,KAAKxK,OAFqC;AAGnDyK,QAAAA,SAAS,EAAE1L,KAHwC;AAInD2L,QAAAA,cAAc,EAAE,KAJmC;AAKnDC,QAAAA,sBAAsB,EAAE;AAL2B,OAAjC,CAApB;AAOA,WAAKJ,YAAL,CAAkBK,IAAlB;AACD;;;uCAEkB;AACjB,UAAI,KAAKL,YAAT,EAAuB;AACrB,aAAKA,YAAL,CAAkBM,KAAlB;AACA,aAAKN,YAAL,GAAoB,IAApB;AACD;AACF;;;iDAE4B;AAC3B,WAAKnH,UAAL,CAAgBO,WAAhB,CAA4B,uBAA5B,EAAqD,CAAC,CAAC,KAAK1E,mBAA5D;AACD;AAED;AACF;AACA;AACA;AACA;;;;4BACU;AACN,UAAI,CAAC,KAAKoE,QAAV,EAAoB;AAClB,aAAKyH,OAAL,CAAaC,eAAb,CAA6BC,4BAA7B,CAA0D,KAAKC,KAAL,CAAW1K,IAAX,CAAgB,IAAhB,CAA1D;AACA,eAAO,KAAP;AACD;;AAED,UAAI,CAAC,KAAKqH,eAAV,EAA2B;AACzB,eAAO,KAAP;AACD;;AAED,UAAIsD,gBAAgB,GAAG,KAAKC,mBAAL,EAAvB;;AACA,UAAID,gBAAJ,EAAsB;AACpB,eAAO,KAAKJ,OAAL,CAAaM,YAAb,CAA0BC,YAA1B,CAAuCH,gBAAvC,CAAP;AACD;;AACD,aAAO,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;0CACwB;AACpB,UAAI,KAAK7H,QAAL,IAAiB,KAAKxD,MAA1B,EAAkC;AAChC,eAAO,KAAKA,MAAL,CAAY,CAAZ,CAAP;AACD;;AACD,aAAO,IAAP;AACD;;;kCAEa8J,K,EAAO;AACnB,WAAK2B,UAAL,CAAgB,IAAhB;AACD;;;mCAEc;AACb,WAAKA,UAAL,CAAgB,KAAhB;AACD;AAED;AACF;AACA;AACA;;;;+BACa;AACT,UAAI,CAAC,KAAK1D,eAAN,IAAyB,CAAC,KAAKvE,QAAnC,EAA6C;AAC3C;AACD,OAHQ,CAIT;;;AACA,UAAI6H,gBAAgB,GAAG,KAAKC,mBAAL,EAAvB;;AACA,UAAID,gBAAJ,EAAsB;AACpB1N,QAAAA,CAAC,CAACsG,MAAF,CAASoH,gBAAT,EAA2BD,KAA3B;AACD;AACF;AAED;AACF;AACA;;;;qCACmB;AACf,aAAO,KAAKpL,MAAZ;AACD;;;wCAEmB;AAClB,UAAIyF,MAAM,GAAG,KAAKA,MAAlB;;AACA,aAAOA,MAAM,IAAI,EAAEA,MAAM,YAAYzI,QAApB,CAAjB,EAAgD;AAC9CyI,QAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACD;;AACD,aAAOA,MAAP;AACD;;;qCAEgB;AACf,aAAO,KAAKA,MAAZ;AACD;AAED;AACF;AACA;;;;+BACa;AACT,WAAK1F,MAAL,GAAc,KAAKwD,UAAL,CAAgBmI,aAAhB,CAA8B,SAA9B,CAAd;AACAjO,MAAAA,QAAQ,CAACkO,kBAAT,CAA4B,KAAK5L,MAAjC,EAAyC;AACvC0F,QAAAA,MAAM,EAAE;AAD+B,OAAzC,EAFS,CAMT;AACA;;AACA,WAAK1F,MAAL,CAAYmJ,EAAZ,CAAe,OAAf,EAAwB,KAAK0C,aAAL,CAAmBlL,IAAnB,CAAwB,IAAxB,CAAxB;AACD;;;kCAEaoJ,K,EAAO;AACnB,UAAI,CAACvM,OAAO,CAACgI,OAAR,CAAgB,KAAK7G,KAArB,CAAL,EAAkC;AAChC;AACA;AACD;;AACD,WAAKmN,QAAL;AACD;;;mCAEc;AACb,UAAI,CAAC,KAAK9L,MAAV,EAAkB;AAChB;AACD;;AACDtC,MAAAA,QAAQ,CAAC6H,SAAT,CAAmB,KAAKvF,MAAxB;AACA,WAAKA,MAAL,CAAY+L,MAAZ;AACA,WAAK/L,MAAL,GAAc,IAAd;AACD;AAED;AACF;AACA;AACA;;;;mCACiB8D,Q,EAAU;AACvB,UAAI,CAAC,KAAK9D,MAAN,IAAgB,CAAC8D,QAArB,EAA+B;AAC7B;AACD;;AAEDhH,MAAAA,MAAM,CAACkP,oBAAP,CAA4BlI,QAA5B,EAAsC,KAAK9D,MAA3C;AACD;;;kCAEa;AACZ,UAAI,CAAC,KAAKG,KAAV,EAAiB;AACf;AACD;;AACD,WAAKA,KAAL,CAAW4L,MAAX;AACA,WAAK5L,KAAL,GAAa,IAAb;AACD;AAED;AACF;AACA;AACA;;;;6BACWF,M,EAAQ;AACf,UAAI,CAAC,KAAKC,eAAV,EAA2B;AACzB,aAAK+L,iBAAL,CAAuBhM,MAAvB;AACD;;AACD,WAAKA,MAAL,GAAcA,MAAd;;AACA,WAAKiM,cAAL,CAAoBjM,MAApB;;AACA,WAAKA,MAAL,CAAYkJ,EAAZ,CAAe,MAAf,EAAuB,KAAKgD,YAAL,CAAkBxL,IAAlB,CAAuB,IAAvB,CAAvB,EACGwI,EADH,CACM,OADN,EACe,KAAKiD,aAAL,CAAmBzL,IAAnB,CAAwB,IAAxB,CADf;AAED;AAED;AACF;AACA;;;;sCACoBT,e,EAAiB;AACjC,WAAKA,eAAL,GAAuBA,eAAe,CACnC4E,QADoB,CACX,OADW,CAAvB,CADiC,CAIjC;AACA;;AACA,UAAI,KAAKtB,UAAL,CAAgB6I,GAAhB,CAAoBnM,eAApB,EAAqCqJ,MAArC,KAAgD,CAAhD,IAAqDrJ,eAAe,CAACoM,IAAhB,GAAuB/C,MAAvB,GAAgC,CAAzF,EAA4F;AAC1FrJ,QAAAA,eAAe,CAACqM,QAAhB,CAAyB,KAAK/I,UAA9B;AACD;AACF;AAED;AACF;AACA;;;;mCACiB;AACb,UAAI,KAAKvD,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAY8L,MAAZ;AACA,aAAK9L,MAAL,GAAc,IAAd;AACD;;AACD,UAAI,KAAKC,eAAT,EAA0B;AACxB,aAAKA,eAAL,CAAqB6L,MAArB;AACA,aAAK7L,eAAL,GAAuB,IAAvB;AACD;AACF;AAED;AACF;AACA;;;;gCACc;AACV,UAAI,KAAKuG,WAAT,EAAsB;AACpB;AACD;;AACD,WAAKA,WAAL,GAAmBnJ,KAAK,CAAC4J,MAAN,CAAa,aAAb,EAA4B;AAC7CxB,QAAAA,MAAM,EAAE,IADqC;AAE7CoC,QAAAA,QAAQ,EAAE,KAAKvI,cAF8B;AAG7C;AACAgH,QAAAA,OAAO,EAAE,KAAKI,qBAAL;AAJoC,OAA5B,CAAnB;AAMA,WAAKF,WAAL,CAAiB+F,MAAjB;AACA,WAAKpM,OAAL,GAAe,KAAKqG,WAAL,CAAiBjD,UAAhC;;AACA,WAAKmB,kBAAL;AACD;;;oCAEe;AACd,UAAI,CAAC,KAAK8B,WAAV,EAAuB;AACrB;AACD;;AACD,WAAKA,WAAL,CAAiBsF,MAAjB;AACA,WAAK3L,OAAL,GAAe,IAAf;AACA,WAAKqG,WAAL,GAAmB,IAAnB;AACD;AAED;AACF;AACA;AACA;AACA;;;;sCACoB;AAChB,WAAKgG,aAAL,GAAqB,KAAKjJ,UAAL,CAAgBkJ,UAAhB,CAA2B,QAA3B,CAArB;AACD;;;4CAEuB;AACtB,WAAKtE,UAAL,GAAkB,KAAK5E,UAAL,CAAgBkJ,UAAhB,CAA2B,qBAA3B,CAAlB;AACD;;;+CAE0B;AACzB,UAAI,CAAC,KAAKtE,UAAV,EAAsB;AACpB;AACD;;AACD,WAAKA,UAAL,CAAgB2D,MAAhB;AACA,WAAK3D,UAAL,GAAkB,IAAlB;AACD;AAED;AACF;AACA;AACA;AACA;;;;4BACUuE,O,EAAS;AACf,UAAI,CAACA,OAAL,EAAc;AACZA,QAAAA,OAAO,GAAG,KAAKnJ,UAAf;AACD;;AACD,WAAKrD,KAAL,GAAarD,MAAM,CAAC8P,UAAP,CAAkBD,OAAlB,EACVxD,EADU,CACP,WADO,EACM,KAAK0D,gBAAL,CAAsBlM,IAAtB,CAA2B,IAA3B,CADN,CAAb;AAED;;;qCAEgBoJ,K,EAAO;AACtB,UAAI,CAAC,KAAK/B,eAAV,EAA2B;AACzB;AACD;;AACD,WAAK/H,MAAL,CAAYoL,KAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iCACesB,O,EAASlI,Q,EAAUqI,M,EAAQ;AACtC,WAAKtJ,UAAL,GAAkBmJ,OAAO,CAACI,SAAR,CAAkB,YAAlB,CAAlB;;AACA,UAAItI,QAAJ,EAAc;AACZ,aAAKjB,UAAL,CAAgBsB,QAAhB,CAAyBL,QAAzB;AACD;;AACD,UAAId,QAAQ,GAAGzG,aAAa,CAACmI,OAAd,CAAsB,KAAK7B,UAA3B,EAAuC,KAAK0H,OAA5C,CAAf;AACAvH,MAAAA,QAAQ,CAACqJ,SAAT,CAAmBF,MAAM,IAAI,KAAKG,aAAL,EAA7B;AACA,WAAKtJ,QAAL,GAAgBA,QAAhB;AACD;AAED;AACF;AACA;;;;oCACkB;AACd,aAAO,IAAI5G,eAAJ,CAAoB,IAApB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;yCACuBmQ,I,EAAM;AACzBA,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,UAAIhN,eAAe,GAAGgN,IAAI,CAAChN,eAAL,IAAwB,KAAKA,eAAnD;;AAEA,WAAKiN,4BAAL,CAAkCD,IAAlC,EAAwChN,eAAxC;;AACA,UAAIA,eAAe,KAAK,KAAKsD,UAA7B,EAAyC;AACvC;AACA,aAAK2J,4BAAL,CAAkCD,IAAlC,EAAwC,KAAK1J,UAA7C;AACD;AACF;;;iDAE4B0J,I,EAAMjN,M,EAAQ;AACzCiN,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,UAAIE,sBAAsB,GAAG9P,KAAK,CAAC+I,GAAN,CAAU6G,IAAI,CAACE,sBAAf,EAAuC,IAAvC,CAA7B;AACA,UAAIC,oBAAoB,GAAG/P,KAAK,CAAC+I,GAAN,CAAU6G,IAAI,CAACG,oBAAf,EAAqC,IAArC,CAA3B;;AAEA,UAAI,CAACpN,MAAL,EAAa;AACX;AACD;;AAEDA,MAAAA,MAAM,CAAC2E,WAAP,CAAmB,mGAAnB;;AACA,UAAIwI,sBAAsB,IAAIC,oBAA9B,EAAoD;AAClD;AACApN,QAAAA,MAAM,CAAC6E,QAAP,CAAgB,qBAAhB;AACA,YAAIzG,QAAQ,GAAG,KAAKA,QAApB;;AACA,YAAI,KAAKqH,MAAL,CAAY4H,WAAhB,EAA6B;AAC3B;AACAjP,UAAAA,QAAQ,GAAG,KAAKC,aAAhB;AACD;;AACD,YAAI8O,sBAAJ,EAA4B;AAC1B,cAAIG,MAAM,GAAGlP,QAAQ,CAACmP,mBAAtB;AACAvN,UAAAA,MAAM,CAAC6E,QAAP,CAAgByI,MAAM,GAAG,CAAT,GAAa,aAAb,GAA8BA,MAAM,GAAG,CAAT,GAAa,cAAb,GAA8B,eAA5E;AACD;;AACD,YAAIF,oBAAJ,EAA0B;AACxB,cAAII,MAAM,GAAGpP,QAAQ,CAACqP,iBAAtB;AACAzN,UAAAA,MAAM,CAAC6E,QAAP,CAAgB2I,MAAM,GAAG,CAAT,GAAa,YAAb,GAA6BA,MAAM,GAAG,CAAT,GAAa,eAAb,GAA+B,eAA5E;AACD,SAfiD,CAgBlD;;;AACA,aAAKE,gBAAL;AACD;AACF;;;iDAE4B1N,M,EAAQiN,I,EAAM;AACzCjN,MAAAA,MAAM,CACH6E,QADH,CACY,mBADZ,EAEGA,QAFH,CAEYnI,MAAM,CAACiR,GAAP,GAAaC,eAAb,EAFZ;;AAGA,UAAIX,IAAI,CAACzI,QAAT,EAAmB;AACjBxE,QAAAA,MAAM,CAAC6E,QAAP,CAAgBoI,IAAI,CAACzI,QAArB;AACD;AACF;;;uCAEkByI,I,EAAM;AACvBA,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf,CADuB,CAGvB;;AACA,UAAI,KAAK9E,UAAT,EAAqB;AACnB,aAAKjF,wBAAL;AACD;;AACD,UAAI,KAAK/C,OAAT,EAAkB;AAChB,aAAKA,OAAL,CAAa2L,MAAb;AACA,aAAK3L,OAAL,GAAe,IAAf;AACD;;AACD,UAAI,KAAKoD,UAAT,EAAqB;AACnB,aAAKA,UAAL,CAAgBsB,QAAhB,CAAyB,wBAAzB;AACD;;AACD,UAAI,KAAK7E,MAAT,EAAiB;AACf,aAAK6N,4BAAL,CAAkC,KAAK7N,MAAvC,EAA+CiN,IAA/C;AACD;AACF;;;sCAEiB;AAChB,WAAKhF,eAAL;AACD;;;sCAEiB;AAChB,UAAI,KAAKpK,QAAL,IAAiB,KAAKkK,eAA1B,EAA2C;AACzC,aAAK+F,0BAAL;AACD,OAFD,MAEO;AACL,aAAK1K,4BAAL;AACD;AACF;;;gDAE2B;AAC1B,aAAOzG,WAAW,CAACoR,OAAZ,CAAoB,IAApB,EAA0B;AAC/BC,QAAAA,mBAAmB,EAAErR,WAAW,CAACsR,WAAZ,CAAwBC,aADd;AAE/BrQ,QAAAA,QAAQ,EAAE,YAAW;AACnB,iBAAO,KAAKA,QAAZ;AACD,SAFS,CAER6C,IAFQ,CAEH,IAFG,CAFqB;AAK/B5C,QAAAA,eAAe,EAAE,YAAW;AAC1B,iBAAO,KAAKA,eAAZ;AACD,SAFgB,CAEf4C,IAFe,CAEV,IAFU;AALc,OAA1B,CAAP;AASD;;;+CAE0BoJ,K,EAAO;AAChC,UAAI,KAAKqE,kBAAT,EAA6B;AAC3B;AACD;;AACD,WAAKA,kBAAL,GAA0B,KAAKC,yBAAL,EAA1B;AACA,WAAKD,kBAAL,CAAwB/I,OAAxB,CAAgC,KAAKpF,MAArC;AACD;;;iDAE4B8J,K,EAAO;AAClC,UAAI,CAAC,KAAKqE,kBAAV,EAA8B;AAC5B;AACD;;AACD,WAAKA,kBAAL,CAAwB7I,SAAxB;AACA,WAAK6I,kBAAL,GAA0B,IAA1B;AACD;;;iDAE4B;AAC3B,UAAI,KAAK/N,mBAAL,IAA4B,CAAC1D,MAAM,CAACiR,GAAP,GAAaU,mCAAb,EAAjC,EAAqF;AACnF,YAAI,KAAKtG,eAAT,EAA0B;AACxB,eAAK5E,0BAAL;AACD,SAFD,MAEO;AACL,eAAKmL,0BAAL;;AACA,eAAKC,gBAAL,GAFK,CAEoB;AAC1B;AACF;AACF;;;iDAE4B;AAC3B,UAAI,CAAC,KAAKlO,oBAAV,EAAgC;AAC9B,aAAKA,oBAAL,GAA4B,KAAKkD,UAAL,CACzBuJ,SADyB,CACf,kBADe,EAEzB5D,EAFyB,CAEtB,aAFsB,EAEP,KAAKsF,sBAAL,CAA4B9N,IAA5B,CAAiC,IAAjC,CAFO,CAA5B;AAGD;AACF;;;iDAE4B;AAC3B,UAAI,KAAKL,oBAAT,EAA+B;AAC7B,aAAKA,oBAAL,CAA0ByL,MAA1B;AACA,aAAKzL,oBAAL,GAA4B,IAA5B;AACD;AACF;;;2CAEsByJ,K,EAAO;AAC5B,UAAI,CAAC,KAAKxD,OAAN,IAAiB/I,OAAO,CAACS,KAAR,CAAc,KAAKyQ,WAAnB,CAArB,EAAsD;AACpD;AACD;;AAED,UAAI1F,IAAI,GAAG1L,KAAK,CAAC4J,MAAN,CAAa,MAAb,EAAqB;AAC9BxB,QAAAA,MAAM,EAAE,IADsB;AAE9BC,QAAAA,IAAI,EAAE,KAAKuF,OAAL,CAAavF,IAAb,CAAkB,SAAlB,CAFwB;AAG9BgJ,QAAAA,oBAAoB,EAAE;AAHQ,OAArB,CAAX;AAKA3F,MAAAA,IAAI,CAACG,EAAL,CAAQ,QAAR,EAAkB,UAASY,KAAT,EAAgB;AAChC,aAAK6E,iBAAL;AACD,OAFiB,CAEhBjO,IAFgB,CAEX,IAFW,CAAlB;AAIA,UAAIkO,KAAK,GAAGvR,KAAK,CAAC4J,MAAN,CAAa,kBAAb,EAAiC;AAC3CxB,QAAAA,MAAM,EAAE,IADmC;AAE3CmF,QAAAA,SAAS,EAAE,CAAC7B,IAAD,CAFgC;AAG3C8B,QAAAA,cAAc,EAAE,KAH2B;AAI3CgE,QAAAA,QAAQ,EAAE;AACRC,UAAAA,CAAC,EAAEhF,KAAK,CAACiF,KADD;AAERC,UAAAA,CAAC,EAAElF,KAAK,CAACmF;AAFD;AAJiC,OAAjC,CAAZ;AASAL,MAAAA,KAAK,CAAC7D,IAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;;gCACcmE,O,EAAS;AACnB,aAAOA,OAAO,CAAC,IAAD,CAAd;AACD;AAED;AACF;AACA;;;;iCACeA,O,EAAS;AACpB,UAAIC,SAAS,GAAG,KAAK1J,MAArB;;AACA,aAAO0J,SAAS,YAAYvR,SAA5B,EAAuC;AACrCsR,QAAAA,OAAO,CAACC,SAAD,CAAP;AACAA,QAAAA,SAAS,GAAGA,SAAS,CAAC1J,MAAtB;AACD;AACF;;;kCAEa;AACZ,WAAKpC,WAAL,CAAiB,SAAjB,EAA4B,KAA5B;AACA,WAAK+L,kBAAL;AACD;;;4BAEO;AACN,WAAK/L,WAAL,CAAiB,SAAjB,EAA4B,IAA5B;AACA,WAAK+L,kBAAL;AACD;AAED;AACF;AACA;;;;yCACuB;AACnB,UAAI,CAAC,KAAKC,WAAV,EAAuB;AACrB;AACD;;AACD,WAAKhQ,YAAL,GAAoB,KAAKK,OAAL,IAAgB,KAAK4P,mBAAL,EAApC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;0CACwB;AACpB,aAAO,KAAP;AACD;AAED;AACF;AACA;;;;0CACwB;AACpB,UAAIC,kBAAkB,GAAG,CAAC,KAAKlL,YAAL,EAA1B;AACA,UAAImL,gBAAgB,GAAG,CAAC,KAAKxQ,SAAN,IAAmB,CAAC,KAAKhB,KAAhD;AACA,UAAIyR,KAAK,GAAGF,kBAAkB,IAAIC,gBAAlC;AACA,aAAO;AACLC,QAAAA,KAAK,EAAEA,KADF;AAELF,QAAAA,kBAAkB,EAAEA,kBAFf;AAGLC,QAAAA,gBAAgB,EAAEA;AAHb,OAAP;AAKD;;;mCAEc,CACb;AACD;;;mCAEc;AACb,UAAI,KAAKzH,eAAL,IAAwB,KAAKvE,QAAjC,EAA2C;AACzC,aAAK4H,KAAL;AACD;AACF;;;0BAEKxK,K,EAAO8O,O,EAAS;AACpB,UAAIC,KAAK,wEAAe/O,KAAf,EAAsB8O,OAAtB,CAAT;;AACA,WAAKE,oBAAL,CAA0BD,KAA1B,EAAiC,OAAjC,EAA0CD,OAA1C;;AACA,aAAOC,KAAP;AACD;;;wCAEmB;AAClB,UAAI,CAAC,KAAKlB,WAAV,EAAuB;AACrB;AACD;;AACD,UAAI3E,KAAK,GAAG,IAAIlN,KAAJ,CAAU;AACpB8I,QAAAA,IAAI,EAAE,KAAK+I;AADS,OAAV,CAAZ;AAGA,WAAKoB,OAAL,CAAa,iBAAb,EAAgC/F,KAAhC;;AACA,UAAI,CAACA,KAAK,CAACgG,gBAAX,EAA6B;AAC3B,aAAKC,kBAAL,CAAwBjG,KAAK,CAACpE,IAA9B;AACD;AACF;;;uCAEkBA,I,EAAM;AACvBjJ,MAAAA,SAAS,CAACuT,QAAV,CAAmB;AACjBvK,QAAAA,MAAM,EAAE,IADS;AAEjBC,QAAAA,IAAI,EAAEA;AAFW,OAAnB;AAID;;;;EAp0CoChI,M;;gBAAlBE,S,gBAkEC;AAClBqS,EAAAA,OAAO,EAAE,SADS;AAElBjM,EAAAA,WAAW,EAAE;AAFK,C;;gBAlEDpG,S,yBAwEUA,SAAS,CAACmG,UAAV,CAAqBC,W;;gBAxE/BpG,S,oBA0EK;AACtBY,EAAAA,OAAO,EAAE,SADa;AAEtBuH,EAAAA,GAAG,EAAE;AAFiB,C;;gBA1ELnI,S,mBA+EI;AACrBY,EAAAA,OAAO,EAAE,CADY;AAErB0R,EAAAA,IAAI,EAAE,CAFe;AAGrB1K,EAAAA,QAAQ,EAAE,CAHW;AAIrB2K,EAAAA,KAAK,EAAE,CAJc;AAKrBpK,EAAAA,GAAG,EAAE;AALgB,C;;gBA/EJnI,S,mBAuFI;AACrBY,EAAAA,OAAO,EAAE,SADY;AAErBgH,EAAAA,QAAQ,EAAE;AAFW,C;;gBAvFJ5H,S,gBA4FC;AAClBY,EAAAA,OAAO,EAAE,CADS;AAElB0H,EAAAA,EAAE,EAAE,CAAC;AAFa,C;;gBA5FDtI,S,gBAkGC,C;;gBAlGDA,S,UAoGL;AACZY,EAAAA,OAAO,EAAE,SADG;AAEZsI,EAAAA,UAAU,EAAE;AAFA,C;;gBApGKlJ,S,0BAyGW,uC;;SAzGXA,S","sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {\n  arrays,\n  clipboard,\n  Device,\n  dragAndDrop,\n  Event,\n  fields,\n  FormFieldLayout,\n  GridData,\n  GroupBox,\n  HtmlComponent,\n  KeyStrokeContext,\n  LoadingSupport,\n  objects,\n  scout,\n  Status,\n  strings,\n  styles,\n  tooltips,\n  Widget\n} from '../../index';\nimport $ from 'jquery';\n\n/**\n * Abstract class for all form-fields.\n * @abstract\n */\nexport default class FormField extends Widget {\n  constructor() {\n    super();\n\n    this.dropType = 0;\n    this.dropMaximumSize = dragAndDrop.DEFAULT_DROP_MAXIMUM_SIZE;\n    this.empty = true;\n    this.errorStatus = null;\n    this.fieldStyle = FormField.DEFAULT_FIELD_STYLE;\n    this.gridData = null;\n    this.gridDataHints = new GridData();\n    this.mode = FormField.Mode.DEFAULT;\n    this.keyStrokes = [];\n    this.label = null;\n    this.labelVisible = true;\n    this.labelPosition = FormField.LabelPosition.DEFAULT;\n    this.labelWidthInPixel = 0;\n    this.labelHtmlEnabled = false;\n    this.mandatory = false;\n    this.statusMenuMappings = [];\n    this.menus = [];\n    this.menusVisible = true;\n    this.preventInitialFocus = false;\n    this.requiresSave = false;\n    this.statusPosition = FormField.StatusPosition.DEFAULT;\n    this.statusVisible = true;\n    this.suppressStatus = false;\n    this.touched = false;\n    this.tooltipText = null;\n    this.tooltipAnchor = FormField.TooltipAnchor.DEFAULT;\n    this.onFieldTooltipOptionsCreator = null;\n\n    this.$label = null;\n    /**\n     * Note the difference between $field and $fieldContainer:\n     * - $field points to the input-field (typically a browser-text field)\n     * - $fieldContainer could point to the same input-field or when the field is a composite,\n     *   to the parent DIV of that composite. For instance: the multi-line-smartfield is a\n     *   composite with a input-field and a DIV showing the additional lines. In that case $field\n     *   points to the input-field and $fieldContainer to the parent DIV of the input-field.\n     *   This property should be used primarily for layout-functionality.\n     */\n    this.$field = null;\n    this.$fieldContainer = null;\n    this.$icon = null;\n    /**\n     * The status is used for error-status, tooltip-icon and menus.\n     */\n    this.$status = null;\n\n    /**\n     * Some browsers don't support copying text from disabled input fields. If such a browser is detected\n     * and this flag is true (default is false), an overlay DIV is rendered over disabled fields which\n     * provides a custom copy context menu that opens the ClipboardForm.\n     */\n    this.disabledCopyOverlay = false;\n    this.$disabledCopyOverlay = null;\n\n    this._addWidgetProperties(['keyStrokes', 'menus', 'statusMenuMappings']);\n    this._addCloneProperties(['dropType', 'dropMaximumSize', 'errorStatus', 'fieldStyle', 'gridDataHints', 'gridData', 'label', 'labelVisible', 'labelPosition',\n      'labelWidthInPixel', 'mandatory', 'mode', 'preventInitialFocus', 'requiresSave', 'touched', 'statusVisible', 'statusPosition', 'statusMenuMappings',\n      'tooltipText', 'tooltipAnchor']);\n\n    this._menuPropertyChangeHandler = this._onMenuPropertyChange.bind(this);\n  }\n\n  static FieldStyle = {\n    CLASSIC: 'classic',\n    ALTERNATIVE: 'alternative'\n  };\n\n  /** Global variable to make it easier to adjust the default field style for all fields */\n  static DEFAULT_FIELD_STYLE = FormField.FieldStyle.ALTERNATIVE;\n\n  static StatusPosition = {\n    DEFAULT: 'default',\n    TOP: 'top'\n  };\n\n  static LabelPosition = {\n    DEFAULT: 0,\n    LEFT: 1,\n    ON_FIELD: 2,\n    RIGHT: 3,\n    TOP: 4\n  };\n\n  static TooltipAnchor = {\n    DEFAULT: 'default',\n    ON_FIELD: 'onField'\n  };\n\n  static LabelWidth = {\n    DEFAULT: 0,\n    UI: -1\n  };\n\n  // see org.eclipse.scout.rt.client.ui.form.fields.IFormField.FULL_WIDTH\n  static FULL_WIDTH = 0;\n\n  static Mode = {\n    DEFAULT: 'default',\n    CELLEDITOR: 'celleditor'\n  };\n\n  static SEVERITY_CSS_CLASSES = 'has-error has-warning has-info has-ok';\n\n  /**\n   * @override\n   * @returns {KeyStrokeContext}\n   */\n  _createKeyStrokeContext() {\n    return new KeyStrokeContext();\n  }\n\n  /**\n   * @override\n   */\n  _createLoadingSupport() {\n    return new LoadingSupport({\n      widget: this\n    });\n  }\n\n  _init(model) {\n    super._init(model);\n    this.resolveConsts([{\n      property: 'labelPosition',\n      constType: FormField.LabelPosition\n    }]);\n    this.resolveTextKeys(['label', 'tooltipText']);\n    this._setKeyStrokes(this.keyStrokes);\n    this._setMenus(this.menus);\n    this._setErrorStatus(this.errorStatus);\n    this._setGridDataHints(this.gridDataHints);\n    this._setGridData(this.gridData);\n    this._updateEmpty();\n  }\n\n  _initProperty(propertyName, value) {\n    if ('gridDataHints' === propertyName) {\n      this._initGridDataHints(value);\n    } else {\n      super._initProperty(propertyName, value);\n    }\n  }\n\n  /**\n   * This function <strong>extends</strong> the default grid data hints of the form field.\n   * The default values for grid data hints are set in the constructor of the FormField and its subclasses.\n   * When the given gridDataHints is a plain object, we extend our default values. When gridDataHints is\n   * already instanceof GridData we overwrite default values completely.\n   * @param gridDataHints\n   * @private\n   */\n  _initGridDataHints(gridDataHints) {\n    if (gridDataHints instanceof GridData) {\n      this.gridDataHints = gridDataHints;\n    } else if (objects.isPlainObject(gridDataHints)) {\n      $.extend(this.gridDataHints, gridDataHints);\n    } else {\n      this.gridDataHints = gridDataHints;\n    }\n  }\n\n  /**\n   * All sub-classes of FormField must implement a _render method. The default implementation\n   * will throw an Error when _render is called. The _render method should call the various add*\n   * methods provided by the FormField class. A possible _render implementation could look like this.\n   *\n   * <pre>\n   * this.addContainer(this.$parent, 'form-field');\n   * this.addLabel();\n   * this.addField(this.$parent.makeDiv('foo', 'bar'));\n   * this.addMandatoryIndicator();\n   * this.addStatus();\n   * </pre>\n   */\n  _render() {\n    throw new Error('sub-classes of FormField must implement a _render method');\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderMandatory();\n    this._renderTooltipText();\n    this._renderErrorStatus();\n    this._renderMenus();\n    this._renderLabel();\n    this._renderLabelVisible();\n    this._renderStatusVisible();\n    this._renderStatusPosition();\n    this._renderFont();\n    this._renderForegroundColor();\n    this._renderBackgroundColor();\n    this._renderLabelFont();\n    this._renderLabelForegroundColor();\n    this._renderLabelBackgroundColor();\n    this._renderGridData();\n    this._renderPreventInitialFocus();\n    this._renderFieldStyle();\n  }\n\n  _remove() {\n    super._remove();\n    this._removeField();\n    this._removeStatus();\n    this._removeLabel();\n    this._removeIcon();\n    this.removeMandatoryIndicator();\n    this._removeDisabledCopyOverlay();\n    this._uninstallDragAndDropHandler();\n  }\n\n  setFieldStyle(fieldStyle) {\n    this.setProperty('fieldStyle', fieldStyle);\n  }\n\n  _renderFieldStyle() {\n    this._renderFieldStyleInternal(this.$container);\n    this._renderFieldStyleInternal(this.$fieldContainer);\n    this._renderFieldStyleInternal(this.$field);\n    if (this.rendered) {\n      // See _renderLabelPosition why it is necessary to invalidate parent as well.\n      var htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) {\n        htmlCompParent.invalidateLayoutTree();\n      }\n      this.invalidateLayoutTree();\n    }\n  }\n\n  _renderFieldStyleInternal($element) {\n    if (!$element) {\n      return;\n    }\n    $element.toggleClass('alternative', this.fieldStyle === FormField.FieldStyle.ALTERNATIVE);\n  }\n\n  setMandatory(mandatory) {\n    this.setProperty('mandatory', mandatory);\n  }\n\n  _renderMandatory() {\n    this.$container.toggleClass('mandatory', this.mandatory);\n  }\n\n  /**\n   * Override this function to return another error status property.\n   * The default implementation returns the property 'errorStatus'.\n   *\n   * @return {Status}\n   */\n  _errorStatus() {\n    return this.errorStatus;\n  }\n\n  setErrorStatus(errorStatus) {\n    this.setProperty('errorStatus', errorStatus);\n  }\n\n  _setErrorStatus(errorStatus) {\n    errorStatus = Status.ensure(errorStatus);\n    this._setProperty('errorStatus', errorStatus);\n  }\n\n  clearErrorStatus() {\n    this.setErrorStatus(null);\n  }\n\n  _renderErrorStatus() {\n    var status = this._errorStatus(),\n      hasStatus = !!status,\n      statusClass = hasStatus ? 'has-' + status.cssClass() : '';\n\n    this._updateErrorStatusClasses(statusClass, hasStatus);\n    this._updateFieldStatus();\n  }\n\n  _updateErrorStatusClasses(statusClass, hasStatus) {\n    this.$container.removeClass(FormField.SEVERITY_CSS_CLASSES);\n    this.$container.addClass(statusClass, hasStatus);\n    if (this.$field) {\n      this.$field.removeClass(FormField.SEVERITY_CSS_CLASSES);\n      this.$field.addClass(statusClass, hasStatus);\n    }\n  }\n\n  setTooltipText(tooltipText) {\n    this.setProperty('tooltipText', tooltipText);\n  }\n\n  _renderTooltipText() {\n    this._updateTooltip();\n  }\n\n  setTooltipAnchor(tooltipAnchor) {\n    this.setProperty('tooltipAnchor', tooltipAnchor);\n  }\n\n  _renderTooltipAnchor() {\n    this._updateTooltip();\n  }\n\n  _updateTooltip() {\n    var hasTooltipText = this.hasStatusTooltip();\n    this.$container.toggleClass('has-tooltip', hasTooltipText);\n    if (this.$field) {\n      this.$field.toggleClass('has-tooltip', hasTooltipText);\n    }\n    this._updateFieldStatus();\n\n    if (this.$fieldContainer) {\n      if (this.hasOnFieldTooltip()) {\n        var creatorFunc = this.onFieldTooltipOptionsCreator || this._createOnFieldTooltipOptions;\n        tooltips.install(this.$fieldContainer, creatorFunc.call(this));\n      } else {\n        tooltips.uninstall(this.$fieldContainer);\n      }\n    }\n  }\n\n  hasStatusTooltip() {\n    return this.tooltipAnchor === FormField.TooltipAnchor.DEFAULT &&\n      strings.hasText(this.tooltipText);\n  }\n\n  hasOnFieldTooltip() {\n    return this.tooltipAnchor === FormField.TooltipAnchor.ON_FIELD &&\n      strings.hasText(this.tooltipText);\n  }\n\n  setOnFieldTooltipOptionsCreator(onFieldTooltipOptionsCreator) {\n    this.onFieldTooltipOptionsCreator = onFieldTooltipOptionsCreator;\n  }\n\n  _createOnFieldTooltipOptions() {\n    return {\n      parent: this,\n      text: this.tooltipText,\n      arrowPosition: 50\n    };\n  }\n\n  /**\n   * @override\n   */\n  _renderVisible() {\n    super._renderVisible();\n    if (this.rendered) {\n      // Make sure error status is hidden / shown when visibility changes\n      this._renderErrorStatus();\n    }\n  }\n\n  setLabel(label) {\n    this.setProperty('label', label);\n  }\n\n  _renderLabel() {\n    var label = this.label;\n    if (this.labelPosition === FormField.LabelPosition.ON_FIELD) {\n      this._renderPlaceholder();\n      if (this.$label) {\n        this.$label.text('');\n      }\n    } else if (this.$label) {\n      this._removePlaceholder();\n      // Make sure an empty label has the same height as the other labels, especially important for top labels\n      this.$label\n        .contentOrNbsp(this.labelHtmlEnabled, label, 'empty')\n        .toggleClass('top', this.labelPosition === FormField.LabelPosition.TOP);\n\n      // Invalidate layout if label width depends on its content\n      if (this.labelUseUiWidth || this.labelWidthInPixel === FormField.LabelWidth.UI) {\n        this.invalidateLayoutTree();\n      }\n    }\n  }\n\n  /**\n   * Renders an empty label for button-like fields that don't have a regular label but which do want to support the 'labelVisible'\n   * property in order to provide some layout-flexibility. Makes sure the empty label has the same height as the other labels,\n   * which is especially important for top labels.\n   */\n  _renderEmptyLabel() {\n    this.$label\n      .html('&nbsp;')\n      .toggleClass('top', this.labelPosition === FormField.LabelPosition.TOP);\n  }\n\n  _renderPlaceholder($field) {\n    $field = scout.nvl($field, this.$field);\n    if ($field) {\n      $field.placeholder(this.label);\n    }\n  }\n\n  /**\n   * @param $field (optional) argument is required by DateField.js, when not set this.$field is used\n   */\n  _removePlaceholder($field) {\n    $field = scout.nvl($field, this.$field);\n    if ($field) {\n      $field.placeholder('');\n    }\n  }\n\n  setLabelVisible(visible) {\n    this.setProperty('labelVisible', visible);\n  }\n\n  _renderLabelVisible() {\n    var visible = this.labelVisible;\n    this._renderChildVisible(this.$label, visible);\n    this.$container.toggleClass('label-hidden', !visible);\n    if (this.rendered && this.labelPosition === FormField.LabelPosition.TOP) {\n      // See _renderLabelPosition why it is necessary to invalidate parent as well.\n      var htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) {\n        htmlCompParent.invalidateLayoutTree();\n      }\n    }\n  }\n\n  setLabelWidthInPixel(labelWidthInPixel) {\n    this.setProperty('labelWidthInPixel', labelWidthInPixel);\n  }\n\n  _renderLabelWidthInPixel() {\n    this.invalidateLayoutTree();\n  }\n\n  setStatusVisible(visible) {\n    this.setProperty('statusVisible', visible);\n  }\n\n  _renderStatusVisible() {\n    this._updateFieldStatus();\n  }\n\n  setStatusPosition(statusPosition) {\n    this.setProperty('statusPosition', statusPosition);\n  }\n\n  _renderStatusPosition(statusPosition) {\n    this._updateFieldStatus();\n  }\n\n  _tooltip() {\n    if (this.fieldStatus) {\n      return this.fieldStatus.tooltip;\n    }\n    return null;\n  }\n\n  _updateFieldStatus() {\n    if (!this.fieldStatus) {\n      return;\n    }\n    // compute status\n    var menus,\n      errorStatus = this._errorStatus(),\n      status = null,\n      statusVisible = this._computeStatusVisible(),\n      autoRemove = true;\n\n    this.fieldStatus.setPosition(this.statusPosition);\n    this.fieldStatus.setVisible(statusVisible);\n    if (!statusVisible) {\n      return;\n    }\n\n    if (errorStatus) {\n      // If the field is used as a cell editor in a editable table, then no validation errors should be shown.\n      // (parsing and validation will be handled by the cell/column itself)\n      if (this.mode === FormField.Mode.CELLEDITOR) {\n        return;\n      }\n      status = errorStatus;\n      autoRemove = !status.isError();\n      menus = this._getMenusForStatus(errorStatus);\n    } else if (this.hasStatusTooltip()) {\n      status = scout.create('Status', {\n        message: this.tooltipText,\n        severity: Status.Severity.OK\n      });\n      // If there are menus, show them in the tooltip. But only if there is a tooltipText, don't do it if there is an error status.\n      // Menus make most likely no sense if an error status is displayed\n      menus = this._getCurrentMenus();\n    } else {\n      // If there are menus, show them in the tooltip. But only if there is a tooltipText, don't do it if there is an error status.\n      // Menus make most likely no sense if an error status is displayed\n      menus = this._getCurrentMenus();\n    }\n\n    this.fieldStatus.update(status, menus, autoRemove, this._isInitialShowStatus());\n  }\n\n  _isInitialShowStatus() {\n    return !!this._errorStatus();\n  }\n\n  /**\n   * Computes whether the $status should be visible based on statusVisible, errorStatus and tooltip.\n   * -> errorStatus and tooltip override statusVisible, so $status may be visible event though statusVisible is set to false\n   */\n  _computeStatusVisible() {\n    var status = this._errorStatus(),\n      statusVisible = this.statusVisible,\n      hasStatus = !!status,\n      hasTooltip = this.hasStatusTooltip();\n\n    return !this.suppressStatus && this.visible && (statusVisible || hasStatus || hasTooltip || (this._hasMenus() && this.menusVisible));\n  }\n\n  _renderChildVisible($child, visible) {\n    if (!$child) {\n      return;\n    }\n    if ($child.isVisible() !== visible) {\n      $child.setVisible(visible);\n      this.invalidateLayoutTree();\n      return true;\n    }\n  }\n\n  setLabelPosition(labelPosition) {\n    this.setProperty('labelPosition', labelPosition);\n  }\n\n  // Don't include in renderProperties, it is not necessary to execute it initially because the positioning is done by _renderLabel\n  _renderLabelPosition(position) {\n    this._renderLabel();\n    if (this.rendered) {\n      // Necessary to invalidate parent as well if parent uses the logical grid.\n      // LogicalGridData uses another row height depending of the label position\n      var htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) {\n        htmlCompParent.invalidateLayoutTree();\n      }\n      this.invalidateLayoutTree();\n    }\n  }\n\n  setLabelHtmlEnabled(labelHtmlEnabled) {\n    this.setProperty('labelHtmlEnabled', labelHtmlEnabled);\n  }\n\n  _renderLabelHtmlEnabled() {\n    // Render the label again when html enabled changes dynamically\n    this._renderLabel();\n  }\n\n  /**\n   * @override\n   */\n  _renderEnabled() {\n    super._renderEnabled();\n    if (this.$field) {\n      this.$field.setEnabled(this.enabledComputed);\n    }\n    this._updateDisabledCopyOverlay();\n    this._updateDropType();\n  }\n\n  /**\n   * @override Wigdet.js\n   */\n  _renderDisabledStyle() {\n    this._renderDisabledStyleInternal(this.$container);\n    this._renderDisabledStyleInternal(this.$fieldContainer);\n    this._renderDisabledStyleInternal(this.$field);\n    this._renderDisabledStyleInternal(this.$mandatory);\n  }\n\n  setFont(font) {\n    this.setProperty('font', font);\n  }\n\n  _renderFont() {\n    styles.legacyFont(this, this.$field);\n  }\n\n  setForegroundColor(foregroundColor) {\n    this.setProperty('foregroundColor', foregroundColor);\n  }\n\n  _renderForegroundColor() {\n    styles.legacyForegroundColor(this, this.$field);\n  }\n\n  setBackgroundColor(backgroundColor) {\n    this.setProperty('backgroundColor', backgroundColor);\n  }\n\n  _renderBackgroundColor() {\n    styles.legacyBackgroundColor(this, this.$field);\n  }\n\n  setLabelFont(labelFont) {\n    this.setProperty('labelFont', labelFont);\n  }\n\n  _renderLabelFont() {\n    styles.legacyFont(this, this.$label, 'label');\n  }\n\n  setLabelForegroundColor(labelForegroundColor) {\n    this.setProperty('labelForegroundColor', labelForegroundColor);\n  }\n\n  _renderLabelForegroundColor() {\n    styles.legacyForegroundColor(this, this.$label, 'label');\n  }\n\n  setLabelBackgroundColor(labelBackgroundColor) {\n    this.setProperty('labelBackgroundColor', labelBackgroundColor);\n  }\n\n  _renderLabelBackgroundColor() {\n    styles.legacyBackgroundColor(this, this.$label, 'label');\n  }\n\n  setGridDataHints(gridData) {\n    this.setProperty('gridDataHints', gridData);\n  }\n\n  _setGridDataHints(gridData) {\n    if (!gridData) {\n      gridData = new GridData();\n    }\n    this._setProperty('gridDataHints', GridData.ensure(gridData));\n  }\n\n  _renderGridDataHints() {\n    this.parent.invalidateLogicalGrid();\n  }\n\n  _setGridData(gridData) {\n    if (!gridData) {\n      gridData = new GridData();\n    }\n    this._setProperty('gridData', GridData.ensure(gridData));\n  }\n\n  _renderGridData() {\n    if (this.rendered) {\n      var htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) { // may be null if $container is detached\n        htmlCompParent.invalidateLayoutTree();\n      }\n    }\n  }\n\n  setMenus(menus) {\n    this.setProperty('menus', menus);\n  }\n\n  _setMenus(menus) {\n    menus = arrays.ensure(menus);\n    this.menus.forEach(function(menu) {\n      menu.off('propertyChange', this._menuPropertyChangeHandler);\n    }, this);\n\n    this.updateKeyStrokes(menus, this.menus);\n    this._setProperty('menus', menus);\n\n    this.menus.forEach(function(menu) {\n      menu.on('propertyChange', this._menuPropertyChangeHandler);\n    }, this);\n  }\n\n  insertMenu(menuToInsert) {\n    this.insertMenus([menuToInsert]);\n  }\n\n  insertMenus(menusToInsert) {\n    menusToInsert = arrays.ensure(menusToInsert);\n    if (menusToInsert.length === 0) {\n      return;\n    }\n    this.setMenus(this.menus.concat(menusToInsert));\n  }\n\n  deleteMenu(menuToDelete) {\n    this.deleteMenus([menuToDelete]);\n  }\n\n  deleteMenus(menusToDelete) {\n    menusToDelete = arrays.ensure(menusToDelete);\n    if (menusToDelete.length === 0) {\n      return;\n    }\n    var menus = this.menus.slice();\n    arrays.removeAll(menus, menusToDelete);\n    this.setMenus(menus);\n  }\n\n  _onMenuPropertyChange(event) {\n    if (event.propertyName === 'visible' && this.rendered) {\n      this._updateMenus();\n    }\n  }\n\n  _getCurrentMenus() {\n    return this.menus.filter(function(menu) {\n      return menu.visible;\n    });\n  }\n\n  _getMenusForStatus(status) {\n    return this.statusMenuMappings.filter(function(mapping) {\n      if (!mapping.menu || !mapping.menu.visible) {\n        return false;\n      }\n      // Show the menus which are mapped to the status code and severity (if set)\n      return (mapping.codes.length === 0 || mapping.codes.indexOf(status.code) > -1) &&\n        (mapping.severities.length === 0 || mapping.severities.indexOf(status.severity) > -1);\n    }).map(function(mapping) {\n      return mapping.menu;\n    });\n  }\n\n  _hasMenus() {\n    return !!(this.menus && this._getCurrentMenus().length > 0);\n  }\n\n  _updateMenus() {\n    this.$container.toggleClass('has-menus', this._hasMenus() && this.menusVisible);\n    this._updateFieldStatus();\n  }\n\n  _renderMenus() {\n    this._updateMenus();\n  }\n\n  _renderStatusMenuMappings() {\n    this._updateMenus();\n  }\n\n  setMenusVisible(menusVisible) {\n    this.setProperty('menusVisible', menusVisible);\n  }\n\n  /**\n   * override by TabItem\n   **/\n  _setMenusVisible(menusVisible) {\n    this._setProperty('menusVisible', menusVisible);\n  }\n\n  _renderMenusVisible() {\n    this._updateMenus();\n  }\n\n  _setKeyStrokes(keyStrokes) {\n    this.updateKeyStrokes(keyStrokes, this.keyStrokes);\n    this._setProperty('keyStrokes', keyStrokes);\n  }\n\n  /**\n   * May be overridden to explicitly provide a tooltip $parent\n   */\n  _$tooltipParent() {\n    // Will be determined by the tooltip itself\n    return undefined;\n  }\n\n  _hideStatusMessage() {\n    if (this.fieldStatus) {\n      this.fieldStatus.hideTooltip();\n    }\n  }\n\n  _showContextMenu() {\n    var menus = this._getCurrentMenus();\n    if (menus.length === 0) {\n      // at least one menu item must be visible\n      return;\n    }\n\n    // Make sure tooltip is closed first\n    this._hideStatusMessage();\n\n    this.contextPopup = scout.create('ContextMenuPopup', {\n      parent: this,\n      $anchor: this.$status,\n      menuItems: menus,\n      cloneMenuItems: false,\n      closeOnAnchorMouseDown: false\n    });\n    this.contextPopup.open();\n  }\n\n  _hideContextMenu() {\n    if (this.contextPopup) {\n      this.contextPopup.close();\n      this.contextPopup = null;\n    }\n  }\n\n  _renderPreventInitialFocus() {\n    this.$container.toggleClass('prevent-initial-focus', !!this.preventInitialFocus);\n  }\n\n  /**\n   * Sets the focus on this field. If the field is not rendered, the focus will be set as soon as it is rendered.\n   *\n   * @override\n   */\n  focus() {\n    if (!this.rendered) {\n      this.session.layoutValidator.schedulePostValidateFunction(this.focus.bind(this));\n      return false;\n    }\n\n    if (!this.enabledComputed) {\n      return false;\n    }\n\n    var focusableElement = this.getFocusableElement();\n    if (focusableElement) {\n      return this.session.focusManager.requestFocus(focusableElement);\n    }\n    return false;\n  }\n\n  /**\n   * This method returns the HtmlElement to be used as initial focus element or when {@link #focus()} is called.\n   * It can be overridden, in case the FormField needs to return something other than this.$field[0].\n   *\n   * @override\n   */\n  getFocusableElement() {\n    if (this.rendered && this.$field) {\n      return this.$field[0];\n    }\n    return null;\n  }\n\n  _onFieldFocus(event) {\n    this.setFocused(true);\n  }\n\n  _onFieldBlur() {\n    this.setFocused(false);\n  }\n\n  /**\n   * When calling this function, the same should happen as when clicking into the field. It is used when the label is clicked.<br>\n   * The most basic action is focusing the field but this may differ from field to field.\n   */\n  activate() {\n    if (!this.enabledComputed || !this.rendered) {\n      return;\n    }\n    // Explicitly don't use this.focus() because this.focus uses the focus manager which may be disabled (e.g. on mobile devices)\n    var focusableElement = this.getFocusableElement();\n    if (focusableElement) {\n      $.ensure(focusableElement).focus();\n    }\n  }\n\n  /**\n   * @override\n   */\n  get$Scrollable() {\n    return this.$field;\n  }\n\n  getParentGroupBox() {\n    var parent = this.parent;\n    while (parent && !(parent instanceof GroupBox)) {\n      parent = parent.parent;\n    }\n    return parent;\n  }\n\n  getParentField() {\n    return this.parent;\n  }\n\n  /**\n   * Appends a LABEL element to this.$container and sets the this.$label property.\n   */\n  addLabel() {\n    this.$label = this.$container.appendElement('<label>');\n    tooltips.installForEllipsis(this.$label, {\n      parent: this\n    });\n\n    // Setting the focus programmatically does not work in a mousedown listener on mobile devices,\n    // that is why a click listener is used instead\n    this.$label.on('click', this._onLabelClick.bind(this));\n  }\n\n  _onLabelClick(event) {\n    if (!strings.hasText(this.label)) {\n      // Clicking on \"invisible\" labels should not have any effect since it is confusing\n      return;\n    }\n    this.activate();\n  }\n\n  _removeLabel() {\n    if (!this.$label) {\n      return;\n    }\n    tooltips.uninstall(this.$label);\n    this.$label.remove();\n    this.$label = null;\n  }\n\n  /**\n   * Links the given element with the label by setting aria-labelledby.<br>\n   * This allows screen readers to build a catalog of the elements on the screen and their relationships, for example, to read the label when the input is focused.\n   */\n  _linkWithLabel($element) {\n    if (!this.$label || !$element) {\n      return;\n    }\n\n    fields.linkElementWithLabel($element, this.$label);\n  }\n\n  _removeIcon() {\n    if (!this.$icon) {\n      return;\n    }\n    this.$icon.remove();\n    this.$icon = null;\n  }\n\n  /**\n   * Appends the given field to the this.$container and sets the property this.$field.\n   * The $field is used as $fieldContainer as long as you don't explicitly call addFieldContainer before calling addField.\n   */\n  addField($field) {\n    if (!this.$fieldContainer) {\n      this.addFieldContainer($field);\n    }\n    this.$field = $field;\n    this._linkWithLabel($field);\n    this.$field.on('blur', this._onFieldBlur.bind(this))\n      .on('focus', this._onFieldFocus.bind(this));\n  }\n\n  /**\n   * Call this method before addField if you'd like to have a different field container than $field.\n   */\n  addFieldContainer($fieldContainer) {\n    this.$fieldContainer = $fieldContainer\n      .addClass('field');\n\n    // Only append if not already appended or it is not the last element so that append would move it to the end\n    // This can be important for some widgets, e.g. iframe which would cancel and restart the request on every dom insertion\n    if (this.$container.has($fieldContainer).length === 0 || $fieldContainer.next().length > 0) {\n      $fieldContainer.appendTo(this.$container);\n    }\n  }\n\n  /**\n   * Removes this.$field and this.$fieldContainer and sets the properties to null.\n   */\n  _removeField() {\n    if (this.$field) {\n      this.$field.remove();\n      this.$field = null;\n    }\n    if (this.$fieldContainer) {\n      this.$fieldContainer.remove();\n      this.$fieldContainer = null;\n    }\n  }\n\n  /**\n   * Appends a SPAN element for form-field status to this.$container and sets the this.$status property.\n   */\n  addStatus() {\n    if (this.fieldStatus) {\n      return;\n    }\n    this.fieldStatus = scout.create('FieldStatus', {\n      parent: this,\n      position: this.statusPosition,\n      // This will be done by _updateFieldStatus again, but doing it here prevents unnecessary layout invalidations later on\n      visible: this._computeStatusVisible()\n    });\n    this.fieldStatus.render();\n    this.$status = this.fieldStatus.$container;\n    this._updateFieldStatus();\n  }\n\n  _removeStatus() {\n    if (!this.fieldStatus) {\n      return;\n    }\n    this.fieldStatus.remove();\n    this.$status = null;\n    this.fieldStatus = null;\n  }\n\n  /**\n   * Appends a SPAN element to this.$container and sets the this.$pseudoStatus property.\n   * The purpose of a pseudo status is to consume the space an ordinary status would.\n   * This makes it possible to make components without a status as width as components with a status.\n   */\n  addPseudoStatus() {\n    this.$pseudoStatus = this.$container.appendSpan('status');\n  }\n\n  addMandatoryIndicator() {\n    this.$mandatory = this.$container.appendSpan('mandatory-indicator');\n  }\n\n  removeMandatoryIndicator() {\n    if (!this.$mandatory) {\n      return;\n    }\n    this.$mandatory.remove();\n    this.$mandatory = null;\n  }\n\n  /**\n   * Adds a SPAN element with class 'icon' the the given optional $parent.\n   * When $parent is not set, the element is added to this.$container.\n   * @param $parent (optional)\n   */\n  addIcon($parent) {\n    if (!$parent) {\n      $parent = this.$container;\n    }\n    this.$icon = fields.appendIcon($parent)\n      .on('mousedown', this._onIconMouseDown.bind(this));\n  }\n\n  _onIconMouseDown(event) {\n    if (!this.enabledComputed) {\n      return;\n    }\n    this.$field.focus();\n  }\n\n  /**\n   * Appends a DIV element as form-field container to $parent and sets the this.$container property.\n   * Applies FormFieldLayout to this.$container (if container does not define another layout).\n   * Sets this.htmlComp to the HtmlComponent created for this.$container.\n   *\n   * @param $parent to which container is appended\n   * @param cssClass cssClass to add to the new container DIV\n   * @param layout when layout is undefined, this#_createLayout() is called\n   *\n   */\n  addContainer($parent, cssClass, layout) {\n    this.$container = $parent.appendDiv('form-field');\n    if (cssClass) {\n      this.$container.addClass(cssClass);\n    }\n    var htmlComp = HtmlComponent.install(this.$container, this.session);\n    htmlComp.setLayout(layout || this._createLayout());\n    this.htmlComp = htmlComp;\n  }\n\n  /**\n   * @return {FormFieldLayout} the default layout FormFieldLayout. Override this function if your field needs another layout.\n   */\n  _createLayout() {\n    return new FormFieldLayout(this);\n  }\n\n  /**\n   * Updates the \"inner alignment\" of a field. Usually, the GridData hints only have influence on the\n   * LogicalGridLayout. However, the properties \"horizontalAlignment\" and \"verticalAlignment\" are\n   * sometimes used differently. Instead of controlling the field alignment in case fillHorizontal/\n   * fillVertical is false, the developer expects the _contents_ of the field to be aligned correspondingly\n   * inside the field. Technically, this is not correct, but is supported for legacy and convenience\n   * reasons for some of the Scout fields. Those who support the behavior may override _renderGridData()\n   * and call this method. Some CSS classes are then added to the field.\n   *\n   * opts:\n   *   useHorizontalAlignment:\n   *     When this option is true, \"halign-\" classes are added according to gridData.horizontalAlignment.\n   *   useVerticalAlignment:\n   *     When this option is true, \"valign-\" classes are added according to gridData.verticalAlignment.\n   *   $fieldContainer:\n   *     Specifies the div where the classes should be added. If omitted, this.$fieldContainer is used.\n   */\n  updateInnerAlignment(opts) {\n    opts = opts || {};\n    var $fieldContainer = opts.$fieldContainer || this.$fieldContainer;\n\n    this._updateElementInnerAlignment(opts, $fieldContainer);\n    if ($fieldContainer !== this.$container) {\n      // also set the styles to the container\n      this._updateElementInnerAlignment(opts, this.$container);\n    }\n  }\n\n  _updateElementInnerAlignment(opts, $field) {\n    opts = opts || {};\n    var useHorizontalAlignment = scout.nvl(opts.useHorizontalAlignment, true);\n    var useVerticalAlignment = scout.nvl(opts.useVerticalAlignment, true);\n\n    if (!$field) {\n      return;\n    }\n\n    $field.removeClass('has-inner-alignment halign-left halign-center halign-right valign-top valign-middle valign-bottom');\n    if (useHorizontalAlignment || useVerticalAlignment) {\n      // Set horizontal and vertical alignment (from gridData)\n      $field.addClass('has-inner-alignment');\n      var gridData = this.gridData;\n      if (this.parent.logicalGrid) {\n        // If the logical grid is calculated by JS, use the hints instead of the calculated grid data\n        gridData = this.gridDataHints;\n      }\n      if (useHorizontalAlignment) {\n        var hAlign = gridData.horizontalAlignment;\n        $field.addClass(hAlign < 0 ? 'halign-left' : (hAlign > 0 ? 'halign-right' : 'halign-center'));\n      }\n      if (useVerticalAlignment) {\n        var vAlign = gridData.verticalAlignment;\n        $field.addClass(vAlign < 0 ? 'valign-top' : (vAlign > 0 ? 'valign-bottom' : 'valign-middle'));\n      }\n      // Alignment might have affected inner elements (e.g. clear icon)\n      this.invalidateLayout();\n    }\n  }\n\n  addCellEditorFieldCssClasses($field, opts) {\n    $field\n      .addClass('cell-editor-field')\n      .addClass(Device.get().cssClassForEdge());\n    if (opts.cssClass) {\n      $field.addClass(opts.cssClass);\n    }\n  }\n\n  prepareForCellEdit(opts) {\n    opts = opts || {};\n\n    // remove mandatory and status indicators (popup should 'fill' the whole cell)\n    if (this.$mandatory) {\n      this.removeMandatoryIndicator();\n    }\n    if (this.$status) {\n      this.$status.remove();\n      this.$status = null;\n    }\n    if (this.$container) {\n      this.$container.addClass('cell-editor-form-field');\n    }\n    if (this.$field) {\n      this.addCellEditorFieldCssClasses(this.$field, opts);\n    }\n  }\n\n  _renderDropType() {\n    this._updateDropType();\n  }\n\n  _updateDropType() {\n    if (this.dropType && this.enabledComputed) {\n      this._installDragAndDropHandler();\n    } else {\n      this._uninstallDragAndDropHandler();\n    }\n  }\n\n  _createDragAndDropHandler() {\n    return dragAndDrop.handler(this, {\n      supportedScoutTypes: dragAndDrop.SCOUT_TYPES.FILE_TRANSFER,\n      dropType: function() {\n        return this.dropType;\n      }.bind(this),\n      dropMaximumSize: function() {\n        return this.dropMaximumSize;\n      }.bind(this)\n    });\n  }\n\n  _installDragAndDropHandler(event) {\n    if (this.dragAndDropHandler) {\n      return;\n    }\n    this.dragAndDropHandler = this._createDragAndDropHandler();\n    this.dragAndDropHandler.install(this.$field);\n  }\n\n  _uninstallDragAndDropHandler(event) {\n    if (!this.dragAndDropHandler) {\n      return;\n    }\n    this.dragAndDropHandler.uninstall();\n    this.dragAndDropHandler = null;\n  }\n\n  _updateDisabledCopyOverlay() {\n    if (this.disabledCopyOverlay && !Device.get().supportsCopyFromDisabledInputFields()) {\n      if (this.enabledComputed) {\n        this._removeDisabledCopyOverlay();\n      } else {\n        this._renderDisabledCopyOverlay();\n        this.revalidateLayout(); // because bounds of overlay is set in FormFieldLayout\n      }\n    }\n  }\n\n  _renderDisabledCopyOverlay() {\n    if (!this.$disabledCopyOverlay) {\n      this.$disabledCopyOverlay = this.$container\n        .appendDiv('disabled-overlay')\n        .on('contextmenu', this._createCopyContextMenu.bind(this));\n    }\n  }\n\n  _removeDisabledCopyOverlay() {\n    if (this.$disabledCopyOverlay) {\n      this.$disabledCopyOverlay.remove();\n      this.$disabledCopyOverlay = null;\n    }\n  }\n\n  _createCopyContextMenu(event) {\n    if (!this.visible || strings.empty(this.displayText)) {\n      return;\n    }\n\n    var menu = scout.create('Menu', {\n      parent: this,\n      text: this.session.text('ui.Copy'),\n      inheritAccessibility: false\n    });\n    menu.on('action', function(event) {\n      this.exportToClipboard();\n    }.bind(this));\n\n    var popup = scout.create('ContextMenuPopup', {\n      parent: this,\n      menuItems: [menu],\n      cloneMenuItems: false,\n      location: {\n        x: event.pageX,\n        y: event.pageY\n      }\n    });\n    popup.open();\n  }\n\n  /**\n   * Visits this field and all child formfields in pre-order (top-down).\n   *\n   * @returns {string} the TreeVisitResult, or nothing to continue.\n   */\n  visitFields(visitor) {\n    return visitor(this);\n  }\n\n  /**\n   * Visit all parent form fields. The visit stops if the parent is no form field anymore (e.g. a form, desktop or session).\n   */\n  visitParents(visitor) {\n    var curParent = this.parent;\n    while (curParent instanceof FormField) {\n      visitor(curParent);\n      curParent = curParent.parent;\n    }\n  }\n\n  markAsSaved() {\n    this.setProperty('touched', false);\n    this.updateRequiresSave();\n  }\n\n  touch() {\n    this.setProperty('touched', true);\n    this.updateRequiresSave();\n  }\n\n  /**\n   * Updates the requiresSave property by checking if the field is touched or if computeRequiresSave() returns true.\n   */\n  updateRequiresSave() {\n    if (!this.initialized) {\n      return;\n    }\n    this.requiresSave = this.touched || this.computeRequiresSave();\n  }\n\n  /**\n   * Override this function in order to return whether or not this field requires to be saved.\n   * The default impl. returns false.\n   *\n   * @returns {boolean}\n   */\n  computeRequiresSave() {\n    return false;\n  }\n\n  /**\n   * @returns {object} which contains 3 properties: valid, validByErrorStatus and validByMandatory\n   */\n  getValidationResult() {\n    var validByErrorStatus = !this._errorStatus();\n    var validByMandatory = !this.mandatory || !this.empty;\n    var valid = validByErrorStatus && validByMandatory;\n    return {\n      valid: valid,\n      validByErrorStatus: validByErrorStatus,\n      validByMandatory: validByMandatory\n    };\n  }\n\n  _updateEmpty() {\n    // NOP\n  }\n\n  requestInput() {\n    if (this.enabledComputed && this.rendered) {\n      this.focus();\n    }\n  }\n\n  clone(model, options) {\n    var clone = super.clone(model, options);\n    this._deepCloneProperties(clone, 'menus', options);\n    return clone;\n  }\n\n  exportToClipboard() {\n    if (!this.displayText) {\n      return;\n    }\n    var event = new Event({\n      text: this.displayText\n    });\n    this.trigger('clipboardExport', event);\n    if (!event.defaultPrevented) {\n      this._exportToClipboard(event.text);\n    }\n  }\n\n  _exportToClipboard(text) {\n    clipboard.copyText({\n      parent: this,\n      text: text\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}