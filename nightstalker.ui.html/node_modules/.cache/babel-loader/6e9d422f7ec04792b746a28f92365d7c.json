{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\n/**\n * Calendar component as used in the list panel of the calendar.\n * Delegates most functions to the CalendarComponent instance used as source.\n * It's important we clean-up the registered listeners on the model-adapter, since\n * new instances of CalendarListComponent are created every time we click on a date\n * in the calendar, but the CalendarComponent instance is always the same.\n */\nvar CalendarListComponent = /*#__PURE__*/function () {\n  function CalendarListComponent(partDay, source) {\n    _classCallCheck(this, CalendarListComponent);\n\n    this.partDay = partDay;\n    this.source = source;\n    this.$container = null;\n    this._selectedListener = source.on('selected', function (event) {\n      this.$container.toggleClass('comp-selected', event.selected);\n    }.bind(this));\n    this._removeListener = source.on('remove', this.remove.bind(this));\n  }\n\n  _createClass(CalendarListComponent, [{\n    key: \"render\",\n    value: function render($parent) {\n      var source = this.source;\n      this.$container = $parent.appendDiv('calendar-component').data('partDay', this.partDay).addClass(source.item.cssClass).toggleClass('comp-selected', source._selected).mousedown(this._onMouseDown.bind(this, source)).on('contextmenu', source._onContextMenu.bind(source));\n      this.$container.appendDiv('calendar-component-leftcolorborder');\n      this.$container.appendDiv('content').html(source._description());\n    }\n    /**\n     * Prevent list-component from gaining focus (*1). Since the component is removed/rendered\n     * after the click the focus would be on the body afterwards #222862.\n     */\n\n  }, {\n    key: \"_onMouseDown\",\n    value: function _onMouseDown(source, event) {\n      event.preventDefault(); // *1\n\n      var $part = $(event.delegateTarget);\n      source.updateSelectedComponent($part, true);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.source.removeListener(this._selectedListener);\n      this.source.removeListener(this._removeListener);\n      this.$container.remove();\n    }\n  }]);\n\n  return CalendarListComponent;\n}();\n\nexport { CalendarListComponent as default };","map":{"version":3,"sources":["C:/Tools/workspace/nightstalker/nightstalker.ui.html/node_modules/@eclipse-scout/core/src/calendar/CalendarListComponent.js"],"names":["CalendarListComponent","partDay","source","$container","_selectedListener","on","event","toggleClass","selected","bind","_removeListener","remove","$parent","appendDiv","data","addClass","item","cssClass","_selected","mousedown","_onMouseDown","_onContextMenu","html","_description","preventDefault","$part","$","delegateTarget","updateSelectedComponent","removeListener"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,qB;AAEnB,iCAAYC,OAAZ,EAAqBC,MAArB,EAA6B;AAAA;;AAC3B,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,iBAAL,GAAyBF,MAAM,CAACG,EAAP,CAAU,UAAV,EAAsB,UAASC,KAAT,EAAgB;AAC7D,WAAKH,UAAL,CAAgBI,WAAhB,CAA4B,eAA5B,EAA6CD,KAAK,CAACE,QAAnD;AACD,KAF8C,CAE7CC,IAF6C,CAExC,IAFwC,CAAtB,CAAzB;AAGA,SAAKC,eAAL,GAAuBR,MAAM,CAACG,EAAP,CAAU,QAAV,EAAoB,KAAKM,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAApB,CAAvB;AACD;;;;2BAEMG,O,EAAS;AACd,UAAIV,MAAM,GAAG,KAAKA,MAAlB;AACA,WAAKC,UAAL,GAAkBS,OAAO,CACtBC,SADe,CACL,oBADK,EAEfC,IAFe,CAEV,SAFU,EAEC,KAAKb,OAFN,EAGfc,QAHe,CAGNb,MAAM,CAACc,IAAP,CAAYC,QAHN,EAIfV,WAJe,CAIH,eAJG,EAIcL,MAAM,CAACgB,SAJrB,EAKfC,SALe,CAKL,KAAKC,YAAL,CAAkBX,IAAlB,CAAuB,IAAvB,EAA6BP,MAA7B,CALK,EAMfG,EANe,CAMZ,aANY,EAMGH,MAAM,CAACmB,cAAP,CAAsBZ,IAAtB,CAA2BP,MAA3B,CANH,CAAlB;AAOA,WAAKC,UAAL,CAAgBU,SAAhB,CAA0B,oCAA1B;AACA,WAAKV,UAAL,CAAgBU,SAAhB,CAA0B,SAA1B,EACGS,IADH,CACQpB,MAAM,CAACqB,YAAP,EADR;AAED;AAED;AACF;AACA;AACA;;;;iCACerB,M,EAAQI,K,EAAO;AAC1BA,MAAAA,KAAK,CAACkB,cAAN,GAD0B,CACF;;AACxB,UAAIC,KAAK,GAAGC,CAAC,CAACpB,KAAK,CAACqB,cAAP,CAAb;AACAzB,MAAAA,MAAM,CAAC0B,uBAAP,CAA+BH,KAA/B,EAAsC,IAAtC;AACD;;;6BAEQ;AACP,WAAKvB,MAAL,CAAY2B,cAAZ,CAA2B,KAAKzB,iBAAhC;AACA,WAAKF,MAAL,CAAY2B,cAAZ,CAA2B,KAAKnB,eAAhC;AACA,WAAKP,UAAL,CAAgBQ,MAAhB;AACD;;;;;;SAxCkBX,qB","sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\n/**\n * Calendar component as used in the list panel of the calendar.\n * Delegates most functions to the CalendarComponent instance used as source.\n * It's important we clean-up the registered listeners on the model-adapter, since\n * new instances of CalendarListComponent are created every time we click on a date\n * in the calendar, but the CalendarComponent instance is always the same.\n */\nexport default class CalendarListComponent {\n\n  constructor(partDay, source) {\n    this.partDay = partDay;\n    this.source = source;\n    this.$container = null;\n    this._selectedListener = source.on('selected', function(event) {\n      this.$container.toggleClass('comp-selected', event.selected);\n    }.bind(this));\n    this._removeListener = source.on('remove', this.remove.bind(this));\n  }\n\n  render($parent) {\n    var source = this.source;\n    this.$container = $parent\n      .appendDiv('calendar-component')\n      .data('partDay', this.partDay)\n      .addClass(source.item.cssClass)\n      .toggleClass('comp-selected', source._selected)\n      .mousedown(this._onMouseDown.bind(this, source))\n      .on('contextmenu', source._onContextMenu.bind(source));\n    this.$container.appendDiv('calendar-component-leftcolorborder');\n    this.$container.appendDiv('content')\n      .html(source._description());\n  }\n\n  /**\n   * Prevent list-component from gaining focus (*1). Since the component is removed/rendered\n   * after the click the focus would be on the body afterwards #222862.\n   */\n  _onMouseDown(source, event) {\n    event.preventDefault(); // *1\n    var $part = $(event.delegateTarget);\n    source.updateSelectedComponent($part, true);\n  }\n\n  remove() {\n    this.source.removeListener(this._selectedListener);\n    this.source.removeListener(this._removeListener);\n    this.$container.remove();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}